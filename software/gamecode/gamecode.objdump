
gamecode.elf:     file format elf32-littlenios2
gamecode.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080248

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000056c0 memsz 0x000056c0 flags r-x
    LOAD off    0x000066e0 vaddr 0x000856e0 paddr 0x0008717c align 2**12
         filesz 0x00001a9c memsz 0x00001a9c flags rw-
    LOAD off    0x00008c18 vaddr 0x00088c18 paddr 0x00088c18 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005408  00080248  00080248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000090  00085650  00085650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a9c  000856e0  0008717c  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00088c18  00088c18  00008c18  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00088d6c  00088d6c  0000817c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009f0  00000000  00000000  000081a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016258  00000000  00000000  00008b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005e3f  00000000  00000000  0001ede8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a07  00000000  00000000  00024c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001494  00000000  00000000  0002b630  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002629  00000000  00000000  0002cac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000365ce  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000365d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000365dd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000365de  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000365df  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000365ea  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000365f5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0003660b  2**0
                  CONTENTS, READONLY
 26 .jdi          000056af  00000000  00000000  0003663f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000473b1  00000000  00000000  0003bcee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080248 l    d  .text	00000000 .text
00085650 l    d  .rodata	00000000 .rodata
000856e0 l    d  .rwdata	00000000 .rwdata
00088c18 l    d  .bss	00000000 .bss
00088d6c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gamecode_bsp//obj/HAL/src/crt0.o
00080290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00080470 l     F .text	00000008 __fp_unlock
00080484 l     F .text	0000019c __sinit.part.1
00080620 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000856e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000830cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000831d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00083204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000832f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000833d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000834bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008716c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000838dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00083a10 l     F .text	00000034 alt_dev_reg
000860b4 l     O .rwdata	00001060 jtag_uart_0
00087114 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083ce8 l     F .text	00000210 altera_avalon_jtag_uart_irq
00083ef8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000846a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084878 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00084b38 l     F .text	0000003c alt_get_errno
00084b74 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00088c40 g     O .bss	00000004 alt_instruction_exception_handler
00082ec4 g     F .text	00000054 _isatty_r
000835cc g     F .text	0000007c alt_main
00080304 g     F .text	000000c0 _puts_r
00088c6c g     O .bss	00000100 alt_irq
00082bec g     F .text	00000060 _lseek_r
0008717c g       *ABS*	00000000 __flash_rwdata_start
00088d6c g       *ABS*	00000000 __alt_heap_start
000821a0 g     F .text	0000005c __sseek
000807c0 g     F .text	00000010 __sinit
00080628 g     F .text	00000068 __sfmoreglue
0008366c g     F .text	00000024 __malloc_unlock
0008188c g     F .text	0000015c memmove
000807a8 g     F .text	00000018 _cleanup
00084f30 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082e68 g     F .text	0000005c _fstat_r
00088c24 g     O .bss	00000004 errno
0008211c g     F .text	00000008 __seofread
00088c2c g     O .bss	00000004 alt_argv
0008f144 g       *ABS*	00000000 _gp
00085f34 g     O .rwdata	00000180 alt_fd_list
00084f54 g     F .text	00000090 alt_find_dev
00081744 g     F .text	00000148 memcpy
00080478 g     F .text	0000000c _cleanup_r
0008493c g     F .text	0000007c alt_io_redirect
00085650 g       *ABS*	00000000 __DTOR_END__
000803c4 g     F .text	00000014 puts
00085220 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000840f0 g     F .text	0000021c altera_avalon_jtag_uart_read
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00083010 g     F .text	00000064 .hidden __udivsi3
0008332c g     F .text	000000a4 isatty
00085190 g     F .text	00000090 alt_icache_flush
00088c20 g     O .bss	00000004 __malloc_top_pad
00080810 g     F .text	000004bc __sfvwrite_r
00082074 g     F .text	00000054 _sbrk_r
00082e08 g     F .text	00000060 _read_r
00087164 g     O .rwdata	00000004 alt_max_fd
0008240c g     F .text	000000f0 _fclose_r
00082788 g     F .text	00000030 fflush
00088c1c g     O .bss	00000004 __malloc_max_sbrked_mem
000849b8 g     F .text	00000180 alt_irq_register
000834f8 g     F .text	000000d4 lseek
00087144 g     O .rwdata	00000004 _global_impure_ptr
00081b10 g     F .text	00000564 _realloc_r
00088d6c g       *ABS*	00000000 __bss_end
00084e28 g     F .text	00000108 alt_tick
000807e0 g     F .text	00000018 __fp_lock_all
00084d8c g     F .text	0000009c alt_alarm_stop
00088c34 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d8 alt_irq_handler
00085f0c g     O .rwdata	00000028 alt_dev_null
0008465c g     F .text	00000048 alt_dcache_flush_all
0008717c g       *ABS*	00000000 __ram_rwdata_end
0008715c g     O .rwdata	00000008 alt_dev_list
00083918 g     F .text	000000f8 write
000856e0 g       *ABS*	00000000 __ram_rodata_end
00083240 g     F .text	000000b0 fstat
00083074 g     F .text	00000058 .hidden __umodsi3
00088d6c g       *ABS*	00000000 end
00083c34 g     F .text	000000b4 altera_avalon_jtag_uart_init
000801d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00085650 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008430c g     F .text	00000224 altera_avalon_jtag_uart_write
000807d0 g     F .text	00000004 __sfp_lock_acquire
00081660 g     F .text	000000e4 memchr
000828dc g     F .text	00000310 _free_r
0008549c g     F .text	00000180 __call_exitprocs
0008714c g     O .rwdata	00000004 __malloc_sbrk_base
00080248 g     F .text	0000004c _start
00088c38 g     O .bss	00000004 _alt_tick_rate
00088c3c g     O .bss	00000004 _alt_nticks
000836cc g     F .text	000000fc read
00083a7c g     F .text	00000054 alt_sys_init
00085384 g     F .text	00000118 __register_exitproc
00083f98 g     F .text	00000068 altera_avalon_jtag_uart_close
000856e0 g       *ABS*	00000000 __ram_rwdata_start
00085650 g       *ABS*	00000000 __ram_rodata_start
00088c44 g     O .bss	00000028 __malloc_current_mallinfo
00083ad0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000850ec g     F .text	000000a4 alt_get_fd
000823b8 g     F .text	00000054 _close_r
00085308 g     F .text	0000007c memcmp
00083b90 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00088d6c g       *ABS*	00000000 __alt_stack_base
00083be0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082264 g     F .text	00000154 __swsetup_r
00080690 g     F .text	00000118 __sfp
00085b04 g     O .rwdata	00000408 __malloc_av_
000807dc g     F .text	00000004 __sinit_lock_release
000820c8 g     F .text	00000054 __sread
00084fe4 g     F .text	00000108 alt_find_file
000846e0 g     F .text	000000a4 alt_dev_llist_insert
00083648 g     F .text	00000024 __malloc_lock
0008382c g     F .text	000000b0 sbrk
0008272c g     F .text	0000005c _fflush_r
00088c18 g       *ABS*	00000000 __bss_start
000819e8 g     F .text	00000128 memset
00080294 g     F .text	00000070 main
00088c30 g     O .bss	00000004 alt_envp
00088c18 g     O .bss	00000004 __malloc_max_total_mem
00083b30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000821fc g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
000824fc g     F .text	00000014 fclose
00080e54 g     F .text	0000080c _malloc_r
00087168 g     O .rwdata	00000004 alt_errno
00080ccc g     F .text	000000c4 _fwalk
00082f18 g     F .text	00000084 .hidden __divsi3
000827b8 g     F .text	00000124 _malloc_trim_r
00085650 g       *ABS*	00000000 __CTOR_END__
00085650 g       *ABS*	00000000 __flash_rodata_start
00085650 g       *ABS*	00000000 __DTOR_LIST__
00083a44 g     F .text	00000038 alt_irq_init
000837c8 g     F .text	00000064 alt_release_fd
000852bc g     F .text	00000014 atexit
00082204 g     F .text	00000060 _write_r
00087148 g     O .rwdata	00000004 _impure_ptr
00088c28 g     O .bss	00000004 alt_argc
00082510 g     F .text	0000021c __sflush_r
000847e4 g     F .text	00000060 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000807f8 g     F .text	00000018 __fp_unlock_all
00087154 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008717c g       *ABS*	00000000 _edata
00088d6c g       *ABS*	00000000 _end
00080248 g       *ABS*	00000000 __ram_exceptions_end
00084000 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00082124 g     F .text	0000007c __swrite
00087150 g     O .rwdata	00000004 __malloc_trim_threshold
000852d0 g     F .text	00000038 exit
00080d90 g     F .text	000000c4 _fwalk_reent
00082f9c g     F .text	00000074 .hidden __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000807d4 g     F .text	00000004 __sfp_lock_release
0008561c g     F .text	00000034 _exit
00084530 g     F .text	0000012c alt_alarm_start
00082c4c g     F .text	000001bc __smakebuf_r
000803d8 g     F .text	00000098 strlen
00084c38 g     F .text	00000154 open
00084844 g     F .text	00000034 alt_icache_flush_all
00087170 g     O .rwdata	00000004 alt_priority_mask
00087174 g     O .rwdata	00000008 alt_alarm_list
00084784 g     F .text	00000060 _do_ctors
00083108 g     F .text	000000d0 close
00083438 g     F .text	00000084 alt_load
000807d8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409214 	ori	at,at,584
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d40 	call	801d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001526 	beq	r2,zero,80190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   8013c:	00800274 	movhi	r2,9
   80140:	10a31b04 	addi	r2,r2,-29588
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10a31b04 	addi	r2,r2,-29588
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	e17ffd17 	ldw	r5,-12(fp)
   80174:	1009883a 	mov	r4,r2
   80178:	183ee83a 	callr	r3
#endif
        break;
   8017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80180:	0005313a 	rdctl	r2,ipending
   80184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80188:	e0bfff17 	ldw	r2,-4(fp)
   8018c:	00000706 	br	801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   80190:	e0bffc17 	ldw	r2,-16(fp)
   80194:	1085883a 	add	r2,r2,r2
   80198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   8019c:	e0bffd17 	ldw	r2,-12(fp)
   801a0:	10800044 	addi	r2,r2,1
   801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a8:	003fe006 	br	8012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801b0:	e0bffb17 	ldw	r2,-20(fp)
   801b4:	103fda1e 	bne	r2,zero,80120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b8:	0001883a 	nop
}
   801bc:	0001883a 	nop
   801c0:	e037883a 	mov	sp,fp
   801c4:	dfc00117 	ldw	ra,4(sp)
   801c8:	df000017 	ldw	fp,0(sp)
   801cc:	dec00204 	addi	sp,sp,8
   801d0:	f800283a 	ret

000801d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d4:	defffb04 	addi	sp,sp,-20
   801d8:	dfc00415 	stw	ra,16(sp)
   801dc:	df000315 	stw	fp,12(sp)
   801e0:	df000304 	addi	fp,sp,12
   801e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e8:	000531fa 	rdctl	r2,exception
   801ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801f0:	e0bffd17 	ldw	r2,-12(fp)
   801f4:	10801f0c 	andi	r2,r2,124
   801f8:	1004d0ba 	srli	r2,r2,2
   801fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   80200:	0005333a 	rdctl	r2,badaddr
   80204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80208:	d0a6bf17 	ldw	r2,-25860(gp)
   8020c:	10000726 	beq	r2,zero,8022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80210:	d0a6bf17 	ldw	r2,-25860(gp)
   80214:	e0fffd17 	ldw	r3,-12(fp)
   80218:	e1bffe17 	ldw	r6,-8(fp)
   8021c:	e17fff17 	ldw	r5,-4(fp)
   80220:	1809883a 	mov	r4,r3
   80224:	103ee83a 	callr	r2
   80228:	00000206 	br	80234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   8022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80230:	0005883a 	mov	r2,zero
}
   80234:	e037883a 	mov	sp,fp
   80238:	dfc00117 	ldw	ra,4(sp)
   8023c:	df000017 	ldw	fp,0(sp)
   80240:	dec00204 	addi	sp,sp,8
   80244:	f800283a 	ret

Disassembly of section .text:

00080248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   8024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   80250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80254:	00bffd16 	blt	zero,r2,8024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80258:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   8025c:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   80260:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80264:	d6bc5114 	ori	gp,gp,61764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80268:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   8026c:	10a30614 	ori	r2,r2,35864

    movhi r3, %hi(__bss_end)
   80270:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80274:	18e35b14 	ori	r3,r3,36204

    beq r2, r3, 1f
   80278:	10c00326 	beq	r2,r3,80288 <_start+0x40>

0:
    stw zero, (r2)
   8027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80284:	10fffd36 	bltu	r2,r3,8027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80288:	00834380 	call	83438 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   8028c:	00835cc0 	call	835cc <alt_main>

00080290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80290:	003fff06 	br	80290 <alt_after_alt_main>

00080294 <main>:
 */

#include <stdio.h>

int main()
{
   80294:	defffd04 	addi	sp,sp,-12
   80298:	dfc00215 	stw	ra,8(sp)
   8029c:	df000115 	stw	fp,4(sp)
   802a0:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
   802a4:	01000234 	movhi	r4,8
   802a8:	21159404 	addi	r4,r4,22096
   802ac:	00803c40 	call	803c4 <puts>
  printf("Look, I even modified this file and it works!\n");
   802b0:	01000234 	movhi	r4,8
   802b4:	21159904 	addi	r4,r4,22116
   802b8:	00803c40 	call	803c4 <puts>

  char* ptr = 0x00;
   802bc:	e03fff15 	stw	zero,-4(fp)

  *(ptr + 0) = 0xff;
   802c0:	e0bfff17 	ldw	r2,-4(fp)
   802c4:	00ffffc4 	movi	r3,-1
   802c8:	10c00005 	stb	r3,0(r2)
  *(ptr + 1) = 0xff;
   802cc:	e0bfff17 	ldw	r2,-4(fp)
   802d0:	10800044 	addi	r2,r2,1
   802d4:	00ffffc4 	movi	r3,-1
   802d8:	10c00005 	stb	r3,0(r2)
  *(ptr + 2) = 0xff;
   802dc:	e0bfff17 	ldw	r2,-4(fp)
   802e0:	10800084 	addi	r2,r2,2
   802e4:	00ffffc4 	movi	r3,-1
   802e8:	10c00005 	stb	r3,0(r2)

  return 0;
   802ec:	0005883a 	mov	r2,zero
}
   802f0:	e037883a 	mov	sp,fp
   802f4:	dfc00117 	ldw	ra,4(sp)
   802f8:	df000017 	ldw	fp,0(sp)
   802fc:	dec00204 	addi	sp,sp,8
   80300:	f800283a 	ret

00080304 <_puts_r>:
   80304:	defff604 	addi	sp,sp,-40
   80308:	dc000715 	stw	r16,28(sp)
   8030c:	2021883a 	mov	r16,r4
   80310:	2809883a 	mov	r4,r5
   80314:	dc400815 	stw	r17,32(sp)
   80318:	dfc00915 	stw	ra,36(sp)
   8031c:	2823883a 	mov	r17,r5
   80320:	00803d80 	call	803d8 <strlen>
   80324:	10c00044 	addi	r3,r2,1
   80328:	d8800115 	stw	r2,4(sp)
   8032c:	00800234 	movhi	r2,8
   80330:	1095a504 	addi	r2,r2,22164
   80334:	d8800215 	stw	r2,8(sp)
   80338:	00800044 	movi	r2,1
   8033c:	d8800315 	stw	r2,12(sp)
   80340:	00800084 	movi	r2,2
   80344:	dc400015 	stw	r17,0(sp)
   80348:	d8c00615 	stw	r3,24(sp)
   8034c:	dec00415 	stw	sp,16(sp)
   80350:	d8800515 	stw	r2,20(sp)
   80354:	80000226 	beq	r16,zero,80360 <_puts_r+0x5c>
   80358:	80800e17 	ldw	r2,56(r16)
   8035c:	10001426 	beq	r2,zero,803b0 <_puts_r+0xac>
   80360:	81400217 	ldw	r5,8(r16)
   80364:	2880030b 	ldhu	r2,12(r5)
   80368:	10c8000c 	andi	r3,r2,8192
   8036c:	1800061e 	bne	r3,zero,80388 <_puts_r+0x84>
   80370:	29001917 	ldw	r4,100(r5)
   80374:	00f7ffc4 	movi	r3,-8193
   80378:	10880014 	ori	r2,r2,8192
   8037c:	20c6703a 	and	r3,r4,r3
   80380:	2880030d 	sth	r2,12(r5)
   80384:	28c01915 	stw	r3,100(r5)
   80388:	d9800404 	addi	r6,sp,16
   8038c:	8009883a 	mov	r4,r16
   80390:	00808100 	call	80810 <__sfvwrite_r>
   80394:	1000091e 	bne	r2,zero,803bc <_puts_r+0xb8>
   80398:	00800284 	movi	r2,10
   8039c:	dfc00917 	ldw	ra,36(sp)
   803a0:	dc400817 	ldw	r17,32(sp)
   803a4:	dc000717 	ldw	r16,28(sp)
   803a8:	dec00a04 	addi	sp,sp,40
   803ac:	f800283a 	ret
   803b0:	8009883a 	mov	r4,r16
   803b4:	00807c00 	call	807c0 <__sinit>
   803b8:	003fe906 	br	80360 <_puts_r+0x5c>
   803bc:	00bfffc4 	movi	r2,-1
   803c0:	003ff606 	br	8039c <_puts_r+0x98>

000803c4 <puts>:
   803c4:	00800234 	movhi	r2,8
   803c8:	109c5204 	addi	r2,r2,29000
   803cc:	200b883a 	mov	r5,r4
   803d0:	11000017 	ldw	r4,0(r2)
   803d4:	00803041 	jmpi	80304 <_puts_r>

000803d8 <strlen>:
   803d8:	208000cc 	andi	r2,r4,3
   803dc:	10002026 	beq	r2,zero,80460 <strlen+0x88>
   803e0:	20800007 	ldb	r2,0(r4)
   803e4:	10002026 	beq	r2,zero,80468 <strlen+0x90>
   803e8:	2005883a 	mov	r2,r4
   803ec:	00000206 	br	803f8 <strlen+0x20>
   803f0:	10c00007 	ldb	r3,0(r2)
   803f4:	18001826 	beq	r3,zero,80458 <strlen+0x80>
   803f8:	10800044 	addi	r2,r2,1
   803fc:	10c000cc 	andi	r3,r2,3
   80400:	183ffb1e 	bne	r3,zero,803f0 <strlen+0x18>
   80404:	10c00017 	ldw	r3,0(r2)
   80408:	01ffbff4 	movhi	r7,65279
   8040c:	39ffbfc4 	addi	r7,r7,-257
   80410:	00ca303a 	nor	r5,zero,r3
   80414:	01a02074 	movhi	r6,32897
   80418:	19c7883a 	add	r3,r3,r7
   8041c:	31a02004 	addi	r6,r6,-32640
   80420:	1946703a 	and	r3,r3,r5
   80424:	1986703a 	and	r3,r3,r6
   80428:	1800091e 	bne	r3,zero,80450 <strlen+0x78>
   8042c:	10800104 	addi	r2,r2,4
   80430:	10c00017 	ldw	r3,0(r2)
   80434:	19cb883a 	add	r5,r3,r7
   80438:	00c6303a 	nor	r3,zero,r3
   8043c:	28c6703a 	and	r3,r5,r3
   80440:	1986703a 	and	r3,r3,r6
   80444:	183ff926 	beq	r3,zero,8042c <strlen+0x54>
   80448:	00000106 	br	80450 <strlen+0x78>
   8044c:	10800044 	addi	r2,r2,1
   80450:	10c00007 	ldb	r3,0(r2)
   80454:	183ffd1e 	bne	r3,zero,8044c <strlen+0x74>
   80458:	1105c83a 	sub	r2,r2,r4
   8045c:	f800283a 	ret
   80460:	2005883a 	mov	r2,r4
   80464:	003fe706 	br	80404 <strlen+0x2c>
   80468:	0005883a 	mov	r2,zero
   8046c:	f800283a 	ret

00080470 <__fp_unlock>:
   80470:	0005883a 	mov	r2,zero
   80474:	f800283a 	ret

00080478 <_cleanup_r>:
   80478:	01400234 	movhi	r5,8
   8047c:	29490304 	addi	r5,r5,9228
   80480:	0080d901 	jmpi	80d90 <_fwalk_reent>

00080484 <__sinit.part.1>:
   80484:	defff704 	addi	sp,sp,-36
   80488:	00c00234 	movhi	r3,8
   8048c:	dfc00815 	stw	ra,32(sp)
   80490:	ddc00715 	stw	r23,28(sp)
   80494:	dd800615 	stw	r22,24(sp)
   80498:	dd400515 	stw	r21,20(sp)
   8049c:	dd000415 	stw	r20,16(sp)
   804a0:	dcc00315 	stw	r19,12(sp)
   804a4:	dc800215 	stw	r18,8(sp)
   804a8:	dc400115 	stw	r17,4(sp)
   804ac:	dc000015 	stw	r16,0(sp)
   804b0:	18c11e04 	addi	r3,r3,1144
   804b4:	24000117 	ldw	r16,4(r4)
   804b8:	20c00f15 	stw	r3,60(r4)
   804bc:	2080bb04 	addi	r2,r4,748
   804c0:	00c000c4 	movi	r3,3
   804c4:	20c0b915 	stw	r3,740(r4)
   804c8:	2080ba15 	stw	r2,744(r4)
   804cc:	2000b815 	stw	zero,736(r4)
   804d0:	05c00204 	movi	r23,8
   804d4:	00800104 	movi	r2,4
   804d8:	2025883a 	mov	r18,r4
   804dc:	b80d883a 	mov	r6,r23
   804e0:	81001704 	addi	r4,r16,92
   804e4:	000b883a 	mov	r5,zero
   804e8:	80000015 	stw	zero,0(r16)
   804ec:	80000115 	stw	zero,4(r16)
   804f0:	80000215 	stw	zero,8(r16)
   804f4:	8080030d 	sth	r2,12(r16)
   804f8:	80001915 	stw	zero,100(r16)
   804fc:	8000038d 	sth	zero,14(r16)
   80500:	80000415 	stw	zero,16(r16)
   80504:	80000515 	stw	zero,20(r16)
   80508:	80000615 	stw	zero,24(r16)
   8050c:	00819e80 	call	819e8 <memset>
   80510:	05800234 	movhi	r22,8
   80514:	94400217 	ldw	r17,8(r18)
   80518:	05400234 	movhi	r21,8
   8051c:	05000234 	movhi	r20,8
   80520:	04c00234 	movhi	r19,8
   80524:	b5883204 	addi	r22,r22,8392
   80528:	ad484904 	addi	r21,r21,8484
   8052c:	a5086804 	addi	r20,r20,8608
   80530:	9cc87f04 	addi	r19,r19,8700
   80534:	85800815 	stw	r22,32(r16)
   80538:	85400915 	stw	r21,36(r16)
   8053c:	85000a15 	stw	r20,40(r16)
   80540:	84c00b15 	stw	r19,44(r16)
   80544:	84000715 	stw	r16,28(r16)
   80548:	00800284 	movi	r2,10
   8054c:	8880030d 	sth	r2,12(r17)
   80550:	00800044 	movi	r2,1
   80554:	b80d883a 	mov	r6,r23
   80558:	89001704 	addi	r4,r17,92
   8055c:	000b883a 	mov	r5,zero
   80560:	88000015 	stw	zero,0(r17)
   80564:	88000115 	stw	zero,4(r17)
   80568:	88000215 	stw	zero,8(r17)
   8056c:	88001915 	stw	zero,100(r17)
   80570:	8880038d 	sth	r2,14(r17)
   80574:	88000415 	stw	zero,16(r17)
   80578:	88000515 	stw	zero,20(r17)
   8057c:	88000615 	stw	zero,24(r17)
   80580:	00819e80 	call	819e8 <memset>
   80584:	94000317 	ldw	r16,12(r18)
   80588:	00800484 	movi	r2,18
   8058c:	8c400715 	stw	r17,28(r17)
   80590:	8d800815 	stw	r22,32(r17)
   80594:	8d400915 	stw	r21,36(r17)
   80598:	8d000a15 	stw	r20,40(r17)
   8059c:	8cc00b15 	stw	r19,44(r17)
   805a0:	8080030d 	sth	r2,12(r16)
   805a4:	00800084 	movi	r2,2
   805a8:	80000015 	stw	zero,0(r16)
   805ac:	80000115 	stw	zero,4(r16)
   805b0:	80000215 	stw	zero,8(r16)
   805b4:	80001915 	stw	zero,100(r16)
   805b8:	8080038d 	sth	r2,14(r16)
   805bc:	80000415 	stw	zero,16(r16)
   805c0:	80000515 	stw	zero,20(r16)
   805c4:	80000615 	stw	zero,24(r16)
   805c8:	b80d883a 	mov	r6,r23
   805cc:	000b883a 	mov	r5,zero
   805d0:	81001704 	addi	r4,r16,92
   805d4:	00819e80 	call	819e8 <memset>
   805d8:	00800044 	movi	r2,1
   805dc:	84000715 	stw	r16,28(r16)
   805e0:	85800815 	stw	r22,32(r16)
   805e4:	85400915 	stw	r21,36(r16)
   805e8:	85000a15 	stw	r20,40(r16)
   805ec:	84c00b15 	stw	r19,44(r16)
   805f0:	90800e15 	stw	r2,56(r18)
   805f4:	dfc00817 	ldw	ra,32(sp)
   805f8:	ddc00717 	ldw	r23,28(sp)
   805fc:	dd800617 	ldw	r22,24(sp)
   80600:	dd400517 	ldw	r21,20(sp)
   80604:	dd000417 	ldw	r20,16(sp)
   80608:	dcc00317 	ldw	r19,12(sp)
   8060c:	dc800217 	ldw	r18,8(sp)
   80610:	dc400117 	ldw	r17,4(sp)
   80614:	dc000017 	ldw	r16,0(sp)
   80618:	dec00904 	addi	sp,sp,36
   8061c:	f800283a 	ret

00080620 <__fp_lock>:
   80620:	0005883a 	mov	r2,zero
   80624:	f800283a 	ret

00080628 <__sfmoreglue>:
   80628:	defffc04 	addi	sp,sp,-16
   8062c:	dc400115 	stw	r17,4(sp)
   80630:	2c7fffc4 	addi	r17,r5,-1
   80634:	8c401a24 	muli	r17,r17,104
   80638:	dc800215 	stw	r18,8(sp)
   8063c:	2825883a 	mov	r18,r5
   80640:	89401d04 	addi	r5,r17,116
   80644:	dc000015 	stw	r16,0(sp)
   80648:	dfc00315 	stw	ra,12(sp)
   8064c:	0080e540 	call	80e54 <_malloc_r>
   80650:	1021883a 	mov	r16,r2
   80654:	10000726 	beq	r2,zero,80674 <__sfmoreglue+0x4c>
   80658:	11000304 	addi	r4,r2,12
   8065c:	10000015 	stw	zero,0(r2)
   80660:	14800115 	stw	r18,4(r2)
   80664:	11000215 	stw	r4,8(r2)
   80668:	89801a04 	addi	r6,r17,104
   8066c:	000b883a 	mov	r5,zero
   80670:	00819e80 	call	819e8 <memset>
   80674:	8005883a 	mov	r2,r16
   80678:	dfc00317 	ldw	ra,12(sp)
   8067c:	dc800217 	ldw	r18,8(sp)
   80680:	dc400117 	ldw	r17,4(sp)
   80684:	dc000017 	ldw	r16,0(sp)
   80688:	dec00404 	addi	sp,sp,16
   8068c:	f800283a 	ret

00080690 <__sfp>:
   80690:	defffb04 	addi	sp,sp,-20
   80694:	dc000015 	stw	r16,0(sp)
   80698:	04000234 	movhi	r16,8
   8069c:	841c5104 	addi	r16,r16,28996
   806a0:	dcc00315 	stw	r19,12(sp)
   806a4:	2027883a 	mov	r19,r4
   806a8:	81000017 	ldw	r4,0(r16)
   806ac:	dfc00415 	stw	ra,16(sp)
   806b0:	dc800215 	stw	r18,8(sp)
   806b4:	20800e17 	ldw	r2,56(r4)
   806b8:	dc400115 	stw	r17,4(sp)
   806bc:	1000021e 	bne	r2,zero,806c8 <__sfp+0x38>
   806c0:	00804840 	call	80484 <__sinit.part.1>
   806c4:	81000017 	ldw	r4,0(r16)
   806c8:	2480b804 	addi	r18,r4,736
   806cc:	047fffc4 	movi	r17,-1
   806d0:	91000117 	ldw	r4,4(r18)
   806d4:	94000217 	ldw	r16,8(r18)
   806d8:	213fffc4 	addi	r4,r4,-1
   806dc:	20000a16 	blt	r4,zero,80708 <__sfp+0x78>
   806e0:	8080030f 	ldh	r2,12(r16)
   806e4:	10000c26 	beq	r2,zero,80718 <__sfp+0x88>
   806e8:	80c01d04 	addi	r3,r16,116
   806ec:	00000206 	br	806f8 <__sfp+0x68>
   806f0:	18bfe60f 	ldh	r2,-104(r3)
   806f4:	10000826 	beq	r2,zero,80718 <__sfp+0x88>
   806f8:	213fffc4 	addi	r4,r4,-1
   806fc:	1c3ffd04 	addi	r16,r3,-12
   80700:	18c01a04 	addi	r3,r3,104
   80704:	247ffa1e 	bne	r4,r17,806f0 <__sfp+0x60>
   80708:	90800017 	ldw	r2,0(r18)
   8070c:	10001d26 	beq	r2,zero,80784 <__sfp+0xf4>
   80710:	1025883a 	mov	r18,r2
   80714:	003fee06 	br	806d0 <__sfp+0x40>
   80718:	00bfffc4 	movi	r2,-1
   8071c:	8080038d 	sth	r2,14(r16)
   80720:	00800044 	movi	r2,1
   80724:	8080030d 	sth	r2,12(r16)
   80728:	80001915 	stw	zero,100(r16)
   8072c:	80000015 	stw	zero,0(r16)
   80730:	80000215 	stw	zero,8(r16)
   80734:	80000115 	stw	zero,4(r16)
   80738:	80000415 	stw	zero,16(r16)
   8073c:	80000515 	stw	zero,20(r16)
   80740:	80000615 	stw	zero,24(r16)
   80744:	01800204 	movi	r6,8
   80748:	000b883a 	mov	r5,zero
   8074c:	81001704 	addi	r4,r16,92
   80750:	00819e80 	call	819e8 <memset>
   80754:	8005883a 	mov	r2,r16
   80758:	80000c15 	stw	zero,48(r16)
   8075c:	80000d15 	stw	zero,52(r16)
   80760:	80001115 	stw	zero,68(r16)
   80764:	80001215 	stw	zero,72(r16)
   80768:	dfc00417 	ldw	ra,16(sp)
   8076c:	dcc00317 	ldw	r19,12(sp)
   80770:	dc800217 	ldw	r18,8(sp)
   80774:	dc400117 	ldw	r17,4(sp)
   80778:	dc000017 	ldw	r16,0(sp)
   8077c:	dec00504 	addi	sp,sp,20
   80780:	f800283a 	ret
   80784:	01400104 	movi	r5,4
   80788:	9809883a 	mov	r4,r19
   8078c:	00806280 	call	80628 <__sfmoreglue>
   80790:	90800015 	stw	r2,0(r18)
   80794:	103fde1e 	bne	r2,zero,80710 <__sfp+0x80>
   80798:	00800304 	movi	r2,12
   8079c:	98800015 	stw	r2,0(r19)
   807a0:	0005883a 	mov	r2,zero
   807a4:	003ff006 	br	80768 <__sfp+0xd8>

000807a8 <_cleanup>:
   807a8:	00800234 	movhi	r2,8
   807ac:	109c5104 	addi	r2,r2,28996
   807b0:	11000017 	ldw	r4,0(r2)
   807b4:	01400234 	movhi	r5,8
   807b8:	29490304 	addi	r5,r5,9228
   807bc:	0080d901 	jmpi	80d90 <_fwalk_reent>

000807c0 <__sinit>:
   807c0:	20800e17 	ldw	r2,56(r4)
   807c4:	10000126 	beq	r2,zero,807cc <__sinit+0xc>
   807c8:	f800283a 	ret
   807cc:	00804841 	jmpi	80484 <__sinit.part.1>

000807d0 <__sfp_lock_acquire>:
   807d0:	f800283a 	ret

000807d4 <__sfp_lock_release>:
   807d4:	f800283a 	ret

000807d8 <__sinit_lock_acquire>:
   807d8:	f800283a 	ret

000807dc <__sinit_lock_release>:
   807dc:	f800283a 	ret

000807e0 <__fp_lock_all>:
   807e0:	00800234 	movhi	r2,8
   807e4:	109c5204 	addi	r2,r2,29000
   807e8:	11000017 	ldw	r4,0(r2)
   807ec:	01400234 	movhi	r5,8
   807f0:	29418804 	addi	r5,r5,1568
   807f4:	0080ccc1 	jmpi	80ccc <_fwalk>

000807f8 <__fp_unlock_all>:
   807f8:	00800234 	movhi	r2,8
   807fc:	109c5204 	addi	r2,r2,29000
   80800:	11000017 	ldw	r4,0(r2)
   80804:	01400234 	movhi	r5,8
   80808:	29411c04 	addi	r5,r5,1136
   8080c:	0080ccc1 	jmpi	80ccc <_fwalk>

00080810 <__sfvwrite_r>:
   80810:	30800217 	ldw	r2,8(r6)
   80814:	10006726 	beq	r2,zero,809b4 <__sfvwrite_r+0x1a4>
   80818:	28c0030b 	ldhu	r3,12(r5)
   8081c:	defff404 	addi	sp,sp,-48
   80820:	dd400715 	stw	r21,28(sp)
   80824:	dd000615 	stw	r20,24(sp)
   80828:	dc000215 	stw	r16,8(sp)
   8082c:	dfc00b15 	stw	ra,44(sp)
   80830:	df000a15 	stw	fp,40(sp)
   80834:	ddc00915 	stw	r23,36(sp)
   80838:	dd800815 	stw	r22,32(sp)
   8083c:	dcc00515 	stw	r19,20(sp)
   80840:	dc800415 	stw	r18,16(sp)
   80844:	dc400315 	stw	r17,12(sp)
   80848:	1880020c 	andi	r2,r3,8
   8084c:	2821883a 	mov	r16,r5
   80850:	202b883a 	mov	r21,r4
   80854:	3029883a 	mov	r20,r6
   80858:	10002726 	beq	r2,zero,808f8 <__sfvwrite_r+0xe8>
   8085c:	28800417 	ldw	r2,16(r5)
   80860:	10002526 	beq	r2,zero,808f8 <__sfvwrite_r+0xe8>
   80864:	1880008c 	andi	r2,r3,2
   80868:	a4400017 	ldw	r17,0(r20)
   8086c:	10002a26 	beq	r2,zero,80918 <__sfvwrite_r+0x108>
   80870:	05a00034 	movhi	r22,32768
   80874:	0027883a 	mov	r19,zero
   80878:	0025883a 	mov	r18,zero
   8087c:	b5bf0004 	addi	r22,r22,-1024
   80880:	980d883a 	mov	r6,r19
   80884:	a809883a 	mov	r4,r21
   80888:	90004626 	beq	r18,zero,809a4 <__sfvwrite_r+0x194>
   8088c:	900f883a 	mov	r7,r18
   80890:	b480022e 	bgeu	r22,r18,8089c <__sfvwrite_r+0x8c>
   80894:	01e00034 	movhi	r7,32768
   80898:	39ff0004 	addi	r7,r7,-1024
   8089c:	80800917 	ldw	r2,36(r16)
   808a0:	81400717 	ldw	r5,28(r16)
   808a4:	103ee83a 	callr	r2
   808a8:	0080570e 	bge	zero,r2,80a08 <__sfvwrite_r+0x1f8>
   808ac:	a0c00217 	ldw	r3,8(r20)
   808b0:	98a7883a 	add	r19,r19,r2
   808b4:	90a5c83a 	sub	r18,r18,r2
   808b8:	1885c83a 	sub	r2,r3,r2
   808bc:	a0800215 	stw	r2,8(r20)
   808c0:	103fef1e 	bne	r2,zero,80880 <__sfvwrite_r+0x70>
   808c4:	0005883a 	mov	r2,zero
   808c8:	dfc00b17 	ldw	ra,44(sp)
   808cc:	df000a17 	ldw	fp,40(sp)
   808d0:	ddc00917 	ldw	r23,36(sp)
   808d4:	dd800817 	ldw	r22,32(sp)
   808d8:	dd400717 	ldw	r21,28(sp)
   808dc:	dd000617 	ldw	r20,24(sp)
   808e0:	dcc00517 	ldw	r19,20(sp)
   808e4:	dc800417 	ldw	r18,16(sp)
   808e8:	dc400317 	ldw	r17,12(sp)
   808ec:	dc000217 	ldw	r16,8(sp)
   808f0:	dec00c04 	addi	sp,sp,48
   808f4:	f800283a 	ret
   808f8:	800b883a 	mov	r5,r16
   808fc:	a809883a 	mov	r4,r21
   80900:	00822640 	call	82264 <__swsetup_r>
   80904:	1000eb1e 	bne	r2,zero,80cb4 <__sfvwrite_r+0x4a4>
   80908:	80c0030b 	ldhu	r3,12(r16)
   8090c:	a4400017 	ldw	r17,0(r20)
   80910:	1880008c 	andi	r2,r3,2
   80914:	103fd61e 	bne	r2,zero,80870 <__sfvwrite_r+0x60>
   80918:	1880004c 	andi	r2,r3,1
   8091c:	10003f1e 	bne	r2,zero,80a1c <__sfvwrite_r+0x20c>
   80920:	0039883a 	mov	fp,zero
   80924:	0025883a 	mov	r18,zero
   80928:	90001a26 	beq	r18,zero,80994 <__sfvwrite_r+0x184>
   8092c:	1880800c 	andi	r2,r3,512
   80930:	84c00217 	ldw	r19,8(r16)
   80934:	10002126 	beq	r2,zero,809bc <__sfvwrite_r+0x1ac>
   80938:	982f883a 	mov	r23,r19
   8093c:	94c09336 	bltu	r18,r19,80b8c <__sfvwrite_r+0x37c>
   80940:	1881200c 	andi	r2,r3,1152
   80944:	10009e1e 	bne	r2,zero,80bc0 <__sfvwrite_r+0x3b0>
   80948:	81000017 	ldw	r4,0(r16)
   8094c:	b80d883a 	mov	r6,r23
   80950:	e00b883a 	mov	r5,fp
   80954:	008188c0 	call	8188c <memmove>
   80958:	80c00217 	ldw	r3,8(r16)
   8095c:	81000017 	ldw	r4,0(r16)
   80960:	9005883a 	mov	r2,r18
   80964:	1ce7c83a 	sub	r19,r3,r19
   80968:	25cf883a 	add	r7,r4,r23
   8096c:	84c00215 	stw	r19,8(r16)
   80970:	81c00015 	stw	r7,0(r16)
   80974:	a0c00217 	ldw	r3,8(r20)
   80978:	e0b9883a 	add	fp,fp,r2
   8097c:	90a5c83a 	sub	r18,r18,r2
   80980:	18a7c83a 	sub	r19,r3,r2
   80984:	a4c00215 	stw	r19,8(r20)
   80988:	983fce26 	beq	r19,zero,808c4 <__sfvwrite_r+0xb4>
   8098c:	80c0030b 	ldhu	r3,12(r16)
   80990:	903fe61e 	bne	r18,zero,8092c <__sfvwrite_r+0x11c>
   80994:	8f000017 	ldw	fp,0(r17)
   80998:	8c800117 	ldw	r18,4(r17)
   8099c:	8c400204 	addi	r17,r17,8
   809a0:	003fe106 	br	80928 <__sfvwrite_r+0x118>
   809a4:	8cc00017 	ldw	r19,0(r17)
   809a8:	8c800117 	ldw	r18,4(r17)
   809ac:	8c400204 	addi	r17,r17,8
   809b0:	003fb306 	br	80880 <__sfvwrite_r+0x70>
   809b4:	0005883a 	mov	r2,zero
   809b8:	f800283a 	ret
   809bc:	81000017 	ldw	r4,0(r16)
   809c0:	80800417 	ldw	r2,16(r16)
   809c4:	11005736 	bltu	r2,r4,80b24 <__sfvwrite_r+0x314>
   809c8:	85c00517 	ldw	r23,20(r16)
   809cc:	95c05536 	bltu	r18,r23,80b24 <__sfvwrite_r+0x314>
   809d0:	00a00034 	movhi	r2,32768
   809d4:	10bfffc4 	addi	r2,r2,-1
   809d8:	9009883a 	mov	r4,r18
   809dc:	1480012e 	bgeu	r2,r18,809e4 <__sfvwrite_r+0x1d4>
   809e0:	1009883a 	mov	r4,r2
   809e4:	b80b883a 	mov	r5,r23
   809e8:	0082f180 	call	82f18 <__divsi3>
   809ec:	15cf383a 	mul	r7,r2,r23
   809f0:	81400717 	ldw	r5,28(r16)
   809f4:	80800917 	ldw	r2,36(r16)
   809f8:	e00d883a 	mov	r6,fp
   809fc:	a809883a 	mov	r4,r21
   80a00:	103ee83a 	callr	r2
   80a04:	00bfdb16 	blt	zero,r2,80974 <__sfvwrite_r+0x164>
   80a08:	8080030b 	ldhu	r2,12(r16)
   80a0c:	10801014 	ori	r2,r2,64
   80a10:	8080030d 	sth	r2,12(r16)
   80a14:	00bfffc4 	movi	r2,-1
   80a18:	003fab06 	br	808c8 <__sfvwrite_r+0xb8>
   80a1c:	0027883a 	mov	r19,zero
   80a20:	0011883a 	mov	r8,zero
   80a24:	0039883a 	mov	fp,zero
   80a28:	0025883a 	mov	r18,zero
   80a2c:	90001f26 	beq	r18,zero,80aac <__sfvwrite_r+0x29c>
   80a30:	40005a26 	beq	r8,zero,80b9c <__sfvwrite_r+0x38c>
   80a34:	982d883a 	mov	r22,r19
   80a38:	94c0012e 	bgeu	r18,r19,80a40 <__sfvwrite_r+0x230>
   80a3c:	902d883a 	mov	r22,r18
   80a40:	81000017 	ldw	r4,0(r16)
   80a44:	80800417 	ldw	r2,16(r16)
   80a48:	b02f883a 	mov	r23,r22
   80a4c:	81c00517 	ldw	r7,20(r16)
   80a50:	1100032e 	bgeu	r2,r4,80a60 <__sfvwrite_r+0x250>
   80a54:	80c00217 	ldw	r3,8(r16)
   80a58:	38c7883a 	add	r3,r7,r3
   80a5c:	1d801816 	blt	r3,r22,80ac0 <__sfvwrite_r+0x2b0>
   80a60:	b1c03e16 	blt	r22,r7,80b5c <__sfvwrite_r+0x34c>
   80a64:	80800917 	ldw	r2,36(r16)
   80a68:	81400717 	ldw	r5,28(r16)
   80a6c:	e00d883a 	mov	r6,fp
   80a70:	da000115 	stw	r8,4(sp)
   80a74:	a809883a 	mov	r4,r21
   80a78:	103ee83a 	callr	r2
   80a7c:	102f883a 	mov	r23,r2
   80a80:	da000117 	ldw	r8,4(sp)
   80a84:	00bfe00e 	bge	zero,r2,80a08 <__sfvwrite_r+0x1f8>
   80a88:	9de7c83a 	sub	r19,r19,r23
   80a8c:	98001f26 	beq	r19,zero,80b0c <__sfvwrite_r+0x2fc>
   80a90:	a0800217 	ldw	r2,8(r20)
   80a94:	e5f9883a 	add	fp,fp,r23
   80a98:	95e5c83a 	sub	r18,r18,r23
   80a9c:	15efc83a 	sub	r23,r2,r23
   80aa0:	a5c00215 	stw	r23,8(r20)
   80aa4:	b83f8726 	beq	r23,zero,808c4 <__sfvwrite_r+0xb4>
   80aa8:	903fe11e 	bne	r18,zero,80a30 <__sfvwrite_r+0x220>
   80aac:	8f000017 	ldw	fp,0(r17)
   80ab0:	8c800117 	ldw	r18,4(r17)
   80ab4:	0011883a 	mov	r8,zero
   80ab8:	8c400204 	addi	r17,r17,8
   80abc:	003fdb06 	br	80a2c <__sfvwrite_r+0x21c>
   80ac0:	180d883a 	mov	r6,r3
   80ac4:	e00b883a 	mov	r5,fp
   80ac8:	da000115 	stw	r8,4(sp)
   80acc:	d8c00015 	stw	r3,0(sp)
   80ad0:	008188c0 	call	8188c <memmove>
   80ad4:	d8c00017 	ldw	r3,0(sp)
   80ad8:	80800017 	ldw	r2,0(r16)
   80adc:	800b883a 	mov	r5,r16
   80ae0:	a809883a 	mov	r4,r21
   80ae4:	10c5883a 	add	r2,r2,r3
   80ae8:	80800015 	stw	r2,0(r16)
   80aec:	d8c00015 	stw	r3,0(sp)
   80af0:	008272c0 	call	8272c <_fflush_r>
   80af4:	d8c00017 	ldw	r3,0(sp)
   80af8:	da000117 	ldw	r8,4(sp)
   80afc:	103fc21e 	bne	r2,zero,80a08 <__sfvwrite_r+0x1f8>
   80b00:	182f883a 	mov	r23,r3
   80b04:	9de7c83a 	sub	r19,r19,r23
   80b08:	983fe11e 	bne	r19,zero,80a90 <__sfvwrite_r+0x280>
   80b0c:	800b883a 	mov	r5,r16
   80b10:	a809883a 	mov	r4,r21
   80b14:	008272c0 	call	8272c <_fflush_r>
   80b18:	103fbb1e 	bne	r2,zero,80a08 <__sfvwrite_r+0x1f8>
   80b1c:	0011883a 	mov	r8,zero
   80b20:	003fdb06 	br	80a90 <__sfvwrite_r+0x280>
   80b24:	94c0012e 	bgeu	r18,r19,80b2c <__sfvwrite_r+0x31c>
   80b28:	9027883a 	mov	r19,r18
   80b2c:	980d883a 	mov	r6,r19
   80b30:	e00b883a 	mov	r5,fp
   80b34:	008188c0 	call	8188c <memmove>
   80b38:	80800217 	ldw	r2,8(r16)
   80b3c:	80c00017 	ldw	r3,0(r16)
   80b40:	14c5c83a 	sub	r2,r2,r19
   80b44:	1cc7883a 	add	r3,r3,r19
   80b48:	80800215 	stw	r2,8(r16)
   80b4c:	80c00015 	stw	r3,0(r16)
   80b50:	10004326 	beq	r2,zero,80c60 <__sfvwrite_r+0x450>
   80b54:	9805883a 	mov	r2,r19
   80b58:	003f8606 	br	80974 <__sfvwrite_r+0x164>
   80b5c:	b00d883a 	mov	r6,r22
   80b60:	e00b883a 	mov	r5,fp
   80b64:	da000115 	stw	r8,4(sp)
   80b68:	008188c0 	call	8188c <memmove>
   80b6c:	80800217 	ldw	r2,8(r16)
   80b70:	80c00017 	ldw	r3,0(r16)
   80b74:	da000117 	ldw	r8,4(sp)
   80b78:	1585c83a 	sub	r2,r2,r22
   80b7c:	1dad883a 	add	r22,r3,r22
   80b80:	80800215 	stw	r2,8(r16)
   80b84:	85800015 	stw	r22,0(r16)
   80b88:	003fbf06 	br	80a88 <__sfvwrite_r+0x278>
   80b8c:	81000017 	ldw	r4,0(r16)
   80b90:	9027883a 	mov	r19,r18
   80b94:	902f883a 	mov	r23,r18
   80b98:	003f6c06 	br	8094c <__sfvwrite_r+0x13c>
   80b9c:	900d883a 	mov	r6,r18
   80ba0:	01400284 	movi	r5,10
   80ba4:	e009883a 	mov	r4,fp
   80ba8:	00816600 	call	81660 <memchr>
   80bac:	10003e26 	beq	r2,zero,80ca8 <__sfvwrite_r+0x498>
   80bb0:	10800044 	addi	r2,r2,1
   80bb4:	1727c83a 	sub	r19,r2,fp
   80bb8:	02000044 	movi	r8,1
   80bbc:	003f9d06 	br	80a34 <__sfvwrite_r+0x224>
   80bc0:	80800517 	ldw	r2,20(r16)
   80bc4:	81400417 	ldw	r5,16(r16)
   80bc8:	81c00017 	ldw	r7,0(r16)
   80bcc:	10a7883a 	add	r19,r2,r2
   80bd0:	9885883a 	add	r2,r19,r2
   80bd4:	1026d7fa 	srli	r19,r2,31
   80bd8:	396dc83a 	sub	r22,r7,r5
   80bdc:	b1000044 	addi	r4,r22,1
   80be0:	9885883a 	add	r2,r19,r2
   80be4:	1027d07a 	srai	r19,r2,1
   80be8:	2485883a 	add	r2,r4,r18
   80bec:	980d883a 	mov	r6,r19
   80bf0:	9880022e 	bgeu	r19,r2,80bfc <__sfvwrite_r+0x3ec>
   80bf4:	1027883a 	mov	r19,r2
   80bf8:	100d883a 	mov	r6,r2
   80bfc:	18c1000c 	andi	r3,r3,1024
   80c00:	18001c26 	beq	r3,zero,80c74 <__sfvwrite_r+0x464>
   80c04:	300b883a 	mov	r5,r6
   80c08:	a809883a 	mov	r4,r21
   80c0c:	0080e540 	call	80e54 <_malloc_r>
   80c10:	102f883a 	mov	r23,r2
   80c14:	10002926 	beq	r2,zero,80cbc <__sfvwrite_r+0x4ac>
   80c18:	81400417 	ldw	r5,16(r16)
   80c1c:	b00d883a 	mov	r6,r22
   80c20:	1009883a 	mov	r4,r2
   80c24:	00817440 	call	81744 <memcpy>
   80c28:	8080030b 	ldhu	r2,12(r16)
   80c2c:	00fedfc4 	movi	r3,-1153
   80c30:	10c4703a 	and	r2,r2,r3
   80c34:	10802014 	ori	r2,r2,128
   80c38:	8080030d 	sth	r2,12(r16)
   80c3c:	bd89883a 	add	r4,r23,r22
   80c40:	9d8fc83a 	sub	r7,r19,r22
   80c44:	85c00415 	stw	r23,16(r16)
   80c48:	84c00515 	stw	r19,20(r16)
   80c4c:	81000015 	stw	r4,0(r16)
   80c50:	9027883a 	mov	r19,r18
   80c54:	81c00215 	stw	r7,8(r16)
   80c58:	902f883a 	mov	r23,r18
   80c5c:	003f3b06 	br	8094c <__sfvwrite_r+0x13c>
   80c60:	800b883a 	mov	r5,r16
   80c64:	a809883a 	mov	r4,r21
   80c68:	008272c0 	call	8272c <_fflush_r>
   80c6c:	103fb926 	beq	r2,zero,80b54 <__sfvwrite_r+0x344>
   80c70:	003f6506 	br	80a08 <__sfvwrite_r+0x1f8>
   80c74:	a809883a 	mov	r4,r21
   80c78:	0081b100 	call	81b10 <_realloc_r>
   80c7c:	102f883a 	mov	r23,r2
   80c80:	103fee1e 	bne	r2,zero,80c3c <__sfvwrite_r+0x42c>
   80c84:	81400417 	ldw	r5,16(r16)
   80c88:	a809883a 	mov	r4,r21
   80c8c:	00828dc0 	call	828dc <_free_r>
   80c90:	8080030b 	ldhu	r2,12(r16)
   80c94:	00ffdfc4 	movi	r3,-129
   80c98:	1884703a 	and	r2,r3,r2
   80c9c:	00c00304 	movi	r3,12
   80ca0:	a8c00015 	stw	r3,0(r21)
   80ca4:	003f5906 	br	80a0c <__sfvwrite_r+0x1fc>
   80ca8:	94c00044 	addi	r19,r18,1
   80cac:	02000044 	movi	r8,1
   80cb0:	003f6006 	br	80a34 <__sfvwrite_r+0x224>
   80cb4:	00bfffc4 	movi	r2,-1
   80cb8:	003f0306 	br	808c8 <__sfvwrite_r+0xb8>
   80cbc:	00800304 	movi	r2,12
   80cc0:	a8800015 	stw	r2,0(r21)
   80cc4:	8080030b 	ldhu	r2,12(r16)
   80cc8:	003f5006 	br	80a0c <__sfvwrite_r+0x1fc>

00080ccc <_fwalk>:
   80ccc:	defff704 	addi	sp,sp,-36
   80cd0:	dd000415 	stw	r20,16(sp)
   80cd4:	dfc00815 	stw	ra,32(sp)
   80cd8:	ddc00715 	stw	r23,28(sp)
   80cdc:	dd800615 	stw	r22,24(sp)
   80ce0:	dd400515 	stw	r21,20(sp)
   80ce4:	dcc00315 	stw	r19,12(sp)
   80ce8:	dc800215 	stw	r18,8(sp)
   80cec:	dc400115 	stw	r17,4(sp)
   80cf0:	dc000015 	stw	r16,0(sp)
   80cf4:	2500b804 	addi	r20,r4,736
   80cf8:	a0002326 	beq	r20,zero,80d88 <_fwalk+0xbc>
   80cfc:	282b883a 	mov	r21,r5
   80d00:	002f883a 	mov	r23,zero
   80d04:	05800044 	movi	r22,1
   80d08:	04ffffc4 	movi	r19,-1
   80d0c:	a4400117 	ldw	r17,4(r20)
   80d10:	a4800217 	ldw	r18,8(r20)
   80d14:	8c7fffc4 	addi	r17,r17,-1
   80d18:	88000d16 	blt	r17,zero,80d50 <_fwalk+0x84>
   80d1c:	94000304 	addi	r16,r18,12
   80d20:	94800384 	addi	r18,r18,14
   80d24:	8080000b 	ldhu	r2,0(r16)
   80d28:	8c7fffc4 	addi	r17,r17,-1
   80d2c:	813ffd04 	addi	r4,r16,-12
   80d30:	b080042e 	bgeu	r22,r2,80d44 <_fwalk+0x78>
   80d34:	9080000f 	ldh	r2,0(r18)
   80d38:	14c00226 	beq	r2,r19,80d44 <_fwalk+0x78>
   80d3c:	a83ee83a 	callr	r21
   80d40:	b8aeb03a 	or	r23,r23,r2
   80d44:	84001a04 	addi	r16,r16,104
   80d48:	94801a04 	addi	r18,r18,104
   80d4c:	8cfff51e 	bne	r17,r19,80d24 <_fwalk+0x58>
   80d50:	a5000017 	ldw	r20,0(r20)
   80d54:	a03fed1e 	bne	r20,zero,80d0c <_fwalk+0x40>
   80d58:	b805883a 	mov	r2,r23
   80d5c:	dfc00817 	ldw	ra,32(sp)
   80d60:	ddc00717 	ldw	r23,28(sp)
   80d64:	dd800617 	ldw	r22,24(sp)
   80d68:	dd400517 	ldw	r21,20(sp)
   80d6c:	dd000417 	ldw	r20,16(sp)
   80d70:	dcc00317 	ldw	r19,12(sp)
   80d74:	dc800217 	ldw	r18,8(sp)
   80d78:	dc400117 	ldw	r17,4(sp)
   80d7c:	dc000017 	ldw	r16,0(sp)
   80d80:	dec00904 	addi	sp,sp,36
   80d84:	f800283a 	ret
   80d88:	002f883a 	mov	r23,zero
   80d8c:	003ff206 	br	80d58 <_fwalk+0x8c>

00080d90 <_fwalk_reent>:
   80d90:	defff704 	addi	sp,sp,-36
   80d94:	dd000415 	stw	r20,16(sp)
   80d98:	dfc00815 	stw	ra,32(sp)
   80d9c:	ddc00715 	stw	r23,28(sp)
   80da0:	dd800615 	stw	r22,24(sp)
   80da4:	dd400515 	stw	r21,20(sp)
   80da8:	dcc00315 	stw	r19,12(sp)
   80dac:	dc800215 	stw	r18,8(sp)
   80db0:	dc400115 	stw	r17,4(sp)
   80db4:	dc000015 	stw	r16,0(sp)
   80db8:	2500b804 	addi	r20,r4,736
   80dbc:	a0002326 	beq	r20,zero,80e4c <_fwalk_reent+0xbc>
   80dc0:	282b883a 	mov	r21,r5
   80dc4:	2027883a 	mov	r19,r4
   80dc8:	002f883a 	mov	r23,zero
   80dcc:	05800044 	movi	r22,1
   80dd0:	04bfffc4 	movi	r18,-1
   80dd4:	a4400117 	ldw	r17,4(r20)
   80dd8:	a4000217 	ldw	r16,8(r20)
   80ddc:	8c7fffc4 	addi	r17,r17,-1
   80de0:	88000c16 	blt	r17,zero,80e14 <_fwalk_reent+0x84>
   80de4:	84000304 	addi	r16,r16,12
   80de8:	8080000b 	ldhu	r2,0(r16)
   80dec:	8c7fffc4 	addi	r17,r17,-1
   80df0:	817ffd04 	addi	r5,r16,-12
   80df4:	b080052e 	bgeu	r22,r2,80e0c <_fwalk_reent+0x7c>
   80df8:	8080008f 	ldh	r2,2(r16)
   80dfc:	9809883a 	mov	r4,r19
   80e00:	14800226 	beq	r2,r18,80e0c <_fwalk_reent+0x7c>
   80e04:	a83ee83a 	callr	r21
   80e08:	b8aeb03a 	or	r23,r23,r2
   80e0c:	84001a04 	addi	r16,r16,104
   80e10:	8cbff51e 	bne	r17,r18,80de8 <_fwalk_reent+0x58>
   80e14:	a5000017 	ldw	r20,0(r20)
   80e18:	a03fee1e 	bne	r20,zero,80dd4 <_fwalk_reent+0x44>
   80e1c:	b805883a 	mov	r2,r23
   80e20:	dfc00817 	ldw	ra,32(sp)
   80e24:	ddc00717 	ldw	r23,28(sp)
   80e28:	dd800617 	ldw	r22,24(sp)
   80e2c:	dd400517 	ldw	r21,20(sp)
   80e30:	dd000417 	ldw	r20,16(sp)
   80e34:	dcc00317 	ldw	r19,12(sp)
   80e38:	dc800217 	ldw	r18,8(sp)
   80e3c:	dc400117 	ldw	r17,4(sp)
   80e40:	dc000017 	ldw	r16,0(sp)
   80e44:	dec00904 	addi	sp,sp,36
   80e48:	f800283a 	ret
   80e4c:	002f883a 	mov	r23,zero
   80e50:	003ff206 	br	80e1c <_fwalk_reent+0x8c>

00080e54 <_malloc_r>:
   80e54:	defff504 	addi	sp,sp,-44
   80e58:	dc800315 	stw	r18,12(sp)
   80e5c:	dfc00a15 	stw	ra,40(sp)
   80e60:	df000915 	stw	fp,36(sp)
   80e64:	ddc00815 	stw	r23,32(sp)
   80e68:	dd800715 	stw	r22,28(sp)
   80e6c:	dd400615 	stw	r21,24(sp)
   80e70:	dd000515 	stw	r20,20(sp)
   80e74:	dcc00415 	stw	r19,16(sp)
   80e78:	dc400215 	stw	r17,8(sp)
   80e7c:	dc000115 	stw	r16,4(sp)
   80e80:	288002c4 	addi	r2,r5,11
   80e84:	00c00584 	movi	r3,22
   80e88:	2025883a 	mov	r18,r4
   80e8c:	18807f2e 	bgeu	r3,r2,8108c <_malloc_r+0x238>
   80e90:	047ffe04 	movi	r17,-8
   80e94:	1462703a 	and	r17,r2,r17
   80e98:	8800a316 	blt	r17,zero,81128 <_malloc_r+0x2d4>
   80e9c:	8940a236 	bltu	r17,r5,81128 <_malloc_r+0x2d4>
   80ea0:	00836480 	call	83648 <__malloc_lock>
   80ea4:	00807dc4 	movi	r2,503
   80ea8:	1441e92e 	bgeu	r2,r17,81650 <_malloc_r+0x7fc>
   80eac:	8804d27a 	srli	r2,r17,9
   80eb0:	1000a126 	beq	r2,zero,81138 <_malloc_r+0x2e4>
   80eb4:	00c00104 	movi	r3,4
   80eb8:	18811e36 	bltu	r3,r2,81334 <_malloc_r+0x4e0>
   80ebc:	8804d1ba 	srli	r2,r17,6
   80ec0:	12000e44 	addi	r8,r2,57
   80ec4:	11c00e04 	addi	r7,r2,56
   80ec8:	4209883a 	add	r4,r8,r8
   80ecc:	04c00234 	movhi	r19,8
   80ed0:	2109883a 	add	r4,r4,r4
   80ed4:	9cd6c104 	addi	r19,r19,23300
   80ed8:	2109883a 	add	r4,r4,r4
   80edc:	9909883a 	add	r4,r19,r4
   80ee0:	24000117 	ldw	r16,4(r4)
   80ee4:	213ffe04 	addi	r4,r4,-8
   80ee8:	24009726 	beq	r4,r16,81148 <_malloc_r+0x2f4>
   80eec:	80800117 	ldw	r2,4(r16)
   80ef0:	01bfff04 	movi	r6,-4
   80ef4:	014003c4 	movi	r5,15
   80ef8:	1184703a 	and	r2,r2,r6
   80efc:	1447c83a 	sub	r3,r2,r17
   80f00:	28c00716 	blt	r5,r3,80f20 <_malloc_r+0xcc>
   80f04:	1800920e 	bge	r3,zero,81150 <_malloc_r+0x2fc>
   80f08:	84000317 	ldw	r16,12(r16)
   80f0c:	24008e26 	beq	r4,r16,81148 <_malloc_r+0x2f4>
   80f10:	80800117 	ldw	r2,4(r16)
   80f14:	1184703a 	and	r2,r2,r6
   80f18:	1447c83a 	sub	r3,r2,r17
   80f1c:	28fff90e 	bge	r5,r3,80f04 <_malloc_r+0xb0>
   80f20:	3809883a 	mov	r4,r7
   80f24:	01800234 	movhi	r6,8
   80f28:	9c000417 	ldw	r16,16(r19)
   80f2c:	3196c104 	addi	r6,r6,23300
   80f30:	32000204 	addi	r8,r6,8
   80f34:	82013426 	beq	r16,r8,81408 <_malloc_r+0x5b4>
   80f38:	80c00117 	ldw	r3,4(r16)
   80f3c:	00bfff04 	movi	r2,-4
   80f40:	188e703a 	and	r7,r3,r2
   80f44:	3c45c83a 	sub	r2,r7,r17
   80f48:	00c003c4 	movi	r3,15
   80f4c:	18811f16 	blt	r3,r2,813cc <_malloc_r+0x578>
   80f50:	32000515 	stw	r8,20(r6)
   80f54:	32000415 	stw	r8,16(r6)
   80f58:	10007f0e 	bge	r2,zero,81158 <_malloc_r+0x304>
   80f5c:	00807fc4 	movi	r2,511
   80f60:	11c0fd36 	bltu	r2,r7,81358 <_malloc_r+0x504>
   80f64:	3806d0fa 	srli	r3,r7,3
   80f68:	01c00044 	movi	r7,1
   80f6c:	30800117 	ldw	r2,4(r6)
   80f70:	19400044 	addi	r5,r3,1
   80f74:	294b883a 	add	r5,r5,r5
   80f78:	1807d0ba 	srai	r3,r3,2
   80f7c:	294b883a 	add	r5,r5,r5
   80f80:	294b883a 	add	r5,r5,r5
   80f84:	298b883a 	add	r5,r5,r6
   80f88:	38c6983a 	sll	r3,r7,r3
   80f8c:	29c00017 	ldw	r7,0(r5)
   80f90:	2a7ffe04 	addi	r9,r5,-8
   80f94:	1886b03a 	or	r3,r3,r2
   80f98:	82400315 	stw	r9,12(r16)
   80f9c:	81c00215 	stw	r7,8(r16)
   80fa0:	30c00115 	stw	r3,4(r6)
   80fa4:	2c000015 	stw	r16,0(r5)
   80fa8:	3c000315 	stw	r16,12(r7)
   80fac:	2005d0ba 	srai	r2,r4,2
   80fb0:	01400044 	movi	r5,1
   80fb4:	288a983a 	sll	r5,r5,r2
   80fb8:	19406f36 	bltu	r3,r5,81178 <_malloc_r+0x324>
   80fbc:	28c4703a 	and	r2,r5,r3
   80fc0:	10000a1e 	bne	r2,zero,80fec <_malloc_r+0x198>
   80fc4:	00bfff04 	movi	r2,-4
   80fc8:	294b883a 	add	r5,r5,r5
   80fcc:	2088703a 	and	r4,r4,r2
   80fd0:	28c4703a 	and	r2,r5,r3
   80fd4:	21000104 	addi	r4,r4,4
   80fd8:	1000041e 	bne	r2,zero,80fec <_malloc_r+0x198>
   80fdc:	294b883a 	add	r5,r5,r5
   80fe0:	28c4703a 	and	r2,r5,r3
   80fe4:	21000104 	addi	r4,r4,4
   80fe8:	103ffc26 	beq	r2,zero,80fdc <_malloc_r+0x188>
   80fec:	02bfff04 	movi	r10,-4
   80ff0:	024003c4 	movi	r9,15
   80ff4:	21800044 	addi	r6,r4,1
   80ff8:	318d883a 	add	r6,r6,r6
   80ffc:	318d883a 	add	r6,r6,r6
   81000:	318d883a 	add	r6,r6,r6
   81004:	998d883a 	add	r6,r19,r6
   81008:	333ffe04 	addi	r12,r6,-8
   8100c:	2017883a 	mov	r11,r4
   81010:	31800104 	addi	r6,r6,4
   81014:	34000017 	ldw	r16,0(r6)
   81018:	31fffd04 	addi	r7,r6,-12
   8101c:	81c0041e 	bne	r16,r7,81030 <_malloc_r+0x1dc>
   81020:	0000fb06 	br	81410 <_malloc_r+0x5bc>
   81024:	1801030e 	bge	r3,zero,81434 <_malloc_r+0x5e0>
   81028:	84000317 	ldw	r16,12(r16)
   8102c:	81c0f826 	beq	r16,r7,81410 <_malloc_r+0x5bc>
   81030:	80800117 	ldw	r2,4(r16)
   81034:	1284703a 	and	r2,r2,r10
   81038:	1447c83a 	sub	r3,r2,r17
   8103c:	48fff90e 	bge	r9,r3,81024 <_malloc_r+0x1d0>
   81040:	80800317 	ldw	r2,12(r16)
   81044:	81000217 	ldw	r4,8(r16)
   81048:	89400054 	ori	r5,r17,1
   8104c:	81400115 	stw	r5,4(r16)
   81050:	20800315 	stw	r2,12(r4)
   81054:	11000215 	stw	r4,8(r2)
   81058:	8463883a 	add	r17,r16,r17
   8105c:	9c400515 	stw	r17,20(r19)
   81060:	9c400415 	stw	r17,16(r19)
   81064:	18800054 	ori	r2,r3,1
   81068:	88800115 	stw	r2,4(r17)
   8106c:	8a000315 	stw	r8,12(r17)
   81070:	8a000215 	stw	r8,8(r17)
   81074:	88e3883a 	add	r17,r17,r3
   81078:	88c00015 	stw	r3,0(r17)
   8107c:	9009883a 	mov	r4,r18
   81080:	008366c0 	call	8366c <__malloc_unlock>
   81084:	80800204 	addi	r2,r16,8
   81088:	00001b06 	br	810f8 <_malloc_r+0x2a4>
   8108c:	04400404 	movi	r17,16
   81090:	89402536 	bltu	r17,r5,81128 <_malloc_r+0x2d4>
   81094:	00836480 	call	83648 <__malloc_lock>
   81098:	00800184 	movi	r2,6
   8109c:	01000084 	movi	r4,2
   810a0:	04c00234 	movhi	r19,8
   810a4:	1085883a 	add	r2,r2,r2
   810a8:	9cd6c104 	addi	r19,r19,23300
   810ac:	1085883a 	add	r2,r2,r2
   810b0:	9885883a 	add	r2,r19,r2
   810b4:	14000117 	ldw	r16,4(r2)
   810b8:	10fffe04 	addi	r3,r2,-8
   810bc:	80c0d926 	beq	r16,r3,81424 <_malloc_r+0x5d0>
   810c0:	80c00117 	ldw	r3,4(r16)
   810c4:	81000317 	ldw	r4,12(r16)
   810c8:	00bfff04 	movi	r2,-4
   810cc:	1884703a 	and	r2,r3,r2
   810d0:	81400217 	ldw	r5,8(r16)
   810d4:	8085883a 	add	r2,r16,r2
   810d8:	10c00117 	ldw	r3,4(r2)
   810dc:	29000315 	stw	r4,12(r5)
   810e0:	21400215 	stw	r5,8(r4)
   810e4:	18c00054 	ori	r3,r3,1
   810e8:	10c00115 	stw	r3,4(r2)
   810ec:	9009883a 	mov	r4,r18
   810f0:	008366c0 	call	8366c <__malloc_unlock>
   810f4:	80800204 	addi	r2,r16,8
   810f8:	dfc00a17 	ldw	ra,40(sp)
   810fc:	df000917 	ldw	fp,36(sp)
   81100:	ddc00817 	ldw	r23,32(sp)
   81104:	dd800717 	ldw	r22,28(sp)
   81108:	dd400617 	ldw	r21,24(sp)
   8110c:	dd000517 	ldw	r20,20(sp)
   81110:	dcc00417 	ldw	r19,16(sp)
   81114:	dc800317 	ldw	r18,12(sp)
   81118:	dc400217 	ldw	r17,8(sp)
   8111c:	dc000117 	ldw	r16,4(sp)
   81120:	dec00b04 	addi	sp,sp,44
   81124:	f800283a 	ret
   81128:	00800304 	movi	r2,12
   8112c:	90800015 	stw	r2,0(r18)
   81130:	0005883a 	mov	r2,zero
   81134:	003ff006 	br	810f8 <_malloc_r+0x2a4>
   81138:	01002004 	movi	r4,128
   8113c:	02001004 	movi	r8,64
   81140:	01c00fc4 	movi	r7,63
   81144:	003f6106 	br	80ecc <_malloc_r+0x78>
   81148:	4009883a 	mov	r4,r8
   8114c:	003f7506 	br	80f24 <_malloc_r+0xd0>
   81150:	81000317 	ldw	r4,12(r16)
   81154:	003fde06 	br	810d0 <_malloc_r+0x27c>
   81158:	81c5883a 	add	r2,r16,r7
   8115c:	11400117 	ldw	r5,4(r2)
   81160:	9009883a 	mov	r4,r18
   81164:	29400054 	ori	r5,r5,1
   81168:	11400115 	stw	r5,4(r2)
   8116c:	008366c0 	call	8366c <__malloc_unlock>
   81170:	80800204 	addi	r2,r16,8
   81174:	003fe006 	br	810f8 <_malloc_r+0x2a4>
   81178:	9c000217 	ldw	r16,8(r19)
   8117c:	00bfff04 	movi	r2,-4
   81180:	85800117 	ldw	r22,4(r16)
   81184:	b0ac703a 	and	r22,r22,r2
   81188:	b4400336 	bltu	r22,r17,81198 <_malloc_r+0x344>
   8118c:	b445c83a 	sub	r2,r22,r17
   81190:	00c003c4 	movi	r3,15
   81194:	18805d16 	blt	r3,r2,8130c <_malloc_r+0x4b8>
   81198:	05c00234 	movhi	r23,8
   8119c:	00800274 	movhi	r2,9
   811a0:	10a30804 	addi	r2,r2,-29664
   811a4:	bddc5304 	addi	r23,r23,29004
   811a8:	15400017 	ldw	r21,0(r2)
   811ac:	b8c00017 	ldw	r3,0(r23)
   811b0:	00bfffc4 	movi	r2,-1
   811b4:	858d883a 	add	r6,r16,r22
   811b8:	8d6b883a 	add	r21,r17,r21
   811bc:	1880ea26 	beq	r3,r2,81568 <_malloc_r+0x714>
   811c0:	ad4403c4 	addi	r21,r21,4111
   811c4:	00bc0004 	movi	r2,-4096
   811c8:	a8aa703a 	and	r21,r21,r2
   811cc:	a80b883a 	mov	r5,r21
   811d0:	9009883a 	mov	r4,r18
   811d4:	d9800015 	stw	r6,0(sp)
   811d8:	00820740 	call	82074 <_sbrk_r>
   811dc:	1029883a 	mov	r20,r2
   811e0:	00bfffc4 	movi	r2,-1
   811e4:	d9800017 	ldw	r6,0(sp)
   811e8:	a080e826 	beq	r20,r2,8158c <_malloc_r+0x738>
   811ec:	a180a636 	bltu	r20,r6,81488 <_malloc_r+0x634>
   811f0:	07000274 	movhi	fp,9
   811f4:	e7231104 	addi	fp,fp,-29628
   811f8:	e0800017 	ldw	r2,0(fp)
   811fc:	a887883a 	add	r3,r21,r2
   81200:	e0c00015 	stw	r3,0(fp)
   81204:	3500e626 	beq	r6,r20,815a0 <_malloc_r+0x74c>
   81208:	b9000017 	ldw	r4,0(r23)
   8120c:	00bfffc4 	movi	r2,-1
   81210:	2080ee26 	beq	r4,r2,815cc <_malloc_r+0x778>
   81214:	a185c83a 	sub	r2,r20,r6
   81218:	10c5883a 	add	r2,r2,r3
   8121c:	e0800015 	stw	r2,0(fp)
   81220:	a0c001cc 	andi	r3,r20,7
   81224:	1800bc26 	beq	r3,zero,81518 <_malloc_r+0x6c4>
   81228:	a0e9c83a 	sub	r20,r20,r3
   8122c:	00840204 	movi	r2,4104
   81230:	a5000204 	addi	r20,r20,8
   81234:	10c7c83a 	sub	r3,r2,r3
   81238:	a545883a 	add	r2,r20,r21
   8123c:	1083ffcc 	andi	r2,r2,4095
   81240:	18abc83a 	sub	r21,r3,r2
   81244:	a80b883a 	mov	r5,r21
   81248:	9009883a 	mov	r4,r18
   8124c:	00820740 	call	82074 <_sbrk_r>
   81250:	00ffffc4 	movi	r3,-1
   81254:	10c0e126 	beq	r2,r3,815dc <_malloc_r+0x788>
   81258:	1505c83a 	sub	r2,r2,r20
   8125c:	1545883a 	add	r2,r2,r21
   81260:	10800054 	ori	r2,r2,1
   81264:	e0c00017 	ldw	r3,0(fp)
   81268:	9d000215 	stw	r20,8(r19)
   8126c:	a0800115 	stw	r2,4(r20)
   81270:	a8c7883a 	add	r3,r21,r3
   81274:	e0c00015 	stw	r3,0(fp)
   81278:	84c00e26 	beq	r16,r19,812b4 <_malloc_r+0x460>
   8127c:	018003c4 	movi	r6,15
   81280:	3580a72e 	bgeu	r6,r22,81520 <_malloc_r+0x6cc>
   81284:	81400117 	ldw	r5,4(r16)
   81288:	013ffe04 	movi	r4,-8
   8128c:	b0bffd04 	addi	r2,r22,-12
   81290:	1104703a 	and	r2,r2,r4
   81294:	2900004c 	andi	r4,r5,1
   81298:	2088b03a 	or	r4,r4,r2
   8129c:	81000115 	stw	r4,4(r16)
   812a0:	01400144 	movi	r5,5
   812a4:	8089883a 	add	r4,r16,r2
   812a8:	21400115 	stw	r5,4(r4)
   812ac:	21400215 	stw	r5,8(r4)
   812b0:	3080cd36 	bltu	r6,r2,815e8 <_malloc_r+0x794>
   812b4:	00800274 	movhi	r2,9
   812b8:	10a30704 	addi	r2,r2,-29668
   812bc:	11000017 	ldw	r4,0(r2)
   812c0:	20c0012e 	bgeu	r4,r3,812c8 <_malloc_r+0x474>
   812c4:	10c00015 	stw	r3,0(r2)
   812c8:	00800274 	movhi	r2,9
   812cc:	10a30604 	addi	r2,r2,-29672
   812d0:	11000017 	ldw	r4,0(r2)
   812d4:	9c000217 	ldw	r16,8(r19)
   812d8:	20c0012e 	bgeu	r4,r3,812e0 <_malloc_r+0x48c>
   812dc:	10c00015 	stw	r3,0(r2)
   812e0:	80c00117 	ldw	r3,4(r16)
   812e4:	00bfff04 	movi	r2,-4
   812e8:	1886703a 	and	r3,r3,r2
   812ec:	1c45c83a 	sub	r2,r3,r17
   812f0:	1c400236 	bltu	r3,r17,812fc <_malloc_r+0x4a8>
   812f4:	00c003c4 	movi	r3,15
   812f8:	18800416 	blt	r3,r2,8130c <_malloc_r+0x4b8>
   812fc:	9009883a 	mov	r4,r18
   81300:	008366c0 	call	8366c <__malloc_unlock>
   81304:	0005883a 	mov	r2,zero
   81308:	003f7b06 	br	810f8 <_malloc_r+0x2a4>
   8130c:	88c00054 	ori	r3,r17,1
   81310:	80c00115 	stw	r3,4(r16)
   81314:	8463883a 	add	r17,r16,r17
   81318:	10800054 	ori	r2,r2,1
   8131c:	9c400215 	stw	r17,8(r19)
   81320:	88800115 	stw	r2,4(r17)
   81324:	9009883a 	mov	r4,r18
   81328:	008366c0 	call	8366c <__malloc_unlock>
   8132c:	80800204 	addi	r2,r16,8
   81330:	003f7106 	br	810f8 <_malloc_r+0x2a4>
   81334:	00c00504 	movi	r3,20
   81338:	18804a2e 	bgeu	r3,r2,81464 <_malloc_r+0x610>
   8133c:	00c01504 	movi	r3,84
   81340:	18806e36 	bltu	r3,r2,814fc <_malloc_r+0x6a8>
   81344:	8804d33a 	srli	r2,r17,12
   81348:	12001bc4 	addi	r8,r2,111
   8134c:	11c01b84 	addi	r7,r2,110
   81350:	4209883a 	add	r4,r8,r8
   81354:	003edd06 	br	80ecc <_malloc_r+0x78>
   81358:	3804d27a 	srli	r2,r7,9
   8135c:	00c00104 	movi	r3,4
   81360:	1880442e 	bgeu	r3,r2,81474 <_malloc_r+0x620>
   81364:	00c00504 	movi	r3,20
   81368:	18808136 	bltu	r3,r2,81570 <_malloc_r+0x71c>
   8136c:	11401704 	addi	r5,r2,92
   81370:	10c016c4 	addi	r3,r2,91
   81374:	294b883a 	add	r5,r5,r5
   81378:	294b883a 	add	r5,r5,r5
   8137c:	294b883a 	add	r5,r5,r5
   81380:	994b883a 	add	r5,r19,r5
   81384:	28800017 	ldw	r2,0(r5)
   81388:	01800234 	movhi	r6,8
   8138c:	297ffe04 	addi	r5,r5,-8
   81390:	3196c104 	addi	r6,r6,23300
   81394:	28806526 	beq	r5,r2,8152c <_malloc_r+0x6d8>
   81398:	01bfff04 	movi	r6,-4
   8139c:	10c00117 	ldw	r3,4(r2)
   813a0:	1986703a 	and	r3,r3,r6
   813a4:	38c0022e 	bgeu	r7,r3,813b0 <_malloc_r+0x55c>
   813a8:	10800217 	ldw	r2,8(r2)
   813ac:	28bffb1e 	bne	r5,r2,8139c <_malloc_r+0x548>
   813b0:	11400317 	ldw	r5,12(r2)
   813b4:	98c00117 	ldw	r3,4(r19)
   813b8:	81400315 	stw	r5,12(r16)
   813bc:	80800215 	stw	r2,8(r16)
   813c0:	2c000215 	stw	r16,8(r5)
   813c4:	14000315 	stw	r16,12(r2)
   813c8:	003ef806 	br	80fac <_malloc_r+0x158>
   813cc:	88c00054 	ori	r3,r17,1
   813d0:	80c00115 	stw	r3,4(r16)
   813d4:	8463883a 	add	r17,r16,r17
   813d8:	34400515 	stw	r17,20(r6)
   813dc:	34400415 	stw	r17,16(r6)
   813e0:	10c00054 	ori	r3,r2,1
   813e4:	8a000315 	stw	r8,12(r17)
   813e8:	8a000215 	stw	r8,8(r17)
   813ec:	88c00115 	stw	r3,4(r17)
   813f0:	88a3883a 	add	r17,r17,r2
   813f4:	88800015 	stw	r2,0(r17)
   813f8:	9009883a 	mov	r4,r18
   813fc:	008366c0 	call	8366c <__malloc_unlock>
   81400:	80800204 	addi	r2,r16,8
   81404:	003f3c06 	br	810f8 <_malloc_r+0x2a4>
   81408:	30c00117 	ldw	r3,4(r6)
   8140c:	003ee706 	br	80fac <_malloc_r+0x158>
   81410:	5ac00044 	addi	r11,r11,1
   81414:	588000cc 	andi	r2,r11,3
   81418:	31800204 	addi	r6,r6,8
   8141c:	103efd1e 	bne	r2,zero,81014 <_malloc_r+0x1c0>
   81420:	00002406 	br	814b4 <_malloc_r+0x660>
   81424:	14000317 	ldw	r16,12(r2)
   81428:	143f251e 	bne	r2,r16,810c0 <_malloc_r+0x26c>
   8142c:	21000084 	addi	r4,r4,2
   81430:	003ebc06 	br	80f24 <_malloc_r+0xd0>
   81434:	8085883a 	add	r2,r16,r2
   81438:	10c00117 	ldw	r3,4(r2)
   8143c:	81000317 	ldw	r4,12(r16)
   81440:	81400217 	ldw	r5,8(r16)
   81444:	18c00054 	ori	r3,r3,1
   81448:	10c00115 	stw	r3,4(r2)
   8144c:	29000315 	stw	r4,12(r5)
   81450:	21400215 	stw	r5,8(r4)
   81454:	9009883a 	mov	r4,r18
   81458:	008366c0 	call	8366c <__malloc_unlock>
   8145c:	80800204 	addi	r2,r16,8
   81460:	003f2506 	br	810f8 <_malloc_r+0x2a4>
   81464:	12001704 	addi	r8,r2,92
   81468:	11c016c4 	addi	r7,r2,91
   8146c:	4209883a 	add	r4,r8,r8
   81470:	003e9606 	br	80ecc <_malloc_r+0x78>
   81474:	3804d1ba 	srli	r2,r7,6
   81478:	11400e44 	addi	r5,r2,57
   8147c:	10c00e04 	addi	r3,r2,56
   81480:	294b883a 	add	r5,r5,r5
   81484:	003fbc06 	br	81378 <_malloc_r+0x524>
   81488:	84ff5926 	beq	r16,r19,811f0 <_malloc_r+0x39c>
   8148c:	00800234 	movhi	r2,8
   81490:	1096c104 	addi	r2,r2,23300
   81494:	14000217 	ldw	r16,8(r2)
   81498:	00bfff04 	movi	r2,-4
   8149c:	80c00117 	ldw	r3,4(r16)
   814a0:	1886703a 	and	r3,r3,r2
   814a4:	003f9106 	br	812ec <_malloc_r+0x498>
   814a8:	60800217 	ldw	r2,8(r12)
   814ac:	213fffc4 	addi	r4,r4,-1
   814b0:	1300651e 	bne	r2,r12,81648 <_malloc_r+0x7f4>
   814b4:	208000cc 	andi	r2,r4,3
   814b8:	633ffe04 	addi	r12,r12,-8
   814bc:	103ffa1e 	bne	r2,zero,814a8 <_malloc_r+0x654>
   814c0:	98800117 	ldw	r2,4(r19)
   814c4:	0146303a 	nor	r3,zero,r5
   814c8:	1884703a 	and	r2,r3,r2
   814cc:	98800115 	stw	r2,4(r19)
   814d0:	294b883a 	add	r5,r5,r5
   814d4:	117f2836 	bltu	r2,r5,81178 <_malloc_r+0x324>
   814d8:	283f2726 	beq	r5,zero,81178 <_malloc_r+0x324>
   814dc:	2886703a 	and	r3,r5,r2
   814e0:	5809883a 	mov	r4,r11
   814e4:	183ec31e 	bne	r3,zero,80ff4 <_malloc_r+0x1a0>
   814e8:	294b883a 	add	r5,r5,r5
   814ec:	2886703a 	and	r3,r5,r2
   814f0:	21000104 	addi	r4,r4,4
   814f4:	183ffc26 	beq	r3,zero,814e8 <_malloc_r+0x694>
   814f8:	003ebe06 	br	80ff4 <_malloc_r+0x1a0>
   814fc:	00c05504 	movi	r3,340
   81500:	18801236 	bltu	r3,r2,8154c <_malloc_r+0x6f8>
   81504:	8804d3fa 	srli	r2,r17,15
   81508:	12001e04 	addi	r8,r2,120
   8150c:	11c01dc4 	addi	r7,r2,119
   81510:	4209883a 	add	r4,r8,r8
   81514:	003e6d06 	br	80ecc <_malloc_r+0x78>
   81518:	00c40004 	movi	r3,4096
   8151c:	003f4606 	br	81238 <_malloc_r+0x3e4>
   81520:	00800044 	movi	r2,1
   81524:	a0800115 	stw	r2,4(r20)
   81528:	003f7406 	br	812fc <_malloc_r+0x4a8>
   8152c:	1805d0ba 	srai	r2,r3,2
   81530:	01c00044 	movi	r7,1
   81534:	30c00117 	ldw	r3,4(r6)
   81538:	388e983a 	sll	r7,r7,r2
   8153c:	2805883a 	mov	r2,r5
   81540:	38c6b03a 	or	r3,r7,r3
   81544:	30c00115 	stw	r3,4(r6)
   81548:	003f9b06 	br	813b8 <_malloc_r+0x564>
   8154c:	00c15504 	movi	r3,1364
   81550:	18801a36 	bltu	r3,r2,815bc <_malloc_r+0x768>
   81554:	8804d4ba 	srli	r2,r17,18
   81558:	12001f44 	addi	r8,r2,125
   8155c:	11c01f04 	addi	r7,r2,124
   81560:	4209883a 	add	r4,r8,r8
   81564:	003e5906 	br	80ecc <_malloc_r+0x78>
   81568:	ad400404 	addi	r21,r21,16
   8156c:	003f1706 	br	811cc <_malloc_r+0x378>
   81570:	00c01504 	movi	r3,84
   81574:	18802336 	bltu	r3,r2,81604 <_malloc_r+0x7b0>
   81578:	3804d33a 	srli	r2,r7,12
   8157c:	11401bc4 	addi	r5,r2,111
   81580:	10c01b84 	addi	r3,r2,110
   81584:	294b883a 	add	r5,r5,r5
   81588:	003f7b06 	br	81378 <_malloc_r+0x524>
   8158c:	9c000217 	ldw	r16,8(r19)
   81590:	00bfff04 	movi	r2,-4
   81594:	80c00117 	ldw	r3,4(r16)
   81598:	1886703a 	and	r3,r3,r2
   8159c:	003f5306 	br	812ec <_malloc_r+0x498>
   815a0:	3083ffcc 	andi	r2,r6,4095
   815a4:	103f181e 	bne	r2,zero,81208 <_malloc_r+0x3b4>
   815a8:	99000217 	ldw	r4,8(r19)
   815ac:	b545883a 	add	r2,r22,r21
   815b0:	10800054 	ori	r2,r2,1
   815b4:	20800115 	stw	r2,4(r4)
   815b8:	003f3e06 	br	812b4 <_malloc_r+0x460>
   815bc:	01003f84 	movi	r4,254
   815c0:	02001fc4 	movi	r8,127
   815c4:	01c01f84 	movi	r7,126
   815c8:	003e4006 	br	80ecc <_malloc_r+0x78>
   815cc:	00800234 	movhi	r2,8
   815d0:	109c5304 	addi	r2,r2,29004
   815d4:	15000015 	stw	r20,0(r2)
   815d8:	003f1106 	br	81220 <_malloc_r+0x3cc>
   815dc:	00800044 	movi	r2,1
   815e0:	002b883a 	mov	r21,zero
   815e4:	003f1f06 	br	81264 <_malloc_r+0x410>
   815e8:	81400204 	addi	r5,r16,8
   815ec:	9009883a 	mov	r4,r18
   815f0:	00828dc0 	call	828dc <_free_r>
   815f4:	00800274 	movhi	r2,9
   815f8:	10a31104 	addi	r2,r2,-29628
   815fc:	10c00017 	ldw	r3,0(r2)
   81600:	003f2c06 	br	812b4 <_malloc_r+0x460>
   81604:	00c05504 	movi	r3,340
   81608:	18800536 	bltu	r3,r2,81620 <_malloc_r+0x7cc>
   8160c:	3804d3fa 	srli	r2,r7,15
   81610:	11401e04 	addi	r5,r2,120
   81614:	10c01dc4 	addi	r3,r2,119
   81618:	294b883a 	add	r5,r5,r5
   8161c:	003f5606 	br	81378 <_malloc_r+0x524>
   81620:	00c15504 	movi	r3,1364
   81624:	18800536 	bltu	r3,r2,8163c <_malloc_r+0x7e8>
   81628:	3804d4ba 	srli	r2,r7,18
   8162c:	11401f44 	addi	r5,r2,125
   81630:	10c01f04 	addi	r3,r2,124
   81634:	294b883a 	add	r5,r5,r5
   81638:	003f4f06 	br	81378 <_malloc_r+0x524>
   8163c:	01403f84 	movi	r5,254
   81640:	00c01f84 	movi	r3,126
   81644:	003f4c06 	br	81378 <_malloc_r+0x524>
   81648:	98800117 	ldw	r2,4(r19)
   8164c:	003fa006 	br	814d0 <_malloc_r+0x67c>
   81650:	8808d0fa 	srli	r4,r17,3
   81654:	20800044 	addi	r2,r4,1
   81658:	1085883a 	add	r2,r2,r2
   8165c:	003e9006 	br	810a0 <_malloc_r+0x24c>

00081660 <memchr>:
   81660:	208000cc 	andi	r2,r4,3
   81664:	280f883a 	mov	r7,r5
   81668:	10003426 	beq	r2,zero,8173c <memchr+0xdc>
   8166c:	30bfffc4 	addi	r2,r6,-1
   81670:	30001a26 	beq	r6,zero,816dc <memchr+0x7c>
   81674:	20c00003 	ldbu	r3,0(r4)
   81678:	29803fcc 	andi	r6,r5,255
   8167c:	30c0051e 	bne	r6,r3,81694 <memchr+0x34>
   81680:	00001806 	br	816e4 <memchr+0x84>
   81684:	10001526 	beq	r2,zero,816dc <memchr+0x7c>
   81688:	20c00003 	ldbu	r3,0(r4)
   8168c:	10bfffc4 	addi	r2,r2,-1
   81690:	30c01426 	beq	r6,r3,816e4 <memchr+0x84>
   81694:	21000044 	addi	r4,r4,1
   81698:	20c000cc 	andi	r3,r4,3
   8169c:	183ff91e 	bne	r3,zero,81684 <memchr+0x24>
   816a0:	020000c4 	movi	r8,3
   816a4:	40801136 	bltu	r8,r2,816ec <memchr+0x8c>
   816a8:	10000c26 	beq	r2,zero,816dc <memchr+0x7c>
   816ac:	20c00003 	ldbu	r3,0(r4)
   816b0:	29403fcc 	andi	r5,r5,255
   816b4:	28c00b26 	beq	r5,r3,816e4 <memchr+0x84>
   816b8:	20c00044 	addi	r3,r4,1
   816bc:	39803fcc 	andi	r6,r7,255
   816c0:	2089883a 	add	r4,r4,r2
   816c4:	00000306 	br	816d4 <memchr+0x74>
   816c8:	18c00044 	addi	r3,r3,1
   816cc:	197fffc3 	ldbu	r5,-1(r3)
   816d0:	31400526 	beq	r6,r5,816e8 <memchr+0x88>
   816d4:	1805883a 	mov	r2,r3
   816d8:	20fffb1e 	bne	r4,r3,816c8 <memchr+0x68>
   816dc:	0005883a 	mov	r2,zero
   816e0:	f800283a 	ret
   816e4:	2005883a 	mov	r2,r4
   816e8:	f800283a 	ret
   816ec:	28c03fcc 	andi	r3,r5,255
   816f0:	1812923a 	slli	r9,r3,8
   816f4:	02ffbff4 	movhi	r11,65279
   816f8:	02a02074 	movhi	r10,32897
   816fc:	48d2b03a 	or	r9,r9,r3
   81700:	4806943a 	slli	r3,r9,16
   81704:	5affbfc4 	addi	r11,r11,-257
   81708:	52a02004 	addi	r10,r10,-32640
   8170c:	48d2b03a 	or	r9,r9,r3
   81710:	20c00017 	ldw	r3,0(r4)
   81714:	48c6f03a 	xor	r3,r9,r3
   81718:	1acd883a 	add	r6,r3,r11
   8171c:	00c6303a 	nor	r3,zero,r3
   81720:	30c6703a 	and	r3,r6,r3
   81724:	1a86703a 	and	r3,r3,r10
   81728:	183fe01e 	bne	r3,zero,816ac <memchr+0x4c>
   8172c:	10bfff04 	addi	r2,r2,-4
   81730:	21000104 	addi	r4,r4,4
   81734:	40bff636 	bltu	r8,r2,81710 <memchr+0xb0>
   81738:	003fdb06 	br	816a8 <memchr+0x48>
   8173c:	3005883a 	mov	r2,r6
   81740:	003fd706 	br	816a0 <memchr+0x40>

00081744 <memcpy>:
   81744:	defffd04 	addi	sp,sp,-12
   81748:	dfc00215 	stw	ra,8(sp)
   8174c:	dc400115 	stw	r17,4(sp)
   81750:	dc000015 	stw	r16,0(sp)
   81754:	00c003c4 	movi	r3,15
   81758:	2005883a 	mov	r2,r4
   8175c:	1980452e 	bgeu	r3,r6,81874 <memcpy+0x130>
   81760:	2906b03a 	or	r3,r5,r4
   81764:	18c000cc 	andi	r3,r3,3
   81768:	1800441e 	bne	r3,zero,8187c <memcpy+0x138>
   8176c:	347ffc04 	addi	r17,r6,-16
   81770:	8822d13a 	srli	r17,r17,4
   81774:	28c00104 	addi	r3,r5,4
   81778:	23400104 	addi	r13,r4,4
   8177c:	8820913a 	slli	r16,r17,4
   81780:	2b000204 	addi	r12,r5,8
   81784:	22c00204 	addi	r11,r4,8
   81788:	84000504 	addi	r16,r16,20
   8178c:	2a800304 	addi	r10,r5,12
   81790:	22400304 	addi	r9,r4,12
   81794:	2c21883a 	add	r16,r5,r16
   81798:	2811883a 	mov	r8,r5
   8179c:	200f883a 	mov	r7,r4
   817a0:	41000017 	ldw	r4,0(r8)
   817a4:	1fc00017 	ldw	ra,0(r3)
   817a8:	63c00017 	ldw	r15,0(r12)
   817ac:	39000015 	stw	r4,0(r7)
   817b0:	53800017 	ldw	r14,0(r10)
   817b4:	6fc00015 	stw	ra,0(r13)
   817b8:	5bc00015 	stw	r15,0(r11)
   817bc:	4b800015 	stw	r14,0(r9)
   817c0:	18c00404 	addi	r3,r3,16
   817c4:	39c00404 	addi	r7,r7,16
   817c8:	42000404 	addi	r8,r8,16
   817cc:	6b400404 	addi	r13,r13,16
   817d0:	63000404 	addi	r12,r12,16
   817d4:	5ac00404 	addi	r11,r11,16
   817d8:	52800404 	addi	r10,r10,16
   817dc:	4a400404 	addi	r9,r9,16
   817e0:	1c3fef1e 	bne	r3,r16,817a0 <memcpy+0x5c>
   817e4:	89c00044 	addi	r7,r17,1
   817e8:	380e913a 	slli	r7,r7,4
   817ec:	310003cc 	andi	r4,r6,15
   817f0:	02c000c4 	movi	r11,3
   817f4:	11c7883a 	add	r3,r2,r7
   817f8:	29cb883a 	add	r5,r5,r7
   817fc:	5900212e 	bgeu	r11,r4,81884 <memcpy+0x140>
   81800:	1813883a 	mov	r9,r3
   81804:	2811883a 	mov	r8,r5
   81808:	200f883a 	mov	r7,r4
   8180c:	42800017 	ldw	r10,0(r8)
   81810:	4a400104 	addi	r9,r9,4
   81814:	39ffff04 	addi	r7,r7,-4
   81818:	4abfff15 	stw	r10,-4(r9)
   8181c:	42000104 	addi	r8,r8,4
   81820:	59fffa36 	bltu	r11,r7,8180c <memcpy+0xc8>
   81824:	213fff04 	addi	r4,r4,-4
   81828:	2008d0ba 	srli	r4,r4,2
   8182c:	318000cc 	andi	r6,r6,3
   81830:	21000044 	addi	r4,r4,1
   81834:	2109883a 	add	r4,r4,r4
   81838:	2109883a 	add	r4,r4,r4
   8183c:	1907883a 	add	r3,r3,r4
   81840:	290b883a 	add	r5,r5,r4
   81844:	30000626 	beq	r6,zero,81860 <memcpy+0x11c>
   81848:	198d883a 	add	r6,r3,r6
   8184c:	29c00003 	ldbu	r7,0(r5)
   81850:	18c00044 	addi	r3,r3,1
   81854:	29400044 	addi	r5,r5,1
   81858:	19ffffc5 	stb	r7,-1(r3)
   8185c:	19bffb1e 	bne	r3,r6,8184c <memcpy+0x108>
   81860:	dfc00217 	ldw	ra,8(sp)
   81864:	dc400117 	ldw	r17,4(sp)
   81868:	dc000017 	ldw	r16,0(sp)
   8186c:	dec00304 	addi	sp,sp,12
   81870:	f800283a 	ret
   81874:	2007883a 	mov	r3,r4
   81878:	003ff206 	br	81844 <memcpy+0x100>
   8187c:	2007883a 	mov	r3,r4
   81880:	003ff106 	br	81848 <memcpy+0x104>
   81884:	200d883a 	mov	r6,r4
   81888:	003fee06 	br	81844 <memcpy+0x100>

0008188c <memmove>:
   8188c:	2005883a 	mov	r2,r4
   81890:	29000b2e 	bgeu	r5,r4,818c0 <memmove+0x34>
   81894:	298f883a 	add	r7,r5,r6
   81898:	21c0092e 	bgeu	r4,r7,818c0 <memmove+0x34>
   8189c:	2187883a 	add	r3,r4,r6
   818a0:	198bc83a 	sub	r5,r3,r6
   818a4:	30004826 	beq	r6,zero,819c8 <memmove+0x13c>
   818a8:	39ffffc4 	addi	r7,r7,-1
   818ac:	39000003 	ldbu	r4,0(r7)
   818b0:	18ffffc4 	addi	r3,r3,-1
   818b4:	19000005 	stb	r4,0(r3)
   818b8:	28fffb1e 	bne	r5,r3,818a8 <memmove+0x1c>
   818bc:	f800283a 	ret
   818c0:	00c003c4 	movi	r3,15
   818c4:	1980412e 	bgeu	r3,r6,819cc <memmove+0x140>
   818c8:	2886b03a 	or	r3,r5,r2
   818cc:	18c000cc 	andi	r3,r3,3
   818d0:	1800401e 	bne	r3,zero,819d4 <memmove+0x148>
   818d4:	33fffc04 	addi	r15,r6,-16
   818d8:	781ed13a 	srli	r15,r15,4
   818dc:	28c00104 	addi	r3,r5,4
   818e0:	13400104 	addi	r13,r2,4
   818e4:	781c913a 	slli	r14,r15,4
   818e8:	2b000204 	addi	r12,r5,8
   818ec:	12c00204 	addi	r11,r2,8
   818f0:	73800504 	addi	r14,r14,20
   818f4:	2a800304 	addi	r10,r5,12
   818f8:	12400304 	addi	r9,r2,12
   818fc:	2b9d883a 	add	r14,r5,r14
   81900:	2811883a 	mov	r8,r5
   81904:	100f883a 	mov	r7,r2
   81908:	41000017 	ldw	r4,0(r8)
   8190c:	39c00404 	addi	r7,r7,16
   81910:	18c00404 	addi	r3,r3,16
   81914:	393ffc15 	stw	r4,-16(r7)
   81918:	193ffc17 	ldw	r4,-16(r3)
   8191c:	6b400404 	addi	r13,r13,16
   81920:	5ac00404 	addi	r11,r11,16
   81924:	693ffc15 	stw	r4,-16(r13)
   81928:	61000017 	ldw	r4,0(r12)
   8192c:	4a400404 	addi	r9,r9,16
   81930:	42000404 	addi	r8,r8,16
   81934:	593ffc15 	stw	r4,-16(r11)
   81938:	51000017 	ldw	r4,0(r10)
   8193c:	63000404 	addi	r12,r12,16
   81940:	52800404 	addi	r10,r10,16
   81944:	493ffc15 	stw	r4,-16(r9)
   81948:	1bbfef1e 	bne	r3,r14,81908 <memmove+0x7c>
   8194c:	79000044 	addi	r4,r15,1
   81950:	2008913a 	slli	r4,r4,4
   81954:	328003cc 	andi	r10,r6,15
   81958:	02c000c4 	movi	r11,3
   8195c:	1107883a 	add	r3,r2,r4
   81960:	290b883a 	add	r5,r5,r4
   81964:	5a801e2e 	bgeu	r11,r10,819e0 <memmove+0x154>
   81968:	1813883a 	mov	r9,r3
   8196c:	2811883a 	mov	r8,r5
   81970:	500f883a 	mov	r7,r10
   81974:	41000017 	ldw	r4,0(r8)
   81978:	4a400104 	addi	r9,r9,4
   8197c:	39ffff04 	addi	r7,r7,-4
   81980:	493fff15 	stw	r4,-4(r9)
   81984:	42000104 	addi	r8,r8,4
   81988:	59fffa36 	bltu	r11,r7,81974 <memmove+0xe8>
   8198c:	513fff04 	addi	r4,r10,-4
   81990:	2008d0ba 	srli	r4,r4,2
   81994:	318000cc 	andi	r6,r6,3
   81998:	21000044 	addi	r4,r4,1
   8199c:	2109883a 	add	r4,r4,r4
   819a0:	2109883a 	add	r4,r4,r4
   819a4:	1907883a 	add	r3,r3,r4
   819a8:	290b883a 	add	r5,r5,r4
   819ac:	30000b26 	beq	r6,zero,819dc <memmove+0x150>
   819b0:	198d883a 	add	r6,r3,r6
   819b4:	29c00003 	ldbu	r7,0(r5)
   819b8:	18c00044 	addi	r3,r3,1
   819bc:	29400044 	addi	r5,r5,1
   819c0:	19ffffc5 	stb	r7,-1(r3)
   819c4:	19bffb1e 	bne	r3,r6,819b4 <memmove+0x128>
   819c8:	f800283a 	ret
   819cc:	1007883a 	mov	r3,r2
   819d0:	003ff606 	br	819ac <memmove+0x120>
   819d4:	1007883a 	mov	r3,r2
   819d8:	003ff506 	br	819b0 <memmove+0x124>
   819dc:	f800283a 	ret
   819e0:	500d883a 	mov	r6,r10
   819e4:	003ff106 	br	819ac <memmove+0x120>

000819e8 <memset>:
   819e8:	20c000cc 	andi	r3,r4,3
   819ec:	2005883a 	mov	r2,r4
   819f0:	18004426 	beq	r3,zero,81b04 <memset+0x11c>
   819f4:	31ffffc4 	addi	r7,r6,-1
   819f8:	30004026 	beq	r6,zero,81afc <memset+0x114>
   819fc:	2813883a 	mov	r9,r5
   81a00:	200d883a 	mov	r6,r4
   81a04:	2007883a 	mov	r3,r4
   81a08:	00000406 	br	81a1c <memset+0x34>
   81a0c:	3a3fffc4 	addi	r8,r7,-1
   81a10:	31800044 	addi	r6,r6,1
   81a14:	38003926 	beq	r7,zero,81afc <memset+0x114>
   81a18:	400f883a 	mov	r7,r8
   81a1c:	18c00044 	addi	r3,r3,1
   81a20:	32400005 	stb	r9,0(r6)
   81a24:	1a0000cc 	andi	r8,r3,3
   81a28:	403ff81e 	bne	r8,zero,81a0c <memset+0x24>
   81a2c:	010000c4 	movi	r4,3
   81a30:	21c02d2e 	bgeu	r4,r7,81ae8 <memset+0x100>
   81a34:	29003fcc 	andi	r4,r5,255
   81a38:	200c923a 	slli	r6,r4,8
   81a3c:	3108b03a 	or	r4,r6,r4
   81a40:	200c943a 	slli	r6,r4,16
   81a44:	218cb03a 	or	r6,r4,r6
   81a48:	010003c4 	movi	r4,15
   81a4c:	21c0182e 	bgeu	r4,r7,81ab0 <memset+0xc8>
   81a50:	3b3ffc04 	addi	r12,r7,-16
   81a54:	6018d13a 	srli	r12,r12,4
   81a58:	1a000104 	addi	r8,r3,4
   81a5c:	1ac00204 	addi	r11,r3,8
   81a60:	6008913a 	slli	r4,r12,4
   81a64:	1a800304 	addi	r10,r3,12
   81a68:	1813883a 	mov	r9,r3
   81a6c:	21000504 	addi	r4,r4,20
   81a70:	1909883a 	add	r4,r3,r4
   81a74:	49800015 	stw	r6,0(r9)
   81a78:	41800015 	stw	r6,0(r8)
   81a7c:	59800015 	stw	r6,0(r11)
   81a80:	51800015 	stw	r6,0(r10)
   81a84:	42000404 	addi	r8,r8,16
   81a88:	4a400404 	addi	r9,r9,16
   81a8c:	5ac00404 	addi	r11,r11,16
   81a90:	52800404 	addi	r10,r10,16
   81a94:	413ff71e 	bne	r8,r4,81a74 <memset+0x8c>
   81a98:	63000044 	addi	r12,r12,1
   81a9c:	6018913a 	slli	r12,r12,4
   81aa0:	39c003cc 	andi	r7,r7,15
   81aa4:	010000c4 	movi	r4,3
   81aa8:	1b07883a 	add	r3,r3,r12
   81aac:	21c00e2e 	bgeu	r4,r7,81ae8 <memset+0x100>
   81ab0:	1813883a 	mov	r9,r3
   81ab4:	3811883a 	mov	r8,r7
   81ab8:	010000c4 	movi	r4,3
   81abc:	49800015 	stw	r6,0(r9)
   81ac0:	423fff04 	addi	r8,r8,-4
   81ac4:	4a400104 	addi	r9,r9,4
   81ac8:	223ffc36 	bltu	r4,r8,81abc <memset+0xd4>
   81acc:	393fff04 	addi	r4,r7,-4
   81ad0:	2008d0ba 	srli	r4,r4,2
   81ad4:	39c000cc 	andi	r7,r7,3
   81ad8:	21000044 	addi	r4,r4,1
   81adc:	2109883a 	add	r4,r4,r4
   81ae0:	2109883a 	add	r4,r4,r4
   81ae4:	1907883a 	add	r3,r3,r4
   81ae8:	38000526 	beq	r7,zero,81b00 <memset+0x118>
   81aec:	19cf883a 	add	r7,r3,r7
   81af0:	19400005 	stb	r5,0(r3)
   81af4:	18c00044 	addi	r3,r3,1
   81af8:	38fffd1e 	bne	r7,r3,81af0 <memset+0x108>
   81afc:	f800283a 	ret
   81b00:	f800283a 	ret
   81b04:	2007883a 	mov	r3,r4
   81b08:	300f883a 	mov	r7,r6
   81b0c:	003fc706 	br	81a2c <memset+0x44>

00081b10 <_realloc_r>:
   81b10:	defff604 	addi	sp,sp,-40
   81b14:	dc800215 	stw	r18,8(sp)
   81b18:	dfc00915 	stw	ra,36(sp)
   81b1c:	df000815 	stw	fp,32(sp)
   81b20:	ddc00715 	stw	r23,28(sp)
   81b24:	dd800615 	stw	r22,24(sp)
   81b28:	dd400515 	stw	r21,20(sp)
   81b2c:	dd000415 	stw	r20,16(sp)
   81b30:	dcc00315 	stw	r19,12(sp)
   81b34:	dc400115 	stw	r17,4(sp)
   81b38:	dc000015 	stw	r16,0(sp)
   81b3c:	3025883a 	mov	r18,r6
   81b40:	2800b726 	beq	r5,zero,81e20 <_realloc_r+0x310>
   81b44:	282b883a 	mov	r21,r5
   81b48:	2029883a 	mov	r20,r4
   81b4c:	00836480 	call	83648 <__malloc_lock>
   81b50:	a8bfff17 	ldw	r2,-4(r21)
   81b54:	043fff04 	movi	r16,-4
   81b58:	90c002c4 	addi	r3,r18,11
   81b5c:	01000584 	movi	r4,22
   81b60:	acfffe04 	addi	r19,r21,-8
   81b64:	1420703a 	and	r16,r2,r16
   81b68:	20c0332e 	bgeu	r4,r3,81c38 <_realloc_r+0x128>
   81b6c:	047ffe04 	movi	r17,-8
   81b70:	1c62703a 	and	r17,r3,r17
   81b74:	8807883a 	mov	r3,r17
   81b78:	88005816 	blt	r17,zero,81cdc <_realloc_r+0x1cc>
   81b7c:	8c805736 	bltu	r17,r18,81cdc <_realloc_r+0x1cc>
   81b80:	80c0300e 	bge	r16,r3,81c44 <_realloc_r+0x134>
   81b84:	07000234 	movhi	fp,8
   81b88:	e716c104 	addi	fp,fp,23300
   81b8c:	e1c00217 	ldw	r7,8(fp)
   81b90:	9c09883a 	add	r4,r19,r16
   81b94:	22000117 	ldw	r8,4(r4)
   81b98:	21c06326 	beq	r4,r7,81d28 <_realloc_r+0x218>
   81b9c:	017fff84 	movi	r5,-2
   81ba0:	414a703a 	and	r5,r8,r5
   81ba4:	214b883a 	add	r5,r4,r5
   81ba8:	29800117 	ldw	r6,4(r5)
   81bac:	3180004c 	andi	r6,r6,1
   81bb0:	30003f26 	beq	r6,zero,81cb0 <_realloc_r+0x1a0>
   81bb4:	1080004c 	andi	r2,r2,1
   81bb8:	10008326 	beq	r2,zero,81dc8 <_realloc_r+0x2b8>
   81bbc:	900b883a 	mov	r5,r18
   81bc0:	a009883a 	mov	r4,r20
   81bc4:	0080e540 	call	80e54 <_malloc_r>
   81bc8:	1025883a 	mov	r18,r2
   81bcc:	10011e26 	beq	r2,zero,82048 <_realloc_r+0x538>
   81bd0:	a93fff17 	ldw	r4,-4(r21)
   81bd4:	10fffe04 	addi	r3,r2,-8
   81bd8:	00bfff84 	movi	r2,-2
   81bdc:	2084703a 	and	r2,r4,r2
   81be0:	9885883a 	add	r2,r19,r2
   81be4:	1880ee26 	beq	r3,r2,81fa0 <_realloc_r+0x490>
   81be8:	81bfff04 	addi	r6,r16,-4
   81bec:	00800904 	movi	r2,36
   81bf0:	1180b836 	bltu	r2,r6,81ed4 <_realloc_r+0x3c4>
   81bf4:	00c004c4 	movi	r3,19
   81bf8:	19809636 	bltu	r3,r6,81e54 <_realloc_r+0x344>
   81bfc:	9005883a 	mov	r2,r18
   81c00:	a807883a 	mov	r3,r21
   81c04:	19000017 	ldw	r4,0(r3)
   81c08:	11000015 	stw	r4,0(r2)
   81c0c:	19000117 	ldw	r4,4(r3)
   81c10:	11000115 	stw	r4,4(r2)
   81c14:	18c00217 	ldw	r3,8(r3)
   81c18:	10c00215 	stw	r3,8(r2)
   81c1c:	a80b883a 	mov	r5,r21
   81c20:	a009883a 	mov	r4,r20
   81c24:	00828dc0 	call	828dc <_free_r>
   81c28:	a009883a 	mov	r4,r20
   81c2c:	008366c0 	call	8366c <__malloc_unlock>
   81c30:	9005883a 	mov	r2,r18
   81c34:	00001206 	br	81c80 <_realloc_r+0x170>
   81c38:	00c00404 	movi	r3,16
   81c3c:	1823883a 	mov	r17,r3
   81c40:	003fce06 	br	81b7c <_realloc_r+0x6c>
   81c44:	a825883a 	mov	r18,r21
   81c48:	8445c83a 	sub	r2,r16,r17
   81c4c:	00c003c4 	movi	r3,15
   81c50:	18802636 	bltu	r3,r2,81cec <_realloc_r+0x1dc>
   81c54:	99800117 	ldw	r6,4(r19)
   81c58:	9c07883a 	add	r3,r19,r16
   81c5c:	3180004c 	andi	r6,r6,1
   81c60:	3420b03a 	or	r16,r6,r16
   81c64:	9c000115 	stw	r16,4(r19)
   81c68:	18800117 	ldw	r2,4(r3)
   81c6c:	10800054 	ori	r2,r2,1
   81c70:	18800115 	stw	r2,4(r3)
   81c74:	a009883a 	mov	r4,r20
   81c78:	008366c0 	call	8366c <__malloc_unlock>
   81c7c:	9005883a 	mov	r2,r18
   81c80:	dfc00917 	ldw	ra,36(sp)
   81c84:	df000817 	ldw	fp,32(sp)
   81c88:	ddc00717 	ldw	r23,28(sp)
   81c8c:	dd800617 	ldw	r22,24(sp)
   81c90:	dd400517 	ldw	r21,20(sp)
   81c94:	dd000417 	ldw	r20,16(sp)
   81c98:	dcc00317 	ldw	r19,12(sp)
   81c9c:	dc800217 	ldw	r18,8(sp)
   81ca0:	dc400117 	ldw	r17,4(sp)
   81ca4:	dc000017 	ldw	r16,0(sp)
   81ca8:	dec00a04 	addi	sp,sp,40
   81cac:	f800283a 	ret
   81cb0:	017fff04 	movi	r5,-4
   81cb4:	414a703a 	and	r5,r8,r5
   81cb8:	814d883a 	add	r6,r16,r5
   81cbc:	30c01f16 	blt	r6,r3,81d3c <_realloc_r+0x22c>
   81cc0:	20800317 	ldw	r2,12(r4)
   81cc4:	20c00217 	ldw	r3,8(r4)
   81cc8:	a825883a 	mov	r18,r21
   81ccc:	3021883a 	mov	r16,r6
   81cd0:	18800315 	stw	r2,12(r3)
   81cd4:	10c00215 	stw	r3,8(r2)
   81cd8:	003fdb06 	br	81c48 <_realloc_r+0x138>
   81cdc:	00800304 	movi	r2,12
   81ce0:	a0800015 	stw	r2,0(r20)
   81ce4:	0005883a 	mov	r2,zero
   81ce8:	003fe506 	br	81c80 <_realloc_r+0x170>
   81cec:	98c00117 	ldw	r3,4(r19)
   81cf0:	9c4b883a 	add	r5,r19,r17
   81cf4:	11000054 	ori	r4,r2,1
   81cf8:	18c0004c 	andi	r3,r3,1
   81cfc:	1c62b03a 	or	r17,r3,r17
   81d00:	9c400115 	stw	r17,4(r19)
   81d04:	29000115 	stw	r4,4(r5)
   81d08:	2885883a 	add	r2,r5,r2
   81d0c:	10c00117 	ldw	r3,4(r2)
   81d10:	29400204 	addi	r5,r5,8
   81d14:	a009883a 	mov	r4,r20
   81d18:	18c00054 	ori	r3,r3,1
   81d1c:	10c00115 	stw	r3,4(r2)
   81d20:	00828dc0 	call	828dc <_free_r>
   81d24:	003fd306 	br	81c74 <_realloc_r+0x164>
   81d28:	017fff04 	movi	r5,-4
   81d2c:	414a703a 	and	r5,r8,r5
   81d30:	89800404 	addi	r6,r17,16
   81d34:	8151883a 	add	r8,r16,r5
   81d38:	4180590e 	bge	r8,r6,81ea0 <_realloc_r+0x390>
   81d3c:	1080004c 	andi	r2,r2,1
   81d40:	103f9e1e 	bne	r2,zero,81bbc <_realloc_r+0xac>
   81d44:	adbffe17 	ldw	r22,-8(r21)
   81d48:	00bfff04 	movi	r2,-4
   81d4c:	9dadc83a 	sub	r22,r19,r22
   81d50:	b1800117 	ldw	r6,4(r22)
   81d54:	3084703a 	and	r2,r6,r2
   81d58:	20002026 	beq	r4,zero,81ddc <_realloc_r+0x2cc>
   81d5c:	80af883a 	add	r23,r16,r2
   81d60:	b96f883a 	add	r23,r23,r5
   81d64:	21c05f26 	beq	r4,r7,81ee4 <_realloc_r+0x3d4>
   81d68:	b8c01c16 	blt	r23,r3,81ddc <_realloc_r+0x2cc>
   81d6c:	20800317 	ldw	r2,12(r4)
   81d70:	20c00217 	ldw	r3,8(r4)
   81d74:	81bfff04 	addi	r6,r16,-4
   81d78:	01000904 	movi	r4,36
   81d7c:	18800315 	stw	r2,12(r3)
   81d80:	10c00215 	stw	r3,8(r2)
   81d84:	b0c00217 	ldw	r3,8(r22)
   81d88:	b0800317 	ldw	r2,12(r22)
   81d8c:	b4800204 	addi	r18,r22,8
   81d90:	18800315 	stw	r2,12(r3)
   81d94:	10c00215 	stw	r3,8(r2)
   81d98:	21801b36 	bltu	r4,r6,81e08 <_realloc_r+0x2f8>
   81d9c:	008004c4 	movi	r2,19
   81da0:	1180352e 	bgeu	r2,r6,81e78 <_realloc_r+0x368>
   81da4:	a8800017 	ldw	r2,0(r21)
   81da8:	b0800215 	stw	r2,8(r22)
   81dac:	a8800117 	ldw	r2,4(r21)
   81db0:	b0800315 	stw	r2,12(r22)
   81db4:	008006c4 	movi	r2,27
   81db8:	11807f36 	bltu	r2,r6,81fb8 <_realloc_r+0x4a8>
   81dbc:	b0800404 	addi	r2,r22,16
   81dc0:	ad400204 	addi	r21,r21,8
   81dc4:	00002d06 	br	81e7c <_realloc_r+0x36c>
   81dc8:	adbffe17 	ldw	r22,-8(r21)
   81dcc:	00bfff04 	movi	r2,-4
   81dd0:	9dadc83a 	sub	r22,r19,r22
   81dd4:	b1000117 	ldw	r4,4(r22)
   81dd8:	2084703a 	and	r2,r4,r2
   81ddc:	b03f7726 	beq	r22,zero,81bbc <_realloc_r+0xac>
   81de0:	80af883a 	add	r23,r16,r2
   81de4:	b8ff7516 	blt	r23,r3,81bbc <_realloc_r+0xac>
   81de8:	b0800317 	ldw	r2,12(r22)
   81dec:	b0c00217 	ldw	r3,8(r22)
   81df0:	81bfff04 	addi	r6,r16,-4
   81df4:	01000904 	movi	r4,36
   81df8:	18800315 	stw	r2,12(r3)
   81dfc:	10c00215 	stw	r3,8(r2)
   81e00:	b4800204 	addi	r18,r22,8
   81e04:	21bfe52e 	bgeu	r4,r6,81d9c <_realloc_r+0x28c>
   81e08:	a80b883a 	mov	r5,r21
   81e0c:	9009883a 	mov	r4,r18
   81e10:	008188c0 	call	8188c <memmove>
   81e14:	b821883a 	mov	r16,r23
   81e18:	b027883a 	mov	r19,r22
   81e1c:	003f8a06 	br	81c48 <_realloc_r+0x138>
   81e20:	300b883a 	mov	r5,r6
   81e24:	dfc00917 	ldw	ra,36(sp)
   81e28:	df000817 	ldw	fp,32(sp)
   81e2c:	ddc00717 	ldw	r23,28(sp)
   81e30:	dd800617 	ldw	r22,24(sp)
   81e34:	dd400517 	ldw	r21,20(sp)
   81e38:	dd000417 	ldw	r20,16(sp)
   81e3c:	dcc00317 	ldw	r19,12(sp)
   81e40:	dc800217 	ldw	r18,8(sp)
   81e44:	dc400117 	ldw	r17,4(sp)
   81e48:	dc000017 	ldw	r16,0(sp)
   81e4c:	dec00a04 	addi	sp,sp,40
   81e50:	0080e541 	jmpi	80e54 <_malloc_r>
   81e54:	a8c00017 	ldw	r3,0(r21)
   81e58:	90c00015 	stw	r3,0(r18)
   81e5c:	a8c00117 	ldw	r3,4(r21)
   81e60:	90c00115 	stw	r3,4(r18)
   81e64:	00c006c4 	movi	r3,27
   81e68:	19804536 	bltu	r3,r6,81f80 <_realloc_r+0x470>
   81e6c:	90800204 	addi	r2,r18,8
   81e70:	a8c00204 	addi	r3,r21,8
   81e74:	003f6306 	br	81c04 <_realloc_r+0xf4>
   81e78:	9005883a 	mov	r2,r18
   81e7c:	a8c00017 	ldw	r3,0(r21)
   81e80:	b821883a 	mov	r16,r23
   81e84:	b027883a 	mov	r19,r22
   81e88:	10c00015 	stw	r3,0(r2)
   81e8c:	a8c00117 	ldw	r3,4(r21)
   81e90:	10c00115 	stw	r3,4(r2)
   81e94:	a8c00217 	ldw	r3,8(r21)
   81e98:	10c00215 	stw	r3,8(r2)
   81e9c:	003f6a06 	br	81c48 <_realloc_r+0x138>
   81ea0:	9c67883a 	add	r19,r19,r17
   81ea4:	4445c83a 	sub	r2,r8,r17
   81ea8:	e4c00215 	stw	r19,8(fp)
   81eac:	10800054 	ori	r2,r2,1
   81eb0:	98800115 	stw	r2,4(r19)
   81eb4:	a8bfff17 	ldw	r2,-4(r21)
   81eb8:	a009883a 	mov	r4,r20
   81ebc:	1080004c 	andi	r2,r2,1
   81ec0:	1462b03a 	or	r17,r2,r17
   81ec4:	ac7fff15 	stw	r17,-4(r21)
   81ec8:	008366c0 	call	8366c <__malloc_unlock>
   81ecc:	a805883a 	mov	r2,r21
   81ed0:	003f6b06 	br	81c80 <_realloc_r+0x170>
   81ed4:	a80b883a 	mov	r5,r21
   81ed8:	9009883a 	mov	r4,r18
   81edc:	008188c0 	call	8188c <memmove>
   81ee0:	003f4e06 	br	81c1c <_realloc_r+0x10c>
   81ee4:	89000404 	addi	r4,r17,16
   81ee8:	b93fbc16 	blt	r23,r4,81ddc <_realloc_r+0x2cc>
   81eec:	b0800317 	ldw	r2,12(r22)
   81ef0:	b0c00217 	ldw	r3,8(r22)
   81ef4:	81bfff04 	addi	r6,r16,-4
   81ef8:	01000904 	movi	r4,36
   81efc:	18800315 	stw	r2,12(r3)
   81f00:	10c00215 	stw	r3,8(r2)
   81f04:	b4800204 	addi	r18,r22,8
   81f08:	21804336 	bltu	r4,r6,82018 <_realloc_r+0x508>
   81f0c:	008004c4 	movi	r2,19
   81f10:	11803f2e 	bgeu	r2,r6,82010 <_realloc_r+0x500>
   81f14:	a8800017 	ldw	r2,0(r21)
   81f18:	b0800215 	stw	r2,8(r22)
   81f1c:	a8800117 	ldw	r2,4(r21)
   81f20:	b0800315 	stw	r2,12(r22)
   81f24:	008006c4 	movi	r2,27
   81f28:	11803f36 	bltu	r2,r6,82028 <_realloc_r+0x518>
   81f2c:	b0800404 	addi	r2,r22,16
   81f30:	ad400204 	addi	r21,r21,8
   81f34:	a8c00017 	ldw	r3,0(r21)
   81f38:	10c00015 	stw	r3,0(r2)
   81f3c:	a8c00117 	ldw	r3,4(r21)
   81f40:	10c00115 	stw	r3,4(r2)
   81f44:	a8c00217 	ldw	r3,8(r21)
   81f48:	10c00215 	stw	r3,8(r2)
   81f4c:	b447883a 	add	r3,r22,r17
   81f50:	bc45c83a 	sub	r2,r23,r17
   81f54:	e0c00215 	stw	r3,8(fp)
   81f58:	10800054 	ori	r2,r2,1
   81f5c:	18800115 	stw	r2,4(r3)
   81f60:	b0800117 	ldw	r2,4(r22)
   81f64:	a009883a 	mov	r4,r20
   81f68:	1080004c 	andi	r2,r2,1
   81f6c:	1462b03a 	or	r17,r2,r17
   81f70:	b4400115 	stw	r17,4(r22)
   81f74:	008366c0 	call	8366c <__malloc_unlock>
   81f78:	9005883a 	mov	r2,r18
   81f7c:	003f4006 	br	81c80 <_realloc_r+0x170>
   81f80:	a8c00217 	ldw	r3,8(r21)
   81f84:	90c00215 	stw	r3,8(r18)
   81f88:	a8c00317 	ldw	r3,12(r21)
   81f8c:	90c00315 	stw	r3,12(r18)
   81f90:	30801126 	beq	r6,r2,81fd8 <_realloc_r+0x4c8>
   81f94:	90800404 	addi	r2,r18,16
   81f98:	a8c00404 	addi	r3,r21,16
   81f9c:	003f1906 	br	81c04 <_realloc_r+0xf4>
   81fa0:	90ffff17 	ldw	r3,-4(r18)
   81fa4:	00bfff04 	movi	r2,-4
   81fa8:	a825883a 	mov	r18,r21
   81fac:	1884703a 	and	r2,r3,r2
   81fb0:	80a1883a 	add	r16,r16,r2
   81fb4:	003f2406 	br	81c48 <_realloc_r+0x138>
   81fb8:	a8800217 	ldw	r2,8(r21)
   81fbc:	b0800415 	stw	r2,16(r22)
   81fc0:	a8800317 	ldw	r2,12(r21)
   81fc4:	b0800515 	stw	r2,20(r22)
   81fc8:	31000a26 	beq	r6,r4,81ff4 <_realloc_r+0x4e4>
   81fcc:	b0800604 	addi	r2,r22,24
   81fd0:	ad400404 	addi	r21,r21,16
   81fd4:	003fa906 	br	81e7c <_realloc_r+0x36c>
   81fd8:	a9000417 	ldw	r4,16(r21)
   81fdc:	90800604 	addi	r2,r18,24
   81fe0:	a8c00604 	addi	r3,r21,24
   81fe4:	91000415 	stw	r4,16(r18)
   81fe8:	a9000517 	ldw	r4,20(r21)
   81fec:	91000515 	stw	r4,20(r18)
   81ff0:	003f0406 	br	81c04 <_realloc_r+0xf4>
   81ff4:	a8c00417 	ldw	r3,16(r21)
   81ff8:	ad400604 	addi	r21,r21,24
   81ffc:	b0800804 	addi	r2,r22,32
   82000:	b0c00615 	stw	r3,24(r22)
   82004:	a8ffff17 	ldw	r3,-4(r21)
   82008:	b0c00715 	stw	r3,28(r22)
   8200c:	003f9b06 	br	81e7c <_realloc_r+0x36c>
   82010:	9005883a 	mov	r2,r18
   82014:	003fc706 	br	81f34 <_realloc_r+0x424>
   82018:	a80b883a 	mov	r5,r21
   8201c:	9009883a 	mov	r4,r18
   82020:	008188c0 	call	8188c <memmove>
   82024:	003fc906 	br	81f4c <_realloc_r+0x43c>
   82028:	a8800217 	ldw	r2,8(r21)
   8202c:	b0800415 	stw	r2,16(r22)
   82030:	a8800317 	ldw	r2,12(r21)
   82034:	b0800515 	stw	r2,20(r22)
   82038:	31000726 	beq	r6,r4,82058 <_realloc_r+0x548>
   8203c:	b0800604 	addi	r2,r22,24
   82040:	ad400404 	addi	r21,r21,16
   82044:	003fbb06 	br	81f34 <_realloc_r+0x424>
   82048:	a009883a 	mov	r4,r20
   8204c:	008366c0 	call	8366c <__malloc_unlock>
   82050:	0005883a 	mov	r2,zero
   82054:	003f0a06 	br	81c80 <_realloc_r+0x170>
   82058:	a8c00417 	ldw	r3,16(r21)
   8205c:	ad400604 	addi	r21,r21,24
   82060:	b0800804 	addi	r2,r22,32
   82064:	b0c00615 	stw	r3,24(r22)
   82068:	a8ffff17 	ldw	r3,-4(r21)
   8206c:	b0c00715 	stw	r3,28(r22)
   82070:	003fb006 	br	81f34 <_realloc_r+0x424>

00082074 <_sbrk_r>:
   82074:	defffd04 	addi	sp,sp,-12
   82078:	dc000015 	stw	r16,0(sp)
   8207c:	04000274 	movhi	r16,9
   82080:	dc400115 	stw	r17,4(sp)
   82084:	84230904 	addi	r16,r16,-29660
   82088:	2023883a 	mov	r17,r4
   8208c:	2809883a 	mov	r4,r5
   82090:	dfc00215 	stw	ra,8(sp)
   82094:	80000015 	stw	zero,0(r16)
   82098:	008382c0 	call	8382c <sbrk>
   8209c:	00ffffc4 	movi	r3,-1
   820a0:	10c00526 	beq	r2,r3,820b8 <_sbrk_r+0x44>
   820a4:	dfc00217 	ldw	ra,8(sp)
   820a8:	dc400117 	ldw	r17,4(sp)
   820ac:	dc000017 	ldw	r16,0(sp)
   820b0:	dec00304 	addi	sp,sp,12
   820b4:	f800283a 	ret
   820b8:	80c00017 	ldw	r3,0(r16)
   820bc:	183ff926 	beq	r3,zero,820a4 <_sbrk_r+0x30>
   820c0:	88c00015 	stw	r3,0(r17)
   820c4:	003ff706 	br	820a4 <_sbrk_r+0x30>

000820c8 <__sread>:
   820c8:	defffe04 	addi	sp,sp,-8
   820cc:	dc000015 	stw	r16,0(sp)
   820d0:	2821883a 	mov	r16,r5
   820d4:	2940038f 	ldh	r5,14(r5)
   820d8:	dfc00115 	stw	ra,4(sp)
   820dc:	0082e080 	call	82e08 <_read_r>
   820e0:	10000716 	blt	r2,zero,82100 <__sread+0x38>
   820e4:	80c01417 	ldw	r3,80(r16)
   820e8:	1887883a 	add	r3,r3,r2
   820ec:	80c01415 	stw	r3,80(r16)
   820f0:	dfc00117 	ldw	ra,4(sp)
   820f4:	dc000017 	ldw	r16,0(sp)
   820f8:	dec00204 	addi	sp,sp,8
   820fc:	f800283a 	ret
   82100:	80c0030b 	ldhu	r3,12(r16)
   82104:	18fbffcc 	andi	r3,r3,61439
   82108:	80c0030d 	sth	r3,12(r16)
   8210c:	dfc00117 	ldw	ra,4(sp)
   82110:	dc000017 	ldw	r16,0(sp)
   82114:	dec00204 	addi	sp,sp,8
   82118:	f800283a 	ret

0008211c <__seofread>:
   8211c:	0005883a 	mov	r2,zero
   82120:	f800283a 	ret

00082124 <__swrite>:
   82124:	2880030b 	ldhu	r2,12(r5)
   82128:	defffb04 	addi	sp,sp,-20
   8212c:	dcc00315 	stw	r19,12(sp)
   82130:	dc800215 	stw	r18,8(sp)
   82134:	dc400115 	stw	r17,4(sp)
   82138:	dc000015 	stw	r16,0(sp)
   8213c:	dfc00415 	stw	ra,16(sp)
   82140:	10c0400c 	andi	r3,r2,256
   82144:	2821883a 	mov	r16,r5
   82148:	2023883a 	mov	r17,r4
   8214c:	3025883a 	mov	r18,r6
   82150:	3827883a 	mov	r19,r7
   82154:	18000526 	beq	r3,zero,8216c <__swrite+0x48>
   82158:	2940038f 	ldh	r5,14(r5)
   8215c:	01c00084 	movi	r7,2
   82160:	000d883a 	mov	r6,zero
   82164:	0082bec0 	call	82bec <_lseek_r>
   82168:	8080030b 	ldhu	r2,12(r16)
   8216c:	8140038f 	ldh	r5,14(r16)
   82170:	10bbffcc 	andi	r2,r2,61439
   82174:	980f883a 	mov	r7,r19
   82178:	900d883a 	mov	r6,r18
   8217c:	8809883a 	mov	r4,r17
   82180:	8080030d 	sth	r2,12(r16)
   82184:	dfc00417 	ldw	ra,16(sp)
   82188:	dcc00317 	ldw	r19,12(sp)
   8218c:	dc800217 	ldw	r18,8(sp)
   82190:	dc400117 	ldw	r17,4(sp)
   82194:	dc000017 	ldw	r16,0(sp)
   82198:	dec00504 	addi	sp,sp,20
   8219c:	00822041 	jmpi	82204 <_write_r>

000821a0 <__sseek>:
   821a0:	defffe04 	addi	sp,sp,-8
   821a4:	dc000015 	stw	r16,0(sp)
   821a8:	2821883a 	mov	r16,r5
   821ac:	2940038f 	ldh	r5,14(r5)
   821b0:	dfc00115 	stw	ra,4(sp)
   821b4:	0082bec0 	call	82bec <_lseek_r>
   821b8:	00ffffc4 	movi	r3,-1
   821bc:	10c00826 	beq	r2,r3,821e0 <__sseek+0x40>
   821c0:	80c0030b 	ldhu	r3,12(r16)
   821c4:	80801415 	stw	r2,80(r16)
   821c8:	18c40014 	ori	r3,r3,4096
   821cc:	80c0030d 	sth	r3,12(r16)
   821d0:	dfc00117 	ldw	ra,4(sp)
   821d4:	dc000017 	ldw	r16,0(sp)
   821d8:	dec00204 	addi	sp,sp,8
   821dc:	f800283a 	ret
   821e0:	80c0030b 	ldhu	r3,12(r16)
   821e4:	18fbffcc 	andi	r3,r3,61439
   821e8:	80c0030d 	sth	r3,12(r16)
   821ec:	dfc00117 	ldw	ra,4(sp)
   821f0:	dc000017 	ldw	r16,0(sp)
   821f4:	dec00204 	addi	sp,sp,8
   821f8:	f800283a 	ret

000821fc <__sclose>:
   821fc:	2940038f 	ldh	r5,14(r5)
   82200:	00823b81 	jmpi	823b8 <_close_r>

00082204 <_write_r>:
   82204:	defffd04 	addi	sp,sp,-12
   82208:	2805883a 	mov	r2,r5
   8220c:	dc000015 	stw	r16,0(sp)
   82210:	04000274 	movhi	r16,9
   82214:	dc400115 	stw	r17,4(sp)
   82218:	300b883a 	mov	r5,r6
   8221c:	84230904 	addi	r16,r16,-29660
   82220:	2023883a 	mov	r17,r4
   82224:	380d883a 	mov	r6,r7
   82228:	1009883a 	mov	r4,r2
   8222c:	dfc00215 	stw	ra,8(sp)
   82230:	80000015 	stw	zero,0(r16)
   82234:	00839180 	call	83918 <write>
   82238:	00ffffc4 	movi	r3,-1
   8223c:	10c00526 	beq	r2,r3,82254 <_write_r+0x50>
   82240:	dfc00217 	ldw	ra,8(sp)
   82244:	dc400117 	ldw	r17,4(sp)
   82248:	dc000017 	ldw	r16,0(sp)
   8224c:	dec00304 	addi	sp,sp,12
   82250:	f800283a 	ret
   82254:	80c00017 	ldw	r3,0(r16)
   82258:	183ff926 	beq	r3,zero,82240 <_write_r+0x3c>
   8225c:	88c00015 	stw	r3,0(r17)
   82260:	003ff706 	br	82240 <_write_r+0x3c>

00082264 <__swsetup_r>:
   82264:	00800234 	movhi	r2,8
   82268:	defffd04 	addi	sp,sp,-12
   8226c:	109c5204 	addi	r2,r2,29000
   82270:	dc400115 	stw	r17,4(sp)
   82274:	2023883a 	mov	r17,r4
   82278:	11000017 	ldw	r4,0(r2)
   8227c:	dc000015 	stw	r16,0(sp)
   82280:	dfc00215 	stw	ra,8(sp)
   82284:	2821883a 	mov	r16,r5
   82288:	20000226 	beq	r4,zero,82294 <__swsetup_r+0x30>
   8228c:	20800e17 	ldw	r2,56(r4)
   82290:	10003126 	beq	r2,zero,82358 <__swsetup_r+0xf4>
   82294:	8080030b 	ldhu	r2,12(r16)
   82298:	10c0020c 	andi	r3,r2,8
   8229c:	1009883a 	mov	r4,r2
   822a0:	18000f26 	beq	r3,zero,822e0 <__swsetup_r+0x7c>
   822a4:	80c00417 	ldw	r3,16(r16)
   822a8:	18001526 	beq	r3,zero,82300 <__swsetup_r+0x9c>
   822ac:	1100004c 	andi	r4,r2,1
   822b0:	20001c1e 	bne	r4,zero,82324 <__swsetup_r+0xc0>
   822b4:	1080008c 	andi	r2,r2,2
   822b8:	1000291e 	bne	r2,zero,82360 <__swsetup_r+0xfc>
   822bc:	80800517 	ldw	r2,20(r16)
   822c0:	80800215 	stw	r2,8(r16)
   822c4:	18001c26 	beq	r3,zero,82338 <__swsetup_r+0xd4>
   822c8:	0005883a 	mov	r2,zero
   822cc:	dfc00217 	ldw	ra,8(sp)
   822d0:	dc400117 	ldw	r17,4(sp)
   822d4:	dc000017 	ldw	r16,0(sp)
   822d8:	dec00304 	addi	sp,sp,12
   822dc:	f800283a 	ret
   822e0:	2080040c 	andi	r2,r4,16
   822e4:	10002e26 	beq	r2,zero,823a0 <__swsetup_r+0x13c>
   822e8:	2080010c 	andi	r2,r4,4
   822ec:	10001e1e 	bne	r2,zero,82368 <__swsetup_r+0x104>
   822f0:	80c00417 	ldw	r3,16(r16)
   822f4:	20800214 	ori	r2,r4,8
   822f8:	8080030d 	sth	r2,12(r16)
   822fc:	183feb1e 	bne	r3,zero,822ac <__swsetup_r+0x48>
   82300:	1100a00c 	andi	r4,r2,640
   82304:	01408004 	movi	r5,512
   82308:	217fe826 	beq	r4,r5,822ac <__swsetup_r+0x48>
   8230c:	800b883a 	mov	r5,r16
   82310:	8809883a 	mov	r4,r17
   82314:	0082c4c0 	call	82c4c <__smakebuf_r>
   82318:	8080030b 	ldhu	r2,12(r16)
   8231c:	80c00417 	ldw	r3,16(r16)
   82320:	003fe206 	br	822ac <__swsetup_r+0x48>
   82324:	80800517 	ldw	r2,20(r16)
   82328:	80000215 	stw	zero,8(r16)
   8232c:	0085c83a 	sub	r2,zero,r2
   82330:	80800615 	stw	r2,24(r16)
   82334:	183fe41e 	bne	r3,zero,822c8 <__swsetup_r+0x64>
   82338:	80c0030b 	ldhu	r3,12(r16)
   8233c:	0005883a 	mov	r2,zero
   82340:	1900200c 	andi	r4,r3,128
   82344:	203fe126 	beq	r4,zero,822cc <__swsetup_r+0x68>
   82348:	18c01014 	ori	r3,r3,64
   8234c:	80c0030d 	sth	r3,12(r16)
   82350:	00bfffc4 	movi	r2,-1
   82354:	003fdd06 	br	822cc <__swsetup_r+0x68>
   82358:	00807c00 	call	807c0 <__sinit>
   8235c:	003fcd06 	br	82294 <__swsetup_r+0x30>
   82360:	0005883a 	mov	r2,zero
   82364:	003fd606 	br	822c0 <__swsetup_r+0x5c>
   82368:	81400c17 	ldw	r5,48(r16)
   8236c:	28000626 	beq	r5,zero,82388 <__swsetup_r+0x124>
   82370:	80801004 	addi	r2,r16,64
   82374:	28800326 	beq	r5,r2,82384 <__swsetup_r+0x120>
   82378:	8809883a 	mov	r4,r17
   8237c:	00828dc0 	call	828dc <_free_r>
   82380:	8100030b 	ldhu	r4,12(r16)
   82384:	80000c15 	stw	zero,48(r16)
   82388:	80c00417 	ldw	r3,16(r16)
   8238c:	00bff6c4 	movi	r2,-37
   82390:	1108703a 	and	r4,r2,r4
   82394:	80000115 	stw	zero,4(r16)
   82398:	80c00015 	stw	r3,0(r16)
   8239c:	003fd506 	br	822f4 <__swsetup_r+0x90>
   823a0:	00800244 	movi	r2,9
   823a4:	88800015 	stw	r2,0(r17)
   823a8:	20801014 	ori	r2,r4,64
   823ac:	8080030d 	sth	r2,12(r16)
   823b0:	00bfffc4 	movi	r2,-1
   823b4:	003fc506 	br	822cc <__swsetup_r+0x68>

000823b8 <_close_r>:
   823b8:	defffd04 	addi	sp,sp,-12
   823bc:	dc000015 	stw	r16,0(sp)
   823c0:	04000274 	movhi	r16,9
   823c4:	dc400115 	stw	r17,4(sp)
   823c8:	84230904 	addi	r16,r16,-29660
   823cc:	2023883a 	mov	r17,r4
   823d0:	2809883a 	mov	r4,r5
   823d4:	dfc00215 	stw	ra,8(sp)
   823d8:	80000015 	stw	zero,0(r16)
   823dc:	00831080 	call	83108 <close>
   823e0:	00ffffc4 	movi	r3,-1
   823e4:	10c00526 	beq	r2,r3,823fc <_close_r+0x44>
   823e8:	dfc00217 	ldw	ra,8(sp)
   823ec:	dc400117 	ldw	r17,4(sp)
   823f0:	dc000017 	ldw	r16,0(sp)
   823f4:	dec00304 	addi	sp,sp,12
   823f8:	f800283a 	ret
   823fc:	80c00017 	ldw	r3,0(r16)
   82400:	183ff926 	beq	r3,zero,823e8 <_close_r+0x30>
   82404:	88c00015 	stw	r3,0(r17)
   82408:	003ff706 	br	823e8 <_close_r+0x30>

0008240c <_fclose_r>:
   8240c:	28003926 	beq	r5,zero,824f4 <_fclose_r+0xe8>
   82410:	defffc04 	addi	sp,sp,-16
   82414:	dc400115 	stw	r17,4(sp)
   82418:	dc000015 	stw	r16,0(sp)
   8241c:	dfc00315 	stw	ra,12(sp)
   82420:	dc800215 	stw	r18,8(sp)
   82424:	2023883a 	mov	r17,r4
   82428:	2821883a 	mov	r16,r5
   8242c:	20000226 	beq	r4,zero,82438 <_fclose_r+0x2c>
   82430:	20800e17 	ldw	r2,56(r4)
   82434:	10002726 	beq	r2,zero,824d4 <_fclose_r+0xc8>
   82438:	8080030f 	ldh	r2,12(r16)
   8243c:	1000071e 	bne	r2,zero,8245c <_fclose_r+0x50>
   82440:	0005883a 	mov	r2,zero
   82444:	dfc00317 	ldw	ra,12(sp)
   82448:	dc800217 	ldw	r18,8(sp)
   8244c:	dc400117 	ldw	r17,4(sp)
   82450:	dc000017 	ldw	r16,0(sp)
   82454:	dec00404 	addi	sp,sp,16
   82458:	f800283a 	ret
   8245c:	800b883a 	mov	r5,r16
   82460:	8809883a 	mov	r4,r17
   82464:	00825100 	call	82510 <__sflush_r>
   82468:	1025883a 	mov	r18,r2
   8246c:	80800b17 	ldw	r2,44(r16)
   82470:	10000426 	beq	r2,zero,82484 <_fclose_r+0x78>
   82474:	81400717 	ldw	r5,28(r16)
   82478:	8809883a 	mov	r4,r17
   8247c:	103ee83a 	callr	r2
   82480:	10001616 	blt	r2,zero,824dc <_fclose_r+0xd0>
   82484:	8080030b 	ldhu	r2,12(r16)
   82488:	1080200c 	andi	r2,r2,128
   8248c:	1000151e 	bne	r2,zero,824e4 <_fclose_r+0xd8>
   82490:	81400c17 	ldw	r5,48(r16)
   82494:	28000526 	beq	r5,zero,824ac <_fclose_r+0xa0>
   82498:	80801004 	addi	r2,r16,64
   8249c:	28800226 	beq	r5,r2,824a8 <_fclose_r+0x9c>
   824a0:	8809883a 	mov	r4,r17
   824a4:	00828dc0 	call	828dc <_free_r>
   824a8:	80000c15 	stw	zero,48(r16)
   824ac:	81401117 	ldw	r5,68(r16)
   824b0:	28000326 	beq	r5,zero,824c0 <_fclose_r+0xb4>
   824b4:	8809883a 	mov	r4,r17
   824b8:	00828dc0 	call	828dc <_free_r>
   824bc:	80001115 	stw	zero,68(r16)
   824c0:	00807d00 	call	807d0 <__sfp_lock_acquire>
   824c4:	8000030d 	sth	zero,12(r16)
   824c8:	00807d40 	call	807d4 <__sfp_lock_release>
   824cc:	9005883a 	mov	r2,r18
   824d0:	003fdc06 	br	82444 <_fclose_r+0x38>
   824d4:	00807c00 	call	807c0 <__sinit>
   824d8:	003fd706 	br	82438 <_fclose_r+0x2c>
   824dc:	04bfffc4 	movi	r18,-1
   824e0:	003fe806 	br	82484 <_fclose_r+0x78>
   824e4:	81400417 	ldw	r5,16(r16)
   824e8:	8809883a 	mov	r4,r17
   824ec:	00828dc0 	call	828dc <_free_r>
   824f0:	003fe706 	br	82490 <_fclose_r+0x84>
   824f4:	0005883a 	mov	r2,zero
   824f8:	f800283a 	ret

000824fc <fclose>:
   824fc:	00800234 	movhi	r2,8
   82500:	109c5204 	addi	r2,r2,29000
   82504:	200b883a 	mov	r5,r4
   82508:	11000017 	ldw	r4,0(r2)
   8250c:	008240c1 	jmpi	8240c <_fclose_r>

00082510 <__sflush_r>:
   82510:	2880030b 	ldhu	r2,12(r5)
   82514:	defffb04 	addi	sp,sp,-20
   82518:	dcc00315 	stw	r19,12(sp)
   8251c:	dc400115 	stw	r17,4(sp)
   82520:	dfc00415 	stw	ra,16(sp)
   82524:	dc800215 	stw	r18,8(sp)
   82528:	dc000015 	stw	r16,0(sp)
   8252c:	10c0020c 	andi	r3,r2,8
   82530:	2823883a 	mov	r17,r5
   82534:	2027883a 	mov	r19,r4
   82538:	1800311e 	bne	r3,zero,82600 <__sflush_r+0xf0>
   8253c:	28c00117 	ldw	r3,4(r5)
   82540:	10820014 	ori	r2,r2,2048
   82544:	2880030d 	sth	r2,12(r5)
   82548:	00c04b0e 	bge	zero,r3,82678 <__sflush_r+0x168>
   8254c:	8a000a17 	ldw	r8,40(r17)
   82550:	40002326 	beq	r8,zero,825e0 <__sflush_r+0xd0>
   82554:	9c000017 	ldw	r16,0(r19)
   82558:	10c4000c 	andi	r3,r2,4096
   8255c:	98000015 	stw	zero,0(r19)
   82560:	18004826 	beq	r3,zero,82684 <__sflush_r+0x174>
   82564:	89801417 	ldw	r6,80(r17)
   82568:	10c0010c 	andi	r3,r2,4
   8256c:	18000626 	beq	r3,zero,82588 <__sflush_r+0x78>
   82570:	88c00117 	ldw	r3,4(r17)
   82574:	88800c17 	ldw	r2,48(r17)
   82578:	30cdc83a 	sub	r6,r6,r3
   8257c:	10000226 	beq	r2,zero,82588 <__sflush_r+0x78>
   82580:	88800f17 	ldw	r2,60(r17)
   82584:	308dc83a 	sub	r6,r6,r2
   82588:	89400717 	ldw	r5,28(r17)
   8258c:	000f883a 	mov	r7,zero
   82590:	9809883a 	mov	r4,r19
   82594:	403ee83a 	callr	r8
   82598:	00ffffc4 	movi	r3,-1
   8259c:	10c04426 	beq	r2,r3,826b0 <__sflush_r+0x1a0>
   825a0:	88c0030b 	ldhu	r3,12(r17)
   825a4:	89000417 	ldw	r4,16(r17)
   825a8:	88000115 	stw	zero,4(r17)
   825ac:	197dffcc 	andi	r5,r3,63487
   825b0:	8940030d 	sth	r5,12(r17)
   825b4:	89000015 	stw	r4,0(r17)
   825b8:	18c4000c 	andi	r3,r3,4096
   825bc:	18002c1e 	bne	r3,zero,82670 <__sflush_r+0x160>
   825c0:	89400c17 	ldw	r5,48(r17)
   825c4:	9c000015 	stw	r16,0(r19)
   825c8:	28000526 	beq	r5,zero,825e0 <__sflush_r+0xd0>
   825cc:	88801004 	addi	r2,r17,64
   825d0:	28800226 	beq	r5,r2,825dc <__sflush_r+0xcc>
   825d4:	9809883a 	mov	r4,r19
   825d8:	00828dc0 	call	828dc <_free_r>
   825dc:	88000c15 	stw	zero,48(r17)
   825e0:	0005883a 	mov	r2,zero
   825e4:	dfc00417 	ldw	ra,16(sp)
   825e8:	dcc00317 	ldw	r19,12(sp)
   825ec:	dc800217 	ldw	r18,8(sp)
   825f0:	dc400117 	ldw	r17,4(sp)
   825f4:	dc000017 	ldw	r16,0(sp)
   825f8:	dec00504 	addi	sp,sp,20
   825fc:	f800283a 	ret
   82600:	2c800417 	ldw	r18,16(r5)
   82604:	903ff626 	beq	r18,zero,825e0 <__sflush_r+0xd0>
   82608:	2c000017 	ldw	r16,0(r5)
   8260c:	108000cc 	andi	r2,r2,3
   82610:	2c800015 	stw	r18,0(r5)
   82614:	84a1c83a 	sub	r16,r16,r18
   82618:	1000131e 	bne	r2,zero,82668 <__sflush_r+0x158>
   8261c:	28800517 	ldw	r2,20(r5)
   82620:	88800215 	stw	r2,8(r17)
   82624:	04000316 	blt	zero,r16,82634 <__sflush_r+0x124>
   82628:	003fed06 	br	825e0 <__sflush_r+0xd0>
   8262c:	90a5883a 	add	r18,r18,r2
   82630:	043feb0e 	bge	zero,r16,825e0 <__sflush_r+0xd0>
   82634:	88800917 	ldw	r2,36(r17)
   82638:	89400717 	ldw	r5,28(r17)
   8263c:	800f883a 	mov	r7,r16
   82640:	900d883a 	mov	r6,r18
   82644:	9809883a 	mov	r4,r19
   82648:	103ee83a 	callr	r2
   8264c:	80a1c83a 	sub	r16,r16,r2
   82650:	00bff616 	blt	zero,r2,8262c <__sflush_r+0x11c>
   82654:	88c0030b 	ldhu	r3,12(r17)
   82658:	00bfffc4 	movi	r2,-1
   8265c:	18c01014 	ori	r3,r3,64
   82660:	88c0030d 	sth	r3,12(r17)
   82664:	003fdf06 	br	825e4 <__sflush_r+0xd4>
   82668:	0005883a 	mov	r2,zero
   8266c:	003fec06 	br	82620 <__sflush_r+0x110>
   82670:	88801415 	stw	r2,80(r17)
   82674:	003fd206 	br	825c0 <__sflush_r+0xb0>
   82678:	28c00f17 	ldw	r3,60(r5)
   8267c:	00ffb316 	blt	zero,r3,8254c <__sflush_r+0x3c>
   82680:	003fd706 	br	825e0 <__sflush_r+0xd0>
   82684:	89400717 	ldw	r5,28(r17)
   82688:	000d883a 	mov	r6,zero
   8268c:	01c00044 	movi	r7,1
   82690:	9809883a 	mov	r4,r19
   82694:	403ee83a 	callr	r8
   82698:	100d883a 	mov	r6,r2
   8269c:	00bfffc4 	movi	r2,-1
   826a0:	30801426 	beq	r6,r2,826f4 <__sflush_r+0x1e4>
   826a4:	8880030b 	ldhu	r2,12(r17)
   826a8:	8a000a17 	ldw	r8,40(r17)
   826ac:	003fae06 	br	82568 <__sflush_r+0x58>
   826b0:	98c00017 	ldw	r3,0(r19)
   826b4:	183fba26 	beq	r3,zero,825a0 <__sflush_r+0x90>
   826b8:	01000744 	movi	r4,29
   826bc:	19000626 	beq	r3,r4,826d8 <__sflush_r+0x1c8>
   826c0:	01000584 	movi	r4,22
   826c4:	19000426 	beq	r3,r4,826d8 <__sflush_r+0x1c8>
   826c8:	88c0030b 	ldhu	r3,12(r17)
   826cc:	18c01014 	ori	r3,r3,64
   826d0:	88c0030d 	sth	r3,12(r17)
   826d4:	003fc306 	br	825e4 <__sflush_r+0xd4>
   826d8:	8880030b 	ldhu	r2,12(r17)
   826dc:	88c00417 	ldw	r3,16(r17)
   826e0:	88000115 	stw	zero,4(r17)
   826e4:	10bdffcc 	andi	r2,r2,63487
   826e8:	8880030d 	sth	r2,12(r17)
   826ec:	88c00015 	stw	r3,0(r17)
   826f0:	003fb306 	br	825c0 <__sflush_r+0xb0>
   826f4:	98800017 	ldw	r2,0(r19)
   826f8:	103fea26 	beq	r2,zero,826a4 <__sflush_r+0x194>
   826fc:	00c00744 	movi	r3,29
   82700:	10c00226 	beq	r2,r3,8270c <__sflush_r+0x1fc>
   82704:	00c00584 	movi	r3,22
   82708:	10c0031e 	bne	r2,r3,82718 <__sflush_r+0x208>
   8270c:	9c000015 	stw	r16,0(r19)
   82710:	0005883a 	mov	r2,zero
   82714:	003fb306 	br	825e4 <__sflush_r+0xd4>
   82718:	88c0030b 	ldhu	r3,12(r17)
   8271c:	3005883a 	mov	r2,r6
   82720:	18c01014 	ori	r3,r3,64
   82724:	88c0030d 	sth	r3,12(r17)
   82728:	003fae06 	br	825e4 <__sflush_r+0xd4>

0008272c <_fflush_r>:
   8272c:	defffd04 	addi	sp,sp,-12
   82730:	dc000115 	stw	r16,4(sp)
   82734:	dfc00215 	stw	ra,8(sp)
   82738:	2021883a 	mov	r16,r4
   8273c:	20000226 	beq	r4,zero,82748 <_fflush_r+0x1c>
   82740:	20800e17 	ldw	r2,56(r4)
   82744:	10000c26 	beq	r2,zero,82778 <_fflush_r+0x4c>
   82748:	2880030f 	ldh	r2,12(r5)
   8274c:	1000051e 	bne	r2,zero,82764 <_fflush_r+0x38>
   82750:	0005883a 	mov	r2,zero
   82754:	dfc00217 	ldw	ra,8(sp)
   82758:	dc000117 	ldw	r16,4(sp)
   8275c:	dec00304 	addi	sp,sp,12
   82760:	f800283a 	ret
   82764:	8009883a 	mov	r4,r16
   82768:	dfc00217 	ldw	ra,8(sp)
   8276c:	dc000117 	ldw	r16,4(sp)
   82770:	dec00304 	addi	sp,sp,12
   82774:	00825101 	jmpi	82510 <__sflush_r>
   82778:	d9400015 	stw	r5,0(sp)
   8277c:	00807c00 	call	807c0 <__sinit>
   82780:	d9400017 	ldw	r5,0(sp)
   82784:	003ff006 	br	82748 <_fflush_r+0x1c>

00082788 <fflush>:
   82788:	20000526 	beq	r4,zero,827a0 <fflush+0x18>
   8278c:	00800234 	movhi	r2,8
   82790:	109c5204 	addi	r2,r2,29000
   82794:	200b883a 	mov	r5,r4
   82798:	11000017 	ldw	r4,0(r2)
   8279c:	008272c1 	jmpi	8272c <_fflush_r>
   827a0:	00800234 	movhi	r2,8
   827a4:	109c5104 	addi	r2,r2,28996
   827a8:	11000017 	ldw	r4,0(r2)
   827ac:	01400234 	movhi	r5,8
   827b0:	2949cb04 	addi	r5,r5,10028
   827b4:	0080d901 	jmpi	80d90 <_fwalk_reent>

000827b8 <_malloc_trim_r>:
   827b8:	defffb04 	addi	sp,sp,-20
   827bc:	dcc00315 	stw	r19,12(sp)
   827c0:	04c00234 	movhi	r19,8
   827c4:	dc800215 	stw	r18,8(sp)
   827c8:	dc400115 	stw	r17,4(sp)
   827cc:	dc000015 	stw	r16,0(sp)
   827d0:	dfc00415 	stw	ra,16(sp)
   827d4:	2821883a 	mov	r16,r5
   827d8:	9cd6c104 	addi	r19,r19,23300
   827dc:	2025883a 	mov	r18,r4
   827e0:	00836480 	call	83648 <__malloc_lock>
   827e4:	98800217 	ldw	r2,8(r19)
   827e8:	14400117 	ldw	r17,4(r2)
   827ec:	00bfff04 	movi	r2,-4
   827f0:	88a2703a 	and	r17,r17,r2
   827f4:	8c21c83a 	sub	r16,r17,r16
   827f8:	8403fbc4 	addi	r16,r16,4079
   827fc:	8020d33a 	srli	r16,r16,12
   82800:	0083ffc4 	movi	r2,4095
   82804:	843fffc4 	addi	r16,r16,-1
   82808:	8020933a 	slli	r16,r16,12
   8280c:	1400060e 	bge	r2,r16,82828 <_malloc_trim_r+0x70>
   82810:	000b883a 	mov	r5,zero
   82814:	9009883a 	mov	r4,r18
   82818:	00820740 	call	82074 <_sbrk_r>
   8281c:	98c00217 	ldw	r3,8(r19)
   82820:	1c47883a 	add	r3,r3,r17
   82824:	10c00a26 	beq	r2,r3,82850 <_malloc_trim_r+0x98>
   82828:	9009883a 	mov	r4,r18
   8282c:	008366c0 	call	8366c <__malloc_unlock>
   82830:	0005883a 	mov	r2,zero
   82834:	dfc00417 	ldw	ra,16(sp)
   82838:	dcc00317 	ldw	r19,12(sp)
   8283c:	dc800217 	ldw	r18,8(sp)
   82840:	dc400117 	ldw	r17,4(sp)
   82844:	dc000017 	ldw	r16,0(sp)
   82848:	dec00504 	addi	sp,sp,20
   8284c:	f800283a 	ret
   82850:	040bc83a 	sub	r5,zero,r16
   82854:	9009883a 	mov	r4,r18
   82858:	00820740 	call	82074 <_sbrk_r>
   8285c:	00ffffc4 	movi	r3,-1
   82860:	10c00d26 	beq	r2,r3,82898 <_malloc_trim_r+0xe0>
   82864:	00c00274 	movhi	r3,9
   82868:	18e31104 	addi	r3,r3,-29628
   8286c:	18800017 	ldw	r2,0(r3)
   82870:	99000217 	ldw	r4,8(r19)
   82874:	8c23c83a 	sub	r17,r17,r16
   82878:	8c400054 	ori	r17,r17,1
   8287c:	1421c83a 	sub	r16,r2,r16
   82880:	24400115 	stw	r17,4(r4)
   82884:	9009883a 	mov	r4,r18
   82888:	1c000015 	stw	r16,0(r3)
   8288c:	008366c0 	call	8366c <__malloc_unlock>
   82890:	00800044 	movi	r2,1
   82894:	003fe706 	br	82834 <_malloc_trim_r+0x7c>
   82898:	000b883a 	mov	r5,zero
   8289c:	9009883a 	mov	r4,r18
   828a0:	00820740 	call	82074 <_sbrk_r>
   828a4:	99000217 	ldw	r4,8(r19)
   828a8:	014003c4 	movi	r5,15
   828ac:	1107c83a 	sub	r3,r2,r4
   828b0:	28ffdd0e 	bge	r5,r3,82828 <_malloc_trim_r+0x70>
   828b4:	01400234 	movhi	r5,8
   828b8:	295c5304 	addi	r5,r5,29004
   828bc:	29400017 	ldw	r5,0(r5)
   828c0:	18c00054 	ori	r3,r3,1
   828c4:	20c00115 	stw	r3,4(r4)
   828c8:	00c00274 	movhi	r3,9
   828cc:	1145c83a 	sub	r2,r2,r5
   828d0:	18e31104 	addi	r3,r3,-29628
   828d4:	18800015 	stw	r2,0(r3)
   828d8:	003fd306 	br	82828 <_malloc_trim_r+0x70>

000828dc <_free_r>:
   828dc:	28004126 	beq	r5,zero,829e4 <_free_r+0x108>
   828e0:	defffd04 	addi	sp,sp,-12
   828e4:	dc400115 	stw	r17,4(sp)
   828e8:	dc000015 	stw	r16,0(sp)
   828ec:	2023883a 	mov	r17,r4
   828f0:	2821883a 	mov	r16,r5
   828f4:	dfc00215 	stw	ra,8(sp)
   828f8:	00836480 	call	83648 <__malloc_lock>
   828fc:	81ffff17 	ldw	r7,-4(r16)
   82900:	00bfff84 	movi	r2,-2
   82904:	01000234 	movhi	r4,8
   82908:	81bffe04 	addi	r6,r16,-8
   8290c:	3884703a 	and	r2,r7,r2
   82910:	2116c104 	addi	r4,r4,23300
   82914:	308b883a 	add	r5,r6,r2
   82918:	2a400117 	ldw	r9,4(r5)
   8291c:	22000217 	ldw	r8,8(r4)
   82920:	00ffff04 	movi	r3,-4
   82924:	48c6703a 	and	r3,r9,r3
   82928:	2a005726 	beq	r5,r8,82a88 <_free_r+0x1ac>
   8292c:	28c00115 	stw	r3,4(r5)
   82930:	39c0004c 	andi	r7,r7,1
   82934:	3800091e 	bne	r7,zero,8295c <_free_r+0x80>
   82938:	823ffe17 	ldw	r8,-8(r16)
   8293c:	22400204 	addi	r9,r4,8
   82940:	320dc83a 	sub	r6,r6,r8
   82944:	31c00217 	ldw	r7,8(r6)
   82948:	1205883a 	add	r2,r2,r8
   8294c:	3a406526 	beq	r7,r9,82ae4 <_free_r+0x208>
   82950:	32000317 	ldw	r8,12(r6)
   82954:	3a000315 	stw	r8,12(r7)
   82958:	41c00215 	stw	r7,8(r8)
   8295c:	28cf883a 	add	r7,r5,r3
   82960:	39c00117 	ldw	r7,4(r7)
   82964:	39c0004c 	andi	r7,r7,1
   82968:	38003a26 	beq	r7,zero,82a54 <_free_r+0x178>
   8296c:	10c00054 	ori	r3,r2,1
   82970:	30c00115 	stw	r3,4(r6)
   82974:	3087883a 	add	r3,r6,r2
   82978:	18800015 	stw	r2,0(r3)
   8297c:	00c07fc4 	movi	r3,511
   82980:	18801936 	bltu	r3,r2,829e8 <_free_r+0x10c>
   82984:	1004d0fa 	srli	r2,r2,3
   82988:	01c00044 	movi	r7,1
   8298c:	21400117 	ldw	r5,4(r4)
   82990:	10c00044 	addi	r3,r2,1
   82994:	18c7883a 	add	r3,r3,r3
   82998:	1005d0ba 	srai	r2,r2,2
   8299c:	18c7883a 	add	r3,r3,r3
   829a0:	18c7883a 	add	r3,r3,r3
   829a4:	1907883a 	add	r3,r3,r4
   829a8:	3884983a 	sll	r2,r7,r2
   829ac:	19c00017 	ldw	r7,0(r3)
   829b0:	1a3ffe04 	addi	r8,r3,-8
   829b4:	1144b03a 	or	r2,r2,r5
   829b8:	32000315 	stw	r8,12(r6)
   829bc:	31c00215 	stw	r7,8(r6)
   829c0:	20800115 	stw	r2,4(r4)
   829c4:	19800015 	stw	r6,0(r3)
   829c8:	39800315 	stw	r6,12(r7)
   829cc:	8809883a 	mov	r4,r17
   829d0:	dfc00217 	ldw	ra,8(sp)
   829d4:	dc400117 	ldw	r17,4(sp)
   829d8:	dc000017 	ldw	r16,0(sp)
   829dc:	dec00304 	addi	sp,sp,12
   829e0:	008366c1 	jmpi	8366c <__malloc_unlock>
   829e4:	f800283a 	ret
   829e8:	100ad27a 	srli	r5,r2,9
   829ec:	00c00104 	movi	r3,4
   829f0:	19404a36 	bltu	r3,r5,82b1c <_free_r+0x240>
   829f4:	100ad1ba 	srli	r5,r2,6
   829f8:	28c00e44 	addi	r3,r5,57
   829fc:	18c7883a 	add	r3,r3,r3
   82a00:	29400e04 	addi	r5,r5,56
   82a04:	18c7883a 	add	r3,r3,r3
   82a08:	18c7883a 	add	r3,r3,r3
   82a0c:	1909883a 	add	r4,r3,r4
   82a10:	20c00017 	ldw	r3,0(r4)
   82a14:	01c00234 	movhi	r7,8
   82a18:	213ffe04 	addi	r4,r4,-8
   82a1c:	39d6c104 	addi	r7,r7,23300
   82a20:	20c04426 	beq	r4,r3,82b34 <_free_r+0x258>
   82a24:	01ffff04 	movi	r7,-4
   82a28:	19400117 	ldw	r5,4(r3)
   82a2c:	29ca703a 	and	r5,r5,r7
   82a30:	1140022e 	bgeu	r2,r5,82a3c <_free_r+0x160>
   82a34:	18c00217 	ldw	r3,8(r3)
   82a38:	20fffb1e 	bne	r4,r3,82a28 <_free_r+0x14c>
   82a3c:	19000317 	ldw	r4,12(r3)
   82a40:	31000315 	stw	r4,12(r6)
   82a44:	30c00215 	stw	r3,8(r6)
   82a48:	21800215 	stw	r6,8(r4)
   82a4c:	19800315 	stw	r6,12(r3)
   82a50:	003fde06 	br	829cc <_free_r+0xf0>
   82a54:	29c00217 	ldw	r7,8(r5)
   82a58:	10c5883a 	add	r2,r2,r3
   82a5c:	00c00234 	movhi	r3,8
   82a60:	18d6c304 	addi	r3,r3,23308
   82a64:	38c03b26 	beq	r7,r3,82b54 <_free_r+0x278>
   82a68:	2a000317 	ldw	r8,12(r5)
   82a6c:	11400054 	ori	r5,r2,1
   82a70:	3087883a 	add	r3,r6,r2
   82a74:	3a000315 	stw	r8,12(r7)
   82a78:	41c00215 	stw	r7,8(r8)
   82a7c:	31400115 	stw	r5,4(r6)
   82a80:	18800015 	stw	r2,0(r3)
   82a84:	003fbd06 	br	8297c <_free_r+0xa0>
   82a88:	39c0004c 	andi	r7,r7,1
   82a8c:	10c5883a 	add	r2,r2,r3
   82a90:	3800071e 	bne	r7,zero,82ab0 <_free_r+0x1d4>
   82a94:	81fffe17 	ldw	r7,-8(r16)
   82a98:	31cdc83a 	sub	r6,r6,r7
   82a9c:	30c00317 	ldw	r3,12(r6)
   82aa0:	31400217 	ldw	r5,8(r6)
   82aa4:	11c5883a 	add	r2,r2,r7
   82aa8:	28c00315 	stw	r3,12(r5)
   82aac:	19400215 	stw	r5,8(r3)
   82ab0:	10c00054 	ori	r3,r2,1
   82ab4:	30c00115 	stw	r3,4(r6)
   82ab8:	00c00234 	movhi	r3,8
   82abc:	18dc5404 	addi	r3,r3,29008
   82ac0:	18c00017 	ldw	r3,0(r3)
   82ac4:	21800215 	stw	r6,8(r4)
   82ac8:	10ffc036 	bltu	r2,r3,829cc <_free_r+0xf0>
   82acc:	00800274 	movhi	r2,9
   82ad0:	10a30804 	addi	r2,r2,-29664
   82ad4:	11400017 	ldw	r5,0(r2)
   82ad8:	8809883a 	mov	r4,r17
   82adc:	00827b80 	call	827b8 <_malloc_trim_r>
   82ae0:	003fba06 	br	829cc <_free_r+0xf0>
   82ae4:	28c9883a 	add	r4,r5,r3
   82ae8:	21000117 	ldw	r4,4(r4)
   82aec:	2100004c 	andi	r4,r4,1
   82af0:	2000391e 	bne	r4,zero,82bd8 <_free_r+0x2fc>
   82af4:	29c00217 	ldw	r7,8(r5)
   82af8:	29000317 	ldw	r4,12(r5)
   82afc:	1885883a 	add	r2,r3,r2
   82b00:	10c00054 	ori	r3,r2,1
   82b04:	39000315 	stw	r4,12(r7)
   82b08:	21c00215 	stw	r7,8(r4)
   82b0c:	30c00115 	stw	r3,4(r6)
   82b10:	308d883a 	add	r6,r6,r2
   82b14:	30800015 	stw	r2,0(r6)
   82b18:	003fac06 	br	829cc <_free_r+0xf0>
   82b1c:	00c00504 	movi	r3,20
   82b20:	19401536 	bltu	r3,r5,82b78 <_free_r+0x29c>
   82b24:	28c01704 	addi	r3,r5,92
   82b28:	18c7883a 	add	r3,r3,r3
   82b2c:	294016c4 	addi	r5,r5,91
   82b30:	003fb406 	br	82a04 <_free_r+0x128>
   82b34:	280bd0ba 	srai	r5,r5,2
   82b38:	00c00044 	movi	r3,1
   82b3c:	38800117 	ldw	r2,4(r7)
   82b40:	194a983a 	sll	r5,r3,r5
   82b44:	2007883a 	mov	r3,r4
   82b48:	2884b03a 	or	r2,r5,r2
   82b4c:	38800115 	stw	r2,4(r7)
   82b50:	003fbb06 	br	82a40 <_free_r+0x164>
   82b54:	21800515 	stw	r6,20(r4)
   82b58:	21800415 	stw	r6,16(r4)
   82b5c:	10c00054 	ori	r3,r2,1
   82b60:	31c00315 	stw	r7,12(r6)
   82b64:	31c00215 	stw	r7,8(r6)
   82b68:	30c00115 	stw	r3,4(r6)
   82b6c:	308d883a 	add	r6,r6,r2
   82b70:	30800015 	stw	r2,0(r6)
   82b74:	003f9506 	br	829cc <_free_r+0xf0>
   82b78:	00c01504 	movi	r3,84
   82b7c:	19400536 	bltu	r3,r5,82b94 <_free_r+0x2b8>
   82b80:	100ad33a 	srli	r5,r2,12
   82b84:	28c01bc4 	addi	r3,r5,111
   82b88:	18c7883a 	add	r3,r3,r3
   82b8c:	29401b84 	addi	r5,r5,110
   82b90:	003f9c06 	br	82a04 <_free_r+0x128>
   82b94:	00c05504 	movi	r3,340
   82b98:	19400536 	bltu	r3,r5,82bb0 <_free_r+0x2d4>
   82b9c:	100ad3fa 	srli	r5,r2,15
   82ba0:	28c01e04 	addi	r3,r5,120
   82ba4:	18c7883a 	add	r3,r3,r3
   82ba8:	29401dc4 	addi	r5,r5,119
   82bac:	003f9506 	br	82a04 <_free_r+0x128>
   82bb0:	00c15504 	movi	r3,1364
   82bb4:	19400536 	bltu	r3,r5,82bcc <_free_r+0x2f0>
   82bb8:	100ad4ba 	srli	r5,r2,18
   82bbc:	28c01f44 	addi	r3,r5,125
   82bc0:	18c7883a 	add	r3,r3,r3
   82bc4:	29401f04 	addi	r5,r5,124
   82bc8:	003f8e06 	br	82a04 <_free_r+0x128>
   82bcc:	00c03f84 	movi	r3,254
   82bd0:	01401f84 	movi	r5,126
   82bd4:	003f8b06 	br	82a04 <_free_r+0x128>
   82bd8:	10c00054 	ori	r3,r2,1
   82bdc:	30c00115 	stw	r3,4(r6)
   82be0:	308d883a 	add	r6,r6,r2
   82be4:	30800015 	stw	r2,0(r6)
   82be8:	003f7806 	br	829cc <_free_r+0xf0>

00082bec <_lseek_r>:
   82bec:	defffd04 	addi	sp,sp,-12
   82bf0:	2805883a 	mov	r2,r5
   82bf4:	dc000015 	stw	r16,0(sp)
   82bf8:	04000274 	movhi	r16,9
   82bfc:	dc400115 	stw	r17,4(sp)
   82c00:	300b883a 	mov	r5,r6
   82c04:	84230904 	addi	r16,r16,-29660
   82c08:	2023883a 	mov	r17,r4
   82c0c:	380d883a 	mov	r6,r7
   82c10:	1009883a 	mov	r4,r2
   82c14:	dfc00215 	stw	ra,8(sp)
   82c18:	80000015 	stw	zero,0(r16)
   82c1c:	00834f80 	call	834f8 <lseek>
   82c20:	00ffffc4 	movi	r3,-1
   82c24:	10c00526 	beq	r2,r3,82c3c <_lseek_r+0x50>
   82c28:	dfc00217 	ldw	ra,8(sp)
   82c2c:	dc400117 	ldw	r17,4(sp)
   82c30:	dc000017 	ldw	r16,0(sp)
   82c34:	dec00304 	addi	sp,sp,12
   82c38:	f800283a 	ret
   82c3c:	80c00017 	ldw	r3,0(r16)
   82c40:	183ff926 	beq	r3,zero,82c28 <_lseek_r+0x3c>
   82c44:	88c00015 	stw	r3,0(r17)
   82c48:	003ff706 	br	82c28 <_lseek_r+0x3c>

00082c4c <__smakebuf_r>:
   82c4c:	2880030b 	ldhu	r2,12(r5)
   82c50:	10c0008c 	andi	r3,r2,2
   82c54:	1800411e 	bne	r3,zero,82d5c <__smakebuf_r+0x110>
   82c58:	deffec04 	addi	sp,sp,-80
   82c5c:	dc000f15 	stw	r16,60(sp)
   82c60:	2821883a 	mov	r16,r5
   82c64:	2940038f 	ldh	r5,14(r5)
   82c68:	dc401015 	stw	r17,64(sp)
   82c6c:	dfc01315 	stw	ra,76(sp)
   82c70:	dcc01215 	stw	r19,72(sp)
   82c74:	dc801115 	stw	r18,68(sp)
   82c78:	2023883a 	mov	r17,r4
   82c7c:	28001c16 	blt	r5,zero,82cf0 <__smakebuf_r+0xa4>
   82c80:	d80d883a 	mov	r6,sp
   82c84:	0082e680 	call	82e68 <_fstat_r>
   82c88:	10001816 	blt	r2,zero,82cec <__smakebuf_r+0xa0>
   82c8c:	d8800117 	ldw	r2,4(sp)
   82c90:	00e00014 	movui	r3,32768
   82c94:	10bc000c 	andi	r2,r2,61440
   82c98:	14c80020 	cmpeqi	r19,r2,8192
   82c9c:	10c03726 	beq	r2,r3,82d7c <__smakebuf_r+0x130>
   82ca0:	80c0030b 	ldhu	r3,12(r16)
   82ca4:	18c20014 	ori	r3,r3,2048
   82ca8:	80c0030d 	sth	r3,12(r16)
   82cac:	00c80004 	movi	r3,8192
   82cb0:	10c0521e 	bne	r2,r3,82dfc <__smakebuf_r+0x1b0>
   82cb4:	8140038f 	ldh	r5,14(r16)
   82cb8:	8809883a 	mov	r4,r17
   82cbc:	0082ec40 	call	82ec4 <_isatty_r>
   82cc0:	10004c26 	beq	r2,zero,82df4 <__smakebuf_r+0x1a8>
   82cc4:	8080030b 	ldhu	r2,12(r16)
   82cc8:	80c010c4 	addi	r3,r16,67
   82ccc:	80c00015 	stw	r3,0(r16)
   82cd0:	10800054 	ori	r2,r2,1
   82cd4:	8080030d 	sth	r2,12(r16)
   82cd8:	00800044 	movi	r2,1
   82cdc:	80c00415 	stw	r3,16(r16)
   82ce0:	80800515 	stw	r2,20(r16)
   82ce4:	04810004 	movi	r18,1024
   82ce8:	00000706 	br	82d08 <__smakebuf_r+0xbc>
   82cec:	8080030b 	ldhu	r2,12(r16)
   82cf0:	10c0200c 	andi	r3,r2,128
   82cf4:	18001f1e 	bne	r3,zero,82d74 <__smakebuf_r+0x128>
   82cf8:	04810004 	movi	r18,1024
   82cfc:	10820014 	ori	r2,r2,2048
   82d00:	8080030d 	sth	r2,12(r16)
   82d04:	0027883a 	mov	r19,zero
   82d08:	900b883a 	mov	r5,r18
   82d0c:	8809883a 	mov	r4,r17
   82d10:	0080e540 	call	80e54 <_malloc_r>
   82d14:	10002c26 	beq	r2,zero,82dc8 <__smakebuf_r+0x17c>
   82d18:	80c0030b 	ldhu	r3,12(r16)
   82d1c:	01000234 	movhi	r4,8
   82d20:	21011e04 	addi	r4,r4,1144
   82d24:	89000f15 	stw	r4,60(r17)
   82d28:	18c02014 	ori	r3,r3,128
   82d2c:	80c0030d 	sth	r3,12(r16)
   82d30:	80800015 	stw	r2,0(r16)
   82d34:	80800415 	stw	r2,16(r16)
   82d38:	84800515 	stw	r18,20(r16)
   82d3c:	98001a1e 	bne	r19,zero,82da8 <__smakebuf_r+0x15c>
   82d40:	dfc01317 	ldw	ra,76(sp)
   82d44:	dcc01217 	ldw	r19,72(sp)
   82d48:	dc801117 	ldw	r18,68(sp)
   82d4c:	dc401017 	ldw	r17,64(sp)
   82d50:	dc000f17 	ldw	r16,60(sp)
   82d54:	dec01404 	addi	sp,sp,80
   82d58:	f800283a 	ret
   82d5c:	288010c4 	addi	r2,r5,67
   82d60:	28800015 	stw	r2,0(r5)
   82d64:	28800415 	stw	r2,16(r5)
   82d68:	00800044 	movi	r2,1
   82d6c:	28800515 	stw	r2,20(r5)
   82d70:	f800283a 	ret
   82d74:	04801004 	movi	r18,64
   82d78:	003fe006 	br	82cfc <__smakebuf_r+0xb0>
   82d7c:	81000a17 	ldw	r4,40(r16)
   82d80:	00c00234 	movhi	r3,8
   82d84:	18c86804 	addi	r3,r3,8608
   82d88:	20ffc51e 	bne	r4,r3,82ca0 <__smakebuf_r+0x54>
   82d8c:	8080030b 	ldhu	r2,12(r16)
   82d90:	04810004 	movi	r18,1024
   82d94:	84801315 	stw	r18,76(r16)
   82d98:	1484b03a 	or	r2,r2,r18
   82d9c:	8080030d 	sth	r2,12(r16)
   82da0:	0027883a 	mov	r19,zero
   82da4:	003fd806 	br	82d08 <__smakebuf_r+0xbc>
   82da8:	8140038f 	ldh	r5,14(r16)
   82dac:	8809883a 	mov	r4,r17
   82db0:	0082ec40 	call	82ec4 <_isatty_r>
   82db4:	103fe226 	beq	r2,zero,82d40 <__smakebuf_r+0xf4>
   82db8:	8080030b 	ldhu	r2,12(r16)
   82dbc:	10800054 	ori	r2,r2,1
   82dc0:	8080030d 	sth	r2,12(r16)
   82dc4:	003fde06 	br	82d40 <__smakebuf_r+0xf4>
   82dc8:	8080030b 	ldhu	r2,12(r16)
   82dcc:	10c0800c 	andi	r3,r2,512
   82dd0:	183fdb1e 	bne	r3,zero,82d40 <__smakebuf_r+0xf4>
   82dd4:	10800094 	ori	r2,r2,2
   82dd8:	80c010c4 	addi	r3,r16,67
   82ddc:	8080030d 	sth	r2,12(r16)
   82de0:	00800044 	movi	r2,1
   82de4:	80c00015 	stw	r3,0(r16)
   82de8:	80c00415 	stw	r3,16(r16)
   82dec:	80800515 	stw	r2,20(r16)
   82df0:	003fd306 	br	82d40 <__smakebuf_r+0xf4>
   82df4:	04810004 	movi	r18,1024
   82df8:	003fc306 	br	82d08 <__smakebuf_r+0xbc>
   82dfc:	0027883a 	mov	r19,zero
   82e00:	04810004 	movi	r18,1024
   82e04:	003fc006 	br	82d08 <__smakebuf_r+0xbc>

00082e08 <_read_r>:
   82e08:	defffd04 	addi	sp,sp,-12
   82e0c:	2805883a 	mov	r2,r5
   82e10:	dc000015 	stw	r16,0(sp)
   82e14:	04000274 	movhi	r16,9
   82e18:	dc400115 	stw	r17,4(sp)
   82e1c:	300b883a 	mov	r5,r6
   82e20:	84230904 	addi	r16,r16,-29660
   82e24:	2023883a 	mov	r17,r4
   82e28:	380d883a 	mov	r6,r7
   82e2c:	1009883a 	mov	r4,r2
   82e30:	dfc00215 	stw	ra,8(sp)
   82e34:	80000015 	stw	zero,0(r16)
   82e38:	00836cc0 	call	836cc <read>
   82e3c:	00ffffc4 	movi	r3,-1
   82e40:	10c00526 	beq	r2,r3,82e58 <_read_r+0x50>
   82e44:	dfc00217 	ldw	ra,8(sp)
   82e48:	dc400117 	ldw	r17,4(sp)
   82e4c:	dc000017 	ldw	r16,0(sp)
   82e50:	dec00304 	addi	sp,sp,12
   82e54:	f800283a 	ret
   82e58:	80c00017 	ldw	r3,0(r16)
   82e5c:	183ff926 	beq	r3,zero,82e44 <_read_r+0x3c>
   82e60:	88c00015 	stw	r3,0(r17)
   82e64:	003ff706 	br	82e44 <_read_r+0x3c>

00082e68 <_fstat_r>:
   82e68:	defffd04 	addi	sp,sp,-12
   82e6c:	2805883a 	mov	r2,r5
   82e70:	dc000015 	stw	r16,0(sp)
   82e74:	04000274 	movhi	r16,9
   82e78:	dc400115 	stw	r17,4(sp)
   82e7c:	84230904 	addi	r16,r16,-29660
   82e80:	2023883a 	mov	r17,r4
   82e84:	300b883a 	mov	r5,r6
   82e88:	1009883a 	mov	r4,r2
   82e8c:	dfc00215 	stw	ra,8(sp)
   82e90:	80000015 	stw	zero,0(r16)
   82e94:	00832400 	call	83240 <fstat>
   82e98:	00ffffc4 	movi	r3,-1
   82e9c:	10c00526 	beq	r2,r3,82eb4 <_fstat_r+0x4c>
   82ea0:	dfc00217 	ldw	ra,8(sp)
   82ea4:	dc400117 	ldw	r17,4(sp)
   82ea8:	dc000017 	ldw	r16,0(sp)
   82eac:	dec00304 	addi	sp,sp,12
   82eb0:	f800283a 	ret
   82eb4:	80c00017 	ldw	r3,0(r16)
   82eb8:	183ff926 	beq	r3,zero,82ea0 <_fstat_r+0x38>
   82ebc:	88c00015 	stw	r3,0(r17)
   82ec0:	003ff706 	br	82ea0 <_fstat_r+0x38>

00082ec4 <_isatty_r>:
   82ec4:	defffd04 	addi	sp,sp,-12
   82ec8:	dc000015 	stw	r16,0(sp)
   82ecc:	04000274 	movhi	r16,9
   82ed0:	dc400115 	stw	r17,4(sp)
   82ed4:	84230904 	addi	r16,r16,-29660
   82ed8:	2023883a 	mov	r17,r4
   82edc:	2809883a 	mov	r4,r5
   82ee0:	dfc00215 	stw	ra,8(sp)
   82ee4:	80000015 	stw	zero,0(r16)
   82ee8:	008332c0 	call	8332c <isatty>
   82eec:	00ffffc4 	movi	r3,-1
   82ef0:	10c00526 	beq	r2,r3,82f08 <_isatty_r+0x44>
   82ef4:	dfc00217 	ldw	ra,8(sp)
   82ef8:	dc400117 	ldw	r17,4(sp)
   82efc:	dc000017 	ldw	r16,0(sp)
   82f00:	dec00304 	addi	sp,sp,12
   82f04:	f800283a 	ret
   82f08:	80c00017 	ldw	r3,0(r16)
   82f0c:	183ff926 	beq	r3,zero,82ef4 <_isatty_r+0x30>
   82f10:	88c00015 	stw	r3,0(r17)
   82f14:	003ff706 	br	82ef4 <_isatty_r+0x30>

00082f18 <__divsi3>:
   82f18:	20001b16 	blt	r4,zero,82f88 <__divsi3+0x70>
   82f1c:	000f883a 	mov	r7,zero
   82f20:	28001616 	blt	r5,zero,82f7c <__divsi3+0x64>
   82f24:	200d883a 	mov	r6,r4
   82f28:	29001a2e 	bgeu	r5,r4,82f94 <__divsi3+0x7c>
   82f2c:	00800804 	movi	r2,32
   82f30:	00c00044 	movi	r3,1
   82f34:	00000106 	br	82f3c <__divsi3+0x24>
   82f38:	10000d26 	beq	r2,zero,82f70 <__divsi3+0x58>
   82f3c:	294b883a 	add	r5,r5,r5
   82f40:	10bfffc4 	addi	r2,r2,-1
   82f44:	18c7883a 	add	r3,r3,r3
   82f48:	293ffb36 	bltu	r5,r4,82f38 <__divsi3+0x20>
   82f4c:	0005883a 	mov	r2,zero
   82f50:	18000726 	beq	r3,zero,82f70 <__divsi3+0x58>
   82f54:	0005883a 	mov	r2,zero
   82f58:	31400236 	bltu	r6,r5,82f64 <__divsi3+0x4c>
   82f5c:	314dc83a 	sub	r6,r6,r5
   82f60:	10c4b03a 	or	r2,r2,r3
   82f64:	1806d07a 	srli	r3,r3,1
   82f68:	280ad07a 	srli	r5,r5,1
   82f6c:	183ffa1e 	bne	r3,zero,82f58 <__divsi3+0x40>
   82f70:	38000126 	beq	r7,zero,82f78 <__divsi3+0x60>
   82f74:	0085c83a 	sub	r2,zero,r2
   82f78:	f800283a 	ret
   82f7c:	014bc83a 	sub	r5,zero,r5
   82f80:	39c0005c 	xori	r7,r7,1
   82f84:	003fe706 	br	82f24 <__divsi3+0xc>
   82f88:	0109c83a 	sub	r4,zero,r4
   82f8c:	01c00044 	movi	r7,1
   82f90:	003fe306 	br	82f20 <__divsi3+0x8>
   82f94:	00c00044 	movi	r3,1
   82f98:	003fee06 	br	82f54 <__divsi3+0x3c>

00082f9c <__modsi3>:
   82f9c:	20001716 	blt	r4,zero,82ffc <__modsi3+0x60>
   82fa0:	000f883a 	mov	r7,zero
   82fa4:	2005883a 	mov	r2,r4
   82fa8:	28001216 	blt	r5,zero,82ff4 <__modsi3+0x58>
   82fac:	2900162e 	bgeu	r5,r4,83008 <__modsi3+0x6c>
   82fb0:	01800804 	movi	r6,32
   82fb4:	00c00044 	movi	r3,1
   82fb8:	00000106 	br	82fc0 <__modsi3+0x24>
   82fbc:	30000a26 	beq	r6,zero,82fe8 <__modsi3+0x4c>
   82fc0:	294b883a 	add	r5,r5,r5
   82fc4:	31bfffc4 	addi	r6,r6,-1
   82fc8:	18c7883a 	add	r3,r3,r3
   82fcc:	293ffb36 	bltu	r5,r4,82fbc <__modsi3+0x20>
   82fd0:	18000526 	beq	r3,zero,82fe8 <__modsi3+0x4c>
   82fd4:	1806d07a 	srli	r3,r3,1
   82fd8:	11400136 	bltu	r2,r5,82fe0 <__modsi3+0x44>
   82fdc:	1145c83a 	sub	r2,r2,r5
   82fe0:	280ad07a 	srli	r5,r5,1
   82fe4:	183ffb1e 	bne	r3,zero,82fd4 <__modsi3+0x38>
   82fe8:	38000126 	beq	r7,zero,82ff0 <__modsi3+0x54>
   82fec:	0085c83a 	sub	r2,zero,r2
   82ff0:	f800283a 	ret
   82ff4:	014bc83a 	sub	r5,zero,r5
   82ff8:	003fec06 	br	82fac <__modsi3+0x10>
   82ffc:	0109c83a 	sub	r4,zero,r4
   83000:	01c00044 	movi	r7,1
   83004:	003fe706 	br	82fa4 <__modsi3+0x8>
   83008:	00c00044 	movi	r3,1
   8300c:	003ff106 	br	82fd4 <__modsi3+0x38>

00083010 <__udivsi3>:
   83010:	200d883a 	mov	r6,r4
   83014:	2900152e 	bgeu	r5,r4,8306c <__udivsi3+0x5c>
   83018:	28001416 	blt	r5,zero,8306c <__udivsi3+0x5c>
   8301c:	00800804 	movi	r2,32
   83020:	00c00044 	movi	r3,1
   83024:	00000206 	br	83030 <__udivsi3+0x20>
   83028:	10000e26 	beq	r2,zero,83064 <__udivsi3+0x54>
   8302c:	28000516 	blt	r5,zero,83044 <__udivsi3+0x34>
   83030:	294b883a 	add	r5,r5,r5
   83034:	10bfffc4 	addi	r2,r2,-1
   83038:	18c7883a 	add	r3,r3,r3
   8303c:	293ffa36 	bltu	r5,r4,83028 <__udivsi3+0x18>
   83040:	18000826 	beq	r3,zero,83064 <__udivsi3+0x54>
   83044:	0005883a 	mov	r2,zero
   83048:	31400236 	bltu	r6,r5,83054 <__udivsi3+0x44>
   8304c:	314dc83a 	sub	r6,r6,r5
   83050:	10c4b03a 	or	r2,r2,r3
   83054:	1806d07a 	srli	r3,r3,1
   83058:	280ad07a 	srli	r5,r5,1
   8305c:	183ffa1e 	bne	r3,zero,83048 <__udivsi3+0x38>
   83060:	f800283a 	ret
   83064:	0005883a 	mov	r2,zero
   83068:	f800283a 	ret
   8306c:	00c00044 	movi	r3,1
   83070:	003ff406 	br	83044 <__udivsi3+0x34>

00083074 <__umodsi3>:
   83074:	2005883a 	mov	r2,r4
   83078:	2900122e 	bgeu	r5,r4,830c4 <__umodsi3+0x50>
   8307c:	28001116 	blt	r5,zero,830c4 <__umodsi3+0x50>
   83080:	01800804 	movi	r6,32
   83084:	00c00044 	movi	r3,1
   83088:	00000206 	br	83094 <__umodsi3+0x20>
   8308c:	30000c26 	beq	r6,zero,830c0 <__umodsi3+0x4c>
   83090:	28000516 	blt	r5,zero,830a8 <__umodsi3+0x34>
   83094:	294b883a 	add	r5,r5,r5
   83098:	31bfffc4 	addi	r6,r6,-1
   8309c:	18c7883a 	add	r3,r3,r3
   830a0:	293ffa36 	bltu	r5,r4,8308c <__umodsi3+0x18>
   830a4:	18000626 	beq	r3,zero,830c0 <__umodsi3+0x4c>
   830a8:	1806d07a 	srli	r3,r3,1
   830ac:	11400136 	bltu	r2,r5,830b4 <__umodsi3+0x40>
   830b0:	1145c83a 	sub	r2,r2,r5
   830b4:	280ad07a 	srli	r5,r5,1
   830b8:	183ffb1e 	bne	r3,zero,830a8 <__umodsi3+0x34>
   830bc:	f800283a 	ret
   830c0:	f800283a 	ret
   830c4:	00c00044 	movi	r3,1
   830c8:	003ff706 	br	830a8 <__umodsi3+0x34>

000830cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   830cc:	defffe04 	addi	sp,sp,-8
   830d0:	dfc00115 	stw	ra,4(sp)
   830d4:	df000015 	stw	fp,0(sp)
   830d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   830dc:	d0a00917 	ldw	r2,-32732(gp)
   830e0:	10000326 	beq	r2,zero,830f0 <alt_get_errno+0x24>
   830e4:	d0a00917 	ldw	r2,-32732(gp)
   830e8:	103ee83a 	callr	r2
   830ec:	00000106 	br	830f4 <alt_get_errno+0x28>
   830f0:	d0a6b804 	addi	r2,gp,-25888
}
   830f4:	e037883a 	mov	sp,fp
   830f8:	dfc00117 	ldw	ra,4(sp)
   830fc:	df000017 	ldw	fp,0(sp)
   83100:	dec00204 	addi	sp,sp,8
   83104:	f800283a 	ret

00083108 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   83108:	defffb04 	addi	sp,sp,-20
   8310c:	dfc00415 	stw	ra,16(sp)
   83110:	df000315 	stw	fp,12(sp)
   83114:	df000304 	addi	fp,sp,12
   83118:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8311c:	e0bfff17 	ldw	r2,-4(fp)
   83120:	10000616 	blt	r2,zero,8313c <close+0x34>
   83124:	e0bfff17 	ldw	r2,-4(fp)
   83128:	10c00324 	muli	r3,r2,12
   8312c:	00800234 	movhi	r2,8
   83130:	1097cd04 	addi	r2,r2,24372
   83134:	1885883a 	add	r2,r3,r2
   83138:	00000106 	br	83140 <close+0x38>
   8313c:	0005883a 	mov	r2,zero
   83140:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   83144:	e0bffd17 	ldw	r2,-12(fp)
   83148:	10001926 	beq	r2,zero,831b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8314c:	e0bffd17 	ldw	r2,-12(fp)
   83150:	10800017 	ldw	r2,0(r2)
   83154:	10800417 	ldw	r2,16(r2)
   83158:	10000626 	beq	r2,zero,83174 <close+0x6c>
   8315c:	e0bffd17 	ldw	r2,-12(fp)
   83160:	10800017 	ldw	r2,0(r2)
   83164:	10800417 	ldw	r2,16(r2)
   83168:	e13ffd17 	ldw	r4,-12(fp)
   8316c:	103ee83a 	callr	r2
   83170:	00000106 	br	83178 <close+0x70>
   83174:	0005883a 	mov	r2,zero
   83178:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8317c:	e13fff17 	ldw	r4,-4(fp)
   83180:	00837c80 	call	837c8 <alt_release_fd>
    if (rval < 0)
   83184:	e0bffe17 	ldw	r2,-8(fp)
   83188:	1000070e 	bge	r2,zero,831a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8318c:	00830cc0 	call	830cc <alt_get_errno>
   83190:	1007883a 	mov	r3,r2
   83194:	e0bffe17 	ldw	r2,-8(fp)
   83198:	0085c83a 	sub	r2,zero,r2
   8319c:	18800015 	stw	r2,0(r3)
      return -1;
   831a0:	00bfffc4 	movi	r2,-1
   831a4:	00000706 	br	831c4 <close+0xbc>
    }
    return 0;
   831a8:	0005883a 	mov	r2,zero
   831ac:	00000506 	br	831c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   831b0:	00830cc0 	call	830cc <alt_get_errno>
   831b4:	1007883a 	mov	r3,r2
   831b8:	00801444 	movi	r2,81
   831bc:	18800015 	stw	r2,0(r3)
    return -1;
   831c0:	00bfffc4 	movi	r2,-1
  }
}
   831c4:	e037883a 	mov	sp,fp
   831c8:	dfc00117 	ldw	ra,4(sp)
   831cc:	df000017 	ldw	fp,0(sp)
   831d0:	dec00204 	addi	sp,sp,8
   831d4:	f800283a 	ret

000831d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   831d8:	defffc04 	addi	sp,sp,-16
   831dc:	df000315 	stw	fp,12(sp)
   831e0:	df000304 	addi	fp,sp,12
   831e4:	e13ffd15 	stw	r4,-12(fp)
   831e8:	e17ffe15 	stw	r5,-8(fp)
   831ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   831f0:	e0bfff17 	ldw	r2,-4(fp)
}
   831f4:	e037883a 	mov	sp,fp
   831f8:	df000017 	ldw	fp,0(sp)
   831fc:	dec00104 	addi	sp,sp,4
   83200:	f800283a 	ret

00083204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83204:	defffe04 	addi	sp,sp,-8
   83208:	dfc00115 	stw	ra,4(sp)
   8320c:	df000015 	stw	fp,0(sp)
   83210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83214:	d0a00917 	ldw	r2,-32732(gp)
   83218:	10000326 	beq	r2,zero,83228 <alt_get_errno+0x24>
   8321c:	d0a00917 	ldw	r2,-32732(gp)
   83220:	103ee83a 	callr	r2
   83224:	00000106 	br	8322c <alt_get_errno+0x28>
   83228:	d0a6b804 	addi	r2,gp,-25888
}
   8322c:	e037883a 	mov	sp,fp
   83230:	dfc00117 	ldw	ra,4(sp)
   83234:	df000017 	ldw	fp,0(sp)
   83238:	dec00204 	addi	sp,sp,8
   8323c:	f800283a 	ret

00083240 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   83240:	defffb04 	addi	sp,sp,-20
   83244:	dfc00415 	stw	ra,16(sp)
   83248:	df000315 	stw	fp,12(sp)
   8324c:	df000304 	addi	fp,sp,12
   83250:	e13ffe15 	stw	r4,-8(fp)
   83254:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83258:	e0bffe17 	ldw	r2,-8(fp)
   8325c:	10000616 	blt	r2,zero,83278 <fstat+0x38>
   83260:	e0bffe17 	ldw	r2,-8(fp)
   83264:	10c00324 	muli	r3,r2,12
   83268:	00800234 	movhi	r2,8
   8326c:	1097cd04 	addi	r2,r2,24372
   83270:	1885883a 	add	r2,r3,r2
   83274:	00000106 	br	8327c <fstat+0x3c>
   83278:	0005883a 	mov	r2,zero
   8327c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   83280:	e0bffd17 	ldw	r2,-12(fp)
   83284:	10001026 	beq	r2,zero,832c8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   83288:	e0bffd17 	ldw	r2,-12(fp)
   8328c:	10800017 	ldw	r2,0(r2)
   83290:	10800817 	ldw	r2,32(r2)
   83294:	10000726 	beq	r2,zero,832b4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   83298:	e0bffd17 	ldw	r2,-12(fp)
   8329c:	10800017 	ldw	r2,0(r2)
   832a0:	10800817 	ldw	r2,32(r2)
   832a4:	e17fff17 	ldw	r5,-4(fp)
   832a8:	e13ffd17 	ldw	r4,-12(fp)
   832ac:	103ee83a 	callr	r2
   832b0:	00000a06 	br	832dc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   832b4:	e0bfff17 	ldw	r2,-4(fp)
   832b8:	00c80004 	movi	r3,8192
   832bc:	10c00115 	stw	r3,4(r2)
      return 0;
   832c0:	0005883a 	mov	r2,zero
   832c4:	00000506 	br	832dc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   832c8:	00832040 	call	83204 <alt_get_errno>
   832cc:	1007883a 	mov	r3,r2
   832d0:	00801444 	movi	r2,81
   832d4:	18800015 	stw	r2,0(r3)
    return -1;
   832d8:	00bfffc4 	movi	r2,-1
  }
}
   832dc:	e037883a 	mov	sp,fp
   832e0:	dfc00117 	ldw	ra,4(sp)
   832e4:	df000017 	ldw	fp,0(sp)
   832e8:	dec00204 	addi	sp,sp,8
   832ec:	f800283a 	ret

000832f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   832f0:	defffe04 	addi	sp,sp,-8
   832f4:	dfc00115 	stw	ra,4(sp)
   832f8:	df000015 	stw	fp,0(sp)
   832fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83300:	d0a00917 	ldw	r2,-32732(gp)
   83304:	10000326 	beq	r2,zero,83314 <alt_get_errno+0x24>
   83308:	d0a00917 	ldw	r2,-32732(gp)
   8330c:	103ee83a 	callr	r2
   83310:	00000106 	br	83318 <alt_get_errno+0x28>
   83314:	d0a6b804 	addi	r2,gp,-25888
}
   83318:	e037883a 	mov	sp,fp
   8331c:	dfc00117 	ldw	ra,4(sp)
   83320:	df000017 	ldw	fp,0(sp)
   83324:	dec00204 	addi	sp,sp,8
   83328:	f800283a 	ret

0008332c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8332c:	deffed04 	addi	sp,sp,-76
   83330:	dfc01215 	stw	ra,72(sp)
   83334:	df001115 	stw	fp,68(sp)
   83338:	df001104 	addi	fp,sp,68
   8333c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83340:	e0bfff17 	ldw	r2,-4(fp)
   83344:	10000616 	blt	r2,zero,83360 <isatty+0x34>
   83348:	e0bfff17 	ldw	r2,-4(fp)
   8334c:	10c00324 	muli	r3,r2,12
   83350:	00800234 	movhi	r2,8
   83354:	1097cd04 	addi	r2,r2,24372
   83358:	1885883a 	add	r2,r3,r2
   8335c:	00000106 	br	83364 <isatty+0x38>
   83360:	0005883a 	mov	r2,zero
   83364:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   83368:	e0bfef17 	ldw	r2,-68(fp)
   8336c:	10000e26 	beq	r2,zero,833a8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83370:	e0bfef17 	ldw	r2,-68(fp)
   83374:	10800017 	ldw	r2,0(r2)
   83378:	10800817 	ldw	r2,32(r2)
   8337c:	1000021e 	bne	r2,zero,83388 <isatty+0x5c>
    {
      return 1;
   83380:	00800044 	movi	r2,1
   83384:	00000d06 	br	833bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   83388:	e0bff004 	addi	r2,fp,-64
   8338c:	100b883a 	mov	r5,r2
   83390:	e13fff17 	ldw	r4,-4(fp)
   83394:	00832400 	call	83240 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   83398:	e0bff117 	ldw	r2,-60(fp)
   8339c:	10880020 	cmpeqi	r2,r2,8192
   833a0:	10803fcc 	andi	r2,r2,255
   833a4:	00000506 	br	833bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   833a8:	00832f00 	call	832f0 <alt_get_errno>
   833ac:	1007883a 	mov	r3,r2
   833b0:	00801444 	movi	r2,81
   833b4:	18800015 	stw	r2,0(r3)
    return 0;
   833b8:	0005883a 	mov	r2,zero
  }
}
   833bc:	e037883a 	mov	sp,fp
   833c0:	dfc00117 	ldw	ra,4(sp)
   833c4:	df000017 	ldw	fp,0(sp)
   833c8:	dec00204 	addi	sp,sp,8
   833cc:	f800283a 	ret

000833d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   833d0:	defffc04 	addi	sp,sp,-16
   833d4:	df000315 	stw	fp,12(sp)
   833d8:	df000304 	addi	fp,sp,12
   833dc:	e13ffd15 	stw	r4,-12(fp)
   833e0:	e17ffe15 	stw	r5,-8(fp)
   833e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   833e8:	e0fffe17 	ldw	r3,-8(fp)
   833ec:	e0bffd17 	ldw	r2,-12(fp)
   833f0:	18800c26 	beq	r3,r2,83424 <alt_load_section+0x54>
  {
    while( to != end )
   833f4:	00000806 	br	83418 <alt_load_section+0x48>
    {
      *to++ = *from++;
   833f8:	e0bffe17 	ldw	r2,-8(fp)
   833fc:	10c00104 	addi	r3,r2,4
   83400:	e0fffe15 	stw	r3,-8(fp)
   83404:	e0fffd17 	ldw	r3,-12(fp)
   83408:	19000104 	addi	r4,r3,4
   8340c:	e13ffd15 	stw	r4,-12(fp)
   83410:	18c00017 	ldw	r3,0(r3)
   83414:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   83418:	e0fffe17 	ldw	r3,-8(fp)
   8341c:	e0bfff17 	ldw	r2,-4(fp)
   83420:	18bff51e 	bne	r3,r2,833f8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83424:	0001883a 	nop
   83428:	e037883a 	mov	sp,fp
   8342c:	df000017 	ldw	fp,0(sp)
   83430:	dec00104 	addi	sp,sp,4
   83434:	f800283a 	ret

00083438 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83438:	defffe04 	addi	sp,sp,-8
   8343c:	dfc00115 	stw	ra,4(sp)
   83440:	df000015 	stw	fp,0(sp)
   83444:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83448:	01800234 	movhi	r6,8
   8344c:	319c5f04 	addi	r6,r6,29052
   83450:	01400234 	movhi	r5,8
   83454:	2955b804 	addi	r5,r5,22240
   83458:	01000234 	movhi	r4,8
   8345c:	211c5f04 	addi	r4,r4,29052
   83460:	00833d00 	call	833d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83464:	01800234 	movhi	r6,8
   83468:	31809204 	addi	r6,r6,584
   8346c:	01400234 	movhi	r5,8
   83470:	29400804 	addi	r5,r5,32
   83474:	01000234 	movhi	r4,8
   83478:	21000804 	addi	r4,r4,32
   8347c:	00833d00 	call	833d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83480:	01800234 	movhi	r6,8
   83484:	3195b804 	addi	r6,r6,22240
   83488:	01400234 	movhi	r5,8
   8348c:	29559404 	addi	r5,r5,22096
   83490:	01000234 	movhi	r4,8
   83494:	21159404 	addi	r4,r4,22096
   83498:	00833d00 	call	833d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8349c:	008465c0 	call	8465c <alt_dcache_flush_all>
  alt_icache_flush_all();
   834a0:	00848440 	call	84844 <alt_icache_flush_all>
}
   834a4:	0001883a 	nop
   834a8:	e037883a 	mov	sp,fp
   834ac:	dfc00117 	ldw	ra,4(sp)
   834b0:	df000017 	ldw	fp,0(sp)
   834b4:	dec00204 	addi	sp,sp,8
   834b8:	f800283a 	ret

000834bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   834bc:	defffe04 	addi	sp,sp,-8
   834c0:	dfc00115 	stw	ra,4(sp)
   834c4:	df000015 	stw	fp,0(sp)
   834c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   834cc:	d0a00917 	ldw	r2,-32732(gp)
   834d0:	10000326 	beq	r2,zero,834e0 <alt_get_errno+0x24>
   834d4:	d0a00917 	ldw	r2,-32732(gp)
   834d8:	103ee83a 	callr	r2
   834dc:	00000106 	br	834e4 <alt_get_errno+0x28>
   834e0:	d0a6b804 	addi	r2,gp,-25888
}
   834e4:	e037883a 	mov	sp,fp
   834e8:	dfc00117 	ldw	ra,4(sp)
   834ec:	df000017 	ldw	fp,0(sp)
   834f0:	dec00204 	addi	sp,sp,8
   834f4:	f800283a 	ret

000834f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   834f8:	defff904 	addi	sp,sp,-28
   834fc:	dfc00615 	stw	ra,24(sp)
   83500:	df000515 	stw	fp,20(sp)
   83504:	df000504 	addi	fp,sp,20
   83508:	e13ffd15 	stw	r4,-12(fp)
   8350c:	e17ffe15 	stw	r5,-8(fp)
   83510:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83514:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83518:	e0bffd17 	ldw	r2,-12(fp)
   8351c:	10000616 	blt	r2,zero,83538 <lseek+0x40>
   83520:	e0bffd17 	ldw	r2,-12(fp)
   83524:	10c00324 	muli	r3,r2,12
   83528:	00800234 	movhi	r2,8
   8352c:	1097cd04 	addi	r2,r2,24372
   83530:	1885883a 	add	r2,r3,r2
   83534:	00000106 	br	8353c <lseek+0x44>
   83538:	0005883a 	mov	r2,zero
   8353c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   83540:	e0bffc17 	ldw	r2,-16(fp)
   83544:	10001026 	beq	r2,zero,83588 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   83548:	e0bffc17 	ldw	r2,-16(fp)
   8354c:	10800017 	ldw	r2,0(r2)
   83550:	10800717 	ldw	r2,28(r2)
   83554:	10000926 	beq	r2,zero,8357c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   83558:	e0bffc17 	ldw	r2,-16(fp)
   8355c:	10800017 	ldw	r2,0(r2)
   83560:	10800717 	ldw	r2,28(r2)
   83564:	e1bfff17 	ldw	r6,-4(fp)
   83568:	e17ffe17 	ldw	r5,-8(fp)
   8356c:	e13ffc17 	ldw	r4,-16(fp)
   83570:	103ee83a 	callr	r2
   83574:	e0bffb15 	stw	r2,-20(fp)
   83578:	00000506 	br	83590 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8357c:	00bfde84 	movi	r2,-134
   83580:	e0bffb15 	stw	r2,-20(fp)
   83584:	00000206 	br	83590 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   83588:	00bfebc4 	movi	r2,-81
   8358c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   83590:	e0bffb17 	ldw	r2,-20(fp)
   83594:	1000070e 	bge	r2,zero,835b4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   83598:	00834bc0 	call	834bc <alt_get_errno>
   8359c:	1007883a 	mov	r3,r2
   835a0:	e0bffb17 	ldw	r2,-20(fp)
   835a4:	0085c83a 	sub	r2,zero,r2
   835a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   835ac:	00bfffc4 	movi	r2,-1
   835b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   835b4:	e0bffb17 	ldw	r2,-20(fp)
}
   835b8:	e037883a 	mov	sp,fp
   835bc:	dfc00117 	ldw	ra,4(sp)
   835c0:	df000017 	ldw	fp,0(sp)
   835c4:	dec00204 	addi	sp,sp,8
   835c8:	f800283a 	ret

000835cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   835cc:	defffd04 	addi	sp,sp,-12
   835d0:	dfc00215 	stw	ra,8(sp)
   835d4:	df000115 	stw	fp,4(sp)
   835d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   835dc:	0009883a 	mov	r4,zero
   835e0:	0083a440 	call	83a44 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   835e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   835e8:	0083a7c0 	call	83a7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   835ec:	01800234 	movhi	r6,8
   835f0:	3195aa04 	addi	r6,r6,22184
   835f4:	01400234 	movhi	r5,8
   835f8:	2955aa04 	addi	r5,r5,22184
   835fc:	01000234 	movhi	r4,8
   83600:	2115aa04 	addi	r4,r4,22184
   83604:	008493c0 	call	8493c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   83608:	00847840 	call	84784 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8360c:	01000234 	movhi	r4,8
   83610:	2111f904 	addi	r4,r4,18404
   83614:	00852bc0 	call	852bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83618:	d0a6b917 	ldw	r2,-25884(gp)
   8361c:	d0e6ba17 	ldw	r3,-25880(gp)
   83620:	d126bb17 	ldw	r4,-25876(gp)
   83624:	200d883a 	mov	r6,r4
   83628:	180b883a 	mov	r5,r3
   8362c:	1009883a 	mov	r4,r2
   83630:	00802940 	call	80294 <main>
   83634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83638:	01000044 	movi	r4,1
   8363c:	00831080 	call	83108 <close>
  exit (result);
   83640:	e13fff17 	ldw	r4,-4(fp)
   83644:	00852d00 	call	852d0 <exit>

00083648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83648:	defffe04 	addi	sp,sp,-8
   8364c:	df000115 	stw	fp,4(sp)
   83650:	df000104 	addi	fp,sp,4
   83654:	e13fff15 	stw	r4,-4(fp)
}
   83658:	0001883a 	nop
   8365c:	e037883a 	mov	sp,fp
   83660:	df000017 	ldw	fp,0(sp)
   83664:	dec00104 	addi	sp,sp,4
   83668:	f800283a 	ret

0008366c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8366c:	defffe04 	addi	sp,sp,-8
   83670:	df000115 	stw	fp,4(sp)
   83674:	df000104 	addi	fp,sp,4
   83678:	e13fff15 	stw	r4,-4(fp)
}
   8367c:	0001883a 	nop
   83680:	e037883a 	mov	sp,fp
   83684:	df000017 	ldw	fp,0(sp)
   83688:	dec00104 	addi	sp,sp,4
   8368c:	f800283a 	ret

00083690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83690:	defffe04 	addi	sp,sp,-8
   83694:	dfc00115 	stw	ra,4(sp)
   83698:	df000015 	stw	fp,0(sp)
   8369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   836a0:	d0a00917 	ldw	r2,-32732(gp)
   836a4:	10000326 	beq	r2,zero,836b4 <alt_get_errno+0x24>
   836a8:	d0a00917 	ldw	r2,-32732(gp)
   836ac:	103ee83a 	callr	r2
   836b0:	00000106 	br	836b8 <alt_get_errno+0x28>
   836b4:	d0a6b804 	addi	r2,gp,-25888
}
   836b8:	e037883a 	mov	sp,fp
   836bc:	dfc00117 	ldw	ra,4(sp)
   836c0:	df000017 	ldw	fp,0(sp)
   836c4:	dec00204 	addi	sp,sp,8
   836c8:	f800283a 	ret

000836cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   836cc:	defff904 	addi	sp,sp,-28
   836d0:	dfc00615 	stw	ra,24(sp)
   836d4:	df000515 	stw	fp,20(sp)
   836d8:	df000504 	addi	fp,sp,20
   836dc:	e13ffd15 	stw	r4,-12(fp)
   836e0:	e17ffe15 	stw	r5,-8(fp)
   836e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   836e8:	e0bffd17 	ldw	r2,-12(fp)
   836ec:	10000616 	blt	r2,zero,83708 <read+0x3c>
   836f0:	e0bffd17 	ldw	r2,-12(fp)
   836f4:	10c00324 	muli	r3,r2,12
   836f8:	00800234 	movhi	r2,8
   836fc:	1097cd04 	addi	r2,r2,24372
   83700:	1885883a 	add	r2,r3,r2
   83704:	00000106 	br	8370c <read+0x40>
   83708:	0005883a 	mov	r2,zero
   8370c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   83710:	e0bffb17 	ldw	r2,-20(fp)
   83714:	10002226 	beq	r2,zero,837a0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83718:	e0bffb17 	ldw	r2,-20(fp)
   8371c:	10800217 	ldw	r2,8(r2)
   83720:	108000cc 	andi	r2,r2,3
   83724:	10800060 	cmpeqi	r2,r2,1
   83728:	1000181e 	bne	r2,zero,8378c <read+0xc0>
        (fd->dev->read))
   8372c:	e0bffb17 	ldw	r2,-20(fp)
   83730:	10800017 	ldw	r2,0(r2)
   83734:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83738:	10001426 	beq	r2,zero,8378c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8373c:	e0bffb17 	ldw	r2,-20(fp)
   83740:	10800017 	ldw	r2,0(r2)
   83744:	10800517 	ldw	r2,20(r2)
   83748:	e0ffff17 	ldw	r3,-4(fp)
   8374c:	180d883a 	mov	r6,r3
   83750:	e17ffe17 	ldw	r5,-8(fp)
   83754:	e13ffb17 	ldw	r4,-20(fp)
   83758:	103ee83a 	callr	r2
   8375c:	e0bffc15 	stw	r2,-16(fp)
   83760:	e0bffc17 	ldw	r2,-16(fp)
   83764:	1000070e 	bge	r2,zero,83784 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   83768:	00836900 	call	83690 <alt_get_errno>
   8376c:	1007883a 	mov	r3,r2
   83770:	e0bffc17 	ldw	r2,-16(fp)
   83774:	0085c83a 	sub	r2,zero,r2
   83778:	18800015 	stw	r2,0(r3)
          return -1;
   8377c:	00bfffc4 	movi	r2,-1
   83780:	00000c06 	br	837b4 <read+0xe8>
        }
        return rval;
   83784:	e0bffc17 	ldw	r2,-16(fp)
   83788:	00000a06 	br	837b4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8378c:	00836900 	call	83690 <alt_get_errno>
   83790:	1007883a 	mov	r3,r2
   83794:	00800344 	movi	r2,13
   83798:	18800015 	stw	r2,0(r3)
   8379c:	00000406 	br	837b0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   837a0:	00836900 	call	83690 <alt_get_errno>
   837a4:	1007883a 	mov	r3,r2
   837a8:	00801444 	movi	r2,81
   837ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   837b0:	00bfffc4 	movi	r2,-1
}
   837b4:	e037883a 	mov	sp,fp
   837b8:	dfc00117 	ldw	ra,4(sp)
   837bc:	df000017 	ldw	fp,0(sp)
   837c0:	dec00204 	addi	sp,sp,8
   837c4:	f800283a 	ret

000837c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   837c8:	defffe04 	addi	sp,sp,-8
   837cc:	df000115 	stw	fp,4(sp)
   837d0:	df000104 	addi	fp,sp,4
   837d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   837d8:	e0bfff17 	ldw	r2,-4(fp)
   837dc:	108000d0 	cmplti	r2,r2,3
   837e0:	10000d1e 	bne	r2,zero,83818 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   837e4:	00800234 	movhi	r2,8
   837e8:	1097cd04 	addi	r2,r2,24372
   837ec:	e0ffff17 	ldw	r3,-4(fp)
   837f0:	18c00324 	muli	r3,r3,12
   837f4:	10c5883a 	add	r2,r2,r3
   837f8:	10800204 	addi	r2,r2,8
   837fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   83800:	00800234 	movhi	r2,8
   83804:	1097cd04 	addi	r2,r2,24372
   83808:	e0ffff17 	ldw	r3,-4(fp)
   8380c:	18c00324 	muli	r3,r3,12
   83810:	10c5883a 	add	r2,r2,r3
   83814:	10000015 	stw	zero,0(r2)
  }
}
   83818:	0001883a 	nop
   8381c:	e037883a 	mov	sp,fp
   83820:	df000017 	ldw	fp,0(sp)
   83824:	dec00104 	addi	sp,sp,4
   83828:	f800283a 	ret

0008382c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8382c:	defff904 	addi	sp,sp,-28
   83830:	df000615 	stw	fp,24(sp)
   83834:	df000604 	addi	fp,sp,24
   83838:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8383c:	0005303a 	rdctl	r2,status
   83840:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83844:	e0fffe17 	ldw	r3,-8(fp)
   83848:	00bfff84 	movi	r2,-2
   8384c:	1884703a 	and	r2,r3,r2
   83850:	1001703a 	wrctl	status,r2
  
  return context;
   83854:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   83858:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8385c:	d0a00a17 	ldw	r2,-32728(gp)
   83860:	10c000c4 	addi	r3,r2,3
   83864:	00bfff04 	movi	r2,-4
   83868:	1884703a 	and	r2,r3,r2
   8386c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83870:	d0e00a17 	ldw	r3,-32728(gp)
   83874:	e0bfff17 	ldw	r2,-4(fp)
   83878:	1887883a 	add	r3,r3,r2
   8387c:	008003b4 	movhi	r2,14
   83880:	1086a004 	addi	r2,r2,6784
   83884:	10c0062e 	bgeu	r2,r3,838a0 <sbrk+0x74>
   83888:	e0bffb17 	ldw	r2,-20(fp)
   8388c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83890:	e0bffa17 	ldw	r2,-24(fp)
   83894:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   83898:	00bfffc4 	movi	r2,-1
   8389c:	00000b06 	br	838cc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   838a0:	d0a00a17 	ldw	r2,-32728(gp)
   838a4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   838a8:	d0e00a17 	ldw	r3,-32728(gp)
   838ac:	e0bfff17 	ldw	r2,-4(fp)
   838b0:	1885883a 	add	r2,r3,r2
   838b4:	d0a00a15 	stw	r2,-32728(gp)
   838b8:	e0bffb17 	ldw	r2,-20(fp)
   838bc:	e0bffc15 	stw	r2,-16(fp)
   838c0:	e0bffc17 	ldw	r2,-16(fp)
   838c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   838c8:	e0bffd17 	ldw	r2,-12(fp)
} 
   838cc:	e037883a 	mov	sp,fp
   838d0:	df000017 	ldw	fp,0(sp)
   838d4:	dec00104 	addi	sp,sp,4
   838d8:	f800283a 	ret

000838dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   838dc:	defffe04 	addi	sp,sp,-8
   838e0:	dfc00115 	stw	ra,4(sp)
   838e4:	df000015 	stw	fp,0(sp)
   838e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   838ec:	d0a00917 	ldw	r2,-32732(gp)
   838f0:	10000326 	beq	r2,zero,83900 <alt_get_errno+0x24>
   838f4:	d0a00917 	ldw	r2,-32732(gp)
   838f8:	103ee83a 	callr	r2
   838fc:	00000106 	br	83904 <alt_get_errno+0x28>
   83900:	d0a6b804 	addi	r2,gp,-25888
}
   83904:	e037883a 	mov	sp,fp
   83908:	dfc00117 	ldw	ra,4(sp)
   8390c:	df000017 	ldw	fp,0(sp)
   83910:	dec00204 	addi	sp,sp,8
   83914:	f800283a 	ret

00083918 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   83918:	defff904 	addi	sp,sp,-28
   8391c:	dfc00615 	stw	ra,24(sp)
   83920:	df000515 	stw	fp,20(sp)
   83924:	df000504 	addi	fp,sp,20
   83928:	e13ffd15 	stw	r4,-12(fp)
   8392c:	e17ffe15 	stw	r5,-8(fp)
   83930:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83934:	e0bffd17 	ldw	r2,-12(fp)
   83938:	10000616 	blt	r2,zero,83954 <write+0x3c>
   8393c:	e0bffd17 	ldw	r2,-12(fp)
   83940:	10c00324 	muli	r3,r2,12
   83944:	00800234 	movhi	r2,8
   83948:	1097cd04 	addi	r2,r2,24372
   8394c:	1885883a 	add	r2,r3,r2
   83950:	00000106 	br	83958 <write+0x40>
   83954:	0005883a 	mov	r2,zero
   83958:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8395c:	e0bffb17 	ldw	r2,-20(fp)
   83960:	10002126 	beq	r2,zero,839e8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83964:	e0bffb17 	ldw	r2,-20(fp)
   83968:	10800217 	ldw	r2,8(r2)
   8396c:	108000cc 	andi	r2,r2,3
   83970:	10001826 	beq	r2,zero,839d4 <write+0xbc>
   83974:	e0bffb17 	ldw	r2,-20(fp)
   83978:	10800017 	ldw	r2,0(r2)
   8397c:	10800617 	ldw	r2,24(r2)
   83980:	10001426 	beq	r2,zero,839d4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83984:	e0bffb17 	ldw	r2,-20(fp)
   83988:	10800017 	ldw	r2,0(r2)
   8398c:	10800617 	ldw	r2,24(r2)
   83990:	e0ffff17 	ldw	r3,-4(fp)
   83994:	180d883a 	mov	r6,r3
   83998:	e17ffe17 	ldw	r5,-8(fp)
   8399c:	e13ffb17 	ldw	r4,-20(fp)
   839a0:	103ee83a 	callr	r2
   839a4:	e0bffc15 	stw	r2,-16(fp)
   839a8:	e0bffc17 	ldw	r2,-16(fp)
   839ac:	1000070e 	bge	r2,zero,839cc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   839b0:	00838dc0 	call	838dc <alt_get_errno>
   839b4:	1007883a 	mov	r3,r2
   839b8:	e0bffc17 	ldw	r2,-16(fp)
   839bc:	0085c83a 	sub	r2,zero,r2
   839c0:	18800015 	stw	r2,0(r3)
        return -1;
   839c4:	00bfffc4 	movi	r2,-1
   839c8:	00000c06 	br	839fc <write+0xe4>
      }
      return rval;
   839cc:	e0bffc17 	ldw	r2,-16(fp)
   839d0:	00000a06 	br	839fc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   839d4:	00838dc0 	call	838dc <alt_get_errno>
   839d8:	1007883a 	mov	r3,r2
   839dc:	00800344 	movi	r2,13
   839e0:	18800015 	stw	r2,0(r3)
   839e4:	00000406 	br	839f8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   839e8:	00838dc0 	call	838dc <alt_get_errno>
   839ec:	1007883a 	mov	r3,r2
   839f0:	00801444 	movi	r2,81
   839f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   839f8:	00bfffc4 	movi	r2,-1
}
   839fc:	e037883a 	mov	sp,fp
   83a00:	dfc00117 	ldw	ra,4(sp)
   83a04:	df000017 	ldw	fp,0(sp)
   83a08:	dec00204 	addi	sp,sp,8
   83a0c:	f800283a 	ret

00083a10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83a10:	defffd04 	addi	sp,sp,-12
   83a14:	dfc00215 	stw	ra,8(sp)
   83a18:	df000115 	stw	fp,4(sp)
   83a1c:	df000104 	addi	fp,sp,4
   83a20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83a24:	d1600604 	addi	r5,gp,-32744
   83a28:	e13fff17 	ldw	r4,-4(fp)
   83a2c:	00846e00 	call	846e0 <alt_dev_llist_insert>
}
   83a30:	e037883a 	mov	sp,fp
   83a34:	dfc00117 	ldw	ra,4(sp)
   83a38:	df000017 	ldw	fp,0(sp)
   83a3c:	dec00204 	addi	sp,sp,8
   83a40:	f800283a 	ret

00083a44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83a44:	defffd04 	addi	sp,sp,-12
   83a48:	dfc00215 	stw	ra,8(sp)
   83a4c:	df000115 	stw	fp,4(sp)
   83a50:	df000104 	addi	fp,sp,4
   83a54:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   83a58:	0084f300 	call	84f30 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83a5c:	00800044 	movi	r2,1
   83a60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   83a64:	0001883a 	nop
   83a68:	e037883a 	mov	sp,fp
   83a6c:	dfc00117 	ldw	ra,4(sp)
   83a70:	df000017 	ldw	fp,0(sp)
   83a74:	dec00204 	addi	sp,sp,8
   83a78:	f800283a 	ret

00083a7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83a7c:	defffe04 	addi	sp,sp,-8
   83a80:	dfc00115 	stw	ra,4(sp)
   83a84:	df000015 	stw	fp,0(sp)
   83a88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83a8c:	000d883a 	mov	r6,zero
   83a90:	000b883a 	mov	r5,zero
   83a94:	01000234 	movhi	r4,8
   83a98:	21183704 	addi	r4,r4,24796
   83a9c:	0083c340 	call	83c34 <altera_avalon_jtag_uart_init>
   83aa0:	01000234 	movhi	r4,8
   83aa4:	21182d04 	addi	r4,r4,24756
   83aa8:	0083a100 	call	83a10 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
   83aac:	01000234 	movhi	r4,8
   83ab0:	211c4504 	addi	r4,r4,28948
   83ab4:	0083a100 	call	83a10 <alt_dev_reg>
}
   83ab8:	0001883a 	nop
   83abc:	e037883a 	mov	sp,fp
   83ac0:	dfc00117 	ldw	ra,4(sp)
   83ac4:	df000017 	ldw	fp,0(sp)
   83ac8:	dec00204 	addi	sp,sp,8
   83acc:	f800283a 	ret

00083ad0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83ad0:	defffa04 	addi	sp,sp,-24
   83ad4:	dfc00515 	stw	ra,20(sp)
   83ad8:	df000415 	stw	fp,16(sp)
   83adc:	df000404 	addi	fp,sp,16
   83ae0:	e13ffd15 	stw	r4,-12(fp)
   83ae4:	e17ffe15 	stw	r5,-8(fp)
   83ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83aec:	e0bffd17 	ldw	r2,-12(fp)
   83af0:	10800017 	ldw	r2,0(r2)
   83af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83af8:	e0bffc17 	ldw	r2,-16(fp)
   83afc:	10c00a04 	addi	r3,r2,40
   83b00:	e0bffd17 	ldw	r2,-12(fp)
   83b04:	10800217 	ldw	r2,8(r2)
   83b08:	100f883a 	mov	r7,r2
   83b0c:	e1bfff17 	ldw	r6,-4(fp)
   83b10:	e17ffe17 	ldw	r5,-8(fp)
   83b14:	1809883a 	mov	r4,r3
   83b18:	00840f00 	call	840f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83b1c:	e037883a 	mov	sp,fp
   83b20:	dfc00117 	ldw	ra,4(sp)
   83b24:	df000017 	ldw	fp,0(sp)
   83b28:	dec00204 	addi	sp,sp,8
   83b2c:	f800283a 	ret

00083b30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83b30:	defffa04 	addi	sp,sp,-24
   83b34:	dfc00515 	stw	ra,20(sp)
   83b38:	df000415 	stw	fp,16(sp)
   83b3c:	df000404 	addi	fp,sp,16
   83b40:	e13ffd15 	stw	r4,-12(fp)
   83b44:	e17ffe15 	stw	r5,-8(fp)
   83b48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83b4c:	e0bffd17 	ldw	r2,-12(fp)
   83b50:	10800017 	ldw	r2,0(r2)
   83b54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83b58:	e0bffc17 	ldw	r2,-16(fp)
   83b5c:	10c00a04 	addi	r3,r2,40
   83b60:	e0bffd17 	ldw	r2,-12(fp)
   83b64:	10800217 	ldw	r2,8(r2)
   83b68:	100f883a 	mov	r7,r2
   83b6c:	e1bfff17 	ldw	r6,-4(fp)
   83b70:	e17ffe17 	ldw	r5,-8(fp)
   83b74:	1809883a 	mov	r4,r3
   83b78:	008430c0 	call	8430c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83b7c:	e037883a 	mov	sp,fp
   83b80:	dfc00117 	ldw	ra,4(sp)
   83b84:	df000017 	ldw	fp,0(sp)
   83b88:	dec00204 	addi	sp,sp,8
   83b8c:	f800283a 	ret

00083b90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83b90:	defffc04 	addi	sp,sp,-16
   83b94:	dfc00315 	stw	ra,12(sp)
   83b98:	df000215 	stw	fp,8(sp)
   83b9c:	df000204 	addi	fp,sp,8
   83ba0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83ba4:	e0bfff17 	ldw	r2,-4(fp)
   83ba8:	10800017 	ldw	r2,0(r2)
   83bac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83bb0:	e0bffe17 	ldw	r2,-8(fp)
   83bb4:	10c00a04 	addi	r3,r2,40
   83bb8:	e0bfff17 	ldw	r2,-4(fp)
   83bbc:	10800217 	ldw	r2,8(r2)
   83bc0:	100b883a 	mov	r5,r2
   83bc4:	1809883a 	mov	r4,r3
   83bc8:	0083f980 	call	83f98 <altera_avalon_jtag_uart_close>
}
   83bcc:	e037883a 	mov	sp,fp
   83bd0:	dfc00117 	ldw	ra,4(sp)
   83bd4:	df000017 	ldw	fp,0(sp)
   83bd8:	dec00204 	addi	sp,sp,8
   83bdc:	f800283a 	ret

00083be0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83be0:	defffa04 	addi	sp,sp,-24
   83be4:	dfc00515 	stw	ra,20(sp)
   83be8:	df000415 	stw	fp,16(sp)
   83bec:	df000404 	addi	fp,sp,16
   83bf0:	e13ffd15 	stw	r4,-12(fp)
   83bf4:	e17ffe15 	stw	r5,-8(fp)
   83bf8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83bfc:	e0bffd17 	ldw	r2,-12(fp)
   83c00:	10800017 	ldw	r2,0(r2)
   83c04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83c08:	e0bffc17 	ldw	r2,-16(fp)
   83c0c:	10800a04 	addi	r2,r2,40
   83c10:	e1bfff17 	ldw	r6,-4(fp)
   83c14:	e17ffe17 	ldw	r5,-8(fp)
   83c18:	1009883a 	mov	r4,r2
   83c1c:	00840000 	call	84000 <altera_avalon_jtag_uart_ioctl>
}
   83c20:	e037883a 	mov	sp,fp
   83c24:	dfc00117 	ldw	ra,4(sp)
   83c28:	df000017 	ldw	fp,0(sp)
   83c2c:	dec00204 	addi	sp,sp,8
   83c30:	f800283a 	ret

00083c34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83c34:	defffb04 	addi	sp,sp,-20
   83c38:	dfc00415 	stw	ra,16(sp)
   83c3c:	df000315 	stw	fp,12(sp)
   83c40:	df000304 	addi	fp,sp,12
   83c44:	e13ffd15 	stw	r4,-12(fp)
   83c48:	e17ffe15 	stw	r5,-8(fp)
   83c4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83c50:	e0bffd17 	ldw	r2,-12(fp)
   83c54:	00c00044 	movi	r3,1
   83c58:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83c5c:	e0bffd17 	ldw	r2,-12(fp)
   83c60:	10800017 	ldw	r2,0(r2)
   83c64:	10800104 	addi	r2,r2,4
   83c68:	1007883a 	mov	r3,r2
   83c6c:	e0bffd17 	ldw	r2,-12(fp)
   83c70:	10800817 	ldw	r2,32(r2)
   83c74:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   83c78:	e0bfff17 	ldw	r2,-4(fp)
   83c7c:	01800234 	movhi	r6,8
   83c80:	318f3a04 	addi	r6,r6,15592
   83c84:	e17ffd17 	ldw	r5,-12(fp)
   83c88:	1009883a 	mov	r4,r2
   83c8c:	00849b80 	call	849b8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83c90:	e0bffd17 	ldw	r2,-12(fp)
   83c94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83c98:	e0bffd17 	ldw	r2,-12(fp)
   83c9c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83ca0:	d0e6bd17 	ldw	r3,-25868(gp)
   83ca4:	e1fffd17 	ldw	r7,-12(fp)
   83ca8:	01800234 	movhi	r6,8
   83cac:	318fbe04 	addi	r6,r6,16120
   83cb0:	180b883a 	mov	r5,r3
   83cb4:	1009883a 	mov	r4,r2
   83cb8:	00845300 	call	84530 <alt_alarm_start>
   83cbc:	1000040e 	bge	r2,zero,83cd0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83cc0:	e0fffd17 	ldw	r3,-12(fp)
   83cc4:	00a00034 	movhi	r2,32768
   83cc8:	10bfffc4 	addi	r2,r2,-1
   83ccc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83cd0:	0001883a 	nop
   83cd4:	e037883a 	mov	sp,fp
   83cd8:	dfc00117 	ldw	ra,4(sp)
   83cdc:	df000017 	ldw	fp,0(sp)
   83ce0:	dec00204 	addi	sp,sp,8
   83ce4:	f800283a 	ret

00083ce8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83ce8:	defff704 	addi	sp,sp,-36
   83cec:	df000815 	stw	fp,32(sp)
   83cf0:	df000804 	addi	fp,sp,32
   83cf4:	e13ffe15 	stw	r4,-8(fp)
   83cf8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83cfc:	e0bffe17 	ldw	r2,-8(fp)
   83d00:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   83d04:	e0bffa17 	ldw	r2,-24(fp)
   83d08:	10800017 	ldw	r2,0(r2)
   83d0c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83d10:	e0bffb17 	ldw	r2,-20(fp)
   83d14:	10800104 	addi	r2,r2,4
   83d18:	10800037 	ldwio	r2,0(r2)
   83d1c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83d20:	e0bffc17 	ldw	r2,-16(fp)
   83d24:	1080c00c 	andi	r2,r2,768
   83d28:	10006d26 	beq	r2,zero,83ee0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83d2c:	e0bffc17 	ldw	r2,-16(fp)
   83d30:	1080400c 	andi	r2,r2,256
   83d34:	10003526 	beq	r2,zero,83e0c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83d38:	00800074 	movhi	r2,1
   83d3c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83d40:	e0bffa17 	ldw	r2,-24(fp)
   83d44:	10800a17 	ldw	r2,40(r2)
   83d48:	10800044 	addi	r2,r2,1
   83d4c:	1081ffcc 	andi	r2,r2,2047
   83d50:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   83d54:	e0bffa17 	ldw	r2,-24(fp)
   83d58:	10c00b17 	ldw	r3,44(r2)
   83d5c:	e0bffd17 	ldw	r2,-12(fp)
   83d60:	18801526 	beq	r3,r2,83db8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83d64:	e0bffb17 	ldw	r2,-20(fp)
   83d68:	10800037 	ldwio	r2,0(r2)
   83d6c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83d70:	e0bff817 	ldw	r2,-32(fp)
   83d74:	10a0000c 	andi	r2,r2,32768
   83d78:	10001126 	beq	r2,zero,83dc0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83d7c:	e0bffa17 	ldw	r2,-24(fp)
   83d80:	10800a17 	ldw	r2,40(r2)
   83d84:	e0fff817 	ldw	r3,-32(fp)
   83d88:	1809883a 	mov	r4,r3
   83d8c:	e0fffa17 	ldw	r3,-24(fp)
   83d90:	1885883a 	add	r2,r3,r2
   83d94:	10800e04 	addi	r2,r2,56
   83d98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83d9c:	e0bffa17 	ldw	r2,-24(fp)
   83da0:	10800a17 	ldw	r2,40(r2)
   83da4:	10800044 	addi	r2,r2,1
   83da8:	10c1ffcc 	andi	r3,r2,2047
   83dac:	e0bffa17 	ldw	r2,-24(fp)
   83db0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83db4:	003fe206 	br	83d40 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   83db8:	0001883a 	nop
   83dbc:	00000106 	br	83dc4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   83dc0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83dc4:	e0bff817 	ldw	r2,-32(fp)
   83dc8:	10bfffec 	andhi	r2,r2,65535
   83dcc:	10000f26 	beq	r2,zero,83e0c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83dd0:	e0bffa17 	ldw	r2,-24(fp)
   83dd4:	10c00817 	ldw	r3,32(r2)
   83dd8:	00bfff84 	movi	r2,-2
   83ddc:	1886703a 	and	r3,r3,r2
   83de0:	e0bffa17 	ldw	r2,-24(fp)
   83de4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83de8:	e0bffb17 	ldw	r2,-20(fp)
   83dec:	10800104 	addi	r2,r2,4
   83df0:	1007883a 	mov	r3,r2
   83df4:	e0bffa17 	ldw	r2,-24(fp)
   83df8:	10800817 	ldw	r2,32(r2)
   83dfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83e00:	e0bffb17 	ldw	r2,-20(fp)
   83e04:	10800104 	addi	r2,r2,4
   83e08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83e0c:	e0bffc17 	ldw	r2,-16(fp)
   83e10:	1080800c 	andi	r2,r2,512
   83e14:	103fbe26 	beq	r2,zero,83d10 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83e18:	e0bffc17 	ldw	r2,-16(fp)
   83e1c:	1004d43a 	srli	r2,r2,16
   83e20:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83e24:	00001406 	br	83e78 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83e28:	e0bffb17 	ldw	r2,-20(fp)
   83e2c:	e0fffa17 	ldw	r3,-24(fp)
   83e30:	18c00d17 	ldw	r3,52(r3)
   83e34:	e13ffa17 	ldw	r4,-24(fp)
   83e38:	20c7883a 	add	r3,r4,r3
   83e3c:	18c20e04 	addi	r3,r3,2104
   83e40:	18c00003 	ldbu	r3,0(r3)
   83e44:	18c03fcc 	andi	r3,r3,255
   83e48:	18c0201c 	xori	r3,r3,128
   83e4c:	18ffe004 	addi	r3,r3,-128
   83e50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83e54:	e0bffa17 	ldw	r2,-24(fp)
   83e58:	10800d17 	ldw	r2,52(r2)
   83e5c:	10800044 	addi	r2,r2,1
   83e60:	10c1ffcc 	andi	r3,r2,2047
   83e64:	e0bffa17 	ldw	r2,-24(fp)
   83e68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83e6c:	e0bff917 	ldw	r2,-28(fp)
   83e70:	10bfffc4 	addi	r2,r2,-1
   83e74:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   83e78:	e0bff917 	ldw	r2,-28(fp)
   83e7c:	10000526 	beq	r2,zero,83e94 <altera_avalon_jtag_uart_irq+0x1ac>
   83e80:	e0bffa17 	ldw	r2,-24(fp)
   83e84:	10c00d17 	ldw	r3,52(r2)
   83e88:	e0bffa17 	ldw	r2,-24(fp)
   83e8c:	10800c17 	ldw	r2,48(r2)
   83e90:	18bfe51e 	bne	r3,r2,83e28 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   83e94:	e0bff917 	ldw	r2,-28(fp)
   83e98:	103f9d26 	beq	r2,zero,83d10 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83e9c:	e0bffa17 	ldw	r2,-24(fp)
   83ea0:	10c00817 	ldw	r3,32(r2)
   83ea4:	00bfff44 	movi	r2,-3
   83ea8:	1886703a 	and	r3,r3,r2
   83eac:	e0bffa17 	ldw	r2,-24(fp)
   83eb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83eb4:	e0bffa17 	ldw	r2,-24(fp)
   83eb8:	10800017 	ldw	r2,0(r2)
   83ebc:	10800104 	addi	r2,r2,4
   83ec0:	1007883a 	mov	r3,r2
   83ec4:	e0bffa17 	ldw	r2,-24(fp)
   83ec8:	10800817 	ldw	r2,32(r2)
   83ecc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83ed0:	e0bffb17 	ldw	r2,-20(fp)
   83ed4:	10800104 	addi	r2,r2,4
   83ed8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83edc:	003f8c06 	br	83d10 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   83ee0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   83ee4:	0001883a 	nop
   83ee8:	e037883a 	mov	sp,fp
   83eec:	df000017 	ldw	fp,0(sp)
   83ef0:	dec00104 	addi	sp,sp,4
   83ef4:	f800283a 	ret

00083ef8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83ef8:	defff804 	addi	sp,sp,-32
   83efc:	df000715 	stw	fp,28(sp)
   83f00:	df000704 	addi	fp,sp,28
   83f04:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83f08:	e0bffb17 	ldw	r2,-20(fp)
   83f0c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83f10:	e0bff917 	ldw	r2,-28(fp)
   83f14:	10800017 	ldw	r2,0(r2)
   83f18:	10800104 	addi	r2,r2,4
   83f1c:	10800037 	ldwio	r2,0(r2)
   83f20:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83f24:	e0bffa17 	ldw	r2,-24(fp)
   83f28:	1081000c 	andi	r2,r2,1024
   83f2c:	10000b26 	beq	r2,zero,83f5c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83f30:	e0bff917 	ldw	r2,-28(fp)
   83f34:	10800017 	ldw	r2,0(r2)
   83f38:	10800104 	addi	r2,r2,4
   83f3c:	1007883a 	mov	r3,r2
   83f40:	e0bff917 	ldw	r2,-28(fp)
   83f44:	10800817 	ldw	r2,32(r2)
   83f48:	10810014 	ori	r2,r2,1024
   83f4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   83f50:	e0bff917 	ldw	r2,-28(fp)
   83f54:	10000915 	stw	zero,36(r2)
   83f58:	00000a06 	br	83f84 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83f5c:	e0bff917 	ldw	r2,-28(fp)
   83f60:	10c00917 	ldw	r3,36(r2)
   83f64:	00a00034 	movhi	r2,32768
   83f68:	10bfff04 	addi	r2,r2,-4
   83f6c:	10c00536 	bltu	r2,r3,83f84 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   83f70:	e0bff917 	ldw	r2,-28(fp)
   83f74:	10800917 	ldw	r2,36(r2)
   83f78:	10c00044 	addi	r3,r2,1
   83f7c:	e0bff917 	ldw	r2,-28(fp)
   83f80:	10c00915 	stw	r3,36(r2)
   83f84:	d0a6bd17 	ldw	r2,-25868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   83f88:	e037883a 	mov	sp,fp
   83f8c:	df000017 	ldw	fp,0(sp)
   83f90:	dec00104 	addi	sp,sp,4
   83f94:	f800283a 	ret

00083f98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   83f98:	defffd04 	addi	sp,sp,-12
   83f9c:	df000215 	stw	fp,8(sp)
   83fa0:	df000204 	addi	fp,sp,8
   83fa4:	e13ffe15 	stw	r4,-8(fp)
   83fa8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83fac:	00000506 	br	83fc4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   83fb0:	e0bfff17 	ldw	r2,-4(fp)
   83fb4:	1090000c 	andi	r2,r2,16384
   83fb8:	10000226 	beq	r2,zero,83fc4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   83fbc:	00bffd44 	movi	r2,-11
   83fc0:	00000b06 	br	83ff0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83fc4:	e0bffe17 	ldw	r2,-8(fp)
   83fc8:	10c00d17 	ldw	r3,52(r2)
   83fcc:	e0bffe17 	ldw	r2,-8(fp)
   83fd0:	10800c17 	ldw	r2,48(r2)
   83fd4:	18800526 	beq	r3,r2,83fec <altera_avalon_jtag_uart_close+0x54>
   83fd8:	e0bffe17 	ldw	r2,-8(fp)
   83fdc:	10c00917 	ldw	r3,36(r2)
   83fe0:	e0bffe17 	ldw	r2,-8(fp)
   83fe4:	10800117 	ldw	r2,4(r2)
   83fe8:	18bff136 	bltu	r3,r2,83fb0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   83fec:	0005883a 	mov	r2,zero
}
   83ff0:	e037883a 	mov	sp,fp
   83ff4:	df000017 	ldw	fp,0(sp)
   83ff8:	dec00104 	addi	sp,sp,4
   83ffc:	f800283a 	ret

00084000 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   84000:	defffa04 	addi	sp,sp,-24
   84004:	df000515 	stw	fp,20(sp)
   84008:	df000504 	addi	fp,sp,20
   8400c:	e13ffd15 	stw	r4,-12(fp)
   84010:	e17ffe15 	stw	r5,-8(fp)
   84014:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   84018:	00bff9c4 	movi	r2,-25
   8401c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   84020:	e0bffe17 	ldw	r2,-8(fp)
   84024:	10da8060 	cmpeqi	r3,r2,27137
   84028:	1800031e 	bne	r3,zero,84038 <altera_avalon_jtag_uart_ioctl+0x38>
   8402c:	109a80a0 	cmpeqi	r2,r2,27138
   84030:	1000181e 	bne	r2,zero,84094 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   84034:	00002906 	br	840dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   84038:	e0bffd17 	ldw	r2,-12(fp)
   8403c:	10c00117 	ldw	r3,4(r2)
   84040:	00a00034 	movhi	r2,32768
   84044:	10bfffc4 	addi	r2,r2,-1
   84048:	18802126 	beq	r3,r2,840d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8404c:	e0bfff17 	ldw	r2,-4(fp)
   84050:	10800017 	ldw	r2,0(r2)
   84054:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   84058:	e0bffc17 	ldw	r2,-16(fp)
   8405c:	10800090 	cmplti	r2,r2,2
   84060:	1000061e 	bne	r2,zero,8407c <altera_avalon_jtag_uart_ioctl+0x7c>
   84064:	e0fffc17 	ldw	r3,-16(fp)
   84068:	00a00034 	movhi	r2,32768
   8406c:	10bfffc4 	addi	r2,r2,-1
   84070:	18800226 	beq	r3,r2,8407c <altera_avalon_jtag_uart_ioctl+0x7c>
   84074:	e0bffc17 	ldw	r2,-16(fp)
   84078:	00000206 	br	84084 <altera_avalon_jtag_uart_ioctl+0x84>
   8407c:	00a00034 	movhi	r2,32768
   84080:	10bfff84 	addi	r2,r2,-2
   84084:	e0fffd17 	ldw	r3,-12(fp)
   84088:	18800115 	stw	r2,4(r3)
      rc = 0;
   8408c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   84090:	00000f06 	br	840d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84094:	e0bffd17 	ldw	r2,-12(fp)
   84098:	10c00117 	ldw	r3,4(r2)
   8409c:	00a00034 	movhi	r2,32768
   840a0:	10bfffc4 	addi	r2,r2,-1
   840a4:	18800c26 	beq	r3,r2,840d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   840a8:	e0bffd17 	ldw	r2,-12(fp)
   840ac:	10c00917 	ldw	r3,36(r2)
   840b0:	e0bffd17 	ldw	r2,-12(fp)
   840b4:	10800117 	ldw	r2,4(r2)
   840b8:	1885803a 	cmpltu	r2,r3,r2
   840bc:	10c03fcc 	andi	r3,r2,255
   840c0:	e0bfff17 	ldw	r2,-4(fp)
   840c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   840c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   840cc:	00000206 	br	840d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   840d0:	0001883a 	nop
   840d4:	00000106 	br	840dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   840d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   840dc:	e0bffb17 	ldw	r2,-20(fp)
}
   840e0:	e037883a 	mov	sp,fp
   840e4:	df000017 	ldw	fp,0(sp)
   840e8:	dec00104 	addi	sp,sp,4
   840ec:	f800283a 	ret

000840f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   840f0:	defff304 	addi	sp,sp,-52
   840f4:	dfc00c15 	stw	ra,48(sp)
   840f8:	df000b15 	stw	fp,44(sp)
   840fc:	df000b04 	addi	fp,sp,44
   84100:	e13ffc15 	stw	r4,-16(fp)
   84104:	e17ffd15 	stw	r5,-12(fp)
   84108:	e1bffe15 	stw	r6,-8(fp)
   8410c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   84110:	e0bffd17 	ldw	r2,-12(fp)
   84114:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   84118:	00004706 	br	84238 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8411c:	e0bffc17 	ldw	r2,-16(fp)
   84120:	10800a17 	ldw	r2,40(r2)
   84124:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   84128:	e0bffc17 	ldw	r2,-16(fp)
   8412c:	10800b17 	ldw	r2,44(r2)
   84130:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   84134:	e0fff717 	ldw	r3,-36(fp)
   84138:	e0bff817 	ldw	r2,-32(fp)
   8413c:	18800536 	bltu	r3,r2,84154 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   84140:	e0fff717 	ldw	r3,-36(fp)
   84144:	e0bff817 	ldw	r2,-32(fp)
   84148:	1885c83a 	sub	r2,r3,r2
   8414c:	e0bff615 	stw	r2,-40(fp)
   84150:	00000406 	br	84164 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   84154:	00c20004 	movi	r3,2048
   84158:	e0bff817 	ldw	r2,-32(fp)
   8415c:	1885c83a 	sub	r2,r3,r2
   84160:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84164:	e0bff617 	ldw	r2,-40(fp)
   84168:	10001e26 	beq	r2,zero,841e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8416c:	e0fffe17 	ldw	r3,-8(fp)
   84170:	e0bff617 	ldw	r2,-40(fp)
   84174:	1880022e 	bgeu	r3,r2,84180 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   84178:	e0bffe17 	ldw	r2,-8(fp)
   8417c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   84180:	e0bffc17 	ldw	r2,-16(fp)
   84184:	10c00e04 	addi	r3,r2,56
   84188:	e0bff817 	ldw	r2,-32(fp)
   8418c:	1885883a 	add	r2,r3,r2
   84190:	e1bff617 	ldw	r6,-40(fp)
   84194:	100b883a 	mov	r5,r2
   84198:	e13ff517 	ldw	r4,-44(fp)
   8419c:	00817440 	call	81744 <memcpy>
      ptr   += n;
   841a0:	e0fff517 	ldw	r3,-44(fp)
   841a4:	e0bff617 	ldw	r2,-40(fp)
   841a8:	1885883a 	add	r2,r3,r2
   841ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   841b0:	e0fffe17 	ldw	r3,-8(fp)
   841b4:	e0bff617 	ldw	r2,-40(fp)
   841b8:	1885c83a 	sub	r2,r3,r2
   841bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   841c0:	e0fff817 	ldw	r3,-32(fp)
   841c4:	e0bff617 	ldw	r2,-40(fp)
   841c8:	1885883a 	add	r2,r3,r2
   841cc:	10c1ffcc 	andi	r3,r2,2047
   841d0:	e0bffc17 	ldw	r2,-16(fp)
   841d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   841d8:	e0bffe17 	ldw	r2,-8(fp)
   841dc:	00bfcf16 	blt	zero,r2,8411c <altera_avalon_jtag_uart_read+0x2c>
   841e0:	00000106 	br	841e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   841e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   841e8:	e0fff517 	ldw	r3,-44(fp)
   841ec:	e0bffd17 	ldw	r2,-12(fp)
   841f0:	1880141e 	bne	r3,r2,84244 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   841f4:	e0bfff17 	ldw	r2,-4(fp)
   841f8:	1090000c 	andi	r2,r2,16384
   841fc:	1000131e 	bne	r2,zero,8424c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   84200:	0001883a 	nop
   84204:	e0bffc17 	ldw	r2,-16(fp)
   84208:	10c00a17 	ldw	r3,40(r2)
   8420c:	e0bff717 	ldw	r2,-36(fp)
   84210:	1880051e 	bne	r3,r2,84228 <altera_avalon_jtag_uart_read+0x138>
   84214:	e0bffc17 	ldw	r2,-16(fp)
   84218:	10c00917 	ldw	r3,36(r2)
   8421c:	e0bffc17 	ldw	r2,-16(fp)
   84220:	10800117 	ldw	r2,4(r2)
   84224:	18bff736 	bltu	r3,r2,84204 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   84228:	e0bffc17 	ldw	r2,-16(fp)
   8422c:	10c00a17 	ldw	r3,40(r2)
   84230:	e0bff717 	ldw	r2,-36(fp)
   84234:	18800726 	beq	r3,r2,84254 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   84238:	e0bffe17 	ldw	r2,-8(fp)
   8423c:	00bfb716 	blt	zero,r2,8411c <altera_avalon_jtag_uart_read+0x2c>
   84240:	00000506 	br	84258 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   84244:	0001883a 	nop
   84248:	00000306 	br	84258 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8424c:	0001883a 	nop
   84250:	00000106 	br	84258 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   84254:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   84258:	e0fff517 	ldw	r3,-44(fp)
   8425c:	e0bffd17 	ldw	r2,-12(fp)
   84260:	18801826 	beq	r3,r2,842c4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84264:	0005303a 	rdctl	r2,status
   84268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8426c:	e0fffb17 	ldw	r3,-20(fp)
   84270:	00bfff84 	movi	r2,-2
   84274:	1884703a 	and	r2,r3,r2
   84278:	1001703a 	wrctl	status,r2
  
  return context;
   8427c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   84280:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84284:	e0bffc17 	ldw	r2,-16(fp)
   84288:	10800817 	ldw	r2,32(r2)
   8428c:	10c00054 	ori	r3,r2,1
   84290:	e0bffc17 	ldw	r2,-16(fp)
   84294:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84298:	e0bffc17 	ldw	r2,-16(fp)
   8429c:	10800017 	ldw	r2,0(r2)
   842a0:	10800104 	addi	r2,r2,4
   842a4:	1007883a 	mov	r3,r2
   842a8:	e0bffc17 	ldw	r2,-16(fp)
   842ac:	10800817 	ldw	r2,32(r2)
   842b0:	18800035 	stwio	r2,0(r3)
   842b4:	e0bffa17 	ldw	r2,-24(fp)
   842b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   842bc:	e0bff917 	ldw	r2,-28(fp)
   842c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   842c4:	e0fff517 	ldw	r3,-44(fp)
   842c8:	e0bffd17 	ldw	r2,-12(fp)
   842cc:	18800426 	beq	r3,r2,842e0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   842d0:	e0fff517 	ldw	r3,-44(fp)
   842d4:	e0bffd17 	ldw	r2,-12(fp)
   842d8:	1885c83a 	sub	r2,r3,r2
   842dc:	00000606 	br	842f8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   842e0:	e0bfff17 	ldw	r2,-4(fp)
   842e4:	1090000c 	andi	r2,r2,16384
   842e8:	10000226 	beq	r2,zero,842f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   842ec:	00bffd44 	movi	r2,-11
   842f0:	00000106 	br	842f8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   842f4:	00bffec4 	movi	r2,-5
}
   842f8:	e037883a 	mov	sp,fp
   842fc:	dfc00117 	ldw	ra,4(sp)
   84300:	df000017 	ldw	fp,0(sp)
   84304:	dec00204 	addi	sp,sp,8
   84308:	f800283a 	ret

0008430c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8430c:	defff304 	addi	sp,sp,-52
   84310:	dfc00c15 	stw	ra,48(sp)
   84314:	df000b15 	stw	fp,44(sp)
   84318:	df000b04 	addi	fp,sp,44
   8431c:	e13ffc15 	stw	r4,-16(fp)
   84320:	e17ffd15 	stw	r5,-12(fp)
   84324:	e1bffe15 	stw	r6,-8(fp)
   84328:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8432c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   84330:	e0bffd17 	ldw	r2,-12(fp)
   84334:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84338:	00003706 	br	84418 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8433c:	e0bffc17 	ldw	r2,-16(fp)
   84340:	10800c17 	ldw	r2,48(r2)
   84344:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   84348:	e0bffc17 	ldw	r2,-16(fp)
   8434c:	10800d17 	ldw	r2,52(r2)
   84350:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   84354:	e0fff917 	ldw	r3,-28(fp)
   84358:	e0bff517 	ldw	r2,-44(fp)
   8435c:	1880062e 	bgeu	r3,r2,84378 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   84360:	e0fff517 	ldw	r3,-44(fp)
   84364:	e0bff917 	ldw	r2,-28(fp)
   84368:	1885c83a 	sub	r2,r3,r2
   8436c:	10bfffc4 	addi	r2,r2,-1
   84370:	e0bff615 	stw	r2,-40(fp)
   84374:	00000b06 	br	843a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   84378:	e0bff517 	ldw	r2,-44(fp)
   8437c:	10000526 	beq	r2,zero,84394 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   84380:	00c20004 	movi	r3,2048
   84384:	e0bff917 	ldw	r2,-28(fp)
   84388:	1885c83a 	sub	r2,r3,r2
   8438c:	e0bff615 	stw	r2,-40(fp)
   84390:	00000406 	br	843a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84394:	00c1ffc4 	movi	r3,2047
   84398:	e0bff917 	ldw	r2,-28(fp)
   8439c:	1885c83a 	sub	r2,r3,r2
   843a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   843a4:	e0bff617 	ldw	r2,-40(fp)
   843a8:	10001e26 	beq	r2,zero,84424 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   843ac:	e0fffe17 	ldw	r3,-8(fp)
   843b0:	e0bff617 	ldw	r2,-40(fp)
   843b4:	1880022e 	bgeu	r3,r2,843c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   843b8:	e0bffe17 	ldw	r2,-8(fp)
   843bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   843c0:	e0bffc17 	ldw	r2,-16(fp)
   843c4:	10c20e04 	addi	r3,r2,2104
   843c8:	e0bff917 	ldw	r2,-28(fp)
   843cc:	1885883a 	add	r2,r3,r2
   843d0:	e1bff617 	ldw	r6,-40(fp)
   843d4:	e17ffd17 	ldw	r5,-12(fp)
   843d8:	1009883a 	mov	r4,r2
   843dc:	00817440 	call	81744 <memcpy>
      ptr   += n;
   843e0:	e0fffd17 	ldw	r3,-12(fp)
   843e4:	e0bff617 	ldw	r2,-40(fp)
   843e8:	1885883a 	add	r2,r3,r2
   843ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   843f0:	e0fffe17 	ldw	r3,-8(fp)
   843f4:	e0bff617 	ldw	r2,-40(fp)
   843f8:	1885c83a 	sub	r2,r3,r2
   843fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84400:	e0fff917 	ldw	r3,-28(fp)
   84404:	e0bff617 	ldw	r2,-40(fp)
   84408:	1885883a 	add	r2,r3,r2
   8440c:	10c1ffcc 	andi	r3,r2,2047
   84410:	e0bffc17 	ldw	r2,-16(fp)
   84414:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84418:	e0bffe17 	ldw	r2,-8(fp)
   8441c:	00bfc716 	blt	zero,r2,8433c <altera_avalon_jtag_uart_write+0x30>
   84420:	00000106 	br	84428 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   84424:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84428:	0005303a 	rdctl	r2,status
   8442c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84430:	e0fffb17 	ldw	r3,-20(fp)
   84434:	00bfff84 	movi	r2,-2
   84438:	1884703a 	and	r2,r3,r2
   8443c:	1001703a 	wrctl	status,r2
  
  return context;
   84440:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   84444:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84448:	e0bffc17 	ldw	r2,-16(fp)
   8444c:	10800817 	ldw	r2,32(r2)
   84450:	10c00094 	ori	r3,r2,2
   84454:	e0bffc17 	ldw	r2,-16(fp)
   84458:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8445c:	e0bffc17 	ldw	r2,-16(fp)
   84460:	10800017 	ldw	r2,0(r2)
   84464:	10800104 	addi	r2,r2,4
   84468:	1007883a 	mov	r3,r2
   8446c:	e0bffc17 	ldw	r2,-16(fp)
   84470:	10800817 	ldw	r2,32(r2)
   84474:	18800035 	stwio	r2,0(r3)
   84478:	e0bffa17 	ldw	r2,-24(fp)
   8447c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84480:	e0bff817 	ldw	r2,-32(fp)
   84484:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   84488:	e0bffe17 	ldw	r2,-8(fp)
   8448c:	0080100e 	bge	zero,r2,844d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   84490:	e0bfff17 	ldw	r2,-4(fp)
   84494:	1090000c 	andi	r2,r2,16384
   84498:	1000101e 	bne	r2,zero,844dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8449c:	0001883a 	nop
   844a0:	e0bffc17 	ldw	r2,-16(fp)
   844a4:	10c00d17 	ldw	r3,52(r2)
   844a8:	e0bff517 	ldw	r2,-44(fp)
   844ac:	1880051e 	bne	r3,r2,844c4 <altera_avalon_jtag_uart_write+0x1b8>
   844b0:	e0bffc17 	ldw	r2,-16(fp)
   844b4:	10c00917 	ldw	r3,36(r2)
   844b8:	e0bffc17 	ldw	r2,-16(fp)
   844bc:	10800117 	ldw	r2,4(r2)
   844c0:	18bff736 	bltu	r3,r2,844a0 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   844c4:	e0bffc17 	ldw	r2,-16(fp)
   844c8:	10800917 	ldw	r2,36(r2)
   844cc:	1000051e 	bne	r2,zero,844e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   844d0:	e0bffe17 	ldw	r2,-8(fp)
   844d4:	00bfd016 	blt	zero,r2,84418 <altera_avalon_jtag_uart_write+0x10c>
   844d8:	00000306 	br	844e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   844dc:	0001883a 	nop
   844e0:	00000106 	br	844e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   844e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   844e8:	e0fffd17 	ldw	r3,-12(fp)
   844ec:	e0bff717 	ldw	r2,-36(fp)
   844f0:	18800426 	beq	r3,r2,84504 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   844f4:	e0fffd17 	ldw	r3,-12(fp)
   844f8:	e0bff717 	ldw	r2,-36(fp)
   844fc:	1885c83a 	sub	r2,r3,r2
   84500:	00000606 	br	8451c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   84504:	e0bfff17 	ldw	r2,-4(fp)
   84508:	1090000c 	andi	r2,r2,16384
   8450c:	10000226 	beq	r2,zero,84518 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   84510:	00bffd44 	movi	r2,-11
   84514:	00000106 	br	8451c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   84518:	00bffec4 	movi	r2,-5
}
   8451c:	e037883a 	mov	sp,fp
   84520:	dfc00117 	ldw	ra,4(sp)
   84524:	df000017 	ldw	fp,0(sp)
   84528:	dec00204 	addi	sp,sp,8
   8452c:	f800283a 	ret

00084530 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   84530:	defff504 	addi	sp,sp,-44
   84534:	df000a15 	stw	fp,40(sp)
   84538:	df000a04 	addi	fp,sp,40
   8453c:	e13ffc15 	stw	r4,-16(fp)
   84540:	e17ffd15 	stw	r5,-12(fp)
   84544:	e1bffe15 	stw	r6,-8(fp)
   84548:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8454c:	e03ff615 	stw	zero,-40(fp)
   84550:	d0a6bd17 	ldw	r2,-25868(gp)
  
  if (alt_ticks_per_second ())
   84554:	10003c26 	beq	r2,zero,84648 <alt_alarm_start+0x118>
  {
    if (alarm)
   84558:	e0bffc17 	ldw	r2,-16(fp)
   8455c:	10003826 	beq	r2,zero,84640 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   84560:	e0bffc17 	ldw	r2,-16(fp)
   84564:	e0fffe17 	ldw	r3,-8(fp)
   84568:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8456c:	e0bffc17 	ldw	r2,-16(fp)
   84570:	e0ffff17 	ldw	r3,-4(fp)
   84574:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84578:	0005303a 	rdctl	r2,status
   8457c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84580:	e0fff917 	ldw	r3,-28(fp)
   84584:	00bfff84 	movi	r2,-2
   84588:	1884703a 	and	r2,r3,r2
   8458c:	1001703a 	wrctl	status,r2
  
  return context;
   84590:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   84594:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84598:	d0a6be17 	ldw	r2,-25864(gp)
      
      current_nticks = alt_nticks();
   8459c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   845a0:	e0fffd17 	ldw	r3,-12(fp)
   845a4:	e0bff617 	ldw	r2,-40(fp)
   845a8:	1885883a 	add	r2,r3,r2
   845ac:	10c00044 	addi	r3,r2,1
   845b0:	e0bffc17 	ldw	r2,-16(fp)
   845b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   845b8:	e0bffc17 	ldw	r2,-16(fp)
   845bc:	10c00217 	ldw	r3,8(r2)
   845c0:	e0bff617 	ldw	r2,-40(fp)
   845c4:	1880042e 	bgeu	r3,r2,845d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   845c8:	e0bffc17 	ldw	r2,-16(fp)
   845cc:	00c00044 	movi	r3,1
   845d0:	10c00405 	stb	r3,16(r2)
   845d4:	00000206 	br	845e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   845d8:	e0bffc17 	ldw	r2,-16(fp)
   845dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   845e0:	e0bffc17 	ldw	r2,-16(fp)
   845e4:	d0e00c04 	addi	r3,gp,-32720
   845e8:	e0fffa15 	stw	r3,-24(fp)
   845ec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   845f0:	e0bffb17 	ldw	r2,-20(fp)
   845f4:	e0fffa17 	ldw	r3,-24(fp)
   845f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   845fc:	e0bffa17 	ldw	r2,-24(fp)
   84600:	10c00017 	ldw	r3,0(r2)
   84604:	e0bffb17 	ldw	r2,-20(fp)
   84608:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8460c:	e0bffa17 	ldw	r2,-24(fp)
   84610:	10800017 	ldw	r2,0(r2)
   84614:	e0fffb17 	ldw	r3,-20(fp)
   84618:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8461c:	e0bffa17 	ldw	r2,-24(fp)
   84620:	e0fffb17 	ldw	r3,-20(fp)
   84624:	10c00015 	stw	r3,0(r2)
   84628:	e0bff817 	ldw	r2,-32(fp)
   8462c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84630:	e0bff717 	ldw	r2,-36(fp)
   84634:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   84638:	0005883a 	mov	r2,zero
   8463c:	00000306 	br	8464c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   84640:	00bffa84 	movi	r2,-22
   84644:	00000106 	br	8464c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   84648:	00bfde84 	movi	r2,-134
  }
}
   8464c:	e037883a 	mov	sp,fp
   84650:	df000017 	ldw	fp,0(sp)
   84654:	dec00104 	addi	sp,sp,4
   84658:	f800283a 	ret

0008465c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8465c:	defffe04 	addi	sp,sp,-8
   84660:	df000115 	stw	fp,4(sp)
   84664:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   84668:	e03fff15 	stw	zero,-4(fp)
   8466c:	00000506 	br	84684 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   84670:	e0bfff17 	ldw	r2,-4(fp)
   84674:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   84678:	e0bfff17 	ldw	r2,-4(fp)
   8467c:	10800804 	addi	r2,r2,32
   84680:	e0bfff15 	stw	r2,-4(fp)
   84684:	e0bfff17 	ldw	r2,-4(fp)
   84688:	10820030 	cmpltui	r2,r2,2048
   8468c:	103ff81e 	bne	r2,zero,84670 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   84690:	0001883a 	nop
   84694:	e037883a 	mov	sp,fp
   84698:	df000017 	ldw	fp,0(sp)
   8469c:	dec00104 	addi	sp,sp,4
   846a0:	f800283a 	ret

000846a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   846a4:	defffe04 	addi	sp,sp,-8
   846a8:	dfc00115 	stw	ra,4(sp)
   846ac:	df000015 	stw	fp,0(sp)
   846b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   846b4:	d0a00917 	ldw	r2,-32732(gp)
   846b8:	10000326 	beq	r2,zero,846c8 <alt_get_errno+0x24>
   846bc:	d0a00917 	ldw	r2,-32732(gp)
   846c0:	103ee83a 	callr	r2
   846c4:	00000106 	br	846cc <alt_get_errno+0x28>
   846c8:	d0a6b804 	addi	r2,gp,-25888
}
   846cc:	e037883a 	mov	sp,fp
   846d0:	dfc00117 	ldw	ra,4(sp)
   846d4:	df000017 	ldw	fp,0(sp)
   846d8:	dec00204 	addi	sp,sp,8
   846dc:	f800283a 	ret

000846e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   846e0:	defffa04 	addi	sp,sp,-24
   846e4:	dfc00515 	stw	ra,20(sp)
   846e8:	df000415 	stw	fp,16(sp)
   846ec:	df000404 	addi	fp,sp,16
   846f0:	e13ffe15 	stw	r4,-8(fp)
   846f4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   846f8:	e0bffe17 	ldw	r2,-8(fp)
   846fc:	10000326 	beq	r2,zero,8470c <alt_dev_llist_insert+0x2c>
   84700:	e0bffe17 	ldw	r2,-8(fp)
   84704:	10800217 	ldw	r2,8(r2)
   84708:	1000061e 	bne	r2,zero,84724 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   8470c:	00846a40 	call	846a4 <alt_get_errno>
   84710:	1007883a 	mov	r3,r2
   84714:	00800584 	movi	r2,22
   84718:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8471c:	00bffa84 	movi	r2,-22
   84720:	00001306 	br	84770 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   84724:	e0bffe17 	ldw	r2,-8(fp)
   84728:	e0ffff17 	ldw	r3,-4(fp)
   8472c:	e0fffc15 	stw	r3,-16(fp)
   84730:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84734:	e0bffd17 	ldw	r2,-12(fp)
   84738:	e0fffc17 	ldw	r3,-16(fp)
   8473c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84740:	e0bffc17 	ldw	r2,-16(fp)
   84744:	10c00017 	ldw	r3,0(r2)
   84748:	e0bffd17 	ldw	r2,-12(fp)
   8474c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84750:	e0bffc17 	ldw	r2,-16(fp)
   84754:	10800017 	ldw	r2,0(r2)
   84758:	e0fffd17 	ldw	r3,-12(fp)
   8475c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84760:	e0bffc17 	ldw	r2,-16(fp)
   84764:	e0fffd17 	ldw	r3,-12(fp)
   84768:	10c00015 	stw	r3,0(r2)

  return 0;  
   8476c:	0005883a 	mov	r2,zero
}
   84770:	e037883a 	mov	sp,fp
   84774:	dfc00117 	ldw	ra,4(sp)
   84778:	df000017 	ldw	fp,0(sp)
   8477c:	dec00204 	addi	sp,sp,8
   84780:	f800283a 	ret

00084784 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84784:	defffd04 	addi	sp,sp,-12
   84788:	dfc00215 	stw	ra,8(sp)
   8478c:	df000115 	stw	fp,4(sp)
   84790:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84794:	00800234 	movhi	r2,8
   84798:	10959304 	addi	r2,r2,22092
   8479c:	e0bfff15 	stw	r2,-4(fp)
   847a0:	00000606 	br	847bc <_do_ctors+0x38>
        (*ctor) (); 
   847a4:	e0bfff17 	ldw	r2,-4(fp)
   847a8:	10800017 	ldw	r2,0(r2)
   847ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   847b0:	e0bfff17 	ldw	r2,-4(fp)
   847b4:	10bfff04 	addi	r2,r2,-4
   847b8:	e0bfff15 	stw	r2,-4(fp)
   847bc:	e0ffff17 	ldw	r3,-4(fp)
   847c0:	00800234 	movhi	r2,8
   847c4:	10959404 	addi	r2,r2,22096
   847c8:	18bff62e 	bgeu	r3,r2,847a4 <_do_ctors+0x20>
        (*ctor) (); 
}
   847cc:	0001883a 	nop
   847d0:	e037883a 	mov	sp,fp
   847d4:	dfc00117 	ldw	ra,4(sp)
   847d8:	df000017 	ldw	fp,0(sp)
   847dc:	dec00204 	addi	sp,sp,8
   847e0:	f800283a 	ret

000847e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   847e4:	defffd04 	addi	sp,sp,-12
   847e8:	dfc00215 	stw	ra,8(sp)
   847ec:	df000115 	stw	fp,4(sp)
   847f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   847f4:	00800234 	movhi	r2,8
   847f8:	10959304 	addi	r2,r2,22092
   847fc:	e0bfff15 	stw	r2,-4(fp)
   84800:	00000606 	br	8481c <_do_dtors+0x38>
        (*dtor) (); 
   84804:	e0bfff17 	ldw	r2,-4(fp)
   84808:	10800017 	ldw	r2,0(r2)
   8480c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84810:	e0bfff17 	ldw	r2,-4(fp)
   84814:	10bfff04 	addi	r2,r2,-4
   84818:	e0bfff15 	stw	r2,-4(fp)
   8481c:	e0ffff17 	ldw	r3,-4(fp)
   84820:	00800234 	movhi	r2,8
   84824:	10959404 	addi	r2,r2,22096
   84828:	18bff62e 	bgeu	r3,r2,84804 <_do_dtors+0x20>
        (*dtor) (); 
}
   8482c:	0001883a 	nop
   84830:	e037883a 	mov	sp,fp
   84834:	dfc00117 	ldw	ra,4(sp)
   84838:	df000017 	ldw	fp,0(sp)
   8483c:	dec00204 	addi	sp,sp,8
   84840:	f800283a 	ret

00084844 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84844:	defffe04 	addi	sp,sp,-8
   84848:	dfc00115 	stw	ra,4(sp)
   8484c:	df000015 	stw	fp,0(sp)
   84850:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   84854:	01440004 	movi	r5,4096
   84858:	0009883a 	mov	r4,zero
   8485c:	00851900 	call	85190 <alt_icache_flush>
#endif
}
   84860:	0001883a 	nop
   84864:	e037883a 	mov	sp,fp
   84868:	dfc00117 	ldw	ra,4(sp)
   8486c:	df000017 	ldw	fp,0(sp)
   84870:	dec00204 	addi	sp,sp,8
   84874:	f800283a 	ret

00084878 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84878:	defff904 	addi	sp,sp,-28
   8487c:	dfc00615 	stw	ra,24(sp)
   84880:	df000515 	stw	fp,20(sp)
   84884:	df000504 	addi	fp,sp,20
   84888:	e13ffc15 	stw	r4,-16(fp)
   8488c:	e17ffd15 	stw	r5,-12(fp)
   84890:	e1bffe15 	stw	r6,-8(fp)
   84894:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   84898:	e1bfff17 	ldw	r6,-4(fp)
   8489c:	e17ffe17 	ldw	r5,-8(fp)
   848a0:	e13ffd17 	ldw	r4,-12(fp)
   848a4:	0084c380 	call	84c38 <open>
   848a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   848ac:	e0bffb17 	ldw	r2,-20(fp)
   848b0:	10001c16 	blt	r2,zero,84924 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   848b4:	00800234 	movhi	r2,8
   848b8:	1097cd04 	addi	r2,r2,24372
   848bc:	e0fffb17 	ldw	r3,-20(fp)
   848c0:	18c00324 	muli	r3,r3,12
   848c4:	10c5883a 	add	r2,r2,r3
   848c8:	10c00017 	ldw	r3,0(r2)
   848cc:	e0bffc17 	ldw	r2,-16(fp)
   848d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   848d4:	00800234 	movhi	r2,8
   848d8:	1097cd04 	addi	r2,r2,24372
   848dc:	e0fffb17 	ldw	r3,-20(fp)
   848e0:	18c00324 	muli	r3,r3,12
   848e4:	10c5883a 	add	r2,r2,r3
   848e8:	10800104 	addi	r2,r2,4
   848ec:	10c00017 	ldw	r3,0(r2)
   848f0:	e0bffc17 	ldw	r2,-16(fp)
   848f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   848f8:	00800234 	movhi	r2,8
   848fc:	1097cd04 	addi	r2,r2,24372
   84900:	e0fffb17 	ldw	r3,-20(fp)
   84904:	18c00324 	muli	r3,r3,12
   84908:	10c5883a 	add	r2,r2,r3
   8490c:	10800204 	addi	r2,r2,8
   84910:	10c00017 	ldw	r3,0(r2)
   84914:	e0bffc17 	ldw	r2,-16(fp)
   84918:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8491c:	e13ffb17 	ldw	r4,-20(fp)
   84920:	00837c80 	call	837c8 <alt_release_fd>
  }
} 
   84924:	0001883a 	nop
   84928:	e037883a 	mov	sp,fp
   8492c:	dfc00117 	ldw	ra,4(sp)
   84930:	df000017 	ldw	fp,0(sp)
   84934:	dec00204 	addi	sp,sp,8
   84938:	f800283a 	ret

0008493c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8493c:	defffb04 	addi	sp,sp,-20
   84940:	dfc00415 	stw	ra,16(sp)
   84944:	df000315 	stw	fp,12(sp)
   84948:	df000304 	addi	fp,sp,12
   8494c:	e13ffd15 	stw	r4,-12(fp)
   84950:	e17ffe15 	stw	r5,-8(fp)
   84954:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84958:	01c07fc4 	movi	r7,511
   8495c:	01800044 	movi	r6,1
   84960:	e17ffd17 	ldw	r5,-12(fp)
   84964:	01000234 	movhi	r4,8
   84968:	2117d004 	addi	r4,r4,24384
   8496c:	00848780 	call	84878 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84970:	01c07fc4 	movi	r7,511
   84974:	000d883a 	mov	r6,zero
   84978:	e17ffe17 	ldw	r5,-8(fp)
   8497c:	01000234 	movhi	r4,8
   84980:	2117cd04 	addi	r4,r4,24372
   84984:	00848780 	call	84878 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84988:	01c07fc4 	movi	r7,511
   8498c:	01800044 	movi	r6,1
   84990:	e17fff17 	ldw	r5,-4(fp)
   84994:	01000234 	movhi	r4,8
   84998:	2117d304 	addi	r4,r4,24396
   8499c:	00848780 	call	84878 <alt_open_fd>
}  
   849a0:	0001883a 	nop
   849a4:	e037883a 	mov	sp,fp
   849a8:	dfc00117 	ldw	ra,4(sp)
   849ac:	df000017 	ldw	fp,0(sp)
   849b0:	dec00204 	addi	sp,sp,8
   849b4:	f800283a 	ret

000849b8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   849b8:	defff004 	addi	sp,sp,-64
   849bc:	df000f15 	stw	fp,60(sp)
   849c0:	df000f04 	addi	fp,sp,60
   849c4:	e13ffd15 	stw	r4,-12(fp)
   849c8:	e17ffe15 	stw	r5,-8(fp)
   849cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   849d0:	00bffa84 	movi	r2,-22
   849d4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   849d8:	e0bffd17 	ldw	r2,-12(fp)
   849dc:	10800828 	cmpgeui	r2,r2,32
   849e0:	1000501e 	bne	r2,zero,84b24 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   849e4:	0005303a 	rdctl	r2,status
   849e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   849ec:	e0fff617 	ldw	r3,-40(fp)
   849f0:	00bfff84 	movi	r2,-2
   849f4:	1884703a 	and	r2,r3,r2
   849f8:	1001703a 	wrctl	status,r2
  
  return context;
   849fc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   84a00:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   84a04:	00800274 	movhi	r2,9
   84a08:	10a31b04 	addi	r2,r2,-29588
   84a0c:	e0fffd17 	ldw	r3,-12(fp)
   84a10:	180690fa 	slli	r3,r3,3
   84a14:	10c5883a 	add	r2,r2,r3
   84a18:	e0ffff17 	ldw	r3,-4(fp)
   84a1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   84a20:	00800274 	movhi	r2,9
   84a24:	10a31b04 	addi	r2,r2,-29588
   84a28:	e0fffd17 	ldw	r3,-12(fp)
   84a2c:	180690fa 	slli	r3,r3,3
   84a30:	10c5883a 	add	r2,r2,r3
   84a34:	10800104 	addi	r2,r2,4
   84a38:	e0fffe17 	ldw	r3,-8(fp)
   84a3c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   84a40:	e0bfff17 	ldw	r2,-4(fp)
   84a44:	10001926 	beq	r2,zero,84aac <alt_irq_register+0xf4>
   84a48:	e0bffd17 	ldw	r2,-12(fp)
   84a4c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84a50:	0005303a 	rdctl	r2,status
   84a54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a58:	e0fff717 	ldw	r3,-36(fp)
   84a5c:	00bfff84 	movi	r2,-2
   84a60:	1884703a 	and	r2,r3,r2
   84a64:	1001703a 	wrctl	status,r2
  
  return context;
   84a68:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84a6c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   84a70:	00c00044 	movi	r3,1
   84a74:	e0bff217 	ldw	r2,-56(fp)
   84a78:	1884983a 	sll	r2,r3,r2
   84a7c:	1007883a 	mov	r3,r2
   84a80:	d0a6bc17 	ldw	r2,-25872(gp)
   84a84:	1884b03a 	or	r2,r3,r2
   84a88:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84a8c:	d0a6bc17 	ldw	r2,-25872(gp)
   84a90:	100170fa 	wrctl	ienable,r2
   84a94:	e0bff817 	ldw	r2,-32(fp)
   84a98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84a9c:	e0bff917 	ldw	r2,-28(fp)
   84aa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84aa4:	0005883a 	mov	r2,zero
   84aa8:	00001906 	br	84b10 <alt_irq_register+0x158>
   84aac:	e0bffd17 	ldw	r2,-12(fp)
   84ab0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84ab4:	0005303a 	rdctl	r2,status
   84ab8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84abc:	e0fffa17 	ldw	r3,-24(fp)
   84ac0:	00bfff84 	movi	r2,-2
   84ac4:	1884703a 	and	r2,r3,r2
   84ac8:	1001703a 	wrctl	status,r2
  
  return context;
   84acc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84ad0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   84ad4:	00c00044 	movi	r3,1
   84ad8:	e0bff417 	ldw	r2,-48(fp)
   84adc:	1884983a 	sll	r2,r3,r2
   84ae0:	0084303a 	nor	r2,zero,r2
   84ae4:	1007883a 	mov	r3,r2
   84ae8:	d0a6bc17 	ldw	r2,-25872(gp)
   84aec:	1884703a 	and	r2,r3,r2
   84af0:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84af4:	d0a6bc17 	ldw	r2,-25872(gp)
   84af8:	100170fa 	wrctl	ienable,r2
   84afc:	e0bffb17 	ldw	r2,-20(fp)
   84b00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b04:	e0bffc17 	ldw	r2,-16(fp)
   84b08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84b0c:	0005883a 	mov	r2,zero
   84b10:	e0bff115 	stw	r2,-60(fp)
   84b14:	e0bff317 	ldw	r2,-52(fp)
   84b18:	e0bff515 	stw	r2,-44(fp)
   84b1c:	e0bff517 	ldw	r2,-44(fp)
   84b20:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   84b24:	e0bff117 	ldw	r2,-60(fp)
}
   84b28:	e037883a 	mov	sp,fp
   84b2c:	df000017 	ldw	fp,0(sp)
   84b30:	dec00104 	addi	sp,sp,4
   84b34:	f800283a 	ret

00084b38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84b38:	defffe04 	addi	sp,sp,-8
   84b3c:	dfc00115 	stw	ra,4(sp)
   84b40:	df000015 	stw	fp,0(sp)
   84b44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84b48:	d0a00917 	ldw	r2,-32732(gp)
   84b4c:	10000326 	beq	r2,zero,84b5c <alt_get_errno+0x24>
   84b50:	d0a00917 	ldw	r2,-32732(gp)
   84b54:	103ee83a 	callr	r2
   84b58:	00000106 	br	84b60 <alt_get_errno+0x28>
   84b5c:	d0a6b804 	addi	r2,gp,-25888
}
   84b60:	e037883a 	mov	sp,fp
   84b64:	dfc00117 	ldw	ra,4(sp)
   84b68:	df000017 	ldw	fp,0(sp)
   84b6c:	dec00204 	addi	sp,sp,8
   84b70:	f800283a 	ret

00084b74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84b74:	defffd04 	addi	sp,sp,-12
   84b78:	df000215 	stw	fp,8(sp)
   84b7c:	df000204 	addi	fp,sp,8
   84b80:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84b84:	e0bfff17 	ldw	r2,-4(fp)
   84b88:	10800217 	ldw	r2,8(r2)
   84b8c:	10d00034 	orhi	r3,r2,16384
   84b90:	e0bfff17 	ldw	r2,-4(fp)
   84b94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84b98:	e03ffe15 	stw	zero,-8(fp)
   84b9c:	00001d06 	br	84c14 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84ba0:	00800234 	movhi	r2,8
   84ba4:	1097cd04 	addi	r2,r2,24372
   84ba8:	e0fffe17 	ldw	r3,-8(fp)
   84bac:	18c00324 	muli	r3,r3,12
   84bb0:	10c5883a 	add	r2,r2,r3
   84bb4:	10c00017 	ldw	r3,0(r2)
   84bb8:	e0bfff17 	ldw	r2,-4(fp)
   84bbc:	10800017 	ldw	r2,0(r2)
   84bc0:	1880111e 	bne	r3,r2,84c08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84bc4:	00800234 	movhi	r2,8
   84bc8:	1097cd04 	addi	r2,r2,24372
   84bcc:	e0fffe17 	ldw	r3,-8(fp)
   84bd0:	18c00324 	muli	r3,r3,12
   84bd4:	10c5883a 	add	r2,r2,r3
   84bd8:	10800204 	addi	r2,r2,8
   84bdc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84be0:	1000090e 	bge	r2,zero,84c08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   84be4:	e0bffe17 	ldw	r2,-8(fp)
   84be8:	10c00324 	muli	r3,r2,12
   84bec:	00800234 	movhi	r2,8
   84bf0:	1097cd04 	addi	r2,r2,24372
   84bf4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84bf8:	e0bfff17 	ldw	r2,-4(fp)
   84bfc:	18800226 	beq	r3,r2,84c08 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   84c00:	00bffcc4 	movi	r2,-13
   84c04:	00000806 	br	84c28 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84c08:	e0bffe17 	ldw	r2,-8(fp)
   84c0c:	10800044 	addi	r2,r2,1
   84c10:	e0bffe15 	stw	r2,-8(fp)
   84c14:	d0a00817 	ldw	r2,-32736(gp)
   84c18:	1007883a 	mov	r3,r2
   84c1c:	e0bffe17 	ldw	r2,-8(fp)
   84c20:	18bfdf2e 	bgeu	r3,r2,84ba0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   84c24:	0005883a 	mov	r2,zero
}
   84c28:	e037883a 	mov	sp,fp
   84c2c:	df000017 	ldw	fp,0(sp)
   84c30:	dec00104 	addi	sp,sp,4
   84c34:	f800283a 	ret

00084c38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   84c38:	defff604 	addi	sp,sp,-40
   84c3c:	dfc00915 	stw	ra,36(sp)
   84c40:	df000815 	stw	fp,32(sp)
   84c44:	df000804 	addi	fp,sp,32
   84c48:	e13ffd15 	stw	r4,-12(fp)
   84c4c:	e17ffe15 	stw	r5,-8(fp)
   84c50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   84c54:	00bfffc4 	movi	r2,-1
   84c58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   84c5c:	00bffb44 	movi	r2,-19
   84c60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   84c64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   84c68:	d1600604 	addi	r5,gp,-32744
   84c6c:	e13ffd17 	ldw	r4,-12(fp)
   84c70:	0084f540 	call	84f54 <alt_find_dev>
   84c74:	e0bff815 	stw	r2,-32(fp)
   84c78:	e0bff817 	ldw	r2,-32(fp)
   84c7c:	1000051e 	bne	r2,zero,84c94 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   84c80:	e13ffd17 	ldw	r4,-12(fp)
   84c84:	0084fe40 	call	84fe4 <alt_find_file>
   84c88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   84c8c:	00800044 	movi	r2,1
   84c90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   84c94:	e0bff817 	ldw	r2,-32(fp)
   84c98:	10002926 	beq	r2,zero,84d40 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   84c9c:	e13ff817 	ldw	r4,-32(fp)
   84ca0:	00850ec0 	call	850ec <alt_get_fd>
   84ca4:	e0bff915 	stw	r2,-28(fp)
   84ca8:	e0bff917 	ldw	r2,-28(fp)
   84cac:	1000030e 	bge	r2,zero,84cbc <open+0x84>
    {
      status = index;
   84cb0:	e0bff917 	ldw	r2,-28(fp)
   84cb4:	e0bffa15 	stw	r2,-24(fp)
   84cb8:	00002306 	br	84d48 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   84cbc:	e0bff917 	ldw	r2,-28(fp)
   84cc0:	10c00324 	muli	r3,r2,12
   84cc4:	00800234 	movhi	r2,8
   84cc8:	1097cd04 	addi	r2,r2,24372
   84ccc:	1885883a 	add	r2,r3,r2
   84cd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   84cd4:	e0fffe17 	ldw	r3,-8(fp)
   84cd8:	00900034 	movhi	r2,16384
   84cdc:	10bfffc4 	addi	r2,r2,-1
   84ce0:	1886703a 	and	r3,r3,r2
   84ce4:	e0bffc17 	ldw	r2,-16(fp)
   84ce8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   84cec:	e0bffb17 	ldw	r2,-20(fp)
   84cf0:	1000051e 	bne	r2,zero,84d08 <open+0xd0>
   84cf4:	e13ffc17 	ldw	r4,-16(fp)
   84cf8:	0084b740 	call	84b74 <alt_file_locked>
   84cfc:	e0bffa15 	stw	r2,-24(fp)
   84d00:	e0bffa17 	ldw	r2,-24(fp)
   84d04:	10001016 	blt	r2,zero,84d48 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   84d08:	e0bff817 	ldw	r2,-32(fp)
   84d0c:	10800317 	ldw	r2,12(r2)
   84d10:	10000826 	beq	r2,zero,84d34 <open+0xfc>
   84d14:	e0bff817 	ldw	r2,-32(fp)
   84d18:	10800317 	ldw	r2,12(r2)
   84d1c:	e1ffff17 	ldw	r7,-4(fp)
   84d20:	e1bffe17 	ldw	r6,-8(fp)
   84d24:	e17ffd17 	ldw	r5,-12(fp)
   84d28:	e13ffc17 	ldw	r4,-16(fp)
   84d2c:	103ee83a 	callr	r2
   84d30:	00000106 	br	84d38 <open+0x100>
   84d34:	0005883a 	mov	r2,zero
   84d38:	e0bffa15 	stw	r2,-24(fp)
   84d3c:	00000206 	br	84d48 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   84d40:	00bffb44 	movi	r2,-19
   84d44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   84d48:	e0bffa17 	ldw	r2,-24(fp)
   84d4c:	1000090e 	bge	r2,zero,84d74 <open+0x13c>
  {
    alt_release_fd (index);  
   84d50:	e13ff917 	ldw	r4,-28(fp)
   84d54:	00837c80 	call	837c8 <alt_release_fd>
    ALT_ERRNO = -status;
   84d58:	0084b380 	call	84b38 <alt_get_errno>
   84d5c:	1007883a 	mov	r3,r2
   84d60:	e0bffa17 	ldw	r2,-24(fp)
   84d64:	0085c83a 	sub	r2,zero,r2
   84d68:	18800015 	stw	r2,0(r3)
    return -1;
   84d6c:	00bfffc4 	movi	r2,-1
   84d70:	00000106 	br	84d78 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   84d74:	e0bff917 	ldw	r2,-28(fp)
}
   84d78:	e037883a 	mov	sp,fp
   84d7c:	dfc00117 	ldw	ra,4(sp)
   84d80:	df000017 	ldw	fp,0(sp)
   84d84:	dec00204 	addi	sp,sp,8
   84d88:	f800283a 	ret

00084d8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   84d8c:	defffa04 	addi	sp,sp,-24
   84d90:	df000515 	stw	fp,20(sp)
   84d94:	df000504 	addi	fp,sp,20
   84d98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84d9c:	0005303a 	rdctl	r2,status
   84da0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84da4:	e0fffc17 	ldw	r3,-16(fp)
   84da8:	00bfff84 	movi	r2,-2
   84dac:	1884703a 	and	r2,r3,r2
   84db0:	1001703a 	wrctl	status,r2
  
  return context;
   84db4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   84db8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   84dbc:	e0bfff17 	ldw	r2,-4(fp)
   84dc0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   84dc4:	e0bffd17 	ldw	r2,-12(fp)
   84dc8:	10800017 	ldw	r2,0(r2)
   84dcc:	e0fffd17 	ldw	r3,-12(fp)
   84dd0:	18c00117 	ldw	r3,4(r3)
   84dd4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   84dd8:	e0bffd17 	ldw	r2,-12(fp)
   84ddc:	10800117 	ldw	r2,4(r2)
   84de0:	e0fffd17 	ldw	r3,-12(fp)
   84de4:	18c00017 	ldw	r3,0(r3)
   84de8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   84dec:	e0bffd17 	ldw	r2,-12(fp)
   84df0:	e0fffd17 	ldw	r3,-12(fp)
   84df4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   84df8:	e0bffd17 	ldw	r2,-12(fp)
   84dfc:	e0fffd17 	ldw	r3,-12(fp)
   84e00:	10c00015 	stw	r3,0(r2)
   84e04:	e0bffb17 	ldw	r2,-20(fp)
   84e08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84e0c:	e0bffe17 	ldw	r2,-8(fp)
   84e10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   84e14:	0001883a 	nop
   84e18:	e037883a 	mov	sp,fp
   84e1c:	df000017 	ldw	fp,0(sp)
   84e20:	dec00104 	addi	sp,sp,4
   84e24:	f800283a 	ret

00084e28 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   84e28:	defffb04 	addi	sp,sp,-20
   84e2c:	dfc00415 	stw	ra,16(sp)
   84e30:	df000315 	stw	fp,12(sp)
   84e34:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   84e38:	d0a00c17 	ldw	r2,-32720(gp)
   84e3c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   84e40:	d0a6be17 	ldw	r2,-25864(gp)
   84e44:	10800044 	addi	r2,r2,1
   84e48:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   84e4c:	00002e06 	br	84f08 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   84e50:	e0bffd17 	ldw	r2,-12(fp)
   84e54:	10800017 	ldw	r2,0(r2)
   84e58:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   84e5c:	e0bffd17 	ldw	r2,-12(fp)
   84e60:	10800403 	ldbu	r2,16(r2)
   84e64:	10803fcc 	andi	r2,r2,255
   84e68:	10000426 	beq	r2,zero,84e7c <alt_tick+0x54>
   84e6c:	d0a6be17 	ldw	r2,-25864(gp)
   84e70:	1000021e 	bne	r2,zero,84e7c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   84e74:	e0bffd17 	ldw	r2,-12(fp)
   84e78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   84e7c:	e0bffd17 	ldw	r2,-12(fp)
   84e80:	10800217 	ldw	r2,8(r2)
   84e84:	d0e6be17 	ldw	r3,-25864(gp)
   84e88:	18801d36 	bltu	r3,r2,84f00 <alt_tick+0xd8>
   84e8c:	e0bffd17 	ldw	r2,-12(fp)
   84e90:	10800403 	ldbu	r2,16(r2)
   84e94:	10803fcc 	andi	r2,r2,255
   84e98:	1000191e 	bne	r2,zero,84f00 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   84e9c:	e0bffd17 	ldw	r2,-12(fp)
   84ea0:	10800317 	ldw	r2,12(r2)
   84ea4:	e0fffd17 	ldw	r3,-12(fp)
   84ea8:	18c00517 	ldw	r3,20(r3)
   84eac:	1809883a 	mov	r4,r3
   84eb0:	103ee83a 	callr	r2
   84eb4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   84eb8:	e0bfff17 	ldw	r2,-4(fp)
   84ebc:	1000031e 	bne	r2,zero,84ecc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   84ec0:	e13ffd17 	ldw	r4,-12(fp)
   84ec4:	0084d8c0 	call	84d8c <alt_alarm_stop>
   84ec8:	00000d06 	br	84f00 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   84ecc:	e0bffd17 	ldw	r2,-12(fp)
   84ed0:	10c00217 	ldw	r3,8(r2)
   84ed4:	e0bfff17 	ldw	r2,-4(fp)
   84ed8:	1887883a 	add	r3,r3,r2
   84edc:	e0bffd17 	ldw	r2,-12(fp)
   84ee0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   84ee4:	e0bffd17 	ldw	r2,-12(fp)
   84ee8:	10c00217 	ldw	r3,8(r2)
   84eec:	d0a6be17 	ldw	r2,-25864(gp)
   84ef0:	1880032e 	bgeu	r3,r2,84f00 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   84ef4:	e0bffd17 	ldw	r2,-12(fp)
   84ef8:	00c00044 	movi	r3,1
   84efc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   84f00:	e0bffe17 	ldw	r2,-8(fp)
   84f04:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   84f08:	e0fffd17 	ldw	r3,-12(fp)
   84f0c:	d0a00c04 	addi	r2,gp,-32720
   84f10:	18bfcf1e 	bne	r3,r2,84e50 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   84f14:	0001883a 	nop
}
   84f18:	0001883a 	nop
   84f1c:	e037883a 	mov	sp,fp
   84f20:	dfc00117 	ldw	ra,4(sp)
   84f24:	df000017 	ldw	fp,0(sp)
   84f28:	dec00204 	addi	sp,sp,8
   84f2c:	f800283a 	ret

00084f30 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   84f30:	deffff04 	addi	sp,sp,-4
   84f34:	df000015 	stw	fp,0(sp)
   84f38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   84f3c:	000170fa 	wrctl	ienable,zero
}
   84f40:	0001883a 	nop
   84f44:	e037883a 	mov	sp,fp
   84f48:	df000017 	ldw	fp,0(sp)
   84f4c:	dec00104 	addi	sp,sp,4
   84f50:	f800283a 	ret

00084f54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   84f54:	defffa04 	addi	sp,sp,-24
   84f58:	dfc00515 	stw	ra,20(sp)
   84f5c:	df000415 	stw	fp,16(sp)
   84f60:	df000404 	addi	fp,sp,16
   84f64:	e13ffe15 	stw	r4,-8(fp)
   84f68:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   84f6c:	e0bfff17 	ldw	r2,-4(fp)
   84f70:	10800017 	ldw	r2,0(r2)
   84f74:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   84f78:	e13ffe17 	ldw	r4,-8(fp)
   84f7c:	00803d80 	call	803d8 <strlen>
   84f80:	10800044 	addi	r2,r2,1
   84f84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   84f88:	00000d06 	br	84fc0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   84f8c:	e0bffc17 	ldw	r2,-16(fp)
   84f90:	10800217 	ldw	r2,8(r2)
   84f94:	e0fffd17 	ldw	r3,-12(fp)
   84f98:	180d883a 	mov	r6,r3
   84f9c:	e17ffe17 	ldw	r5,-8(fp)
   84fa0:	1009883a 	mov	r4,r2
   84fa4:	00853080 	call	85308 <memcmp>
   84fa8:	1000021e 	bne	r2,zero,84fb4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   84fac:	e0bffc17 	ldw	r2,-16(fp)
   84fb0:	00000706 	br	84fd0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   84fb4:	e0bffc17 	ldw	r2,-16(fp)
   84fb8:	10800017 	ldw	r2,0(r2)
   84fbc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   84fc0:	e0fffc17 	ldw	r3,-16(fp)
   84fc4:	e0bfff17 	ldw	r2,-4(fp)
   84fc8:	18bff01e 	bne	r3,r2,84f8c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   84fcc:	0005883a 	mov	r2,zero
}
   84fd0:	e037883a 	mov	sp,fp
   84fd4:	dfc00117 	ldw	ra,4(sp)
   84fd8:	df000017 	ldw	fp,0(sp)
   84fdc:	dec00204 	addi	sp,sp,8
   84fe0:	f800283a 	ret

00084fe4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   84fe4:	defffb04 	addi	sp,sp,-20
   84fe8:	dfc00415 	stw	ra,16(sp)
   84fec:	df000315 	stw	fp,12(sp)
   84ff0:	df000304 	addi	fp,sp,12
   84ff4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   84ff8:	d0a00417 	ldw	r2,-32752(gp)
   84ffc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85000:	00003106 	br	850c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   85004:	e0bffd17 	ldw	r2,-12(fp)
   85008:	10800217 	ldw	r2,8(r2)
   8500c:	1009883a 	mov	r4,r2
   85010:	00803d80 	call	803d8 <strlen>
   85014:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   85018:	e0bffd17 	ldw	r2,-12(fp)
   8501c:	10c00217 	ldw	r3,8(r2)
   85020:	e0bffe17 	ldw	r2,-8(fp)
   85024:	10bfffc4 	addi	r2,r2,-1
   85028:	1885883a 	add	r2,r3,r2
   8502c:	10800003 	ldbu	r2,0(r2)
   85030:	10803fcc 	andi	r2,r2,255
   85034:	1080201c 	xori	r2,r2,128
   85038:	10bfe004 	addi	r2,r2,-128
   8503c:	10800bd8 	cmpnei	r2,r2,47
   85040:	1000031e 	bne	r2,zero,85050 <alt_find_file+0x6c>
    {
      len -= 1;
   85044:	e0bffe17 	ldw	r2,-8(fp)
   85048:	10bfffc4 	addi	r2,r2,-1
   8504c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85050:	e0bffe17 	ldw	r2,-8(fp)
   85054:	e0ffff17 	ldw	r3,-4(fp)
   85058:	1885883a 	add	r2,r3,r2
   8505c:	10800003 	ldbu	r2,0(r2)
   85060:	10803fcc 	andi	r2,r2,255
   85064:	1080201c 	xori	r2,r2,128
   85068:	10bfe004 	addi	r2,r2,-128
   8506c:	10800be0 	cmpeqi	r2,r2,47
   85070:	1000081e 	bne	r2,zero,85094 <alt_find_file+0xb0>
   85074:	e0bffe17 	ldw	r2,-8(fp)
   85078:	e0ffff17 	ldw	r3,-4(fp)
   8507c:	1885883a 	add	r2,r3,r2
   85080:	10800003 	ldbu	r2,0(r2)
   85084:	10803fcc 	andi	r2,r2,255
   85088:	1080201c 	xori	r2,r2,128
   8508c:	10bfe004 	addi	r2,r2,-128
   85090:	10000a1e 	bne	r2,zero,850bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   85094:	e0bffd17 	ldw	r2,-12(fp)
   85098:	10800217 	ldw	r2,8(r2)
   8509c:	e0fffe17 	ldw	r3,-8(fp)
   850a0:	180d883a 	mov	r6,r3
   850a4:	e17fff17 	ldw	r5,-4(fp)
   850a8:	1009883a 	mov	r4,r2
   850ac:	00853080 	call	85308 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   850b0:	1000021e 	bne	r2,zero,850bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   850b4:	e0bffd17 	ldw	r2,-12(fp)
   850b8:	00000706 	br	850d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   850bc:	e0bffd17 	ldw	r2,-12(fp)
   850c0:	10800017 	ldw	r2,0(r2)
   850c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   850c8:	e0fffd17 	ldw	r3,-12(fp)
   850cc:	d0a00404 	addi	r2,gp,-32752
   850d0:	18bfcc1e 	bne	r3,r2,85004 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   850d4:	0005883a 	mov	r2,zero
}
   850d8:	e037883a 	mov	sp,fp
   850dc:	dfc00117 	ldw	ra,4(sp)
   850e0:	df000017 	ldw	fp,0(sp)
   850e4:	dec00204 	addi	sp,sp,8
   850e8:	f800283a 	ret

000850ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   850ec:	defffc04 	addi	sp,sp,-16
   850f0:	df000315 	stw	fp,12(sp)
   850f4:	df000304 	addi	fp,sp,12
   850f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   850fc:	00bffa04 	movi	r2,-24
   85100:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85104:	e03ffd15 	stw	zero,-12(fp)
   85108:	00001906 	br	85170 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   8510c:	00800234 	movhi	r2,8
   85110:	1097cd04 	addi	r2,r2,24372
   85114:	e0fffd17 	ldw	r3,-12(fp)
   85118:	18c00324 	muli	r3,r3,12
   8511c:	10c5883a 	add	r2,r2,r3
   85120:	10800017 	ldw	r2,0(r2)
   85124:	10000f1e 	bne	r2,zero,85164 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   85128:	00800234 	movhi	r2,8
   8512c:	1097cd04 	addi	r2,r2,24372
   85130:	e0fffd17 	ldw	r3,-12(fp)
   85134:	18c00324 	muli	r3,r3,12
   85138:	10c5883a 	add	r2,r2,r3
   8513c:	e0ffff17 	ldw	r3,-4(fp)
   85140:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   85144:	d0e00817 	ldw	r3,-32736(gp)
   85148:	e0bffd17 	ldw	r2,-12(fp)
   8514c:	1880020e 	bge	r3,r2,85158 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   85150:	e0bffd17 	ldw	r2,-12(fp)
   85154:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   85158:	e0bffd17 	ldw	r2,-12(fp)
   8515c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   85160:	00000606 	br	8517c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85164:	e0bffd17 	ldw	r2,-12(fp)
   85168:	10800044 	addi	r2,r2,1
   8516c:	e0bffd15 	stw	r2,-12(fp)
   85170:	e0bffd17 	ldw	r2,-12(fp)
   85174:	10800810 	cmplti	r2,r2,32
   85178:	103fe41e 	bne	r2,zero,8510c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8517c:	e0bffe17 	ldw	r2,-8(fp)
}
   85180:	e037883a 	mov	sp,fp
   85184:	df000017 	ldw	fp,0(sp)
   85188:	dec00104 	addi	sp,sp,4
   8518c:	f800283a 	ret

00085190 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   85190:	defffb04 	addi	sp,sp,-20
   85194:	df000415 	stw	fp,16(sp)
   85198:	df000404 	addi	fp,sp,16
   8519c:	e13ffe15 	stw	r4,-8(fp)
   851a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   851a4:	e0bfff17 	ldw	r2,-4(fp)
   851a8:	10840070 	cmpltui	r2,r2,4097
   851ac:	1000021e 	bne	r2,zero,851b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   851b0:	00840004 	movi	r2,4096
   851b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   851b8:	e0fffe17 	ldw	r3,-8(fp)
   851bc:	e0bfff17 	ldw	r2,-4(fp)
   851c0:	1885883a 	add	r2,r3,r2
   851c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   851c8:	e0bffe17 	ldw	r2,-8(fp)
   851cc:	e0bffc15 	stw	r2,-16(fp)
   851d0:	00000506 	br	851e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   851d4:	e0bffc17 	ldw	r2,-16(fp)
   851d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   851dc:	e0bffc17 	ldw	r2,-16(fp)
   851e0:	10800804 	addi	r2,r2,32
   851e4:	e0bffc15 	stw	r2,-16(fp)
   851e8:	e0fffc17 	ldw	r3,-16(fp)
   851ec:	e0bffd17 	ldw	r2,-12(fp)
   851f0:	18bff836 	bltu	r3,r2,851d4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   851f4:	e0bffe17 	ldw	r2,-8(fp)
   851f8:	108007cc 	andi	r2,r2,31
   851fc:	10000226 	beq	r2,zero,85208 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   85200:	e0bffc17 	ldw	r2,-16(fp)
   85204:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   85208:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8520c:	0001883a 	nop
   85210:	e037883a 	mov	sp,fp
   85214:	df000017 	ldw	fp,0(sp)
   85218:	dec00104 	addi	sp,sp,4
   8521c:	f800283a 	ret

00085220 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   85220:	defffe04 	addi	sp,sp,-8
   85224:	df000115 	stw	fp,4(sp)
   85228:	df000104 	addi	fp,sp,4
   8522c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   85230:	e0bfff17 	ldw	r2,-4(fp)
   85234:	10bffe84 	addi	r2,r2,-6
   85238:	10c00428 	cmpgeui	r3,r2,16
   8523c:	18001a1e 	bne	r3,zero,852a8 <alt_exception_cause_generated_bad_addr+0x88>
   85240:	100690ba 	slli	r3,r2,2
   85244:	00800234 	movhi	r2,8
   85248:	10949604 	addi	r2,r2,21080
   8524c:	1885883a 	add	r2,r3,r2
   85250:	10800017 	ldw	r2,0(r2)
   85254:	1000683a 	jmp	r2
   85258:	00085298 	cmpnei	zero,zero,8522
   8525c:	00085298 	cmpnei	zero,zero,8522
   85260:	000852a8 	cmpgeui	zero,zero,8522
   85264:	000852a8 	cmpgeui	zero,zero,8522
   85268:	000852a8 	cmpgeui	zero,zero,8522
   8526c:	00085298 	cmpnei	zero,zero,8522
   85270:	000852a0 	cmpeqi	zero,zero,8522
   85274:	000852a8 	cmpgeui	zero,zero,8522
   85278:	00085298 	cmpnei	zero,zero,8522
   8527c:	00085298 	cmpnei	zero,zero,8522
   85280:	000852a8 	cmpgeui	zero,zero,8522
   85284:	00085298 	cmpnei	zero,zero,8522
   85288:	000852a0 	cmpeqi	zero,zero,8522
   8528c:	000852a8 	cmpgeui	zero,zero,8522
   85290:	000852a8 	cmpgeui	zero,zero,8522
   85294:	00085298 	cmpnei	zero,zero,8522
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   85298:	00800044 	movi	r2,1
   8529c:	00000306 	br	852ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   852a0:	0005883a 	mov	r2,zero
   852a4:	00000106 	br	852ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   852a8:	0005883a 	mov	r2,zero
  }
}
   852ac:	e037883a 	mov	sp,fp
   852b0:	df000017 	ldw	fp,0(sp)
   852b4:	dec00104 	addi	sp,sp,4
   852b8:	f800283a 	ret

000852bc <atexit>:
   852bc:	200b883a 	mov	r5,r4
   852c0:	000f883a 	mov	r7,zero
   852c4:	000d883a 	mov	r6,zero
   852c8:	0009883a 	mov	r4,zero
   852cc:	00853841 	jmpi	85384 <__register_exitproc>

000852d0 <exit>:
   852d0:	defffe04 	addi	sp,sp,-8
   852d4:	000b883a 	mov	r5,zero
   852d8:	dc000015 	stw	r16,0(sp)
   852dc:	dfc00115 	stw	ra,4(sp)
   852e0:	2021883a 	mov	r16,r4
   852e4:	008549c0 	call	8549c <__call_exitprocs>
   852e8:	00800234 	movhi	r2,8
   852ec:	109c5104 	addi	r2,r2,28996
   852f0:	11000017 	ldw	r4,0(r2)
   852f4:	20800f17 	ldw	r2,60(r4)
   852f8:	10000126 	beq	r2,zero,85300 <exit+0x30>
   852fc:	103ee83a 	callr	r2
   85300:	8009883a 	mov	r4,r16
   85304:	008561c0 	call	8561c <_exit>

00085308 <memcmp>:
   85308:	01c000c4 	movi	r7,3
   8530c:	3980192e 	bgeu	r7,r6,85374 <memcmp+0x6c>
   85310:	2144b03a 	or	r2,r4,r5
   85314:	11c4703a 	and	r2,r2,r7
   85318:	10000f26 	beq	r2,zero,85358 <memcmp+0x50>
   8531c:	20800003 	ldbu	r2,0(r4)
   85320:	28c00003 	ldbu	r3,0(r5)
   85324:	10c0151e 	bne	r2,r3,8537c <memcmp+0x74>
   85328:	31bfff84 	addi	r6,r6,-2
   8532c:	01ffffc4 	movi	r7,-1
   85330:	00000406 	br	85344 <memcmp+0x3c>
   85334:	20800003 	ldbu	r2,0(r4)
   85338:	28c00003 	ldbu	r3,0(r5)
   8533c:	31bfffc4 	addi	r6,r6,-1
   85340:	10c00e1e 	bne	r2,r3,8537c <memcmp+0x74>
   85344:	21000044 	addi	r4,r4,1
   85348:	29400044 	addi	r5,r5,1
   8534c:	31fff91e 	bne	r6,r7,85334 <memcmp+0x2c>
   85350:	0005883a 	mov	r2,zero
   85354:	f800283a 	ret
   85358:	20c00017 	ldw	r3,0(r4)
   8535c:	28800017 	ldw	r2,0(r5)
   85360:	18bfee1e 	bne	r3,r2,8531c <memcmp+0x14>
   85364:	31bfff04 	addi	r6,r6,-4
   85368:	21000104 	addi	r4,r4,4
   8536c:	29400104 	addi	r5,r5,4
   85370:	39bff936 	bltu	r7,r6,85358 <memcmp+0x50>
   85374:	303fe91e 	bne	r6,zero,8531c <memcmp+0x14>
   85378:	003ff506 	br	85350 <memcmp+0x48>
   8537c:	10c5c83a 	sub	r2,r2,r3
   85380:	f800283a 	ret

00085384 <__register_exitproc>:
   85384:	defffa04 	addi	sp,sp,-24
   85388:	dc000315 	stw	r16,12(sp)
   8538c:	04000234 	movhi	r16,8
   85390:	841c5104 	addi	r16,r16,28996
   85394:	80c00017 	ldw	r3,0(r16)
   85398:	dc400415 	stw	r17,16(sp)
   8539c:	dfc00515 	stw	ra,20(sp)
   853a0:	18805217 	ldw	r2,328(r3)
   853a4:	2023883a 	mov	r17,r4
   853a8:	10003726 	beq	r2,zero,85488 <__register_exitproc+0x104>
   853ac:	10c00117 	ldw	r3,4(r2)
   853b0:	010007c4 	movi	r4,31
   853b4:	20c00e16 	blt	r4,r3,853f0 <__register_exitproc+0x6c>
   853b8:	1a000044 	addi	r8,r3,1
   853bc:	8800221e 	bne	r17,zero,85448 <__register_exitproc+0xc4>
   853c0:	18c00084 	addi	r3,r3,2
   853c4:	18c7883a 	add	r3,r3,r3
   853c8:	18c7883a 	add	r3,r3,r3
   853cc:	12000115 	stw	r8,4(r2)
   853d0:	10c7883a 	add	r3,r2,r3
   853d4:	19400015 	stw	r5,0(r3)
   853d8:	0005883a 	mov	r2,zero
   853dc:	dfc00517 	ldw	ra,20(sp)
   853e0:	dc400417 	ldw	r17,16(sp)
   853e4:	dc000317 	ldw	r16,12(sp)
   853e8:	dec00604 	addi	sp,sp,24
   853ec:	f800283a 	ret
   853f0:	00800034 	movhi	r2,0
   853f4:	10800004 	addi	r2,r2,0
   853f8:	10002626 	beq	r2,zero,85494 <__register_exitproc+0x110>
   853fc:	01006404 	movi	r4,400
   85400:	d9400015 	stw	r5,0(sp)
   85404:	d9800115 	stw	r6,4(sp)
   85408:	d9c00215 	stw	r7,8(sp)
   8540c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   85410:	d9400017 	ldw	r5,0(sp)
   85414:	d9800117 	ldw	r6,4(sp)
   85418:	d9c00217 	ldw	r7,8(sp)
   8541c:	10001d26 	beq	r2,zero,85494 <__register_exitproc+0x110>
   85420:	81000017 	ldw	r4,0(r16)
   85424:	10000115 	stw	zero,4(r2)
   85428:	02000044 	movi	r8,1
   8542c:	22405217 	ldw	r9,328(r4)
   85430:	0007883a 	mov	r3,zero
   85434:	12400015 	stw	r9,0(r2)
   85438:	20805215 	stw	r2,328(r4)
   8543c:	10006215 	stw	zero,392(r2)
   85440:	10006315 	stw	zero,396(r2)
   85444:	883fde26 	beq	r17,zero,853c0 <__register_exitproc+0x3c>
   85448:	18c9883a 	add	r4,r3,r3
   8544c:	2109883a 	add	r4,r4,r4
   85450:	1109883a 	add	r4,r2,r4
   85454:	21802215 	stw	r6,136(r4)
   85458:	01800044 	movi	r6,1
   8545c:	12406217 	ldw	r9,392(r2)
   85460:	30cc983a 	sll	r6,r6,r3
   85464:	4992b03a 	or	r9,r9,r6
   85468:	12406215 	stw	r9,392(r2)
   8546c:	21c04215 	stw	r7,264(r4)
   85470:	01000084 	movi	r4,2
   85474:	893fd21e 	bne	r17,r4,853c0 <__register_exitproc+0x3c>
   85478:	11006317 	ldw	r4,396(r2)
   8547c:	218cb03a 	or	r6,r4,r6
   85480:	11806315 	stw	r6,396(r2)
   85484:	003fce06 	br	853c0 <__register_exitproc+0x3c>
   85488:	18805304 	addi	r2,r3,332
   8548c:	18805215 	stw	r2,328(r3)
   85490:	003fc606 	br	853ac <__register_exitproc+0x28>
   85494:	00bfffc4 	movi	r2,-1
   85498:	003fd006 	br	853dc <__register_exitproc+0x58>

0008549c <__call_exitprocs>:
   8549c:	defff504 	addi	sp,sp,-44
   854a0:	df000915 	stw	fp,36(sp)
   854a4:	dd400615 	stw	r21,24(sp)
   854a8:	dc800315 	stw	r18,12(sp)
   854ac:	dfc00a15 	stw	ra,40(sp)
   854b0:	ddc00815 	stw	r23,32(sp)
   854b4:	dd800715 	stw	r22,28(sp)
   854b8:	dd000515 	stw	r20,20(sp)
   854bc:	dcc00415 	stw	r19,16(sp)
   854c0:	dc400215 	stw	r17,8(sp)
   854c4:	dc000115 	stw	r16,4(sp)
   854c8:	d9000015 	stw	r4,0(sp)
   854cc:	2839883a 	mov	fp,r5
   854d0:	04800044 	movi	r18,1
   854d4:	057fffc4 	movi	r21,-1
   854d8:	00800234 	movhi	r2,8
   854dc:	109c5104 	addi	r2,r2,28996
   854e0:	12000017 	ldw	r8,0(r2)
   854e4:	45005217 	ldw	r20,328(r8)
   854e8:	44c05204 	addi	r19,r8,328
   854ec:	a0001c26 	beq	r20,zero,85560 <__call_exitprocs+0xc4>
   854f0:	a0800117 	ldw	r2,4(r20)
   854f4:	15ffffc4 	addi	r23,r2,-1
   854f8:	b8000d16 	blt	r23,zero,85530 <__call_exitprocs+0x94>
   854fc:	14000044 	addi	r16,r2,1
   85500:	8421883a 	add	r16,r16,r16
   85504:	8421883a 	add	r16,r16,r16
   85508:	84402004 	addi	r17,r16,128
   8550c:	a463883a 	add	r17,r20,r17
   85510:	a421883a 	add	r16,r20,r16
   85514:	e0001e26 	beq	fp,zero,85590 <__call_exitprocs+0xf4>
   85518:	80804017 	ldw	r2,256(r16)
   8551c:	e0801c26 	beq	fp,r2,85590 <__call_exitprocs+0xf4>
   85520:	bdffffc4 	addi	r23,r23,-1
   85524:	843fff04 	addi	r16,r16,-4
   85528:	8c7fff04 	addi	r17,r17,-4
   8552c:	bd7ff91e 	bne	r23,r21,85514 <__call_exitprocs+0x78>
   85530:	00800034 	movhi	r2,0
   85534:	10800004 	addi	r2,r2,0
   85538:	10000926 	beq	r2,zero,85560 <__call_exitprocs+0xc4>
   8553c:	a0800117 	ldw	r2,4(r20)
   85540:	1000301e 	bne	r2,zero,85604 <__call_exitprocs+0x168>
   85544:	a0800017 	ldw	r2,0(r20)
   85548:	10003226 	beq	r2,zero,85614 <__call_exitprocs+0x178>
   8554c:	a009883a 	mov	r4,r20
   85550:	98800015 	stw	r2,0(r19)
   85554:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   85558:	9d000017 	ldw	r20,0(r19)
   8555c:	a03fe41e 	bne	r20,zero,854f0 <__call_exitprocs+0x54>
   85560:	dfc00a17 	ldw	ra,40(sp)
   85564:	df000917 	ldw	fp,36(sp)
   85568:	ddc00817 	ldw	r23,32(sp)
   8556c:	dd800717 	ldw	r22,28(sp)
   85570:	dd400617 	ldw	r21,24(sp)
   85574:	dd000517 	ldw	r20,20(sp)
   85578:	dcc00417 	ldw	r19,16(sp)
   8557c:	dc800317 	ldw	r18,12(sp)
   85580:	dc400217 	ldw	r17,8(sp)
   85584:	dc000117 	ldw	r16,4(sp)
   85588:	dec00b04 	addi	sp,sp,44
   8558c:	f800283a 	ret
   85590:	a0800117 	ldw	r2,4(r20)
   85594:	80c00017 	ldw	r3,0(r16)
   85598:	10bfffc4 	addi	r2,r2,-1
   8559c:	15c01426 	beq	r2,r23,855f0 <__call_exitprocs+0x154>
   855a0:	80000015 	stw	zero,0(r16)
   855a4:	183fde26 	beq	r3,zero,85520 <__call_exitprocs+0x84>
   855a8:	95c8983a 	sll	r4,r18,r23
   855ac:	a0806217 	ldw	r2,392(r20)
   855b0:	a5800117 	ldw	r22,4(r20)
   855b4:	2084703a 	and	r2,r4,r2
   855b8:	10000b26 	beq	r2,zero,855e8 <__call_exitprocs+0x14c>
   855bc:	a0806317 	ldw	r2,396(r20)
   855c0:	2088703a 	and	r4,r4,r2
   855c4:	20000c1e 	bne	r4,zero,855f8 <__call_exitprocs+0x15c>
   855c8:	89400017 	ldw	r5,0(r17)
   855cc:	d9000017 	ldw	r4,0(sp)
   855d0:	183ee83a 	callr	r3
   855d4:	a0800117 	ldw	r2,4(r20)
   855d8:	15bfbf1e 	bne	r2,r22,854d8 <__call_exitprocs+0x3c>
   855dc:	98800017 	ldw	r2,0(r19)
   855e0:	153fcf26 	beq	r2,r20,85520 <__call_exitprocs+0x84>
   855e4:	003fbc06 	br	854d8 <__call_exitprocs+0x3c>
   855e8:	183ee83a 	callr	r3
   855ec:	003ff906 	br	855d4 <__call_exitprocs+0x138>
   855f0:	a5c00115 	stw	r23,4(r20)
   855f4:	003feb06 	br	855a4 <__call_exitprocs+0x108>
   855f8:	89000017 	ldw	r4,0(r17)
   855fc:	183ee83a 	callr	r3
   85600:	003ff406 	br	855d4 <__call_exitprocs+0x138>
   85604:	a0800017 	ldw	r2,0(r20)
   85608:	a027883a 	mov	r19,r20
   8560c:	1029883a 	mov	r20,r2
   85610:	003fb606 	br	854ec <__call_exitprocs+0x50>
   85614:	0005883a 	mov	r2,zero
   85618:	003ffb06 	br	85608 <__call_exitprocs+0x16c>

0008561c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8561c:	defffd04 	addi	sp,sp,-12
   85620:	df000215 	stw	fp,8(sp)
   85624:	df000204 	addi	fp,sp,8
   85628:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8562c:	0001883a 	nop
   85630:	e0bfff17 	ldw	r2,-4(fp)
   85634:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   85638:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8563c:	10000226 	beq	r2,zero,85648 <_exit+0x2c>
    ALT_SIM_FAIL();
   85640:	002af070 	cmpltui	zero,zero,43969
   85644:	00000106 	br	8564c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   85648:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8564c:	003fff06 	br	8564c <_exit+0x30>
