
game_code.elf:     file format elf32-littlenios2
game_code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000575c memsz 0x0000575c flags r-x
    LOAD off    0x0000677c vaddr 0x0008577c paddr 0x000871e8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c54 vaddr 0x00088c54 paddr 0x00088c54 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054e8  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  0008572c  0008572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0008577c  000871e8  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00088c54  00088c54  00008c54  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00088da8  00088da8  000081e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  00008210  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000162c2  00000000  00000000  00008c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005eea  00000000  00000000  0001eee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000068da  00000000  00000000  00024dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000153c  00000000  00000000  0002b6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002682  00000000  00000000  0002cbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002f266  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00033ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000367de  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000367e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000367ed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000367ee  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000367ef  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000367fa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00036805  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0003681b  2**0
                  CONTENTS, READONLY
 26 .jdi          000056af  00000000  00000000  0003684f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002cdc9  00000000  00000000  0003befe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
0008572c l    d  .rodata	00000000 .rodata
0008577c l    d  .rwdata	00000000 .rwdata
00088c54 l    d  .bss	00000000 .bss
00088da8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game_code_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00080430 l     F .text	00000008 __fp_unlock
00080444 l     F .text	0000019c __sinit.part.1
000805e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008577c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0008308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00083198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000831c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000832b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00083390 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008347c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000871d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000839d0 l     F .text	00000034 alt_dev_reg
00086150 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083ca8 l     F .text	0000020c altera_avalon_jtag_uart_irq
00083eb4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00084660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084ad4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00084c14 l     F .text	0000003c alt_get_errno
00084c50 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00088c7c g     O .bss	00000004 alt_instruction_exception_handler
00082e84 g     F .text	00000054 _isatty_r
0008358c g     F .text	0000007c alt_main
000802c4 g     F .text	000000c0 _puts_r
00088ca8 g     O .bss	00000100 alt_irq
00082bac g     F .text	00000060 _lseek_r
000871e8 g       *ABS*	00000000 __flash_rwdata_start
00088da8 g       *ABS*	00000000 __alt_heap_start
00082160 g     F .text	0000005c __sseek
00080780 g     F .text	00000010 __sinit
000805e8 g     F .text	00000068 __sfmoreglue
0008362c g     F .text	00000024 __malloc_unlock
0008184c g     F .text	0000015c memmove
00080768 g     F .text	00000018 _cleanup
0008500c g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082e28 g     F .text	0000005c _fstat_r
00088c60 g     O .bss	00000004 errno
000820dc g     F .text	00000008 __seofread
00088c68 g     O .bss	00000004 alt_argv
0008f1b0 g       *ABS*	00000000 _gp
00085fd0 g     O .rwdata	00000180 alt_fd_list
00085030 g     F .text	00000090 alt_find_dev
00081704 g     F .text	00000148 memcpy
00080438 g     F .text	0000000c _cleanup_r
00084b98 g     F .text	0000007c alt_io_redirect
0008572c g       *ABS*	00000000 __DTOR_END__
00080384 g     F .text	00000014 puts
000852fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
000840ac g     F .text	0000021c altera_avalon_jtag_uart_read
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00082fd0 g     F .text	00000064 .hidden __udivsi3
000832ec g     F .text	000000a4 isatty
0008526c g     F .text	00000090 alt_icache_flush
00088c5c g     O .bss	00000004 __malloc_top_pad
000807d0 g     F .text	000004bc __sfvwrite_r
00082034 g     F .text	00000054 _sbrk_r
00082dc8 g     F .text	00000060 _read_r
000871d0 g     O .rwdata	00000004 alt_max_fd
000823cc g     F .text	000000f0 _fclose_r
00082748 g     F .text	00000030 fflush
00088c58 g     O .bss	00000004 __malloc_max_sbrked_mem
000834b8 g     F .text	000000d4 lseek
000871b0 g     O .rwdata	00000004 _global_impure_ptr
00081ad0 g     F .text	00000564 _realloc_r
00088da8 g       *ABS*	00000000 __bss_end
000849e4 g     F .text	000000f0 alt_iic_isr_register
00084f04 g     F .text	00000108 alt_tick
000807a0 g     F .text	00000018 __fp_lock_all
00084998 g     F .text	0000004c alt_ic_irq_enabled
00084e68 g     F .text	0000009c alt_alarm_stop
00088c70 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
00085fa8 g     O .rwdata	00000028 alt_dev_null
00084618 g     F .text	00000048 alt_dcache_flush_all
000871e8 g       *ABS*	00000000 __ram_rwdata_end
000871c8 g     O .rwdata	00000008 alt_dev_list
000838d8 g     F .text	000000f8 write
0008577c g       *ABS*	00000000 __ram_rodata_end
00083200 g     F .text	000000b0 fstat
00083034 g     F .text	00000058 .hidden __umodsi3
00088da8 g       *ABS*	00000000 end
00083be8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0008572c g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
000842c8 g     F .text	00000224 altera_avalon_jtag_uart_write
00080790 g     F .text	00000004 __sfp_lock_acquire
00081620 g     F .text	000000e4 memchr
0008289c g     F .text	00000310 _free_r
00085578 g     F .text	00000180 __call_exitprocs
000871b8 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
00088c74 g     O .bss	00000004 _alt_tick_rate
00088c78 g     O .bss	00000004 _alt_nticks
0008368c g     F .text	000000fc read
00083a3c g     F .text	00000048 alt_sys_init
00085460 g     F .text	00000118 __register_exitproc
00083f54 g     F .text	00000068 altera_avalon_jtag_uart_close
0008577c g       *ABS*	00000000 __ram_rwdata_start
0008572c g       *ABS*	00000000 __ram_rodata_start
00088c80 g     O .bss	00000028 __malloc_current_mallinfo
00083a84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000851c8 g     F .text	000000a4 alt_get_fd
00082378 g     F .text	00000054 _close_r
000853e4 g     F .text	0000007c memcmp
00083b44 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00088da8 g       *ABS*	00000000 __alt_stack_base
00083b94 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082224 g     F .text	00000154 __swsetup_r
00080650 g     F .text	00000118 __sfp
00085ba0 g     O .rwdata	00000408 __malloc_av_
0008079c g     F .text	00000004 __sinit_lock_release
00082088 g     F .text	00000054 __sread
000850c0 g     F .text	00000108 alt_find_file
0008469c g     F .text	000000a4 alt_dev_llist_insert
00083608 g     F .text	00000024 __malloc_lock
000837ec g     F .text	000000b0 sbrk
000826ec g     F .text	0000005c _fflush_r
00088c54 g       *ABS*	00000000 __bss_start
000819a8 g     F .text	00000128 memset
00080290 g     F .text	00000034 main
00088c6c g     O .bss	00000004 alt_envp
00088c54 g     O .bss	00000004 __malloc_max_total_mem
00083ae4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000821bc g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
000824bc g     F .text	00000014 fclose
00080e14 g     F .text	0000080c _malloc_r
000871d4 g     O .rwdata	00000004 alt_errno
00080c8c g     F .text	000000c4 _fwalk
00082ed8 g     F .text	00000084 .hidden __divsi3
00082778 g     F .text	00000124 _malloc_trim_r
0008572c g       *ABS*	00000000 __CTOR_END__
0008572c g       *ABS*	00000000 __flash_rodata_start
0008572c g       *ABS*	00000000 __DTOR_LIST__
00083a04 g     F .text	00000038 alt_irq_init
00083788 g     F .text	00000064 alt_release_fd
00085398 g     F .text	00000014 atexit
000821c4 g     F .text	00000060 _write_r
000871b4 g     O .rwdata	00000004 _impure_ptr
00088c64 g     O .bss	00000004 alt_argc
000824d0 g     F .text	0000021c __sflush_r
000847a0 g     F .text	00000060 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000807b8 g     F .text	00000018 __fp_unlock_all
000871c0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084834 g     F .text	00000050 alt_ic_isr_register
000871e8 g       *ABS*	00000000 _edata
00088da8 g       *ABS*	00000000 _end
00080244 g       *ABS*	00000000 __ram_exceptions_end
00083fbc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0008490c g     F .text	0000008c alt_ic_irq_disable
000820e4 g     F .text	0000007c __swrite
000871bc g     O .rwdata	00000004 __malloc_trim_threshold
000853ac g     F .text	00000038 exit
00080d50 g     F .text	000000c4 _fwalk_reent
00082f5c g     F .text	00000074 .hidden __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00080794 g     F .text	00000004 __sfp_lock_release
000856f8 g     F .text	00000034 _exit
000844ec g     F .text	0000012c alt_alarm_start
00082c0c g     F .text	000001bc __smakebuf_r
00080398 g     F .text	00000098 strlen
00084d14 g     F .text	00000154 open
00084800 g     F .text	00000034 alt_icache_flush_all
000871dc g     O .rwdata	00000004 alt_priority_mask
00084884 g     F .text	00000088 alt_ic_irq_enable
000871e0 g     O .rwdata	00000008 alt_alarm_list
00084740 g     F .text	00000060 _do_ctors
000830c8 g     F .text	000000d0 close
000833f8 g     F .text	00000084 alt_load
00080798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10a32a04 	addi	r2,r2,-29528
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10a32a04 	addi	r2,r2,-29528
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a6b317 	ldw	r2,-25908(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a6b317 	ldw	r2,-25908(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   8025c:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80260:	d6bc6c14 	ori	gp,gp,61872
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80268:	10a31514 	ori	r2,r2,35924

    movhi r3, %hi(__bss_end)
   8026c:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80270:	18e36a14 	ori	r3,r3,36264

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	00833f80 	call	833f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008358c0 	call	8358c <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <alt_after_alt_main>

00080290 <main>:
 */

#include <stdio.h>

int main()
{
   80290:	defffe04 	addi	sp,sp,-8
   80294:	dfc00115 	stw	ra,4(sp)
   80298:	df000015 	stw	fp,0(sp)
   8029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   802a0:	01000234 	movhi	r4,8
   802a4:	2115cb04 	addi	r4,r4,22316
   802a8:	00803840 	call	80384 <puts>

  return 0;
   802ac:	0005883a 	mov	r2,zero
}
   802b0:	e037883a 	mov	sp,fp
   802b4:	dfc00117 	ldw	ra,4(sp)
   802b8:	df000017 	ldw	fp,0(sp)
   802bc:	dec00204 	addi	sp,sp,8
   802c0:	f800283a 	ret

000802c4 <_puts_r>:
   802c4:	defff604 	addi	sp,sp,-40
   802c8:	dc000715 	stw	r16,28(sp)
   802cc:	2021883a 	mov	r16,r4
   802d0:	2809883a 	mov	r4,r5
   802d4:	dc400815 	stw	r17,32(sp)
   802d8:	dfc00915 	stw	ra,36(sp)
   802dc:	2823883a 	mov	r17,r5
   802e0:	00803980 	call	80398 <strlen>
   802e4:	10c00044 	addi	r3,r2,1
   802e8:	d8800115 	stw	r2,4(sp)
   802ec:	00800234 	movhi	r2,8
   802f0:	1095d004 	addi	r2,r2,22336
   802f4:	d8800215 	stw	r2,8(sp)
   802f8:	00800044 	movi	r2,1
   802fc:	d8800315 	stw	r2,12(sp)
   80300:	00800084 	movi	r2,2
   80304:	dc400015 	stw	r17,0(sp)
   80308:	d8c00615 	stw	r3,24(sp)
   8030c:	dec00415 	stw	sp,16(sp)
   80310:	d8800515 	stw	r2,20(sp)
   80314:	80000226 	beq	r16,zero,80320 <_puts_r+0x5c>
   80318:	80800e17 	ldw	r2,56(r16)
   8031c:	10001426 	beq	r2,zero,80370 <_puts_r+0xac>
   80320:	81400217 	ldw	r5,8(r16)
   80324:	2880030b 	ldhu	r2,12(r5)
   80328:	10c8000c 	andi	r3,r2,8192
   8032c:	1800061e 	bne	r3,zero,80348 <_puts_r+0x84>
   80330:	29001917 	ldw	r4,100(r5)
   80334:	00f7ffc4 	movi	r3,-8193
   80338:	10880014 	ori	r2,r2,8192
   8033c:	20c6703a 	and	r3,r4,r3
   80340:	2880030d 	sth	r2,12(r5)
   80344:	28c01915 	stw	r3,100(r5)
   80348:	d9800404 	addi	r6,sp,16
   8034c:	8009883a 	mov	r4,r16
   80350:	00807d00 	call	807d0 <__sfvwrite_r>
   80354:	1000091e 	bne	r2,zero,8037c <_puts_r+0xb8>
   80358:	00800284 	movi	r2,10
   8035c:	dfc00917 	ldw	ra,36(sp)
   80360:	dc400817 	ldw	r17,32(sp)
   80364:	dc000717 	ldw	r16,28(sp)
   80368:	dec00a04 	addi	sp,sp,40
   8036c:	f800283a 	ret
   80370:	8009883a 	mov	r4,r16
   80374:	00807800 	call	80780 <__sinit>
   80378:	003fe906 	br	80320 <_puts_r+0x5c>
   8037c:	00bfffc4 	movi	r2,-1
   80380:	003ff606 	br	8035c <_puts_r+0x98>

00080384 <puts>:
   80384:	00800234 	movhi	r2,8
   80388:	109c6d04 	addi	r2,r2,29108
   8038c:	200b883a 	mov	r5,r4
   80390:	11000017 	ldw	r4,0(r2)
   80394:	00802c41 	jmpi	802c4 <_puts_r>

00080398 <strlen>:
   80398:	208000cc 	andi	r2,r4,3
   8039c:	10002026 	beq	r2,zero,80420 <strlen+0x88>
   803a0:	20800007 	ldb	r2,0(r4)
   803a4:	10002026 	beq	r2,zero,80428 <strlen+0x90>
   803a8:	2005883a 	mov	r2,r4
   803ac:	00000206 	br	803b8 <strlen+0x20>
   803b0:	10c00007 	ldb	r3,0(r2)
   803b4:	18001826 	beq	r3,zero,80418 <strlen+0x80>
   803b8:	10800044 	addi	r2,r2,1
   803bc:	10c000cc 	andi	r3,r2,3
   803c0:	183ffb1e 	bne	r3,zero,803b0 <strlen+0x18>
   803c4:	10c00017 	ldw	r3,0(r2)
   803c8:	01ffbff4 	movhi	r7,65279
   803cc:	39ffbfc4 	addi	r7,r7,-257
   803d0:	00ca303a 	nor	r5,zero,r3
   803d4:	01a02074 	movhi	r6,32897
   803d8:	19c7883a 	add	r3,r3,r7
   803dc:	31a02004 	addi	r6,r6,-32640
   803e0:	1946703a 	and	r3,r3,r5
   803e4:	1986703a 	and	r3,r3,r6
   803e8:	1800091e 	bne	r3,zero,80410 <strlen+0x78>
   803ec:	10800104 	addi	r2,r2,4
   803f0:	10c00017 	ldw	r3,0(r2)
   803f4:	19cb883a 	add	r5,r3,r7
   803f8:	00c6303a 	nor	r3,zero,r3
   803fc:	28c6703a 	and	r3,r5,r3
   80400:	1986703a 	and	r3,r3,r6
   80404:	183ff926 	beq	r3,zero,803ec <strlen+0x54>
   80408:	00000106 	br	80410 <strlen+0x78>
   8040c:	10800044 	addi	r2,r2,1
   80410:	10c00007 	ldb	r3,0(r2)
   80414:	183ffd1e 	bne	r3,zero,8040c <strlen+0x74>
   80418:	1105c83a 	sub	r2,r2,r4
   8041c:	f800283a 	ret
   80420:	2005883a 	mov	r2,r4
   80424:	003fe706 	br	803c4 <strlen+0x2c>
   80428:	0005883a 	mov	r2,zero
   8042c:	f800283a 	ret

00080430 <__fp_unlock>:
   80430:	0005883a 	mov	r2,zero
   80434:	f800283a 	ret

00080438 <_cleanup_r>:
   80438:	01400234 	movhi	r5,8
   8043c:	2948f304 	addi	r5,r5,9164
   80440:	0080d501 	jmpi	80d50 <_fwalk_reent>

00080444 <__sinit.part.1>:
   80444:	defff704 	addi	sp,sp,-36
   80448:	00c00234 	movhi	r3,8
   8044c:	dfc00815 	stw	ra,32(sp)
   80450:	ddc00715 	stw	r23,28(sp)
   80454:	dd800615 	stw	r22,24(sp)
   80458:	dd400515 	stw	r21,20(sp)
   8045c:	dd000415 	stw	r20,16(sp)
   80460:	dcc00315 	stw	r19,12(sp)
   80464:	dc800215 	stw	r18,8(sp)
   80468:	dc400115 	stw	r17,4(sp)
   8046c:	dc000015 	stw	r16,0(sp)
   80470:	18c10e04 	addi	r3,r3,1080
   80474:	24000117 	ldw	r16,4(r4)
   80478:	20c00f15 	stw	r3,60(r4)
   8047c:	2080bb04 	addi	r2,r4,748
   80480:	00c000c4 	movi	r3,3
   80484:	20c0b915 	stw	r3,740(r4)
   80488:	2080ba15 	stw	r2,744(r4)
   8048c:	2000b815 	stw	zero,736(r4)
   80490:	05c00204 	movi	r23,8
   80494:	00800104 	movi	r2,4
   80498:	2025883a 	mov	r18,r4
   8049c:	b80d883a 	mov	r6,r23
   804a0:	81001704 	addi	r4,r16,92
   804a4:	000b883a 	mov	r5,zero
   804a8:	80000015 	stw	zero,0(r16)
   804ac:	80000115 	stw	zero,4(r16)
   804b0:	80000215 	stw	zero,8(r16)
   804b4:	8080030d 	sth	r2,12(r16)
   804b8:	80001915 	stw	zero,100(r16)
   804bc:	8000038d 	sth	zero,14(r16)
   804c0:	80000415 	stw	zero,16(r16)
   804c4:	80000515 	stw	zero,20(r16)
   804c8:	80000615 	stw	zero,24(r16)
   804cc:	00819a80 	call	819a8 <memset>
   804d0:	05800234 	movhi	r22,8
   804d4:	94400217 	ldw	r17,8(r18)
   804d8:	05400234 	movhi	r21,8
   804dc:	05000234 	movhi	r20,8
   804e0:	04c00234 	movhi	r19,8
   804e4:	b5882204 	addi	r22,r22,8328
   804e8:	ad483904 	addi	r21,r21,8420
   804ec:	a5085804 	addi	r20,r20,8544
   804f0:	9cc86f04 	addi	r19,r19,8636
   804f4:	85800815 	stw	r22,32(r16)
   804f8:	85400915 	stw	r21,36(r16)
   804fc:	85000a15 	stw	r20,40(r16)
   80500:	84c00b15 	stw	r19,44(r16)
   80504:	84000715 	stw	r16,28(r16)
   80508:	00800284 	movi	r2,10
   8050c:	8880030d 	sth	r2,12(r17)
   80510:	00800044 	movi	r2,1
   80514:	b80d883a 	mov	r6,r23
   80518:	89001704 	addi	r4,r17,92
   8051c:	000b883a 	mov	r5,zero
   80520:	88000015 	stw	zero,0(r17)
   80524:	88000115 	stw	zero,4(r17)
   80528:	88000215 	stw	zero,8(r17)
   8052c:	88001915 	stw	zero,100(r17)
   80530:	8880038d 	sth	r2,14(r17)
   80534:	88000415 	stw	zero,16(r17)
   80538:	88000515 	stw	zero,20(r17)
   8053c:	88000615 	stw	zero,24(r17)
   80540:	00819a80 	call	819a8 <memset>
   80544:	94000317 	ldw	r16,12(r18)
   80548:	00800484 	movi	r2,18
   8054c:	8c400715 	stw	r17,28(r17)
   80550:	8d800815 	stw	r22,32(r17)
   80554:	8d400915 	stw	r21,36(r17)
   80558:	8d000a15 	stw	r20,40(r17)
   8055c:	8cc00b15 	stw	r19,44(r17)
   80560:	8080030d 	sth	r2,12(r16)
   80564:	00800084 	movi	r2,2
   80568:	80000015 	stw	zero,0(r16)
   8056c:	80000115 	stw	zero,4(r16)
   80570:	80000215 	stw	zero,8(r16)
   80574:	80001915 	stw	zero,100(r16)
   80578:	8080038d 	sth	r2,14(r16)
   8057c:	80000415 	stw	zero,16(r16)
   80580:	80000515 	stw	zero,20(r16)
   80584:	80000615 	stw	zero,24(r16)
   80588:	b80d883a 	mov	r6,r23
   8058c:	000b883a 	mov	r5,zero
   80590:	81001704 	addi	r4,r16,92
   80594:	00819a80 	call	819a8 <memset>
   80598:	00800044 	movi	r2,1
   8059c:	84000715 	stw	r16,28(r16)
   805a0:	85800815 	stw	r22,32(r16)
   805a4:	85400915 	stw	r21,36(r16)
   805a8:	85000a15 	stw	r20,40(r16)
   805ac:	84c00b15 	stw	r19,44(r16)
   805b0:	90800e15 	stw	r2,56(r18)
   805b4:	dfc00817 	ldw	ra,32(sp)
   805b8:	ddc00717 	ldw	r23,28(sp)
   805bc:	dd800617 	ldw	r22,24(sp)
   805c0:	dd400517 	ldw	r21,20(sp)
   805c4:	dd000417 	ldw	r20,16(sp)
   805c8:	dcc00317 	ldw	r19,12(sp)
   805cc:	dc800217 	ldw	r18,8(sp)
   805d0:	dc400117 	ldw	r17,4(sp)
   805d4:	dc000017 	ldw	r16,0(sp)
   805d8:	dec00904 	addi	sp,sp,36
   805dc:	f800283a 	ret

000805e0 <__fp_lock>:
   805e0:	0005883a 	mov	r2,zero
   805e4:	f800283a 	ret

000805e8 <__sfmoreglue>:
   805e8:	defffc04 	addi	sp,sp,-16
   805ec:	dc400115 	stw	r17,4(sp)
   805f0:	2c7fffc4 	addi	r17,r5,-1
   805f4:	8c401a24 	muli	r17,r17,104
   805f8:	dc800215 	stw	r18,8(sp)
   805fc:	2825883a 	mov	r18,r5
   80600:	89401d04 	addi	r5,r17,116
   80604:	dc000015 	stw	r16,0(sp)
   80608:	dfc00315 	stw	ra,12(sp)
   8060c:	0080e140 	call	80e14 <_malloc_r>
   80610:	1021883a 	mov	r16,r2
   80614:	10000726 	beq	r2,zero,80634 <__sfmoreglue+0x4c>
   80618:	11000304 	addi	r4,r2,12
   8061c:	10000015 	stw	zero,0(r2)
   80620:	14800115 	stw	r18,4(r2)
   80624:	11000215 	stw	r4,8(r2)
   80628:	89801a04 	addi	r6,r17,104
   8062c:	000b883a 	mov	r5,zero
   80630:	00819a80 	call	819a8 <memset>
   80634:	8005883a 	mov	r2,r16
   80638:	dfc00317 	ldw	ra,12(sp)
   8063c:	dc800217 	ldw	r18,8(sp)
   80640:	dc400117 	ldw	r17,4(sp)
   80644:	dc000017 	ldw	r16,0(sp)
   80648:	dec00404 	addi	sp,sp,16
   8064c:	f800283a 	ret

00080650 <__sfp>:
   80650:	defffb04 	addi	sp,sp,-20
   80654:	dc000015 	stw	r16,0(sp)
   80658:	04000234 	movhi	r16,8
   8065c:	841c6c04 	addi	r16,r16,29104
   80660:	dcc00315 	stw	r19,12(sp)
   80664:	2027883a 	mov	r19,r4
   80668:	81000017 	ldw	r4,0(r16)
   8066c:	dfc00415 	stw	ra,16(sp)
   80670:	dc800215 	stw	r18,8(sp)
   80674:	20800e17 	ldw	r2,56(r4)
   80678:	dc400115 	stw	r17,4(sp)
   8067c:	1000021e 	bne	r2,zero,80688 <__sfp+0x38>
   80680:	00804440 	call	80444 <__sinit.part.1>
   80684:	81000017 	ldw	r4,0(r16)
   80688:	2480b804 	addi	r18,r4,736
   8068c:	047fffc4 	movi	r17,-1
   80690:	91000117 	ldw	r4,4(r18)
   80694:	94000217 	ldw	r16,8(r18)
   80698:	213fffc4 	addi	r4,r4,-1
   8069c:	20000a16 	blt	r4,zero,806c8 <__sfp+0x78>
   806a0:	8080030f 	ldh	r2,12(r16)
   806a4:	10000c26 	beq	r2,zero,806d8 <__sfp+0x88>
   806a8:	80c01d04 	addi	r3,r16,116
   806ac:	00000206 	br	806b8 <__sfp+0x68>
   806b0:	18bfe60f 	ldh	r2,-104(r3)
   806b4:	10000826 	beq	r2,zero,806d8 <__sfp+0x88>
   806b8:	213fffc4 	addi	r4,r4,-1
   806bc:	1c3ffd04 	addi	r16,r3,-12
   806c0:	18c01a04 	addi	r3,r3,104
   806c4:	247ffa1e 	bne	r4,r17,806b0 <__sfp+0x60>
   806c8:	90800017 	ldw	r2,0(r18)
   806cc:	10001d26 	beq	r2,zero,80744 <__sfp+0xf4>
   806d0:	1025883a 	mov	r18,r2
   806d4:	003fee06 	br	80690 <__sfp+0x40>
   806d8:	00bfffc4 	movi	r2,-1
   806dc:	8080038d 	sth	r2,14(r16)
   806e0:	00800044 	movi	r2,1
   806e4:	8080030d 	sth	r2,12(r16)
   806e8:	80001915 	stw	zero,100(r16)
   806ec:	80000015 	stw	zero,0(r16)
   806f0:	80000215 	stw	zero,8(r16)
   806f4:	80000115 	stw	zero,4(r16)
   806f8:	80000415 	stw	zero,16(r16)
   806fc:	80000515 	stw	zero,20(r16)
   80700:	80000615 	stw	zero,24(r16)
   80704:	01800204 	movi	r6,8
   80708:	000b883a 	mov	r5,zero
   8070c:	81001704 	addi	r4,r16,92
   80710:	00819a80 	call	819a8 <memset>
   80714:	8005883a 	mov	r2,r16
   80718:	80000c15 	stw	zero,48(r16)
   8071c:	80000d15 	stw	zero,52(r16)
   80720:	80001115 	stw	zero,68(r16)
   80724:	80001215 	stw	zero,72(r16)
   80728:	dfc00417 	ldw	ra,16(sp)
   8072c:	dcc00317 	ldw	r19,12(sp)
   80730:	dc800217 	ldw	r18,8(sp)
   80734:	dc400117 	ldw	r17,4(sp)
   80738:	dc000017 	ldw	r16,0(sp)
   8073c:	dec00504 	addi	sp,sp,20
   80740:	f800283a 	ret
   80744:	01400104 	movi	r5,4
   80748:	9809883a 	mov	r4,r19
   8074c:	00805e80 	call	805e8 <__sfmoreglue>
   80750:	90800015 	stw	r2,0(r18)
   80754:	103fde1e 	bne	r2,zero,806d0 <__sfp+0x80>
   80758:	00800304 	movi	r2,12
   8075c:	98800015 	stw	r2,0(r19)
   80760:	0005883a 	mov	r2,zero
   80764:	003ff006 	br	80728 <__sfp+0xd8>

00080768 <_cleanup>:
   80768:	00800234 	movhi	r2,8
   8076c:	109c6c04 	addi	r2,r2,29104
   80770:	11000017 	ldw	r4,0(r2)
   80774:	01400234 	movhi	r5,8
   80778:	2948f304 	addi	r5,r5,9164
   8077c:	0080d501 	jmpi	80d50 <_fwalk_reent>

00080780 <__sinit>:
   80780:	20800e17 	ldw	r2,56(r4)
   80784:	10000126 	beq	r2,zero,8078c <__sinit+0xc>
   80788:	f800283a 	ret
   8078c:	00804441 	jmpi	80444 <__sinit.part.1>

00080790 <__sfp_lock_acquire>:
   80790:	f800283a 	ret

00080794 <__sfp_lock_release>:
   80794:	f800283a 	ret

00080798 <__sinit_lock_acquire>:
   80798:	f800283a 	ret

0008079c <__sinit_lock_release>:
   8079c:	f800283a 	ret

000807a0 <__fp_lock_all>:
   807a0:	00800234 	movhi	r2,8
   807a4:	109c6d04 	addi	r2,r2,29108
   807a8:	11000017 	ldw	r4,0(r2)
   807ac:	01400234 	movhi	r5,8
   807b0:	29417804 	addi	r5,r5,1504
   807b4:	0080c8c1 	jmpi	80c8c <_fwalk>

000807b8 <__fp_unlock_all>:
   807b8:	00800234 	movhi	r2,8
   807bc:	109c6d04 	addi	r2,r2,29108
   807c0:	11000017 	ldw	r4,0(r2)
   807c4:	01400234 	movhi	r5,8
   807c8:	29410c04 	addi	r5,r5,1072
   807cc:	0080c8c1 	jmpi	80c8c <_fwalk>

000807d0 <__sfvwrite_r>:
   807d0:	30800217 	ldw	r2,8(r6)
   807d4:	10006726 	beq	r2,zero,80974 <__sfvwrite_r+0x1a4>
   807d8:	28c0030b 	ldhu	r3,12(r5)
   807dc:	defff404 	addi	sp,sp,-48
   807e0:	dd400715 	stw	r21,28(sp)
   807e4:	dd000615 	stw	r20,24(sp)
   807e8:	dc000215 	stw	r16,8(sp)
   807ec:	dfc00b15 	stw	ra,44(sp)
   807f0:	df000a15 	stw	fp,40(sp)
   807f4:	ddc00915 	stw	r23,36(sp)
   807f8:	dd800815 	stw	r22,32(sp)
   807fc:	dcc00515 	stw	r19,20(sp)
   80800:	dc800415 	stw	r18,16(sp)
   80804:	dc400315 	stw	r17,12(sp)
   80808:	1880020c 	andi	r2,r3,8
   8080c:	2821883a 	mov	r16,r5
   80810:	202b883a 	mov	r21,r4
   80814:	3029883a 	mov	r20,r6
   80818:	10002726 	beq	r2,zero,808b8 <__sfvwrite_r+0xe8>
   8081c:	28800417 	ldw	r2,16(r5)
   80820:	10002526 	beq	r2,zero,808b8 <__sfvwrite_r+0xe8>
   80824:	1880008c 	andi	r2,r3,2
   80828:	a4400017 	ldw	r17,0(r20)
   8082c:	10002a26 	beq	r2,zero,808d8 <__sfvwrite_r+0x108>
   80830:	05a00034 	movhi	r22,32768
   80834:	0027883a 	mov	r19,zero
   80838:	0025883a 	mov	r18,zero
   8083c:	b5bf0004 	addi	r22,r22,-1024
   80840:	980d883a 	mov	r6,r19
   80844:	a809883a 	mov	r4,r21
   80848:	90004626 	beq	r18,zero,80964 <__sfvwrite_r+0x194>
   8084c:	900f883a 	mov	r7,r18
   80850:	b480022e 	bgeu	r22,r18,8085c <__sfvwrite_r+0x8c>
   80854:	01e00034 	movhi	r7,32768
   80858:	39ff0004 	addi	r7,r7,-1024
   8085c:	80800917 	ldw	r2,36(r16)
   80860:	81400717 	ldw	r5,28(r16)
   80864:	103ee83a 	callr	r2
   80868:	0080570e 	bge	zero,r2,809c8 <__sfvwrite_r+0x1f8>
   8086c:	a0c00217 	ldw	r3,8(r20)
   80870:	98a7883a 	add	r19,r19,r2
   80874:	90a5c83a 	sub	r18,r18,r2
   80878:	1885c83a 	sub	r2,r3,r2
   8087c:	a0800215 	stw	r2,8(r20)
   80880:	103fef1e 	bne	r2,zero,80840 <__sfvwrite_r+0x70>
   80884:	0005883a 	mov	r2,zero
   80888:	dfc00b17 	ldw	ra,44(sp)
   8088c:	df000a17 	ldw	fp,40(sp)
   80890:	ddc00917 	ldw	r23,36(sp)
   80894:	dd800817 	ldw	r22,32(sp)
   80898:	dd400717 	ldw	r21,28(sp)
   8089c:	dd000617 	ldw	r20,24(sp)
   808a0:	dcc00517 	ldw	r19,20(sp)
   808a4:	dc800417 	ldw	r18,16(sp)
   808a8:	dc400317 	ldw	r17,12(sp)
   808ac:	dc000217 	ldw	r16,8(sp)
   808b0:	dec00c04 	addi	sp,sp,48
   808b4:	f800283a 	ret
   808b8:	800b883a 	mov	r5,r16
   808bc:	a809883a 	mov	r4,r21
   808c0:	00822240 	call	82224 <__swsetup_r>
   808c4:	1000eb1e 	bne	r2,zero,80c74 <__sfvwrite_r+0x4a4>
   808c8:	80c0030b 	ldhu	r3,12(r16)
   808cc:	a4400017 	ldw	r17,0(r20)
   808d0:	1880008c 	andi	r2,r3,2
   808d4:	103fd61e 	bne	r2,zero,80830 <__sfvwrite_r+0x60>
   808d8:	1880004c 	andi	r2,r3,1
   808dc:	10003f1e 	bne	r2,zero,809dc <__sfvwrite_r+0x20c>
   808e0:	0039883a 	mov	fp,zero
   808e4:	0025883a 	mov	r18,zero
   808e8:	90001a26 	beq	r18,zero,80954 <__sfvwrite_r+0x184>
   808ec:	1880800c 	andi	r2,r3,512
   808f0:	84c00217 	ldw	r19,8(r16)
   808f4:	10002126 	beq	r2,zero,8097c <__sfvwrite_r+0x1ac>
   808f8:	982f883a 	mov	r23,r19
   808fc:	94c09336 	bltu	r18,r19,80b4c <__sfvwrite_r+0x37c>
   80900:	1881200c 	andi	r2,r3,1152
   80904:	10009e1e 	bne	r2,zero,80b80 <__sfvwrite_r+0x3b0>
   80908:	81000017 	ldw	r4,0(r16)
   8090c:	b80d883a 	mov	r6,r23
   80910:	e00b883a 	mov	r5,fp
   80914:	008184c0 	call	8184c <memmove>
   80918:	80c00217 	ldw	r3,8(r16)
   8091c:	81000017 	ldw	r4,0(r16)
   80920:	9005883a 	mov	r2,r18
   80924:	1ce7c83a 	sub	r19,r3,r19
   80928:	25cf883a 	add	r7,r4,r23
   8092c:	84c00215 	stw	r19,8(r16)
   80930:	81c00015 	stw	r7,0(r16)
   80934:	a0c00217 	ldw	r3,8(r20)
   80938:	e0b9883a 	add	fp,fp,r2
   8093c:	90a5c83a 	sub	r18,r18,r2
   80940:	18a7c83a 	sub	r19,r3,r2
   80944:	a4c00215 	stw	r19,8(r20)
   80948:	983fce26 	beq	r19,zero,80884 <__sfvwrite_r+0xb4>
   8094c:	80c0030b 	ldhu	r3,12(r16)
   80950:	903fe61e 	bne	r18,zero,808ec <__sfvwrite_r+0x11c>
   80954:	8f000017 	ldw	fp,0(r17)
   80958:	8c800117 	ldw	r18,4(r17)
   8095c:	8c400204 	addi	r17,r17,8
   80960:	003fe106 	br	808e8 <__sfvwrite_r+0x118>
   80964:	8cc00017 	ldw	r19,0(r17)
   80968:	8c800117 	ldw	r18,4(r17)
   8096c:	8c400204 	addi	r17,r17,8
   80970:	003fb306 	br	80840 <__sfvwrite_r+0x70>
   80974:	0005883a 	mov	r2,zero
   80978:	f800283a 	ret
   8097c:	81000017 	ldw	r4,0(r16)
   80980:	80800417 	ldw	r2,16(r16)
   80984:	11005736 	bltu	r2,r4,80ae4 <__sfvwrite_r+0x314>
   80988:	85c00517 	ldw	r23,20(r16)
   8098c:	95c05536 	bltu	r18,r23,80ae4 <__sfvwrite_r+0x314>
   80990:	00a00034 	movhi	r2,32768
   80994:	10bfffc4 	addi	r2,r2,-1
   80998:	9009883a 	mov	r4,r18
   8099c:	1480012e 	bgeu	r2,r18,809a4 <__sfvwrite_r+0x1d4>
   809a0:	1009883a 	mov	r4,r2
   809a4:	b80b883a 	mov	r5,r23
   809a8:	0082ed80 	call	82ed8 <__divsi3>
   809ac:	15cf383a 	mul	r7,r2,r23
   809b0:	81400717 	ldw	r5,28(r16)
   809b4:	80800917 	ldw	r2,36(r16)
   809b8:	e00d883a 	mov	r6,fp
   809bc:	a809883a 	mov	r4,r21
   809c0:	103ee83a 	callr	r2
   809c4:	00bfdb16 	blt	zero,r2,80934 <__sfvwrite_r+0x164>
   809c8:	8080030b 	ldhu	r2,12(r16)
   809cc:	10801014 	ori	r2,r2,64
   809d0:	8080030d 	sth	r2,12(r16)
   809d4:	00bfffc4 	movi	r2,-1
   809d8:	003fab06 	br	80888 <__sfvwrite_r+0xb8>
   809dc:	0027883a 	mov	r19,zero
   809e0:	0011883a 	mov	r8,zero
   809e4:	0039883a 	mov	fp,zero
   809e8:	0025883a 	mov	r18,zero
   809ec:	90001f26 	beq	r18,zero,80a6c <__sfvwrite_r+0x29c>
   809f0:	40005a26 	beq	r8,zero,80b5c <__sfvwrite_r+0x38c>
   809f4:	982d883a 	mov	r22,r19
   809f8:	94c0012e 	bgeu	r18,r19,80a00 <__sfvwrite_r+0x230>
   809fc:	902d883a 	mov	r22,r18
   80a00:	81000017 	ldw	r4,0(r16)
   80a04:	80800417 	ldw	r2,16(r16)
   80a08:	b02f883a 	mov	r23,r22
   80a0c:	81c00517 	ldw	r7,20(r16)
   80a10:	1100032e 	bgeu	r2,r4,80a20 <__sfvwrite_r+0x250>
   80a14:	80c00217 	ldw	r3,8(r16)
   80a18:	38c7883a 	add	r3,r7,r3
   80a1c:	1d801816 	blt	r3,r22,80a80 <__sfvwrite_r+0x2b0>
   80a20:	b1c03e16 	blt	r22,r7,80b1c <__sfvwrite_r+0x34c>
   80a24:	80800917 	ldw	r2,36(r16)
   80a28:	81400717 	ldw	r5,28(r16)
   80a2c:	e00d883a 	mov	r6,fp
   80a30:	da000115 	stw	r8,4(sp)
   80a34:	a809883a 	mov	r4,r21
   80a38:	103ee83a 	callr	r2
   80a3c:	102f883a 	mov	r23,r2
   80a40:	da000117 	ldw	r8,4(sp)
   80a44:	00bfe00e 	bge	zero,r2,809c8 <__sfvwrite_r+0x1f8>
   80a48:	9de7c83a 	sub	r19,r19,r23
   80a4c:	98001f26 	beq	r19,zero,80acc <__sfvwrite_r+0x2fc>
   80a50:	a0800217 	ldw	r2,8(r20)
   80a54:	e5f9883a 	add	fp,fp,r23
   80a58:	95e5c83a 	sub	r18,r18,r23
   80a5c:	15efc83a 	sub	r23,r2,r23
   80a60:	a5c00215 	stw	r23,8(r20)
   80a64:	b83f8726 	beq	r23,zero,80884 <__sfvwrite_r+0xb4>
   80a68:	903fe11e 	bne	r18,zero,809f0 <__sfvwrite_r+0x220>
   80a6c:	8f000017 	ldw	fp,0(r17)
   80a70:	8c800117 	ldw	r18,4(r17)
   80a74:	0011883a 	mov	r8,zero
   80a78:	8c400204 	addi	r17,r17,8
   80a7c:	003fdb06 	br	809ec <__sfvwrite_r+0x21c>
   80a80:	180d883a 	mov	r6,r3
   80a84:	e00b883a 	mov	r5,fp
   80a88:	da000115 	stw	r8,4(sp)
   80a8c:	d8c00015 	stw	r3,0(sp)
   80a90:	008184c0 	call	8184c <memmove>
   80a94:	d8c00017 	ldw	r3,0(sp)
   80a98:	80800017 	ldw	r2,0(r16)
   80a9c:	800b883a 	mov	r5,r16
   80aa0:	a809883a 	mov	r4,r21
   80aa4:	10c5883a 	add	r2,r2,r3
   80aa8:	80800015 	stw	r2,0(r16)
   80aac:	d8c00015 	stw	r3,0(sp)
   80ab0:	00826ec0 	call	826ec <_fflush_r>
   80ab4:	d8c00017 	ldw	r3,0(sp)
   80ab8:	da000117 	ldw	r8,4(sp)
   80abc:	103fc21e 	bne	r2,zero,809c8 <__sfvwrite_r+0x1f8>
   80ac0:	182f883a 	mov	r23,r3
   80ac4:	9de7c83a 	sub	r19,r19,r23
   80ac8:	983fe11e 	bne	r19,zero,80a50 <__sfvwrite_r+0x280>
   80acc:	800b883a 	mov	r5,r16
   80ad0:	a809883a 	mov	r4,r21
   80ad4:	00826ec0 	call	826ec <_fflush_r>
   80ad8:	103fbb1e 	bne	r2,zero,809c8 <__sfvwrite_r+0x1f8>
   80adc:	0011883a 	mov	r8,zero
   80ae0:	003fdb06 	br	80a50 <__sfvwrite_r+0x280>
   80ae4:	94c0012e 	bgeu	r18,r19,80aec <__sfvwrite_r+0x31c>
   80ae8:	9027883a 	mov	r19,r18
   80aec:	980d883a 	mov	r6,r19
   80af0:	e00b883a 	mov	r5,fp
   80af4:	008184c0 	call	8184c <memmove>
   80af8:	80800217 	ldw	r2,8(r16)
   80afc:	80c00017 	ldw	r3,0(r16)
   80b00:	14c5c83a 	sub	r2,r2,r19
   80b04:	1cc7883a 	add	r3,r3,r19
   80b08:	80800215 	stw	r2,8(r16)
   80b0c:	80c00015 	stw	r3,0(r16)
   80b10:	10004326 	beq	r2,zero,80c20 <__sfvwrite_r+0x450>
   80b14:	9805883a 	mov	r2,r19
   80b18:	003f8606 	br	80934 <__sfvwrite_r+0x164>
   80b1c:	b00d883a 	mov	r6,r22
   80b20:	e00b883a 	mov	r5,fp
   80b24:	da000115 	stw	r8,4(sp)
   80b28:	008184c0 	call	8184c <memmove>
   80b2c:	80800217 	ldw	r2,8(r16)
   80b30:	80c00017 	ldw	r3,0(r16)
   80b34:	da000117 	ldw	r8,4(sp)
   80b38:	1585c83a 	sub	r2,r2,r22
   80b3c:	1dad883a 	add	r22,r3,r22
   80b40:	80800215 	stw	r2,8(r16)
   80b44:	85800015 	stw	r22,0(r16)
   80b48:	003fbf06 	br	80a48 <__sfvwrite_r+0x278>
   80b4c:	81000017 	ldw	r4,0(r16)
   80b50:	9027883a 	mov	r19,r18
   80b54:	902f883a 	mov	r23,r18
   80b58:	003f6c06 	br	8090c <__sfvwrite_r+0x13c>
   80b5c:	900d883a 	mov	r6,r18
   80b60:	01400284 	movi	r5,10
   80b64:	e009883a 	mov	r4,fp
   80b68:	00816200 	call	81620 <memchr>
   80b6c:	10003e26 	beq	r2,zero,80c68 <__sfvwrite_r+0x498>
   80b70:	10800044 	addi	r2,r2,1
   80b74:	1727c83a 	sub	r19,r2,fp
   80b78:	02000044 	movi	r8,1
   80b7c:	003f9d06 	br	809f4 <__sfvwrite_r+0x224>
   80b80:	80800517 	ldw	r2,20(r16)
   80b84:	81400417 	ldw	r5,16(r16)
   80b88:	81c00017 	ldw	r7,0(r16)
   80b8c:	10a7883a 	add	r19,r2,r2
   80b90:	9885883a 	add	r2,r19,r2
   80b94:	1026d7fa 	srli	r19,r2,31
   80b98:	396dc83a 	sub	r22,r7,r5
   80b9c:	b1000044 	addi	r4,r22,1
   80ba0:	9885883a 	add	r2,r19,r2
   80ba4:	1027d07a 	srai	r19,r2,1
   80ba8:	2485883a 	add	r2,r4,r18
   80bac:	980d883a 	mov	r6,r19
   80bb0:	9880022e 	bgeu	r19,r2,80bbc <__sfvwrite_r+0x3ec>
   80bb4:	1027883a 	mov	r19,r2
   80bb8:	100d883a 	mov	r6,r2
   80bbc:	18c1000c 	andi	r3,r3,1024
   80bc0:	18001c26 	beq	r3,zero,80c34 <__sfvwrite_r+0x464>
   80bc4:	300b883a 	mov	r5,r6
   80bc8:	a809883a 	mov	r4,r21
   80bcc:	0080e140 	call	80e14 <_malloc_r>
   80bd0:	102f883a 	mov	r23,r2
   80bd4:	10002926 	beq	r2,zero,80c7c <__sfvwrite_r+0x4ac>
   80bd8:	81400417 	ldw	r5,16(r16)
   80bdc:	b00d883a 	mov	r6,r22
   80be0:	1009883a 	mov	r4,r2
   80be4:	00817040 	call	81704 <memcpy>
   80be8:	8080030b 	ldhu	r2,12(r16)
   80bec:	00fedfc4 	movi	r3,-1153
   80bf0:	10c4703a 	and	r2,r2,r3
   80bf4:	10802014 	ori	r2,r2,128
   80bf8:	8080030d 	sth	r2,12(r16)
   80bfc:	bd89883a 	add	r4,r23,r22
   80c00:	9d8fc83a 	sub	r7,r19,r22
   80c04:	85c00415 	stw	r23,16(r16)
   80c08:	84c00515 	stw	r19,20(r16)
   80c0c:	81000015 	stw	r4,0(r16)
   80c10:	9027883a 	mov	r19,r18
   80c14:	81c00215 	stw	r7,8(r16)
   80c18:	902f883a 	mov	r23,r18
   80c1c:	003f3b06 	br	8090c <__sfvwrite_r+0x13c>
   80c20:	800b883a 	mov	r5,r16
   80c24:	a809883a 	mov	r4,r21
   80c28:	00826ec0 	call	826ec <_fflush_r>
   80c2c:	103fb926 	beq	r2,zero,80b14 <__sfvwrite_r+0x344>
   80c30:	003f6506 	br	809c8 <__sfvwrite_r+0x1f8>
   80c34:	a809883a 	mov	r4,r21
   80c38:	0081ad00 	call	81ad0 <_realloc_r>
   80c3c:	102f883a 	mov	r23,r2
   80c40:	103fee1e 	bne	r2,zero,80bfc <__sfvwrite_r+0x42c>
   80c44:	81400417 	ldw	r5,16(r16)
   80c48:	a809883a 	mov	r4,r21
   80c4c:	008289c0 	call	8289c <_free_r>
   80c50:	8080030b 	ldhu	r2,12(r16)
   80c54:	00ffdfc4 	movi	r3,-129
   80c58:	1884703a 	and	r2,r3,r2
   80c5c:	00c00304 	movi	r3,12
   80c60:	a8c00015 	stw	r3,0(r21)
   80c64:	003f5906 	br	809cc <__sfvwrite_r+0x1fc>
   80c68:	94c00044 	addi	r19,r18,1
   80c6c:	02000044 	movi	r8,1
   80c70:	003f6006 	br	809f4 <__sfvwrite_r+0x224>
   80c74:	00bfffc4 	movi	r2,-1
   80c78:	003f0306 	br	80888 <__sfvwrite_r+0xb8>
   80c7c:	00800304 	movi	r2,12
   80c80:	a8800015 	stw	r2,0(r21)
   80c84:	8080030b 	ldhu	r2,12(r16)
   80c88:	003f5006 	br	809cc <__sfvwrite_r+0x1fc>

00080c8c <_fwalk>:
   80c8c:	defff704 	addi	sp,sp,-36
   80c90:	dd000415 	stw	r20,16(sp)
   80c94:	dfc00815 	stw	ra,32(sp)
   80c98:	ddc00715 	stw	r23,28(sp)
   80c9c:	dd800615 	stw	r22,24(sp)
   80ca0:	dd400515 	stw	r21,20(sp)
   80ca4:	dcc00315 	stw	r19,12(sp)
   80ca8:	dc800215 	stw	r18,8(sp)
   80cac:	dc400115 	stw	r17,4(sp)
   80cb0:	dc000015 	stw	r16,0(sp)
   80cb4:	2500b804 	addi	r20,r4,736
   80cb8:	a0002326 	beq	r20,zero,80d48 <_fwalk+0xbc>
   80cbc:	282b883a 	mov	r21,r5
   80cc0:	002f883a 	mov	r23,zero
   80cc4:	05800044 	movi	r22,1
   80cc8:	04ffffc4 	movi	r19,-1
   80ccc:	a4400117 	ldw	r17,4(r20)
   80cd0:	a4800217 	ldw	r18,8(r20)
   80cd4:	8c7fffc4 	addi	r17,r17,-1
   80cd8:	88000d16 	blt	r17,zero,80d10 <_fwalk+0x84>
   80cdc:	94000304 	addi	r16,r18,12
   80ce0:	94800384 	addi	r18,r18,14
   80ce4:	8080000b 	ldhu	r2,0(r16)
   80ce8:	8c7fffc4 	addi	r17,r17,-1
   80cec:	813ffd04 	addi	r4,r16,-12
   80cf0:	b080042e 	bgeu	r22,r2,80d04 <_fwalk+0x78>
   80cf4:	9080000f 	ldh	r2,0(r18)
   80cf8:	14c00226 	beq	r2,r19,80d04 <_fwalk+0x78>
   80cfc:	a83ee83a 	callr	r21
   80d00:	b8aeb03a 	or	r23,r23,r2
   80d04:	84001a04 	addi	r16,r16,104
   80d08:	94801a04 	addi	r18,r18,104
   80d0c:	8cfff51e 	bne	r17,r19,80ce4 <_fwalk+0x58>
   80d10:	a5000017 	ldw	r20,0(r20)
   80d14:	a03fed1e 	bne	r20,zero,80ccc <_fwalk+0x40>
   80d18:	b805883a 	mov	r2,r23
   80d1c:	dfc00817 	ldw	ra,32(sp)
   80d20:	ddc00717 	ldw	r23,28(sp)
   80d24:	dd800617 	ldw	r22,24(sp)
   80d28:	dd400517 	ldw	r21,20(sp)
   80d2c:	dd000417 	ldw	r20,16(sp)
   80d30:	dcc00317 	ldw	r19,12(sp)
   80d34:	dc800217 	ldw	r18,8(sp)
   80d38:	dc400117 	ldw	r17,4(sp)
   80d3c:	dc000017 	ldw	r16,0(sp)
   80d40:	dec00904 	addi	sp,sp,36
   80d44:	f800283a 	ret
   80d48:	002f883a 	mov	r23,zero
   80d4c:	003ff206 	br	80d18 <_fwalk+0x8c>

00080d50 <_fwalk_reent>:
   80d50:	defff704 	addi	sp,sp,-36
   80d54:	dd000415 	stw	r20,16(sp)
   80d58:	dfc00815 	stw	ra,32(sp)
   80d5c:	ddc00715 	stw	r23,28(sp)
   80d60:	dd800615 	stw	r22,24(sp)
   80d64:	dd400515 	stw	r21,20(sp)
   80d68:	dcc00315 	stw	r19,12(sp)
   80d6c:	dc800215 	stw	r18,8(sp)
   80d70:	dc400115 	stw	r17,4(sp)
   80d74:	dc000015 	stw	r16,0(sp)
   80d78:	2500b804 	addi	r20,r4,736
   80d7c:	a0002326 	beq	r20,zero,80e0c <_fwalk_reent+0xbc>
   80d80:	282b883a 	mov	r21,r5
   80d84:	2027883a 	mov	r19,r4
   80d88:	002f883a 	mov	r23,zero
   80d8c:	05800044 	movi	r22,1
   80d90:	04bfffc4 	movi	r18,-1
   80d94:	a4400117 	ldw	r17,4(r20)
   80d98:	a4000217 	ldw	r16,8(r20)
   80d9c:	8c7fffc4 	addi	r17,r17,-1
   80da0:	88000c16 	blt	r17,zero,80dd4 <_fwalk_reent+0x84>
   80da4:	84000304 	addi	r16,r16,12
   80da8:	8080000b 	ldhu	r2,0(r16)
   80dac:	8c7fffc4 	addi	r17,r17,-1
   80db0:	817ffd04 	addi	r5,r16,-12
   80db4:	b080052e 	bgeu	r22,r2,80dcc <_fwalk_reent+0x7c>
   80db8:	8080008f 	ldh	r2,2(r16)
   80dbc:	9809883a 	mov	r4,r19
   80dc0:	14800226 	beq	r2,r18,80dcc <_fwalk_reent+0x7c>
   80dc4:	a83ee83a 	callr	r21
   80dc8:	b8aeb03a 	or	r23,r23,r2
   80dcc:	84001a04 	addi	r16,r16,104
   80dd0:	8cbff51e 	bne	r17,r18,80da8 <_fwalk_reent+0x58>
   80dd4:	a5000017 	ldw	r20,0(r20)
   80dd8:	a03fee1e 	bne	r20,zero,80d94 <_fwalk_reent+0x44>
   80ddc:	b805883a 	mov	r2,r23
   80de0:	dfc00817 	ldw	ra,32(sp)
   80de4:	ddc00717 	ldw	r23,28(sp)
   80de8:	dd800617 	ldw	r22,24(sp)
   80dec:	dd400517 	ldw	r21,20(sp)
   80df0:	dd000417 	ldw	r20,16(sp)
   80df4:	dcc00317 	ldw	r19,12(sp)
   80df8:	dc800217 	ldw	r18,8(sp)
   80dfc:	dc400117 	ldw	r17,4(sp)
   80e00:	dc000017 	ldw	r16,0(sp)
   80e04:	dec00904 	addi	sp,sp,36
   80e08:	f800283a 	ret
   80e0c:	002f883a 	mov	r23,zero
   80e10:	003ff206 	br	80ddc <_fwalk_reent+0x8c>

00080e14 <_malloc_r>:
   80e14:	defff504 	addi	sp,sp,-44
   80e18:	dc800315 	stw	r18,12(sp)
   80e1c:	dfc00a15 	stw	ra,40(sp)
   80e20:	df000915 	stw	fp,36(sp)
   80e24:	ddc00815 	stw	r23,32(sp)
   80e28:	dd800715 	stw	r22,28(sp)
   80e2c:	dd400615 	stw	r21,24(sp)
   80e30:	dd000515 	stw	r20,20(sp)
   80e34:	dcc00415 	stw	r19,16(sp)
   80e38:	dc400215 	stw	r17,8(sp)
   80e3c:	dc000115 	stw	r16,4(sp)
   80e40:	288002c4 	addi	r2,r5,11
   80e44:	00c00584 	movi	r3,22
   80e48:	2025883a 	mov	r18,r4
   80e4c:	18807f2e 	bgeu	r3,r2,8104c <_malloc_r+0x238>
   80e50:	047ffe04 	movi	r17,-8
   80e54:	1462703a 	and	r17,r2,r17
   80e58:	8800a316 	blt	r17,zero,810e8 <_malloc_r+0x2d4>
   80e5c:	8940a236 	bltu	r17,r5,810e8 <_malloc_r+0x2d4>
   80e60:	00836080 	call	83608 <__malloc_lock>
   80e64:	00807dc4 	movi	r2,503
   80e68:	1441e92e 	bgeu	r2,r17,81610 <_malloc_r+0x7fc>
   80e6c:	8804d27a 	srli	r2,r17,9
   80e70:	1000a126 	beq	r2,zero,810f8 <_malloc_r+0x2e4>
   80e74:	00c00104 	movi	r3,4
   80e78:	18811e36 	bltu	r3,r2,812f4 <_malloc_r+0x4e0>
   80e7c:	8804d1ba 	srli	r2,r17,6
   80e80:	12000e44 	addi	r8,r2,57
   80e84:	11c00e04 	addi	r7,r2,56
   80e88:	4209883a 	add	r4,r8,r8
   80e8c:	04c00234 	movhi	r19,8
   80e90:	2109883a 	add	r4,r4,r4
   80e94:	9cd6e804 	addi	r19,r19,23456
   80e98:	2109883a 	add	r4,r4,r4
   80e9c:	9909883a 	add	r4,r19,r4
   80ea0:	24000117 	ldw	r16,4(r4)
   80ea4:	213ffe04 	addi	r4,r4,-8
   80ea8:	24009726 	beq	r4,r16,81108 <_malloc_r+0x2f4>
   80eac:	80800117 	ldw	r2,4(r16)
   80eb0:	01bfff04 	movi	r6,-4
   80eb4:	014003c4 	movi	r5,15
   80eb8:	1184703a 	and	r2,r2,r6
   80ebc:	1447c83a 	sub	r3,r2,r17
   80ec0:	28c00716 	blt	r5,r3,80ee0 <_malloc_r+0xcc>
   80ec4:	1800920e 	bge	r3,zero,81110 <_malloc_r+0x2fc>
   80ec8:	84000317 	ldw	r16,12(r16)
   80ecc:	24008e26 	beq	r4,r16,81108 <_malloc_r+0x2f4>
   80ed0:	80800117 	ldw	r2,4(r16)
   80ed4:	1184703a 	and	r2,r2,r6
   80ed8:	1447c83a 	sub	r3,r2,r17
   80edc:	28fff90e 	bge	r5,r3,80ec4 <_malloc_r+0xb0>
   80ee0:	3809883a 	mov	r4,r7
   80ee4:	01800234 	movhi	r6,8
   80ee8:	9c000417 	ldw	r16,16(r19)
   80eec:	3196e804 	addi	r6,r6,23456
   80ef0:	32000204 	addi	r8,r6,8
   80ef4:	82013426 	beq	r16,r8,813c8 <_malloc_r+0x5b4>
   80ef8:	80c00117 	ldw	r3,4(r16)
   80efc:	00bfff04 	movi	r2,-4
   80f00:	188e703a 	and	r7,r3,r2
   80f04:	3c45c83a 	sub	r2,r7,r17
   80f08:	00c003c4 	movi	r3,15
   80f0c:	18811f16 	blt	r3,r2,8138c <_malloc_r+0x578>
   80f10:	32000515 	stw	r8,20(r6)
   80f14:	32000415 	stw	r8,16(r6)
   80f18:	10007f0e 	bge	r2,zero,81118 <_malloc_r+0x304>
   80f1c:	00807fc4 	movi	r2,511
   80f20:	11c0fd36 	bltu	r2,r7,81318 <_malloc_r+0x504>
   80f24:	3806d0fa 	srli	r3,r7,3
   80f28:	01c00044 	movi	r7,1
   80f2c:	30800117 	ldw	r2,4(r6)
   80f30:	19400044 	addi	r5,r3,1
   80f34:	294b883a 	add	r5,r5,r5
   80f38:	1807d0ba 	srai	r3,r3,2
   80f3c:	294b883a 	add	r5,r5,r5
   80f40:	294b883a 	add	r5,r5,r5
   80f44:	298b883a 	add	r5,r5,r6
   80f48:	38c6983a 	sll	r3,r7,r3
   80f4c:	29c00017 	ldw	r7,0(r5)
   80f50:	2a7ffe04 	addi	r9,r5,-8
   80f54:	1886b03a 	or	r3,r3,r2
   80f58:	82400315 	stw	r9,12(r16)
   80f5c:	81c00215 	stw	r7,8(r16)
   80f60:	30c00115 	stw	r3,4(r6)
   80f64:	2c000015 	stw	r16,0(r5)
   80f68:	3c000315 	stw	r16,12(r7)
   80f6c:	2005d0ba 	srai	r2,r4,2
   80f70:	01400044 	movi	r5,1
   80f74:	288a983a 	sll	r5,r5,r2
   80f78:	19406f36 	bltu	r3,r5,81138 <_malloc_r+0x324>
   80f7c:	28c4703a 	and	r2,r5,r3
   80f80:	10000a1e 	bne	r2,zero,80fac <_malloc_r+0x198>
   80f84:	00bfff04 	movi	r2,-4
   80f88:	294b883a 	add	r5,r5,r5
   80f8c:	2088703a 	and	r4,r4,r2
   80f90:	28c4703a 	and	r2,r5,r3
   80f94:	21000104 	addi	r4,r4,4
   80f98:	1000041e 	bne	r2,zero,80fac <_malloc_r+0x198>
   80f9c:	294b883a 	add	r5,r5,r5
   80fa0:	28c4703a 	and	r2,r5,r3
   80fa4:	21000104 	addi	r4,r4,4
   80fa8:	103ffc26 	beq	r2,zero,80f9c <_malloc_r+0x188>
   80fac:	02bfff04 	movi	r10,-4
   80fb0:	024003c4 	movi	r9,15
   80fb4:	21800044 	addi	r6,r4,1
   80fb8:	318d883a 	add	r6,r6,r6
   80fbc:	318d883a 	add	r6,r6,r6
   80fc0:	318d883a 	add	r6,r6,r6
   80fc4:	998d883a 	add	r6,r19,r6
   80fc8:	333ffe04 	addi	r12,r6,-8
   80fcc:	2017883a 	mov	r11,r4
   80fd0:	31800104 	addi	r6,r6,4
   80fd4:	34000017 	ldw	r16,0(r6)
   80fd8:	31fffd04 	addi	r7,r6,-12
   80fdc:	81c0041e 	bne	r16,r7,80ff0 <_malloc_r+0x1dc>
   80fe0:	0000fb06 	br	813d0 <_malloc_r+0x5bc>
   80fe4:	1801030e 	bge	r3,zero,813f4 <_malloc_r+0x5e0>
   80fe8:	84000317 	ldw	r16,12(r16)
   80fec:	81c0f826 	beq	r16,r7,813d0 <_malloc_r+0x5bc>
   80ff0:	80800117 	ldw	r2,4(r16)
   80ff4:	1284703a 	and	r2,r2,r10
   80ff8:	1447c83a 	sub	r3,r2,r17
   80ffc:	48fff90e 	bge	r9,r3,80fe4 <_malloc_r+0x1d0>
   81000:	80800317 	ldw	r2,12(r16)
   81004:	81000217 	ldw	r4,8(r16)
   81008:	89400054 	ori	r5,r17,1
   8100c:	81400115 	stw	r5,4(r16)
   81010:	20800315 	stw	r2,12(r4)
   81014:	11000215 	stw	r4,8(r2)
   81018:	8463883a 	add	r17,r16,r17
   8101c:	9c400515 	stw	r17,20(r19)
   81020:	9c400415 	stw	r17,16(r19)
   81024:	18800054 	ori	r2,r3,1
   81028:	88800115 	stw	r2,4(r17)
   8102c:	8a000315 	stw	r8,12(r17)
   81030:	8a000215 	stw	r8,8(r17)
   81034:	88e3883a 	add	r17,r17,r3
   81038:	88c00015 	stw	r3,0(r17)
   8103c:	9009883a 	mov	r4,r18
   81040:	008362c0 	call	8362c <__malloc_unlock>
   81044:	80800204 	addi	r2,r16,8
   81048:	00001b06 	br	810b8 <_malloc_r+0x2a4>
   8104c:	04400404 	movi	r17,16
   81050:	89402536 	bltu	r17,r5,810e8 <_malloc_r+0x2d4>
   81054:	00836080 	call	83608 <__malloc_lock>
   81058:	00800184 	movi	r2,6
   8105c:	01000084 	movi	r4,2
   81060:	04c00234 	movhi	r19,8
   81064:	1085883a 	add	r2,r2,r2
   81068:	9cd6e804 	addi	r19,r19,23456
   8106c:	1085883a 	add	r2,r2,r2
   81070:	9885883a 	add	r2,r19,r2
   81074:	14000117 	ldw	r16,4(r2)
   81078:	10fffe04 	addi	r3,r2,-8
   8107c:	80c0d926 	beq	r16,r3,813e4 <_malloc_r+0x5d0>
   81080:	80c00117 	ldw	r3,4(r16)
   81084:	81000317 	ldw	r4,12(r16)
   81088:	00bfff04 	movi	r2,-4
   8108c:	1884703a 	and	r2,r3,r2
   81090:	81400217 	ldw	r5,8(r16)
   81094:	8085883a 	add	r2,r16,r2
   81098:	10c00117 	ldw	r3,4(r2)
   8109c:	29000315 	stw	r4,12(r5)
   810a0:	21400215 	stw	r5,8(r4)
   810a4:	18c00054 	ori	r3,r3,1
   810a8:	10c00115 	stw	r3,4(r2)
   810ac:	9009883a 	mov	r4,r18
   810b0:	008362c0 	call	8362c <__malloc_unlock>
   810b4:	80800204 	addi	r2,r16,8
   810b8:	dfc00a17 	ldw	ra,40(sp)
   810bc:	df000917 	ldw	fp,36(sp)
   810c0:	ddc00817 	ldw	r23,32(sp)
   810c4:	dd800717 	ldw	r22,28(sp)
   810c8:	dd400617 	ldw	r21,24(sp)
   810cc:	dd000517 	ldw	r20,20(sp)
   810d0:	dcc00417 	ldw	r19,16(sp)
   810d4:	dc800317 	ldw	r18,12(sp)
   810d8:	dc400217 	ldw	r17,8(sp)
   810dc:	dc000117 	ldw	r16,4(sp)
   810e0:	dec00b04 	addi	sp,sp,44
   810e4:	f800283a 	ret
   810e8:	00800304 	movi	r2,12
   810ec:	90800015 	stw	r2,0(r18)
   810f0:	0005883a 	mov	r2,zero
   810f4:	003ff006 	br	810b8 <_malloc_r+0x2a4>
   810f8:	01002004 	movi	r4,128
   810fc:	02001004 	movi	r8,64
   81100:	01c00fc4 	movi	r7,63
   81104:	003f6106 	br	80e8c <_malloc_r+0x78>
   81108:	4009883a 	mov	r4,r8
   8110c:	003f7506 	br	80ee4 <_malloc_r+0xd0>
   81110:	81000317 	ldw	r4,12(r16)
   81114:	003fde06 	br	81090 <_malloc_r+0x27c>
   81118:	81c5883a 	add	r2,r16,r7
   8111c:	11400117 	ldw	r5,4(r2)
   81120:	9009883a 	mov	r4,r18
   81124:	29400054 	ori	r5,r5,1
   81128:	11400115 	stw	r5,4(r2)
   8112c:	008362c0 	call	8362c <__malloc_unlock>
   81130:	80800204 	addi	r2,r16,8
   81134:	003fe006 	br	810b8 <_malloc_r+0x2a4>
   81138:	9c000217 	ldw	r16,8(r19)
   8113c:	00bfff04 	movi	r2,-4
   81140:	85800117 	ldw	r22,4(r16)
   81144:	b0ac703a 	and	r22,r22,r2
   81148:	b4400336 	bltu	r22,r17,81158 <_malloc_r+0x344>
   8114c:	b445c83a 	sub	r2,r22,r17
   81150:	00c003c4 	movi	r3,15
   81154:	18805d16 	blt	r3,r2,812cc <_malloc_r+0x4b8>
   81158:	05c00234 	movhi	r23,8
   8115c:	00800274 	movhi	r2,9
   81160:	10a31704 	addi	r2,r2,-29604
   81164:	bddc6e04 	addi	r23,r23,29112
   81168:	15400017 	ldw	r21,0(r2)
   8116c:	b8c00017 	ldw	r3,0(r23)
   81170:	00bfffc4 	movi	r2,-1
   81174:	858d883a 	add	r6,r16,r22
   81178:	8d6b883a 	add	r21,r17,r21
   8117c:	1880ea26 	beq	r3,r2,81528 <_malloc_r+0x714>
   81180:	ad4403c4 	addi	r21,r21,4111
   81184:	00bc0004 	movi	r2,-4096
   81188:	a8aa703a 	and	r21,r21,r2
   8118c:	a80b883a 	mov	r5,r21
   81190:	9009883a 	mov	r4,r18
   81194:	d9800015 	stw	r6,0(sp)
   81198:	00820340 	call	82034 <_sbrk_r>
   8119c:	1029883a 	mov	r20,r2
   811a0:	00bfffc4 	movi	r2,-1
   811a4:	d9800017 	ldw	r6,0(sp)
   811a8:	a080e826 	beq	r20,r2,8154c <_malloc_r+0x738>
   811ac:	a180a636 	bltu	r20,r6,81448 <_malloc_r+0x634>
   811b0:	07000274 	movhi	fp,9
   811b4:	e7232004 	addi	fp,fp,-29568
   811b8:	e0800017 	ldw	r2,0(fp)
   811bc:	a887883a 	add	r3,r21,r2
   811c0:	e0c00015 	stw	r3,0(fp)
   811c4:	3500e626 	beq	r6,r20,81560 <_malloc_r+0x74c>
   811c8:	b9000017 	ldw	r4,0(r23)
   811cc:	00bfffc4 	movi	r2,-1
   811d0:	2080ee26 	beq	r4,r2,8158c <_malloc_r+0x778>
   811d4:	a185c83a 	sub	r2,r20,r6
   811d8:	10c5883a 	add	r2,r2,r3
   811dc:	e0800015 	stw	r2,0(fp)
   811e0:	a0c001cc 	andi	r3,r20,7
   811e4:	1800bc26 	beq	r3,zero,814d8 <_malloc_r+0x6c4>
   811e8:	a0e9c83a 	sub	r20,r20,r3
   811ec:	00840204 	movi	r2,4104
   811f0:	a5000204 	addi	r20,r20,8
   811f4:	10c7c83a 	sub	r3,r2,r3
   811f8:	a545883a 	add	r2,r20,r21
   811fc:	1083ffcc 	andi	r2,r2,4095
   81200:	18abc83a 	sub	r21,r3,r2
   81204:	a80b883a 	mov	r5,r21
   81208:	9009883a 	mov	r4,r18
   8120c:	00820340 	call	82034 <_sbrk_r>
   81210:	00ffffc4 	movi	r3,-1
   81214:	10c0e126 	beq	r2,r3,8159c <_malloc_r+0x788>
   81218:	1505c83a 	sub	r2,r2,r20
   8121c:	1545883a 	add	r2,r2,r21
   81220:	10800054 	ori	r2,r2,1
   81224:	e0c00017 	ldw	r3,0(fp)
   81228:	9d000215 	stw	r20,8(r19)
   8122c:	a0800115 	stw	r2,4(r20)
   81230:	a8c7883a 	add	r3,r21,r3
   81234:	e0c00015 	stw	r3,0(fp)
   81238:	84c00e26 	beq	r16,r19,81274 <_malloc_r+0x460>
   8123c:	018003c4 	movi	r6,15
   81240:	3580a72e 	bgeu	r6,r22,814e0 <_malloc_r+0x6cc>
   81244:	81400117 	ldw	r5,4(r16)
   81248:	013ffe04 	movi	r4,-8
   8124c:	b0bffd04 	addi	r2,r22,-12
   81250:	1104703a 	and	r2,r2,r4
   81254:	2900004c 	andi	r4,r5,1
   81258:	2088b03a 	or	r4,r4,r2
   8125c:	81000115 	stw	r4,4(r16)
   81260:	01400144 	movi	r5,5
   81264:	8089883a 	add	r4,r16,r2
   81268:	21400115 	stw	r5,4(r4)
   8126c:	21400215 	stw	r5,8(r4)
   81270:	3080cd36 	bltu	r6,r2,815a8 <_malloc_r+0x794>
   81274:	00800274 	movhi	r2,9
   81278:	10a31604 	addi	r2,r2,-29608
   8127c:	11000017 	ldw	r4,0(r2)
   81280:	20c0012e 	bgeu	r4,r3,81288 <_malloc_r+0x474>
   81284:	10c00015 	stw	r3,0(r2)
   81288:	00800274 	movhi	r2,9
   8128c:	10a31504 	addi	r2,r2,-29612
   81290:	11000017 	ldw	r4,0(r2)
   81294:	9c000217 	ldw	r16,8(r19)
   81298:	20c0012e 	bgeu	r4,r3,812a0 <_malloc_r+0x48c>
   8129c:	10c00015 	stw	r3,0(r2)
   812a0:	80c00117 	ldw	r3,4(r16)
   812a4:	00bfff04 	movi	r2,-4
   812a8:	1886703a 	and	r3,r3,r2
   812ac:	1c45c83a 	sub	r2,r3,r17
   812b0:	1c400236 	bltu	r3,r17,812bc <_malloc_r+0x4a8>
   812b4:	00c003c4 	movi	r3,15
   812b8:	18800416 	blt	r3,r2,812cc <_malloc_r+0x4b8>
   812bc:	9009883a 	mov	r4,r18
   812c0:	008362c0 	call	8362c <__malloc_unlock>
   812c4:	0005883a 	mov	r2,zero
   812c8:	003f7b06 	br	810b8 <_malloc_r+0x2a4>
   812cc:	88c00054 	ori	r3,r17,1
   812d0:	80c00115 	stw	r3,4(r16)
   812d4:	8463883a 	add	r17,r16,r17
   812d8:	10800054 	ori	r2,r2,1
   812dc:	9c400215 	stw	r17,8(r19)
   812e0:	88800115 	stw	r2,4(r17)
   812e4:	9009883a 	mov	r4,r18
   812e8:	008362c0 	call	8362c <__malloc_unlock>
   812ec:	80800204 	addi	r2,r16,8
   812f0:	003f7106 	br	810b8 <_malloc_r+0x2a4>
   812f4:	00c00504 	movi	r3,20
   812f8:	18804a2e 	bgeu	r3,r2,81424 <_malloc_r+0x610>
   812fc:	00c01504 	movi	r3,84
   81300:	18806e36 	bltu	r3,r2,814bc <_malloc_r+0x6a8>
   81304:	8804d33a 	srli	r2,r17,12
   81308:	12001bc4 	addi	r8,r2,111
   8130c:	11c01b84 	addi	r7,r2,110
   81310:	4209883a 	add	r4,r8,r8
   81314:	003edd06 	br	80e8c <_malloc_r+0x78>
   81318:	3804d27a 	srli	r2,r7,9
   8131c:	00c00104 	movi	r3,4
   81320:	1880442e 	bgeu	r3,r2,81434 <_malloc_r+0x620>
   81324:	00c00504 	movi	r3,20
   81328:	18808136 	bltu	r3,r2,81530 <_malloc_r+0x71c>
   8132c:	11401704 	addi	r5,r2,92
   81330:	10c016c4 	addi	r3,r2,91
   81334:	294b883a 	add	r5,r5,r5
   81338:	294b883a 	add	r5,r5,r5
   8133c:	294b883a 	add	r5,r5,r5
   81340:	994b883a 	add	r5,r19,r5
   81344:	28800017 	ldw	r2,0(r5)
   81348:	01800234 	movhi	r6,8
   8134c:	297ffe04 	addi	r5,r5,-8
   81350:	3196e804 	addi	r6,r6,23456
   81354:	28806526 	beq	r5,r2,814ec <_malloc_r+0x6d8>
   81358:	01bfff04 	movi	r6,-4
   8135c:	10c00117 	ldw	r3,4(r2)
   81360:	1986703a 	and	r3,r3,r6
   81364:	38c0022e 	bgeu	r7,r3,81370 <_malloc_r+0x55c>
   81368:	10800217 	ldw	r2,8(r2)
   8136c:	28bffb1e 	bne	r5,r2,8135c <_malloc_r+0x548>
   81370:	11400317 	ldw	r5,12(r2)
   81374:	98c00117 	ldw	r3,4(r19)
   81378:	81400315 	stw	r5,12(r16)
   8137c:	80800215 	stw	r2,8(r16)
   81380:	2c000215 	stw	r16,8(r5)
   81384:	14000315 	stw	r16,12(r2)
   81388:	003ef806 	br	80f6c <_malloc_r+0x158>
   8138c:	88c00054 	ori	r3,r17,1
   81390:	80c00115 	stw	r3,4(r16)
   81394:	8463883a 	add	r17,r16,r17
   81398:	34400515 	stw	r17,20(r6)
   8139c:	34400415 	stw	r17,16(r6)
   813a0:	10c00054 	ori	r3,r2,1
   813a4:	8a000315 	stw	r8,12(r17)
   813a8:	8a000215 	stw	r8,8(r17)
   813ac:	88c00115 	stw	r3,4(r17)
   813b0:	88a3883a 	add	r17,r17,r2
   813b4:	88800015 	stw	r2,0(r17)
   813b8:	9009883a 	mov	r4,r18
   813bc:	008362c0 	call	8362c <__malloc_unlock>
   813c0:	80800204 	addi	r2,r16,8
   813c4:	003f3c06 	br	810b8 <_malloc_r+0x2a4>
   813c8:	30c00117 	ldw	r3,4(r6)
   813cc:	003ee706 	br	80f6c <_malloc_r+0x158>
   813d0:	5ac00044 	addi	r11,r11,1
   813d4:	588000cc 	andi	r2,r11,3
   813d8:	31800204 	addi	r6,r6,8
   813dc:	103efd1e 	bne	r2,zero,80fd4 <_malloc_r+0x1c0>
   813e0:	00002406 	br	81474 <_malloc_r+0x660>
   813e4:	14000317 	ldw	r16,12(r2)
   813e8:	143f251e 	bne	r2,r16,81080 <_malloc_r+0x26c>
   813ec:	21000084 	addi	r4,r4,2
   813f0:	003ebc06 	br	80ee4 <_malloc_r+0xd0>
   813f4:	8085883a 	add	r2,r16,r2
   813f8:	10c00117 	ldw	r3,4(r2)
   813fc:	81000317 	ldw	r4,12(r16)
   81400:	81400217 	ldw	r5,8(r16)
   81404:	18c00054 	ori	r3,r3,1
   81408:	10c00115 	stw	r3,4(r2)
   8140c:	29000315 	stw	r4,12(r5)
   81410:	21400215 	stw	r5,8(r4)
   81414:	9009883a 	mov	r4,r18
   81418:	008362c0 	call	8362c <__malloc_unlock>
   8141c:	80800204 	addi	r2,r16,8
   81420:	003f2506 	br	810b8 <_malloc_r+0x2a4>
   81424:	12001704 	addi	r8,r2,92
   81428:	11c016c4 	addi	r7,r2,91
   8142c:	4209883a 	add	r4,r8,r8
   81430:	003e9606 	br	80e8c <_malloc_r+0x78>
   81434:	3804d1ba 	srli	r2,r7,6
   81438:	11400e44 	addi	r5,r2,57
   8143c:	10c00e04 	addi	r3,r2,56
   81440:	294b883a 	add	r5,r5,r5
   81444:	003fbc06 	br	81338 <_malloc_r+0x524>
   81448:	84ff5926 	beq	r16,r19,811b0 <_malloc_r+0x39c>
   8144c:	00800234 	movhi	r2,8
   81450:	1096e804 	addi	r2,r2,23456
   81454:	14000217 	ldw	r16,8(r2)
   81458:	00bfff04 	movi	r2,-4
   8145c:	80c00117 	ldw	r3,4(r16)
   81460:	1886703a 	and	r3,r3,r2
   81464:	003f9106 	br	812ac <_malloc_r+0x498>
   81468:	60800217 	ldw	r2,8(r12)
   8146c:	213fffc4 	addi	r4,r4,-1
   81470:	1300651e 	bne	r2,r12,81608 <_malloc_r+0x7f4>
   81474:	208000cc 	andi	r2,r4,3
   81478:	633ffe04 	addi	r12,r12,-8
   8147c:	103ffa1e 	bne	r2,zero,81468 <_malloc_r+0x654>
   81480:	98800117 	ldw	r2,4(r19)
   81484:	0146303a 	nor	r3,zero,r5
   81488:	1884703a 	and	r2,r3,r2
   8148c:	98800115 	stw	r2,4(r19)
   81490:	294b883a 	add	r5,r5,r5
   81494:	117f2836 	bltu	r2,r5,81138 <_malloc_r+0x324>
   81498:	283f2726 	beq	r5,zero,81138 <_malloc_r+0x324>
   8149c:	2886703a 	and	r3,r5,r2
   814a0:	5809883a 	mov	r4,r11
   814a4:	183ec31e 	bne	r3,zero,80fb4 <_malloc_r+0x1a0>
   814a8:	294b883a 	add	r5,r5,r5
   814ac:	2886703a 	and	r3,r5,r2
   814b0:	21000104 	addi	r4,r4,4
   814b4:	183ffc26 	beq	r3,zero,814a8 <_malloc_r+0x694>
   814b8:	003ebe06 	br	80fb4 <_malloc_r+0x1a0>
   814bc:	00c05504 	movi	r3,340
   814c0:	18801236 	bltu	r3,r2,8150c <_malloc_r+0x6f8>
   814c4:	8804d3fa 	srli	r2,r17,15
   814c8:	12001e04 	addi	r8,r2,120
   814cc:	11c01dc4 	addi	r7,r2,119
   814d0:	4209883a 	add	r4,r8,r8
   814d4:	003e6d06 	br	80e8c <_malloc_r+0x78>
   814d8:	00c40004 	movi	r3,4096
   814dc:	003f4606 	br	811f8 <_malloc_r+0x3e4>
   814e0:	00800044 	movi	r2,1
   814e4:	a0800115 	stw	r2,4(r20)
   814e8:	003f7406 	br	812bc <_malloc_r+0x4a8>
   814ec:	1805d0ba 	srai	r2,r3,2
   814f0:	01c00044 	movi	r7,1
   814f4:	30c00117 	ldw	r3,4(r6)
   814f8:	388e983a 	sll	r7,r7,r2
   814fc:	2805883a 	mov	r2,r5
   81500:	38c6b03a 	or	r3,r7,r3
   81504:	30c00115 	stw	r3,4(r6)
   81508:	003f9b06 	br	81378 <_malloc_r+0x564>
   8150c:	00c15504 	movi	r3,1364
   81510:	18801a36 	bltu	r3,r2,8157c <_malloc_r+0x768>
   81514:	8804d4ba 	srli	r2,r17,18
   81518:	12001f44 	addi	r8,r2,125
   8151c:	11c01f04 	addi	r7,r2,124
   81520:	4209883a 	add	r4,r8,r8
   81524:	003e5906 	br	80e8c <_malloc_r+0x78>
   81528:	ad400404 	addi	r21,r21,16
   8152c:	003f1706 	br	8118c <_malloc_r+0x378>
   81530:	00c01504 	movi	r3,84
   81534:	18802336 	bltu	r3,r2,815c4 <_malloc_r+0x7b0>
   81538:	3804d33a 	srli	r2,r7,12
   8153c:	11401bc4 	addi	r5,r2,111
   81540:	10c01b84 	addi	r3,r2,110
   81544:	294b883a 	add	r5,r5,r5
   81548:	003f7b06 	br	81338 <_malloc_r+0x524>
   8154c:	9c000217 	ldw	r16,8(r19)
   81550:	00bfff04 	movi	r2,-4
   81554:	80c00117 	ldw	r3,4(r16)
   81558:	1886703a 	and	r3,r3,r2
   8155c:	003f5306 	br	812ac <_malloc_r+0x498>
   81560:	3083ffcc 	andi	r2,r6,4095
   81564:	103f181e 	bne	r2,zero,811c8 <_malloc_r+0x3b4>
   81568:	99000217 	ldw	r4,8(r19)
   8156c:	b545883a 	add	r2,r22,r21
   81570:	10800054 	ori	r2,r2,1
   81574:	20800115 	stw	r2,4(r4)
   81578:	003f3e06 	br	81274 <_malloc_r+0x460>
   8157c:	01003f84 	movi	r4,254
   81580:	02001fc4 	movi	r8,127
   81584:	01c01f84 	movi	r7,126
   81588:	003e4006 	br	80e8c <_malloc_r+0x78>
   8158c:	00800234 	movhi	r2,8
   81590:	109c6e04 	addi	r2,r2,29112
   81594:	15000015 	stw	r20,0(r2)
   81598:	003f1106 	br	811e0 <_malloc_r+0x3cc>
   8159c:	00800044 	movi	r2,1
   815a0:	002b883a 	mov	r21,zero
   815a4:	003f1f06 	br	81224 <_malloc_r+0x410>
   815a8:	81400204 	addi	r5,r16,8
   815ac:	9009883a 	mov	r4,r18
   815b0:	008289c0 	call	8289c <_free_r>
   815b4:	00800274 	movhi	r2,9
   815b8:	10a32004 	addi	r2,r2,-29568
   815bc:	10c00017 	ldw	r3,0(r2)
   815c0:	003f2c06 	br	81274 <_malloc_r+0x460>
   815c4:	00c05504 	movi	r3,340
   815c8:	18800536 	bltu	r3,r2,815e0 <_malloc_r+0x7cc>
   815cc:	3804d3fa 	srli	r2,r7,15
   815d0:	11401e04 	addi	r5,r2,120
   815d4:	10c01dc4 	addi	r3,r2,119
   815d8:	294b883a 	add	r5,r5,r5
   815dc:	003f5606 	br	81338 <_malloc_r+0x524>
   815e0:	00c15504 	movi	r3,1364
   815e4:	18800536 	bltu	r3,r2,815fc <_malloc_r+0x7e8>
   815e8:	3804d4ba 	srli	r2,r7,18
   815ec:	11401f44 	addi	r5,r2,125
   815f0:	10c01f04 	addi	r3,r2,124
   815f4:	294b883a 	add	r5,r5,r5
   815f8:	003f4f06 	br	81338 <_malloc_r+0x524>
   815fc:	01403f84 	movi	r5,254
   81600:	00c01f84 	movi	r3,126
   81604:	003f4c06 	br	81338 <_malloc_r+0x524>
   81608:	98800117 	ldw	r2,4(r19)
   8160c:	003fa006 	br	81490 <_malloc_r+0x67c>
   81610:	8808d0fa 	srli	r4,r17,3
   81614:	20800044 	addi	r2,r4,1
   81618:	1085883a 	add	r2,r2,r2
   8161c:	003e9006 	br	81060 <_malloc_r+0x24c>

00081620 <memchr>:
   81620:	208000cc 	andi	r2,r4,3
   81624:	280f883a 	mov	r7,r5
   81628:	10003426 	beq	r2,zero,816fc <memchr+0xdc>
   8162c:	30bfffc4 	addi	r2,r6,-1
   81630:	30001a26 	beq	r6,zero,8169c <memchr+0x7c>
   81634:	20c00003 	ldbu	r3,0(r4)
   81638:	29803fcc 	andi	r6,r5,255
   8163c:	30c0051e 	bne	r6,r3,81654 <memchr+0x34>
   81640:	00001806 	br	816a4 <memchr+0x84>
   81644:	10001526 	beq	r2,zero,8169c <memchr+0x7c>
   81648:	20c00003 	ldbu	r3,0(r4)
   8164c:	10bfffc4 	addi	r2,r2,-1
   81650:	30c01426 	beq	r6,r3,816a4 <memchr+0x84>
   81654:	21000044 	addi	r4,r4,1
   81658:	20c000cc 	andi	r3,r4,3
   8165c:	183ff91e 	bne	r3,zero,81644 <memchr+0x24>
   81660:	020000c4 	movi	r8,3
   81664:	40801136 	bltu	r8,r2,816ac <memchr+0x8c>
   81668:	10000c26 	beq	r2,zero,8169c <memchr+0x7c>
   8166c:	20c00003 	ldbu	r3,0(r4)
   81670:	29403fcc 	andi	r5,r5,255
   81674:	28c00b26 	beq	r5,r3,816a4 <memchr+0x84>
   81678:	20c00044 	addi	r3,r4,1
   8167c:	39803fcc 	andi	r6,r7,255
   81680:	2089883a 	add	r4,r4,r2
   81684:	00000306 	br	81694 <memchr+0x74>
   81688:	18c00044 	addi	r3,r3,1
   8168c:	197fffc3 	ldbu	r5,-1(r3)
   81690:	31400526 	beq	r6,r5,816a8 <memchr+0x88>
   81694:	1805883a 	mov	r2,r3
   81698:	20fffb1e 	bne	r4,r3,81688 <memchr+0x68>
   8169c:	0005883a 	mov	r2,zero
   816a0:	f800283a 	ret
   816a4:	2005883a 	mov	r2,r4
   816a8:	f800283a 	ret
   816ac:	28c03fcc 	andi	r3,r5,255
   816b0:	1812923a 	slli	r9,r3,8
   816b4:	02ffbff4 	movhi	r11,65279
   816b8:	02a02074 	movhi	r10,32897
   816bc:	48d2b03a 	or	r9,r9,r3
   816c0:	4806943a 	slli	r3,r9,16
   816c4:	5affbfc4 	addi	r11,r11,-257
   816c8:	52a02004 	addi	r10,r10,-32640
   816cc:	48d2b03a 	or	r9,r9,r3
   816d0:	20c00017 	ldw	r3,0(r4)
   816d4:	48c6f03a 	xor	r3,r9,r3
   816d8:	1acd883a 	add	r6,r3,r11
   816dc:	00c6303a 	nor	r3,zero,r3
   816e0:	30c6703a 	and	r3,r6,r3
   816e4:	1a86703a 	and	r3,r3,r10
   816e8:	183fe01e 	bne	r3,zero,8166c <memchr+0x4c>
   816ec:	10bfff04 	addi	r2,r2,-4
   816f0:	21000104 	addi	r4,r4,4
   816f4:	40bff636 	bltu	r8,r2,816d0 <memchr+0xb0>
   816f8:	003fdb06 	br	81668 <memchr+0x48>
   816fc:	3005883a 	mov	r2,r6
   81700:	003fd706 	br	81660 <memchr+0x40>

00081704 <memcpy>:
   81704:	defffd04 	addi	sp,sp,-12
   81708:	dfc00215 	stw	ra,8(sp)
   8170c:	dc400115 	stw	r17,4(sp)
   81710:	dc000015 	stw	r16,0(sp)
   81714:	00c003c4 	movi	r3,15
   81718:	2005883a 	mov	r2,r4
   8171c:	1980452e 	bgeu	r3,r6,81834 <memcpy+0x130>
   81720:	2906b03a 	or	r3,r5,r4
   81724:	18c000cc 	andi	r3,r3,3
   81728:	1800441e 	bne	r3,zero,8183c <memcpy+0x138>
   8172c:	347ffc04 	addi	r17,r6,-16
   81730:	8822d13a 	srli	r17,r17,4
   81734:	28c00104 	addi	r3,r5,4
   81738:	23400104 	addi	r13,r4,4
   8173c:	8820913a 	slli	r16,r17,4
   81740:	2b000204 	addi	r12,r5,8
   81744:	22c00204 	addi	r11,r4,8
   81748:	84000504 	addi	r16,r16,20
   8174c:	2a800304 	addi	r10,r5,12
   81750:	22400304 	addi	r9,r4,12
   81754:	2c21883a 	add	r16,r5,r16
   81758:	2811883a 	mov	r8,r5
   8175c:	200f883a 	mov	r7,r4
   81760:	41000017 	ldw	r4,0(r8)
   81764:	1fc00017 	ldw	ra,0(r3)
   81768:	63c00017 	ldw	r15,0(r12)
   8176c:	39000015 	stw	r4,0(r7)
   81770:	53800017 	ldw	r14,0(r10)
   81774:	6fc00015 	stw	ra,0(r13)
   81778:	5bc00015 	stw	r15,0(r11)
   8177c:	4b800015 	stw	r14,0(r9)
   81780:	18c00404 	addi	r3,r3,16
   81784:	39c00404 	addi	r7,r7,16
   81788:	42000404 	addi	r8,r8,16
   8178c:	6b400404 	addi	r13,r13,16
   81790:	63000404 	addi	r12,r12,16
   81794:	5ac00404 	addi	r11,r11,16
   81798:	52800404 	addi	r10,r10,16
   8179c:	4a400404 	addi	r9,r9,16
   817a0:	1c3fef1e 	bne	r3,r16,81760 <memcpy+0x5c>
   817a4:	89c00044 	addi	r7,r17,1
   817a8:	380e913a 	slli	r7,r7,4
   817ac:	310003cc 	andi	r4,r6,15
   817b0:	02c000c4 	movi	r11,3
   817b4:	11c7883a 	add	r3,r2,r7
   817b8:	29cb883a 	add	r5,r5,r7
   817bc:	5900212e 	bgeu	r11,r4,81844 <memcpy+0x140>
   817c0:	1813883a 	mov	r9,r3
   817c4:	2811883a 	mov	r8,r5
   817c8:	200f883a 	mov	r7,r4
   817cc:	42800017 	ldw	r10,0(r8)
   817d0:	4a400104 	addi	r9,r9,4
   817d4:	39ffff04 	addi	r7,r7,-4
   817d8:	4abfff15 	stw	r10,-4(r9)
   817dc:	42000104 	addi	r8,r8,4
   817e0:	59fffa36 	bltu	r11,r7,817cc <memcpy+0xc8>
   817e4:	213fff04 	addi	r4,r4,-4
   817e8:	2008d0ba 	srli	r4,r4,2
   817ec:	318000cc 	andi	r6,r6,3
   817f0:	21000044 	addi	r4,r4,1
   817f4:	2109883a 	add	r4,r4,r4
   817f8:	2109883a 	add	r4,r4,r4
   817fc:	1907883a 	add	r3,r3,r4
   81800:	290b883a 	add	r5,r5,r4
   81804:	30000626 	beq	r6,zero,81820 <memcpy+0x11c>
   81808:	198d883a 	add	r6,r3,r6
   8180c:	29c00003 	ldbu	r7,0(r5)
   81810:	18c00044 	addi	r3,r3,1
   81814:	29400044 	addi	r5,r5,1
   81818:	19ffffc5 	stb	r7,-1(r3)
   8181c:	19bffb1e 	bne	r3,r6,8180c <memcpy+0x108>
   81820:	dfc00217 	ldw	ra,8(sp)
   81824:	dc400117 	ldw	r17,4(sp)
   81828:	dc000017 	ldw	r16,0(sp)
   8182c:	dec00304 	addi	sp,sp,12
   81830:	f800283a 	ret
   81834:	2007883a 	mov	r3,r4
   81838:	003ff206 	br	81804 <memcpy+0x100>
   8183c:	2007883a 	mov	r3,r4
   81840:	003ff106 	br	81808 <memcpy+0x104>
   81844:	200d883a 	mov	r6,r4
   81848:	003fee06 	br	81804 <memcpy+0x100>

0008184c <memmove>:
   8184c:	2005883a 	mov	r2,r4
   81850:	29000b2e 	bgeu	r5,r4,81880 <memmove+0x34>
   81854:	298f883a 	add	r7,r5,r6
   81858:	21c0092e 	bgeu	r4,r7,81880 <memmove+0x34>
   8185c:	2187883a 	add	r3,r4,r6
   81860:	198bc83a 	sub	r5,r3,r6
   81864:	30004826 	beq	r6,zero,81988 <memmove+0x13c>
   81868:	39ffffc4 	addi	r7,r7,-1
   8186c:	39000003 	ldbu	r4,0(r7)
   81870:	18ffffc4 	addi	r3,r3,-1
   81874:	19000005 	stb	r4,0(r3)
   81878:	28fffb1e 	bne	r5,r3,81868 <memmove+0x1c>
   8187c:	f800283a 	ret
   81880:	00c003c4 	movi	r3,15
   81884:	1980412e 	bgeu	r3,r6,8198c <memmove+0x140>
   81888:	2886b03a 	or	r3,r5,r2
   8188c:	18c000cc 	andi	r3,r3,3
   81890:	1800401e 	bne	r3,zero,81994 <memmove+0x148>
   81894:	33fffc04 	addi	r15,r6,-16
   81898:	781ed13a 	srli	r15,r15,4
   8189c:	28c00104 	addi	r3,r5,4
   818a0:	13400104 	addi	r13,r2,4
   818a4:	781c913a 	slli	r14,r15,4
   818a8:	2b000204 	addi	r12,r5,8
   818ac:	12c00204 	addi	r11,r2,8
   818b0:	73800504 	addi	r14,r14,20
   818b4:	2a800304 	addi	r10,r5,12
   818b8:	12400304 	addi	r9,r2,12
   818bc:	2b9d883a 	add	r14,r5,r14
   818c0:	2811883a 	mov	r8,r5
   818c4:	100f883a 	mov	r7,r2
   818c8:	41000017 	ldw	r4,0(r8)
   818cc:	39c00404 	addi	r7,r7,16
   818d0:	18c00404 	addi	r3,r3,16
   818d4:	393ffc15 	stw	r4,-16(r7)
   818d8:	193ffc17 	ldw	r4,-16(r3)
   818dc:	6b400404 	addi	r13,r13,16
   818e0:	5ac00404 	addi	r11,r11,16
   818e4:	693ffc15 	stw	r4,-16(r13)
   818e8:	61000017 	ldw	r4,0(r12)
   818ec:	4a400404 	addi	r9,r9,16
   818f0:	42000404 	addi	r8,r8,16
   818f4:	593ffc15 	stw	r4,-16(r11)
   818f8:	51000017 	ldw	r4,0(r10)
   818fc:	63000404 	addi	r12,r12,16
   81900:	52800404 	addi	r10,r10,16
   81904:	493ffc15 	stw	r4,-16(r9)
   81908:	1bbfef1e 	bne	r3,r14,818c8 <memmove+0x7c>
   8190c:	79000044 	addi	r4,r15,1
   81910:	2008913a 	slli	r4,r4,4
   81914:	328003cc 	andi	r10,r6,15
   81918:	02c000c4 	movi	r11,3
   8191c:	1107883a 	add	r3,r2,r4
   81920:	290b883a 	add	r5,r5,r4
   81924:	5a801e2e 	bgeu	r11,r10,819a0 <memmove+0x154>
   81928:	1813883a 	mov	r9,r3
   8192c:	2811883a 	mov	r8,r5
   81930:	500f883a 	mov	r7,r10
   81934:	41000017 	ldw	r4,0(r8)
   81938:	4a400104 	addi	r9,r9,4
   8193c:	39ffff04 	addi	r7,r7,-4
   81940:	493fff15 	stw	r4,-4(r9)
   81944:	42000104 	addi	r8,r8,4
   81948:	59fffa36 	bltu	r11,r7,81934 <memmove+0xe8>
   8194c:	513fff04 	addi	r4,r10,-4
   81950:	2008d0ba 	srli	r4,r4,2
   81954:	318000cc 	andi	r6,r6,3
   81958:	21000044 	addi	r4,r4,1
   8195c:	2109883a 	add	r4,r4,r4
   81960:	2109883a 	add	r4,r4,r4
   81964:	1907883a 	add	r3,r3,r4
   81968:	290b883a 	add	r5,r5,r4
   8196c:	30000b26 	beq	r6,zero,8199c <memmove+0x150>
   81970:	198d883a 	add	r6,r3,r6
   81974:	29c00003 	ldbu	r7,0(r5)
   81978:	18c00044 	addi	r3,r3,1
   8197c:	29400044 	addi	r5,r5,1
   81980:	19ffffc5 	stb	r7,-1(r3)
   81984:	19bffb1e 	bne	r3,r6,81974 <memmove+0x128>
   81988:	f800283a 	ret
   8198c:	1007883a 	mov	r3,r2
   81990:	003ff606 	br	8196c <memmove+0x120>
   81994:	1007883a 	mov	r3,r2
   81998:	003ff506 	br	81970 <memmove+0x124>
   8199c:	f800283a 	ret
   819a0:	500d883a 	mov	r6,r10
   819a4:	003ff106 	br	8196c <memmove+0x120>

000819a8 <memset>:
   819a8:	20c000cc 	andi	r3,r4,3
   819ac:	2005883a 	mov	r2,r4
   819b0:	18004426 	beq	r3,zero,81ac4 <memset+0x11c>
   819b4:	31ffffc4 	addi	r7,r6,-1
   819b8:	30004026 	beq	r6,zero,81abc <memset+0x114>
   819bc:	2813883a 	mov	r9,r5
   819c0:	200d883a 	mov	r6,r4
   819c4:	2007883a 	mov	r3,r4
   819c8:	00000406 	br	819dc <memset+0x34>
   819cc:	3a3fffc4 	addi	r8,r7,-1
   819d0:	31800044 	addi	r6,r6,1
   819d4:	38003926 	beq	r7,zero,81abc <memset+0x114>
   819d8:	400f883a 	mov	r7,r8
   819dc:	18c00044 	addi	r3,r3,1
   819e0:	32400005 	stb	r9,0(r6)
   819e4:	1a0000cc 	andi	r8,r3,3
   819e8:	403ff81e 	bne	r8,zero,819cc <memset+0x24>
   819ec:	010000c4 	movi	r4,3
   819f0:	21c02d2e 	bgeu	r4,r7,81aa8 <memset+0x100>
   819f4:	29003fcc 	andi	r4,r5,255
   819f8:	200c923a 	slli	r6,r4,8
   819fc:	3108b03a 	or	r4,r6,r4
   81a00:	200c943a 	slli	r6,r4,16
   81a04:	218cb03a 	or	r6,r4,r6
   81a08:	010003c4 	movi	r4,15
   81a0c:	21c0182e 	bgeu	r4,r7,81a70 <memset+0xc8>
   81a10:	3b3ffc04 	addi	r12,r7,-16
   81a14:	6018d13a 	srli	r12,r12,4
   81a18:	1a000104 	addi	r8,r3,4
   81a1c:	1ac00204 	addi	r11,r3,8
   81a20:	6008913a 	slli	r4,r12,4
   81a24:	1a800304 	addi	r10,r3,12
   81a28:	1813883a 	mov	r9,r3
   81a2c:	21000504 	addi	r4,r4,20
   81a30:	1909883a 	add	r4,r3,r4
   81a34:	49800015 	stw	r6,0(r9)
   81a38:	41800015 	stw	r6,0(r8)
   81a3c:	59800015 	stw	r6,0(r11)
   81a40:	51800015 	stw	r6,0(r10)
   81a44:	42000404 	addi	r8,r8,16
   81a48:	4a400404 	addi	r9,r9,16
   81a4c:	5ac00404 	addi	r11,r11,16
   81a50:	52800404 	addi	r10,r10,16
   81a54:	413ff71e 	bne	r8,r4,81a34 <memset+0x8c>
   81a58:	63000044 	addi	r12,r12,1
   81a5c:	6018913a 	slli	r12,r12,4
   81a60:	39c003cc 	andi	r7,r7,15
   81a64:	010000c4 	movi	r4,3
   81a68:	1b07883a 	add	r3,r3,r12
   81a6c:	21c00e2e 	bgeu	r4,r7,81aa8 <memset+0x100>
   81a70:	1813883a 	mov	r9,r3
   81a74:	3811883a 	mov	r8,r7
   81a78:	010000c4 	movi	r4,3
   81a7c:	49800015 	stw	r6,0(r9)
   81a80:	423fff04 	addi	r8,r8,-4
   81a84:	4a400104 	addi	r9,r9,4
   81a88:	223ffc36 	bltu	r4,r8,81a7c <memset+0xd4>
   81a8c:	393fff04 	addi	r4,r7,-4
   81a90:	2008d0ba 	srli	r4,r4,2
   81a94:	39c000cc 	andi	r7,r7,3
   81a98:	21000044 	addi	r4,r4,1
   81a9c:	2109883a 	add	r4,r4,r4
   81aa0:	2109883a 	add	r4,r4,r4
   81aa4:	1907883a 	add	r3,r3,r4
   81aa8:	38000526 	beq	r7,zero,81ac0 <memset+0x118>
   81aac:	19cf883a 	add	r7,r3,r7
   81ab0:	19400005 	stb	r5,0(r3)
   81ab4:	18c00044 	addi	r3,r3,1
   81ab8:	38fffd1e 	bne	r7,r3,81ab0 <memset+0x108>
   81abc:	f800283a 	ret
   81ac0:	f800283a 	ret
   81ac4:	2007883a 	mov	r3,r4
   81ac8:	300f883a 	mov	r7,r6
   81acc:	003fc706 	br	819ec <memset+0x44>

00081ad0 <_realloc_r>:
   81ad0:	defff604 	addi	sp,sp,-40
   81ad4:	dc800215 	stw	r18,8(sp)
   81ad8:	dfc00915 	stw	ra,36(sp)
   81adc:	df000815 	stw	fp,32(sp)
   81ae0:	ddc00715 	stw	r23,28(sp)
   81ae4:	dd800615 	stw	r22,24(sp)
   81ae8:	dd400515 	stw	r21,20(sp)
   81aec:	dd000415 	stw	r20,16(sp)
   81af0:	dcc00315 	stw	r19,12(sp)
   81af4:	dc400115 	stw	r17,4(sp)
   81af8:	dc000015 	stw	r16,0(sp)
   81afc:	3025883a 	mov	r18,r6
   81b00:	2800b726 	beq	r5,zero,81de0 <_realloc_r+0x310>
   81b04:	282b883a 	mov	r21,r5
   81b08:	2029883a 	mov	r20,r4
   81b0c:	00836080 	call	83608 <__malloc_lock>
   81b10:	a8bfff17 	ldw	r2,-4(r21)
   81b14:	043fff04 	movi	r16,-4
   81b18:	90c002c4 	addi	r3,r18,11
   81b1c:	01000584 	movi	r4,22
   81b20:	acfffe04 	addi	r19,r21,-8
   81b24:	1420703a 	and	r16,r2,r16
   81b28:	20c0332e 	bgeu	r4,r3,81bf8 <_realloc_r+0x128>
   81b2c:	047ffe04 	movi	r17,-8
   81b30:	1c62703a 	and	r17,r3,r17
   81b34:	8807883a 	mov	r3,r17
   81b38:	88005816 	blt	r17,zero,81c9c <_realloc_r+0x1cc>
   81b3c:	8c805736 	bltu	r17,r18,81c9c <_realloc_r+0x1cc>
   81b40:	80c0300e 	bge	r16,r3,81c04 <_realloc_r+0x134>
   81b44:	07000234 	movhi	fp,8
   81b48:	e716e804 	addi	fp,fp,23456
   81b4c:	e1c00217 	ldw	r7,8(fp)
   81b50:	9c09883a 	add	r4,r19,r16
   81b54:	22000117 	ldw	r8,4(r4)
   81b58:	21c06326 	beq	r4,r7,81ce8 <_realloc_r+0x218>
   81b5c:	017fff84 	movi	r5,-2
   81b60:	414a703a 	and	r5,r8,r5
   81b64:	214b883a 	add	r5,r4,r5
   81b68:	29800117 	ldw	r6,4(r5)
   81b6c:	3180004c 	andi	r6,r6,1
   81b70:	30003f26 	beq	r6,zero,81c70 <_realloc_r+0x1a0>
   81b74:	1080004c 	andi	r2,r2,1
   81b78:	10008326 	beq	r2,zero,81d88 <_realloc_r+0x2b8>
   81b7c:	900b883a 	mov	r5,r18
   81b80:	a009883a 	mov	r4,r20
   81b84:	0080e140 	call	80e14 <_malloc_r>
   81b88:	1025883a 	mov	r18,r2
   81b8c:	10011e26 	beq	r2,zero,82008 <_realloc_r+0x538>
   81b90:	a93fff17 	ldw	r4,-4(r21)
   81b94:	10fffe04 	addi	r3,r2,-8
   81b98:	00bfff84 	movi	r2,-2
   81b9c:	2084703a 	and	r2,r4,r2
   81ba0:	9885883a 	add	r2,r19,r2
   81ba4:	1880ee26 	beq	r3,r2,81f60 <_realloc_r+0x490>
   81ba8:	81bfff04 	addi	r6,r16,-4
   81bac:	00800904 	movi	r2,36
   81bb0:	1180b836 	bltu	r2,r6,81e94 <_realloc_r+0x3c4>
   81bb4:	00c004c4 	movi	r3,19
   81bb8:	19809636 	bltu	r3,r6,81e14 <_realloc_r+0x344>
   81bbc:	9005883a 	mov	r2,r18
   81bc0:	a807883a 	mov	r3,r21
   81bc4:	19000017 	ldw	r4,0(r3)
   81bc8:	11000015 	stw	r4,0(r2)
   81bcc:	19000117 	ldw	r4,4(r3)
   81bd0:	11000115 	stw	r4,4(r2)
   81bd4:	18c00217 	ldw	r3,8(r3)
   81bd8:	10c00215 	stw	r3,8(r2)
   81bdc:	a80b883a 	mov	r5,r21
   81be0:	a009883a 	mov	r4,r20
   81be4:	008289c0 	call	8289c <_free_r>
   81be8:	a009883a 	mov	r4,r20
   81bec:	008362c0 	call	8362c <__malloc_unlock>
   81bf0:	9005883a 	mov	r2,r18
   81bf4:	00001206 	br	81c40 <_realloc_r+0x170>
   81bf8:	00c00404 	movi	r3,16
   81bfc:	1823883a 	mov	r17,r3
   81c00:	003fce06 	br	81b3c <_realloc_r+0x6c>
   81c04:	a825883a 	mov	r18,r21
   81c08:	8445c83a 	sub	r2,r16,r17
   81c0c:	00c003c4 	movi	r3,15
   81c10:	18802636 	bltu	r3,r2,81cac <_realloc_r+0x1dc>
   81c14:	99800117 	ldw	r6,4(r19)
   81c18:	9c07883a 	add	r3,r19,r16
   81c1c:	3180004c 	andi	r6,r6,1
   81c20:	3420b03a 	or	r16,r6,r16
   81c24:	9c000115 	stw	r16,4(r19)
   81c28:	18800117 	ldw	r2,4(r3)
   81c2c:	10800054 	ori	r2,r2,1
   81c30:	18800115 	stw	r2,4(r3)
   81c34:	a009883a 	mov	r4,r20
   81c38:	008362c0 	call	8362c <__malloc_unlock>
   81c3c:	9005883a 	mov	r2,r18
   81c40:	dfc00917 	ldw	ra,36(sp)
   81c44:	df000817 	ldw	fp,32(sp)
   81c48:	ddc00717 	ldw	r23,28(sp)
   81c4c:	dd800617 	ldw	r22,24(sp)
   81c50:	dd400517 	ldw	r21,20(sp)
   81c54:	dd000417 	ldw	r20,16(sp)
   81c58:	dcc00317 	ldw	r19,12(sp)
   81c5c:	dc800217 	ldw	r18,8(sp)
   81c60:	dc400117 	ldw	r17,4(sp)
   81c64:	dc000017 	ldw	r16,0(sp)
   81c68:	dec00a04 	addi	sp,sp,40
   81c6c:	f800283a 	ret
   81c70:	017fff04 	movi	r5,-4
   81c74:	414a703a 	and	r5,r8,r5
   81c78:	814d883a 	add	r6,r16,r5
   81c7c:	30c01f16 	blt	r6,r3,81cfc <_realloc_r+0x22c>
   81c80:	20800317 	ldw	r2,12(r4)
   81c84:	20c00217 	ldw	r3,8(r4)
   81c88:	a825883a 	mov	r18,r21
   81c8c:	3021883a 	mov	r16,r6
   81c90:	18800315 	stw	r2,12(r3)
   81c94:	10c00215 	stw	r3,8(r2)
   81c98:	003fdb06 	br	81c08 <_realloc_r+0x138>
   81c9c:	00800304 	movi	r2,12
   81ca0:	a0800015 	stw	r2,0(r20)
   81ca4:	0005883a 	mov	r2,zero
   81ca8:	003fe506 	br	81c40 <_realloc_r+0x170>
   81cac:	98c00117 	ldw	r3,4(r19)
   81cb0:	9c4b883a 	add	r5,r19,r17
   81cb4:	11000054 	ori	r4,r2,1
   81cb8:	18c0004c 	andi	r3,r3,1
   81cbc:	1c62b03a 	or	r17,r3,r17
   81cc0:	9c400115 	stw	r17,4(r19)
   81cc4:	29000115 	stw	r4,4(r5)
   81cc8:	2885883a 	add	r2,r5,r2
   81ccc:	10c00117 	ldw	r3,4(r2)
   81cd0:	29400204 	addi	r5,r5,8
   81cd4:	a009883a 	mov	r4,r20
   81cd8:	18c00054 	ori	r3,r3,1
   81cdc:	10c00115 	stw	r3,4(r2)
   81ce0:	008289c0 	call	8289c <_free_r>
   81ce4:	003fd306 	br	81c34 <_realloc_r+0x164>
   81ce8:	017fff04 	movi	r5,-4
   81cec:	414a703a 	and	r5,r8,r5
   81cf0:	89800404 	addi	r6,r17,16
   81cf4:	8151883a 	add	r8,r16,r5
   81cf8:	4180590e 	bge	r8,r6,81e60 <_realloc_r+0x390>
   81cfc:	1080004c 	andi	r2,r2,1
   81d00:	103f9e1e 	bne	r2,zero,81b7c <_realloc_r+0xac>
   81d04:	adbffe17 	ldw	r22,-8(r21)
   81d08:	00bfff04 	movi	r2,-4
   81d0c:	9dadc83a 	sub	r22,r19,r22
   81d10:	b1800117 	ldw	r6,4(r22)
   81d14:	3084703a 	and	r2,r6,r2
   81d18:	20002026 	beq	r4,zero,81d9c <_realloc_r+0x2cc>
   81d1c:	80af883a 	add	r23,r16,r2
   81d20:	b96f883a 	add	r23,r23,r5
   81d24:	21c05f26 	beq	r4,r7,81ea4 <_realloc_r+0x3d4>
   81d28:	b8c01c16 	blt	r23,r3,81d9c <_realloc_r+0x2cc>
   81d2c:	20800317 	ldw	r2,12(r4)
   81d30:	20c00217 	ldw	r3,8(r4)
   81d34:	81bfff04 	addi	r6,r16,-4
   81d38:	01000904 	movi	r4,36
   81d3c:	18800315 	stw	r2,12(r3)
   81d40:	10c00215 	stw	r3,8(r2)
   81d44:	b0c00217 	ldw	r3,8(r22)
   81d48:	b0800317 	ldw	r2,12(r22)
   81d4c:	b4800204 	addi	r18,r22,8
   81d50:	18800315 	stw	r2,12(r3)
   81d54:	10c00215 	stw	r3,8(r2)
   81d58:	21801b36 	bltu	r4,r6,81dc8 <_realloc_r+0x2f8>
   81d5c:	008004c4 	movi	r2,19
   81d60:	1180352e 	bgeu	r2,r6,81e38 <_realloc_r+0x368>
   81d64:	a8800017 	ldw	r2,0(r21)
   81d68:	b0800215 	stw	r2,8(r22)
   81d6c:	a8800117 	ldw	r2,4(r21)
   81d70:	b0800315 	stw	r2,12(r22)
   81d74:	008006c4 	movi	r2,27
   81d78:	11807f36 	bltu	r2,r6,81f78 <_realloc_r+0x4a8>
   81d7c:	b0800404 	addi	r2,r22,16
   81d80:	ad400204 	addi	r21,r21,8
   81d84:	00002d06 	br	81e3c <_realloc_r+0x36c>
   81d88:	adbffe17 	ldw	r22,-8(r21)
   81d8c:	00bfff04 	movi	r2,-4
   81d90:	9dadc83a 	sub	r22,r19,r22
   81d94:	b1000117 	ldw	r4,4(r22)
   81d98:	2084703a 	and	r2,r4,r2
   81d9c:	b03f7726 	beq	r22,zero,81b7c <_realloc_r+0xac>
   81da0:	80af883a 	add	r23,r16,r2
   81da4:	b8ff7516 	blt	r23,r3,81b7c <_realloc_r+0xac>
   81da8:	b0800317 	ldw	r2,12(r22)
   81dac:	b0c00217 	ldw	r3,8(r22)
   81db0:	81bfff04 	addi	r6,r16,-4
   81db4:	01000904 	movi	r4,36
   81db8:	18800315 	stw	r2,12(r3)
   81dbc:	10c00215 	stw	r3,8(r2)
   81dc0:	b4800204 	addi	r18,r22,8
   81dc4:	21bfe52e 	bgeu	r4,r6,81d5c <_realloc_r+0x28c>
   81dc8:	a80b883a 	mov	r5,r21
   81dcc:	9009883a 	mov	r4,r18
   81dd0:	008184c0 	call	8184c <memmove>
   81dd4:	b821883a 	mov	r16,r23
   81dd8:	b027883a 	mov	r19,r22
   81ddc:	003f8a06 	br	81c08 <_realloc_r+0x138>
   81de0:	300b883a 	mov	r5,r6
   81de4:	dfc00917 	ldw	ra,36(sp)
   81de8:	df000817 	ldw	fp,32(sp)
   81dec:	ddc00717 	ldw	r23,28(sp)
   81df0:	dd800617 	ldw	r22,24(sp)
   81df4:	dd400517 	ldw	r21,20(sp)
   81df8:	dd000417 	ldw	r20,16(sp)
   81dfc:	dcc00317 	ldw	r19,12(sp)
   81e00:	dc800217 	ldw	r18,8(sp)
   81e04:	dc400117 	ldw	r17,4(sp)
   81e08:	dc000017 	ldw	r16,0(sp)
   81e0c:	dec00a04 	addi	sp,sp,40
   81e10:	0080e141 	jmpi	80e14 <_malloc_r>
   81e14:	a8c00017 	ldw	r3,0(r21)
   81e18:	90c00015 	stw	r3,0(r18)
   81e1c:	a8c00117 	ldw	r3,4(r21)
   81e20:	90c00115 	stw	r3,4(r18)
   81e24:	00c006c4 	movi	r3,27
   81e28:	19804536 	bltu	r3,r6,81f40 <_realloc_r+0x470>
   81e2c:	90800204 	addi	r2,r18,8
   81e30:	a8c00204 	addi	r3,r21,8
   81e34:	003f6306 	br	81bc4 <_realloc_r+0xf4>
   81e38:	9005883a 	mov	r2,r18
   81e3c:	a8c00017 	ldw	r3,0(r21)
   81e40:	b821883a 	mov	r16,r23
   81e44:	b027883a 	mov	r19,r22
   81e48:	10c00015 	stw	r3,0(r2)
   81e4c:	a8c00117 	ldw	r3,4(r21)
   81e50:	10c00115 	stw	r3,4(r2)
   81e54:	a8c00217 	ldw	r3,8(r21)
   81e58:	10c00215 	stw	r3,8(r2)
   81e5c:	003f6a06 	br	81c08 <_realloc_r+0x138>
   81e60:	9c67883a 	add	r19,r19,r17
   81e64:	4445c83a 	sub	r2,r8,r17
   81e68:	e4c00215 	stw	r19,8(fp)
   81e6c:	10800054 	ori	r2,r2,1
   81e70:	98800115 	stw	r2,4(r19)
   81e74:	a8bfff17 	ldw	r2,-4(r21)
   81e78:	a009883a 	mov	r4,r20
   81e7c:	1080004c 	andi	r2,r2,1
   81e80:	1462b03a 	or	r17,r2,r17
   81e84:	ac7fff15 	stw	r17,-4(r21)
   81e88:	008362c0 	call	8362c <__malloc_unlock>
   81e8c:	a805883a 	mov	r2,r21
   81e90:	003f6b06 	br	81c40 <_realloc_r+0x170>
   81e94:	a80b883a 	mov	r5,r21
   81e98:	9009883a 	mov	r4,r18
   81e9c:	008184c0 	call	8184c <memmove>
   81ea0:	003f4e06 	br	81bdc <_realloc_r+0x10c>
   81ea4:	89000404 	addi	r4,r17,16
   81ea8:	b93fbc16 	blt	r23,r4,81d9c <_realloc_r+0x2cc>
   81eac:	b0800317 	ldw	r2,12(r22)
   81eb0:	b0c00217 	ldw	r3,8(r22)
   81eb4:	81bfff04 	addi	r6,r16,-4
   81eb8:	01000904 	movi	r4,36
   81ebc:	18800315 	stw	r2,12(r3)
   81ec0:	10c00215 	stw	r3,8(r2)
   81ec4:	b4800204 	addi	r18,r22,8
   81ec8:	21804336 	bltu	r4,r6,81fd8 <_realloc_r+0x508>
   81ecc:	008004c4 	movi	r2,19
   81ed0:	11803f2e 	bgeu	r2,r6,81fd0 <_realloc_r+0x500>
   81ed4:	a8800017 	ldw	r2,0(r21)
   81ed8:	b0800215 	stw	r2,8(r22)
   81edc:	a8800117 	ldw	r2,4(r21)
   81ee0:	b0800315 	stw	r2,12(r22)
   81ee4:	008006c4 	movi	r2,27
   81ee8:	11803f36 	bltu	r2,r6,81fe8 <_realloc_r+0x518>
   81eec:	b0800404 	addi	r2,r22,16
   81ef0:	ad400204 	addi	r21,r21,8
   81ef4:	a8c00017 	ldw	r3,0(r21)
   81ef8:	10c00015 	stw	r3,0(r2)
   81efc:	a8c00117 	ldw	r3,4(r21)
   81f00:	10c00115 	stw	r3,4(r2)
   81f04:	a8c00217 	ldw	r3,8(r21)
   81f08:	10c00215 	stw	r3,8(r2)
   81f0c:	b447883a 	add	r3,r22,r17
   81f10:	bc45c83a 	sub	r2,r23,r17
   81f14:	e0c00215 	stw	r3,8(fp)
   81f18:	10800054 	ori	r2,r2,1
   81f1c:	18800115 	stw	r2,4(r3)
   81f20:	b0800117 	ldw	r2,4(r22)
   81f24:	a009883a 	mov	r4,r20
   81f28:	1080004c 	andi	r2,r2,1
   81f2c:	1462b03a 	or	r17,r2,r17
   81f30:	b4400115 	stw	r17,4(r22)
   81f34:	008362c0 	call	8362c <__malloc_unlock>
   81f38:	9005883a 	mov	r2,r18
   81f3c:	003f4006 	br	81c40 <_realloc_r+0x170>
   81f40:	a8c00217 	ldw	r3,8(r21)
   81f44:	90c00215 	stw	r3,8(r18)
   81f48:	a8c00317 	ldw	r3,12(r21)
   81f4c:	90c00315 	stw	r3,12(r18)
   81f50:	30801126 	beq	r6,r2,81f98 <_realloc_r+0x4c8>
   81f54:	90800404 	addi	r2,r18,16
   81f58:	a8c00404 	addi	r3,r21,16
   81f5c:	003f1906 	br	81bc4 <_realloc_r+0xf4>
   81f60:	90ffff17 	ldw	r3,-4(r18)
   81f64:	00bfff04 	movi	r2,-4
   81f68:	a825883a 	mov	r18,r21
   81f6c:	1884703a 	and	r2,r3,r2
   81f70:	80a1883a 	add	r16,r16,r2
   81f74:	003f2406 	br	81c08 <_realloc_r+0x138>
   81f78:	a8800217 	ldw	r2,8(r21)
   81f7c:	b0800415 	stw	r2,16(r22)
   81f80:	a8800317 	ldw	r2,12(r21)
   81f84:	b0800515 	stw	r2,20(r22)
   81f88:	31000a26 	beq	r6,r4,81fb4 <_realloc_r+0x4e4>
   81f8c:	b0800604 	addi	r2,r22,24
   81f90:	ad400404 	addi	r21,r21,16
   81f94:	003fa906 	br	81e3c <_realloc_r+0x36c>
   81f98:	a9000417 	ldw	r4,16(r21)
   81f9c:	90800604 	addi	r2,r18,24
   81fa0:	a8c00604 	addi	r3,r21,24
   81fa4:	91000415 	stw	r4,16(r18)
   81fa8:	a9000517 	ldw	r4,20(r21)
   81fac:	91000515 	stw	r4,20(r18)
   81fb0:	003f0406 	br	81bc4 <_realloc_r+0xf4>
   81fb4:	a8c00417 	ldw	r3,16(r21)
   81fb8:	ad400604 	addi	r21,r21,24
   81fbc:	b0800804 	addi	r2,r22,32
   81fc0:	b0c00615 	stw	r3,24(r22)
   81fc4:	a8ffff17 	ldw	r3,-4(r21)
   81fc8:	b0c00715 	stw	r3,28(r22)
   81fcc:	003f9b06 	br	81e3c <_realloc_r+0x36c>
   81fd0:	9005883a 	mov	r2,r18
   81fd4:	003fc706 	br	81ef4 <_realloc_r+0x424>
   81fd8:	a80b883a 	mov	r5,r21
   81fdc:	9009883a 	mov	r4,r18
   81fe0:	008184c0 	call	8184c <memmove>
   81fe4:	003fc906 	br	81f0c <_realloc_r+0x43c>
   81fe8:	a8800217 	ldw	r2,8(r21)
   81fec:	b0800415 	stw	r2,16(r22)
   81ff0:	a8800317 	ldw	r2,12(r21)
   81ff4:	b0800515 	stw	r2,20(r22)
   81ff8:	31000726 	beq	r6,r4,82018 <_realloc_r+0x548>
   81ffc:	b0800604 	addi	r2,r22,24
   82000:	ad400404 	addi	r21,r21,16
   82004:	003fbb06 	br	81ef4 <_realloc_r+0x424>
   82008:	a009883a 	mov	r4,r20
   8200c:	008362c0 	call	8362c <__malloc_unlock>
   82010:	0005883a 	mov	r2,zero
   82014:	003f0a06 	br	81c40 <_realloc_r+0x170>
   82018:	a8c00417 	ldw	r3,16(r21)
   8201c:	ad400604 	addi	r21,r21,24
   82020:	b0800804 	addi	r2,r22,32
   82024:	b0c00615 	stw	r3,24(r22)
   82028:	a8ffff17 	ldw	r3,-4(r21)
   8202c:	b0c00715 	stw	r3,28(r22)
   82030:	003fb006 	br	81ef4 <_realloc_r+0x424>

00082034 <_sbrk_r>:
   82034:	defffd04 	addi	sp,sp,-12
   82038:	dc000015 	stw	r16,0(sp)
   8203c:	04000274 	movhi	r16,9
   82040:	dc400115 	stw	r17,4(sp)
   82044:	84231804 	addi	r16,r16,-29600
   82048:	2023883a 	mov	r17,r4
   8204c:	2809883a 	mov	r4,r5
   82050:	dfc00215 	stw	ra,8(sp)
   82054:	80000015 	stw	zero,0(r16)
   82058:	00837ec0 	call	837ec <sbrk>
   8205c:	00ffffc4 	movi	r3,-1
   82060:	10c00526 	beq	r2,r3,82078 <_sbrk_r+0x44>
   82064:	dfc00217 	ldw	ra,8(sp)
   82068:	dc400117 	ldw	r17,4(sp)
   8206c:	dc000017 	ldw	r16,0(sp)
   82070:	dec00304 	addi	sp,sp,12
   82074:	f800283a 	ret
   82078:	80c00017 	ldw	r3,0(r16)
   8207c:	183ff926 	beq	r3,zero,82064 <_sbrk_r+0x30>
   82080:	88c00015 	stw	r3,0(r17)
   82084:	003ff706 	br	82064 <_sbrk_r+0x30>

00082088 <__sread>:
   82088:	defffe04 	addi	sp,sp,-8
   8208c:	dc000015 	stw	r16,0(sp)
   82090:	2821883a 	mov	r16,r5
   82094:	2940038f 	ldh	r5,14(r5)
   82098:	dfc00115 	stw	ra,4(sp)
   8209c:	0082dc80 	call	82dc8 <_read_r>
   820a0:	10000716 	blt	r2,zero,820c0 <__sread+0x38>
   820a4:	80c01417 	ldw	r3,80(r16)
   820a8:	1887883a 	add	r3,r3,r2
   820ac:	80c01415 	stw	r3,80(r16)
   820b0:	dfc00117 	ldw	ra,4(sp)
   820b4:	dc000017 	ldw	r16,0(sp)
   820b8:	dec00204 	addi	sp,sp,8
   820bc:	f800283a 	ret
   820c0:	80c0030b 	ldhu	r3,12(r16)
   820c4:	18fbffcc 	andi	r3,r3,61439
   820c8:	80c0030d 	sth	r3,12(r16)
   820cc:	dfc00117 	ldw	ra,4(sp)
   820d0:	dc000017 	ldw	r16,0(sp)
   820d4:	dec00204 	addi	sp,sp,8
   820d8:	f800283a 	ret

000820dc <__seofread>:
   820dc:	0005883a 	mov	r2,zero
   820e0:	f800283a 	ret

000820e4 <__swrite>:
   820e4:	2880030b 	ldhu	r2,12(r5)
   820e8:	defffb04 	addi	sp,sp,-20
   820ec:	dcc00315 	stw	r19,12(sp)
   820f0:	dc800215 	stw	r18,8(sp)
   820f4:	dc400115 	stw	r17,4(sp)
   820f8:	dc000015 	stw	r16,0(sp)
   820fc:	dfc00415 	stw	ra,16(sp)
   82100:	10c0400c 	andi	r3,r2,256
   82104:	2821883a 	mov	r16,r5
   82108:	2023883a 	mov	r17,r4
   8210c:	3025883a 	mov	r18,r6
   82110:	3827883a 	mov	r19,r7
   82114:	18000526 	beq	r3,zero,8212c <__swrite+0x48>
   82118:	2940038f 	ldh	r5,14(r5)
   8211c:	01c00084 	movi	r7,2
   82120:	000d883a 	mov	r6,zero
   82124:	0082bac0 	call	82bac <_lseek_r>
   82128:	8080030b 	ldhu	r2,12(r16)
   8212c:	8140038f 	ldh	r5,14(r16)
   82130:	10bbffcc 	andi	r2,r2,61439
   82134:	980f883a 	mov	r7,r19
   82138:	900d883a 	mov	r6,r18
   8213c:	8809883a 	mov	r4,r17
   82140:	8080030d 	sth	r2,12(r16)
   82144:	dfc00417 	ldw	ra,16(sp)
   82148:	dcc00317 	ldw	r19,12(sp)
   8214c:	dc800217 	ldw	r18,8(sp)
   82150:	dc400117 	ldw	r17,4(sp)
   82154:	dc000017 	ldw	r16,0(sp)
   82158:	dec00504 	addi	sp,sp,20
   8215c:	00821c41 	jmpi	821c4 <_write_r>

00082160 <__sseek>:
   82160:	defffe04 	addi	sp,sp,-8
   82164:	dc000015 	stw	r16,0(sp)
   82168:	2821883a 	mov	r16,r5
   8216c:	2940038f 	ldh	r5,14(r5)
   82170:	dfc00115 	stw	ra,4(sp)
   82174:	0082bac0 	call	82bac <_lseek_r>
   82178:	00ffffc4 	movi	r3,-1
   8217c:	10c00826 	beq	r2,r3,821a0 <__sseek+0x40>
   82180:	80c0030b 	ldhu	r3,12(r16)
   82184:	80801415 	stw	r2,80(r16)
   82188:	18c40014 	ori	r3,r3,4096
   8218c:	80c0030d 	sth	r3,12(r16)
   82190:	dfc00117 	ldw	ra,4(sp)
   82194:	dc000017 	ldw	r16,0(sp)
   82198:	dec00204 	addi	sp,sp,8
   8219c:	f800283a 	ret
   821a0:	80c0030b 	ldhu	r3,12(r16)
   821a4:	18fbffcc 	andi	r3,r3,61439
   821a8:	80c0030d 	sth	r3,12(r16)
   821ac:	dfc00117 	ldw	ra,4(sp)
   821b0:	dc000017 	ldw	r16,0(sp)
   821b4:	dec00204 	addi	sp,sp,8
   821b8:	f800283a 	ret

000821bc <__sclose>:
   821bc:	2940038f 	ldh	r5,14(r5)
   821c0:	00823781 	jmpi	82378 <_close_r>

000821c4 <_write_r>:
   821c4:	defffd04 	addi	sp,sp,-12
   821c8:	2805883a 	mov	r2,r5
   821cc:	dc000015 	stw	r16,0(sp)
   821d0:	04000274 	movhi	r16,9
   821d4:	dc400115 	stw	r17,4(sp)
   821d8:	300b883a 	mov	r5,r6
   821dc:	84231804 	addi	r16,r16,-29600
   821e0:	2023883a 	mov	r17,r4
   821e4:	380d883a 	mov	r6,r7
   821e8:	1009883a 	mov	r4,r2
   821ec:	dfc00215 	stw	ra,8(sp)
   821f0:	80000015 	stw	zero,0(r16)
   821f4:	00838d80 	call	838d8 <write>
   821f8:	00ffffc4 	movi	r3,-1
   821fc:	10c00526 	beq	r2,r3,82214 <_write_r+0x50>
   82200:	dfc00217 	ldw	ra,8(sp)
   82204:	dc400117 	ldw	r17,4(sp)
   82208:	dc000017 	ldw	r16,0(sp)
   8220c:	dec00304 	addi	sp,sp,12
   82210:	f800283a 	ret
   82214:	80c00017 	ldw	r3,0(r16)
   82218:	183ff926 	beq	r3,zero,82200 <_write_r+0x3c>
   8221c:	88c00015 	stw	r3,0(r17)
   82220:	003ff706 	br	82200 <_write_r+0x3c>

00082224 <__swsetup_r>:
   82224:	00800234 	movhi	r2,8
   82228:	defffd04 	addi	sp,sp,-12
   8222c:	109c6d04 	addi	r2,r2,29108
   82230:	dc400115 	stw	r17,4(sp)
   82234:	2023883a 	mov	r17,r4
   82238:	11000017 	ldw	r4,0(r2)
   8223c:	dc000015 	stw	r16,0(sp)
   82240:	dfc00215 	stw	ra,8(sp)
   82244:	2821883a 	mov	r16,r5
   82248:	20000226 	beq	r4,zero,82254 <__swsetup_r+0x30>
   8224c:	20800e17 	ldw	r2,56(r4)
   82250:	10003126 	beq	r2,zero,82318 <__swsetup_r+0xf4>
   82254:	8080030b 	ldhu	r2,12(r16)
   82258:	10c0020c 	andi	r3,r2,8
   8225c:	1009883a 	mov	r4,r2
   82260:	18000f26 	beq	r3,zero,822a0 <__swsetup_r+0x7c>
   82264:	80c00417 	ldw	r3,16(r16)
   82268:	18001526 	beq	r3,zero,822c0 <__swsetup_r+0x9c>
   8226c:	1100004c 	andi	r4,r2,1
   82270:	20001c1e 	bne	r4,zero,822e4 <__swsetup_r+0xc0>
   82274:	1080008c 	andi	r2,r2,2
   82278:	1000291e 	bne	r2,zero,82320 <__swsetup_r+0xfc>
   8227c:	80800517 	ldw	r2,20(r16)
   82280:	80800215 	stw	r2,8(r16)
   82284:	18001c26 	beq	r3,zero,822f8 <__swsetup_r+0xd4>
   82288:	0005883a 	mov	r2,zero
   8228c:	dfc00217 	ldw	ra,8(sp)
   82290:	dc400117 	ldw	r17,4(sp)
   82294:	dc000017 	ldw	r16,0(sp)
   82298:	dec00304 	addi	sp,sp,12
   8229c:	f800283a 	ret
   822a0:	2080040c 	andi	r2,r4,16
   822a4:	10002e26 	beq	r2,zero,82360 <__swsetup_r+0x13c>
   822a8:	2080010c 	andi	r2,r4,4
   822ac:	10001e1e 	bne	r2,zero,82328 <__swsetup_r+0x104>
   822b0:	80c00417 	ldw	r3,16(r16)
   822b4:	20800214 	ori	r2,r4,8
   822b8:	8080030d 	sth	r2,12(r16)
   822bc:	183feb1e 	bne	r3,zero,8226c <__swsetup_r+0x48>
   822c0:	1100a00c 	andi	r4,r2,640
   822c4:	01408004 	movi	r5,512
   822c8:	217fe826 	beq	r4,r5,8226c <__swsetup_r+0x48>
   822cc:	800b883a 	mov	r5,r16
   822d0:	8809883a 	mov	r4,r17
   822d4:	0082c0c0 	call	82c0c <__smakebuf_r>
   822d8:	8080030b 	ldhu	r2,12(r16)
   822dc:	80c00417 	ldw	r3,16(r16)
   822e0:	003fe206 	br	8226c <__swsetup_r+0x48>
   822e4:	80800517 	ldw	r2,20(r16)
   822e8:	80000215 	stw	zero,8(r16)
   822ec:	0085c83a 	sub	r2,zero,r2
   822f0:	80800615 	stw	r2,24(r16)
   822f4:	183fe41e 	bne	r3,zero,82288 <__swsetup_r+0x64>
   822f8:	80c0030b 	ldhu	r3,12(r16)
   822fc:	0005883a 	mov	r2,zero
   82300:	1900200c 	andi	r4,r3,128
   82304:	203fe126 	beq	r4,zero,8228c <__swsetup_r+0x68>
   82308:	18c01014 	ori	r3,r3,64
   8230c:	80c0030d 	sth	r3,12(r16)
   82310:	00bfffc4 	movi	r2,-1
   82314:	003fdd06 	br	8228c <__swsetup_r+0x68>
   82318:	00807800 	call	80780 <__sinit>
   8231c:	003fcd06 	br	82254 <__swsetup_r+0x30>
   82320:	0005883a 	mov	r2,zero
   82324:	003fd606 	br	82280 <__swsetup_r+0x5c>
   82328:	81400c17 	ldw	r5,48(r16)
   8232c:	28000626 	beq	r5,zero,82348 <__swsetup_r+0x124>
   82330:	80801004 	addi	r2,r16,64
   82334:	28800326 	beq	r5,r2,82344 <__swsetup_r+0x120>
   82338:	8809883a 	mov	r4,r17
   8233c:	008289c0 	call	8289c <_free_r>
   82340:	8100030b 	ldhu	r4,12(r16)
   82344:	80000c15 	stw	zero,48(r16)
   82348:	80c00417 	ldw	r3,16(r16)
   8234c:	00bff6c4 	movi	r2,-37
   82350:	1108703a 	and	r4,r2,r4
   82354:	80000115 	stw	zero,4(r16)
   82358:	80c00015 	stw	r3,0(r16)
   8235c:	003fd506 	br	822b4 <__swsetup_r+0x90>
   82360:	00800244 	movi	r2,9
   82364:	88800015 	stw	r2,0(r17)
   82368:	20801014 	ori	r2,r4,64
   8236c:	8080030d 	sth	r2,12(r16)
   82370:	00bfffc4 	movi	r2,-1
   82374:	003fc506 	br	8228c <__swsetup_r+0x68>

00082378 <_close_r>:
   82378:	defffd04 	addi	sp,sp,-12
   8237c:	dc000015 	stw	r16,0(sp)
   82380:	04000274 	movhi	r16,9
   82384:	dc400115 	stw	r17,4(sp)
   82388:	84231804 	addi	r16,r16,-29600
   8238c:	2023883a 	mov	r17,r4
   82390:	2809883a 	mov	r4,r5
   82394:	dfc00215 	stw	ra,8(sp)
   82398:	80000015 	stw	zero,0(r16)
   8239c:	00830c80 	call	830c8 <close>
   823a0:	00ffffc4 	movi	r3,-1
   823a4:	10c00526 	beq	r2,r3,823bc <_close_r+0x44>
   823a8:	dfc00217 	ldw	ra,8(sp)
   823ac:	dc400117 	ldw	r17,4(sp)
   823b0:	dc000017 	ldw	r16,0(sp)
   823b4:	dec00304 	addi	sp,sp,12
   823b8:	f800283a 	ret
   823bc:	80c00017 	ldw	r3,0(r16)
   823c0:	183ff926 	beq	r3,zero,823a8 <_close_r+0x30>
   823c4:	88c00015 	stw	r3,0(r17)
   823c8:	003ff706 	br	823a8 <_close_r+0x30>

000823cc <_fclose_r>:
   823cc:	28003926 	beq	r5,zero,824b4 <_fclose_r+0xe8>
   823d0:	defffc04 	addi	sp,sp,-16
   823d4:	dc400115 	stw	r17,4(sp)
   823d8:	dc000015 	stw	r16,0(sp)
   823dc:	dfc00315 	stw	ra,12(sp)
   823e0:	dc800215 	stw	r18,8(sp)
   823e4:	2023883a 	mov	r17,r4
   823e8:	2821883a 	mov	r16,r5
   823ec:	20000226 	beq	r4,zero,823f8 <_fclose_r+0x2c>
   823f0:	20800e17 	ldw	r2,56(r4)
   823f4:	10002726 	beq	r2,zero,82494 <_fclose_r+0xc8>
   823f8:	8080030f 	ldh	r2,12(r16)
   823fc:	1000071e 	bne	r2,zero,8241c <_fclose_r+0x50>
   82400:	0005883a 	mov	r2,zero
   82404:	dfc00317 	ldw	ra,12(sp)
   82408:	dc800217 	ldw	r18,8(sp)
   8240c:	dc400117 	ldw	r17,4(sp)
   82410:	dc000017 	ldw	r16,0(sp)
   82414:	dec00404 	addi	sp,sp,16
   82418:	f800283a 	ret
   8241c:	800b883a 	mov	r5,r16
   82420:	8809883a 	mov	r4,r17
   82424:	00824d00 	call	824d0 <__sflush_r>
   82428:	1025883a 	mov	r18,r2
   8242c:	80800b17 	ldw	r2,44(r16)
   82430:	10000426 	beq	r2,zero,82444 <_fclose_r+0x78>
   82434:	81400717 	ldw	r5,28(r16)
   82438:	8809883a 	mov	r4,r17
   8243c:	103ee83a 	callr	r2
   82440:	10001616 	blt	r2,zero,8249c <_fclose_r+0xd0>
   82444:	8080030b 	ldhu	r2,12(r16)
   82448:	1080200c 	andi	r2,r2,128
   8244c:	1000151e 	bne	r2,zero,824a4 <_fclose_r+0xd8>
   82450:	81400c17 	ldw	r5,48(r16)
   82454:	28000526 	beq	r5,zero,8246c <_fclose_r+0xa0>
   82458:	80801004 	addi	r2,r16,64
   8245c:	28800226 	beq	r5,r2,82468 <_fclose_r+0x9c>
   82460:	8809883a 	mov	r4,r17
   82464:	008289c0 	call	8289c <_free_r>
   82468:	80000c15 	stw	zero,48(r16)
   8246c:	81401117 	ldw	r5,68(r16)
   82470:	28000326 	beq	r5,zero,82480 <_fclose_r+0xb4>
   82474:	8809883a 	mov	r4,r17
   82478:	008289c0 	call	8289c <_free_r>
   8247c:	80001115 	stw	zero,68(r16)
   82480:	00807900 	call	80790 <__sfp_lock_acquire>
   82484:	8000030d 	sth	zero,12(r16)
   82488:	00807940 	call	80794 <__sfp_lock_release>
   8248c:	9005883a 	mov	r2,r18
   82490:	003fdc06 	br	82404 <_fclose_r+0x38>
   82494:	00807800 	call	80780 <__sinit>
   82498:	003fd706 	br	823f8 <_fclose_r+0x2c>
   8249c:	04bfffc4 	movi	r18,-1
   824a0:	003fe806 	br	82444 <_fclose_r+0x78>
   824a4:	81400417 	ldw	r5,16(r16)
   824a8:	8809883a 	mov	r4,r17
   824ac:	008289c0 	call	8289c <_free_r>
   824b0:	003fe706 	br	82450 <_fclose_r+0x84>
   824b4:	0005883a 	mov	r2,zero
   824b8:	f800283a 	ret

000824bc <fclose>:
   824bc:	00800234 	movhi	r2,8
   824c0:	109c6d04 	addi	r2,r2,29108
   824c4:	200b883a 	mov	r5,r4
   824c8:	11000017 	ldw	r4,0(r2)
   824cc:	00823cc1 	jmpi	823cc <_fclose_r>

000824d0 <__sflush_r>:
   824d0:	2880030b 	ldhu	r2,12(r5)
   824d4:	defffb04 	addi	sp,sp,-20
   824d8:	dcc00315 	stw	r19,12(sp)
   824dc:	dc400115 	stw	r17,4(sp)
   824e0:	dfc00415 	stw	ra,16(sp)
   824e4:	dc800215 	stw	r18,8(sp)
   824e8:	dc000015 	stw	r16,0(sp)
   824ec:	10c0020c 	andi	r3,r2,8
   824f0:	2823883a 	mov	r17,r5
   824f4:	2027883a 	mov	r19,r4
   824f8:	1800311e 	bne	r3,zero,825c0 <__sflush_r+0xf0>
   824fc:	28c00117 	ldw	r3,4(r5)
   82500:	10820014 	ori	r2,r2,2048
   82504:	2880030d 	sth	r2,12(r5)
   82508:	00c04b0e 	bge	zero,r3,82638 <__sflush_r+0x168>
   8250c:	8a000a17 	ldw	r8,40(r17)
   82510:	40002326 	beq	r8,zero,825a0 <__sflush_r+0xd0>
   82514:	9c000017 	ldw	r16,0(r19)
   82518:	10c4000c 	andi	r3,r2,4096
   8251c:	98000015 	stw	zero,0(r19)
   82520:	18004826 	beq	r3,zero,82644 <__sflush_r+0x174>
   82524:	89801417 	ldw	r6,80(r17)
   82528:	10c0010c 	andi	r3,r2,4
   8252c:	18000626 	beq	r3,zero,82548 <__sflush_r+0x78>
   82530:	88c00117 	ldw	r3,4(r17)
   82534:	88800c17 	ldw	r2,48(r17)
   82538:	30cdc83a 	sub	r6,r6,r3
   8253c:	10000226 	beq	r2,zero,82548 <__sflush_r+0x78>
   82540:	88800f17 	ldw	r2,60(r17)
   82544:	308dc83a 	sub	r6,r6,r2
   82548:	89400717 	ldw	r5,28(r17)
   8254c:	000f883a 	mov	r7,zero
   82550:	9809883a 	mov	r4,r19
   82554:	403ee83a 	callr	r8
   82558:	00ffffc4 	movi	r3,-1
   8255c:	10c04426 	beq	r2,r3,82670 <__sflush_r+0x1a0>
   82560:	88c0030b 	ldhu	r3,12(r17)
   82564:	89000417 	ldw	r4,16(r17)
   82568:	88000115 	stw	zero,4(r17)
   8256c:	197dffcc 	andi	r5,r3,63487
   82570:	8940030d 	sth	r5,12(r17)
   82574:	89000015 	stw	r4,0(r17)
   82578:	18c4000c 	andi	r3,r3,4096
   8257c:	18002c1e 	bne	r3,zero,82630 <__sflush_r+0x160>
   82580:	89400c17 	ldw	r5,48(r17)
   82584:	9c000015 	stw	r16,0(r19)
   82588:	28000526 	beq	r5,zero,825a0 <__sflush_r+0xd0>
   8258c:	88801004 	addi	r2,r17,64
   82590:	28800226 	beq	r5,r2,8259c <__sflush_r+0xcc>
   82594:	9809883a 	mov	r4,r19
   82598:	008289c0 	call	8289c <_free_r>
   8259c:	88000c15 	stw	zero,48(r17)
   825a0:	0005883a 	mov	r2,zero
   825a4:	dfc00417 	ldw	ra,16(sp)
   825a8:	dcc00317 	ldw	r19,12(sp)
   825ac:	dc800217 	ldw	r18,8(sp)
   825b0:	dc400117 	ldw	r17,4(sp)
   825b4:	dc000017 	ldw	r16,0(sp)
   825b8:	dec00504 	addi	sp,sp,20
   825bc:	f800283a 	ret
   825c0:	2c800417 	ldw	r18,16(r5)
   825c4:	903ff626 	beq	r18,zero,825a0 <__sflush_r+0xd0>
   825c8:	2c000017 	ldw	r16,0(r5)
   825cc:	108000cc 	andi	r2,r2,3
   825d0:	2c800015 	stw	r18,0(r5)
   825d4:	84a1c83a 	sub	r16,r16,r18
   825d8:	1000131e 	bne	r2,zero,82628 <__sflush_r+0x158>
   825dc:	28800517 	ldw	r2,20(r5)
   825e0:	88800215 	stw	r2,8(r17)
   825e4:	04000316 	blt	zero,r16,825f4 <__sflush_r+0x124>
   825e8:	003fed06 	br	825a0 <__sflush_r+0xd0>
   825ec:	90a5883a 	add	r18,r18,r2
   825f0:	043feb0e 	bge	zero,r16,825a0 <__sflush_r+0xd0>
   825f4:	88800917 	ldw	r2,36(r17)
   825f8:	89400717 	ldw	r5,28(r17)
   825fc:	800f883a 	mov	r7,r16
   82600:	900d883a 	mov	r6,r18
   82604:	9809883a 	mov	r4,r19
   82608:	103ee83a 	callr	r2
   8260c:	80a1c83a 	sub	r16,r16,r2
   82610:	00bff616 	blt	zero,r2,825ec <__sflush_r+0x11c>
   82614:	88c0030b 	ldhu	r3,12(r17)
   82618:	00bfffc4 	movi	r2,-1
   8261c:	18c01014 	ori	r3,r3,64
   82620:	88c0030d 	sth	r3,12(r17)
   82624:	003fdf06 	br	825a4 <__sflush_r+0xd4>
   82628:	0005883a 	mov	r2,zero
   8262c:	003fec06 	br	825e0 <__sflush_r+0x110>
   82630:	88801415 	stw	r2,80(r17)
   82634:	003fd206 	br	82580 <__sflush_r+0xb0>
   82638:	28c00f17 	ldw	r3,60(r5)
   8263c:	00ffb316 	blt	zero,r3,8250c <__sflush_r+0x3c>
   82640:	003fd706 	br	825a0 <__sflush_r+0xd0>
   82644:	89400717 	ldw	r5,28(r17)
   82648:	000d883a 	mov	r6,zero
   8264c:	01c00044 	movi	r7,1
   82650:	9809883a 	mov	r4,r19
   82654:	403ee83a 	callr	r8
   82658:	100d883a 	mov	r6,r2
   8265c:	00bfffc4 	movi	r2,-1
   82660:	30801426 	beq	r6,r2,826b4 <__sflush_r+0x1e4>
   82664:	8880030b 	ldhu	r2,12(r17)
   82668:	8a000a17 	ldw	r8,40(r17)
   8266c:	003fae06 	br	82528 <__sflush_r+0x58>
   82670:	98c00017 	ldw	r3,0(r19)
   82674:	183fba26 	beq	r3,zero,82560 <__sflush_r+0x90>
   82678:	01000744 	movi	r4,29
   8267c:	19000626 	beq	r3,r4,82698 <__sflush_r+0x1c8>
   82680:	01000584 	movi	r4,22
   82684:	19000426 	beq	r3,r4,82698 <__sflush_r+0x1c8>
   82688:	88c0030b 	ldhu	r3,12(r17)
   8268c:	18c01014 	ori	r3,r3,64
   82690:	88c0030d 	sth	r3,12(r17)
   82694:	003fc306 	br	825a4 <__sflush_r+0xd4>
   82698:	8880030b 	ldhu	r2,12(r17)
   8269c:	88c00417 	ldw	r3,16(r17)
   826a0:	88000115 	stw	zero,4(r17)
   826a4:	10bdffcc 	andi	r2,r2,63487
   826a8:	8880030d 	sth	r2,12(r17)
   826ac:	88c00015 	stw	r3,0(r17)
   826b0:	003fb306 	br	82580 <__sflush_r+0xb0>
   826b4:	98800017 	ldw	r2,0(r19)
   826b8:	103fea26 	beq	r2,zero,82664 <__sflush_r+0x194>
   826bc:	00c00744 	movi	r3,29
   826c0:	10c00226 	beq	r2,r3,826cc <__sflush_r+0x1fc>
   826c4:	00c00584 	movi	r3,22
   826c8:	10c0031e 	bne	r2,r3,826d8 <__sflush_r+0x208>
   826cc:	9c000015 	stw	r16,0(r19)
   826d0:	0005883a 	mov	r2,zero
   826d4:	003fb306 	br	825a4 <__sflush_r+0xd4>
   826d8:	88c0030b 	ldhu	r3,12(r17)
   826dc:	3005883a 	mov	r2,r6
   826e0:	18c01014 	ori	r3,r3,64
   826e4:	88c0030d 	sth	r3,12(r17)
   826e8:	003fae06 	br	825a4 <__sflush_r+0xd4>

000826ec <_fflush_r>:
   826ec:	defffd04 	addi	sp,sp,-12
   826f0:	dc000115 	stw	r16,4(sp)
   826f4:	dfc00215 	stw	ra,8(sp)
   826f8:	2021883a 	mov	r16,r4
   826fc:	20000226 	beq	r4,zero,82708 <_fflush_r+0x1c>
   82700:	20800e17 	ldw	r2,56(r4)
   82704:	10000c26 	beq	r2,zero,82738 <_fflush_r+0x4c>
   82708:	2880030f 	ldh	r2,12(r5)
   8270c:	1000051e 	bne	r2,zero,82724 <_fflush_r+0x38>
   82710:	0005883a 	mov	r2,zero
   82714:	dfc00217 	ldw	ra,8(sp)
   82718:	dc000117 	ldw	r16,4(sp)
   8271c:	dec00304 	addi	sp,sp,12
   82720:	f800283a 	ret
   82724:	8009883a 	mov	r4,r16
   82728:	dfc00217 	ldw	ra,8(sp)
   8272c:	dc000117 	ldw	r16,4(sp)
   82730:	dec00304 	addi	sp,sp,12
   82734:	00824d01 	jmpi	824d0 <__sflush_r>
   82738:	d9400015 	stw	r5,0(sp)
   8273c:	00807800 	call	80780 <__sinit>
   82740:	d9400017 	ldw	r5,0(sp)
   82744:	003ff006 	br	82708 <_fflush_r+0x1c>

00082748 <fflush>:
   82748:	20000526 	beq	r4,zero,82760 <fflush+0x18>
   8274c:	00800234 	movhi	r2,8
   82750:	109c6d04 	addi	r2,r2,29108
   82754:	200b883a 	mov	r5,r4
   82758:	11000017 	ldw	r4,0(r2)
   8275c:	00826ec1 	jmpi	826ec <_fflush_r>
   82760:	00800234 	movhi	r2,8
   82764:	109c6c04 	addi	r2,r2,29104
   82768:	11000017 	ldw	r4,0(r2)
   8276c:	01400234 	movhi	r5,8
   82770:	2949bb04 	addi	r5,r5,9964
   82774:	0080d501 	jmpi	80d50 <_fwalk_reent>

00082778 <_malloc_trim_r>:
   82778:	defffb04 	addi	sp,sp,-20
   8277c:	dcc00315 	stw	r19,12(sp)
   82780:	04c00234 	movhi	r19,8
   82784:	dc800215 	stw	r18,8(sp)
   82788:	dc400115 	stw	r17,4(sp)
   8278c:	dc000015 	stw	r16,0(sp)
   82790:	dfc00415 	stw	ra,16(sp)
   82794:	2821883a 	mov	r16,r5
   82798:	9cd6e804 	addi	r19,r19,23456
   8279c:	2025883a 	mov	r18,r4
   827a0:	00836080 	call	83608 <__malloc_lock>
   827a4:	98800217 	ldw	r2,8(r19)
   827a8:	14400117 	ldw	r17,4(r2)
   827ac:	00bfff04 	movi	r2,-4
   827b0:	88a2703a 	and	r17,r17,r2
   827b4:	8c21c83a 	sub	r16,r17,r16
   827b8:	8403fbc4 	addi	r16,r16,4079
   827bc:	8020d33a 	srli	r16,r16,12
   827c0:	0083ffc4 	movi	r2,4095
   827c4:	843fffc4 	addi	r16,r16,-1
   827c8:	8020933a 	slli	r16,r16,12
   827cc:	1400060e 	bge	r2,r16,827e8 <_malloc_trim_r+0x70>
   827d0:	000b883a 	mov	r5,zero
   827d4:	9009883a 	mov	r4,r18
   827d8:	00820340 	call	82034 <_sbrk_r>
   827dc:	98c00217 	ldw	r3,8(r19)
   827e0:	1c47883a 	add	r3,r3,r17
   827e4:	10c00a26 	beq	r2,r3,82810 <_malloc_trim_r+0x98>
   827e8:	9009883a 	mov	r4,r18
   827ec:	008362c0 	call	8362c <__malloc_unlock>
   827f0:	0005883a 	mov	r2,zero
   827f4:	dfc00417 	ldw	ra,16(sp)
   827f8:	dcc00317 	ldw	r19,12(sp)
   827fc:	dc800217 	ldw	r18,8(sp)
   82800:	dc400117 	ldw	r17,4(sp)
   82804:	dc000017 	ldw	r16,0(sp)
   82808:	dec00504 	addi	sp,sp,20
   8280c:	f800283a 	ret
   82810:	040bc83a 	sub	r5,zero,r16
   82814:	9009883a 	mov	r4,r18
   82818:	00820340 	call	82034 <_sbrk_r>
   8281c:	00ffffc4 	movi	r3,-1
   82820:	10c00d26 	beq	r2,r3,82858 <_malloc_trim_r+0xe0>
   82824:	00c00274 	movhi	r3,9
   82828:	18e32004 	addi	r3,r3,-29568
   8282c:	18800017 	ldw	r2,0(r3)
   82830:	99000217 	ldw	r4,8(r19)
   82834:	8c23c83a 	sub	r17,r17,r16
   82838:	8c400054 	ori	r17,r17,1
   8283c:	1421c83a 	sub	r16,r2,r16
   82840:	24400115 	stw	r17,4(r4)
   82844:	9009883a 	mov	r4,r18
   82848:	1c000015 	stw	r16,0(r3)
   8284c:	008362c0 	call	8362c <__malloc_unlock>
   82850:	00800044 	movi	r2,1
   82854:	003fe706 	br	827f4 <_malloc_trim_r+0x7c>
   82858:	000b883a 	mov	r5,zero
   8285c:	9009883a 	mov	r4,r18
   82860:	00820340 	call	82034 <_sbrk_r>
   82864:	99000217 	ldw	r4,8(r19)
   82868:	014003c4 	movi	r5,15
   8286c:	1107c83a 	sub	r3,r2,r4
   82870:	28ffdd0e 	bge	r5,r3,827e8 <_malloc_trim_r+0x70>
   82874:	01400234 	movhi	r5,8
   82878:	295c6e04 	addi	r5,r5,29112
   8287c:	29400017 	ldw	r5,0(r5)
   82880:	18c00054 	ori	r3,r3,1
   82884:	20c00115 	stw	r3,4(r4)
   82888:	00c00274 	movhi	r3,9
   8288c:	1145c83a 	sub	r2,r2,r5
   82890:	18e32004 	addi	r3,r3,-29568
   82894:	18800015 	stw	r2,0(r3)
   82898:	003fd306 	br	827e8 <_malloc_trim_r+0x70>

0008289c <_free_r>:
   8289c:	28004126 	beq	r5,zero,829a4 <_free_r+0x108>
   828a0:	defffd04 	addi	sp,sp,-12
   828a4:	dc400115 	stw	r17,4(sp)
   828a8:	dc000015 	stw	r16,0(sp)
   828ac:	2023883a 	mov	r17,r4
   828b0:	2821883a 	mov	r16,r5
   828b4:	dfc00215 	stw	ra,8(sp)
   828b8:	00836080 	call	83608 <__malloc_lock>
   828bc:	81ffff17 	ldw	r7,-4(r16)
   828c0:	00bfff84 	movi	r2,-2
   828c4:	01000234 	movhi	r4,8
   828c8:	81bffe04 	addi	r6,r16,-8
   828cc:	3884703a 	and	r2,r7,r2
   828d0:	2116e804 	addi	r4,r4,23456
   828d4:	308b883a 	add	r5,r6,r2
   828d8:	2a400117 	ldw	r9,4(r5)
   828dc:	22000217 	ldw	r8,8(r4)
   828e0:	00ffff04 	movi	r3,-4
   828e4:	48c6703a 	and	r3,r9,r3
   828e8:	2a005726 	beq	r5,r8,82a48 <_free_r+0x1ac>
   828ec:	28c00115 	stw	r3,4(r5)
   828f0:	39c0004c 	andi	r7,r7,1
   828f4:	3800091e 	bne	r7,zero,8291c <_free_r+0x80>
   828f8:	823ffe17 	ldw	r8,-8(r16)
   828fc:	22400204 	addi	r9,r4,8
   82900:	320dc83a 	sub	r6,r6,r8
   82904:	31c00217 	ldw	r7,8(r6)
   82908:	1205883a 	add	r2,r2,r8
   8290c:	3a406526 	beq	r7,r9,82aa4 <_free_r+0x208>
   82910:	32000317 	ldw	r8,12(r6)
   82914:	3a000315 	stw	r8,12(r7)
   82918:	41c00215 	stw	r7,8(r8)
   8291c:	28cf883a 	add	r7,r5,r3
   82920:	39c00117 	ldw	r7,4(r7)
   82924:	39c0004c 	andi	r7,r7,1
   82928:	38003a26 	beq	r7,zero,82a14 <_free_r+0x178>
   8292c:	10c00054 	ori	r3,r2,1
   82930:	30c00115 	stw	r3,4(r6)
   82934:	3087883a 	add	r3,r6,r2
   82938:	18800015 	stw	r2,0(r3)
   8293c:	00c07fc4 	movi	r3,511
   82940:	18801936 	bltu	r3,r2,829a8 <_free_r+0x10c>
   82944:	1004d0fa 	srli	r2,r2,3
   82948:	01c00044 	movi	r7,1
   8294c:	21400117 	ldw	r5,4(r4)
   82950:	10c00044 	addi	r3,r2,1
   82954:	18c7883a 	add	r3,r3,r3
   82958:	1005d0ba 	srai	r2,r2,2
   8295c:	18c7883a 	add	r3,r3,r3
   82960:	18c7883a 	add	r3,r3,r3
   82964:	1907883a 	add	r3,r3,r4
   82968:	3884983a 	sll	r2,r7,r2
   8296c:	19c00017 	ldw	r7,0(r3)
   82970:	1a3ffe04 	addi	r8,r3,-8
   82974:	1144b03a 	or	r2,r2,r5
   82978:	32000315 	stw	r8,12(r6)
   8297c:	31c00215 	stw	r7,8(r6)
   82980:	20800115 	stw	r2,4(r4)
   82984:	19800015 	stw	r6,0(r3)
   82988:	39800315 	stw	r6,12(r7)
   8298c:	8809883a 	mov	r4,r17
   82990:	dfc00217 	ldw	ra,8(sp)
   82994:	dc400117 	ldw	r17,4(sp)
   82998:	dc000017 	ldw	r16,0(sp)
   8299c:	dec00304 	addi	sp,sp,12
   829a0:	008362c1 	jmpi	8362c <__malloc_unlock>
   829a4:	f800283a 	ret
   829a8:	100ad27a 	srli	r5,r2,9
   829ac:	00c00104 	movi	r3,4
   829b0:	19404a36 	bltu	r3,r5,82adc <_free_r+0x240>
   829b4:	100ad1ba 	srli	r5,r2,6
   829b8:	28c00e44 	addi	r3,r5,57
   829bc:	18c7883a 	add	r3,r3,r3
   829c0:	29400e04 	addi	r5,r5,56
   829c4:	18c7883a 	add	r3,r3,r3
   829c8:	18c7883a 	add	r3,r3,r3
   829cc:	1909883a 	add	r4,r3,r4
   829d0:	20c00017 	ldw	r3,0(r4)
   829d4:	01c00234 	movhi	r7,8
   829d8:	213ffe04 	addi	r4,r4,-8
   829dc:	39d6e804 	addi	r7,r7,23456
   829e0:	20c04426 	beq	r4,r3,82af4 <_free_r+0x258>
   829e4:	01ffff04 	movi	r7,-4
   829e8:	19400117 	ldw	r5,4(r3)
   829ec:	29ca703a 	and	r5,r5,r7
   829f0:	1140022e 	bgeu	r2,r5,829fc <_free_r+0x160>
   829f4:	18c00217 	ldw	r3,8(r3)
   829f8:	20fffb1e 	bne	r4,r3,829e8 <_free_r+0x14c>
   829fc:	19000317 	ldw	r4,12(r3)
   82a00:	31000315 	stw	r4,12(r6)
   82a04:	30c00215 	stw	r3,8(r6)
   82a08:	21800215 	stw	r6,8(r4)
   82a0c:	19800315 	stw	r6,12(r3)
   82a10:	003fde06 	br	8298c <_free_r+0xf0>
   82a14:	29c00217 	ldw	r7,8(r5)
   82a18:	10c5883a 	add	r2,r2,r3
   82a1c:	00c00234 	movhi	r3,8
   82a20:	18d6ea04 	addi	r3,r3,23464
   82a24:	38c03b26 	beq	r7,r3,82b14 <_free_r+0x278>
   82a28:	2a000317 	ldw	r8,12(r5)
   82a2c:	11400054 	ori	r5,r2,1
   82a30:	3087883a 	add	r3,r6,r2
   82a34:	3a000315 	stw	r8,12(r7)
   82a38:	41c00215 	stw	r7,8(r8)
   82a3c:	31400115 	stw	r5,4(r6)
   82a40:	18800015 	stw	r2,0(r3)
   82a44:	003fbd06 	br	8293c <_free_r+0xa0>
   82a48:	39c0004c 	andi	r7,r7,1
   82a4c:	10c5883a 	add	r2,r2,r3
   82a50:	3800071e 	bne	r7,zero,82a70 <_free_r+0x1d4>
   82a54:	81fffe17 	ldw	r7,-8(r16)
   82a58:	31cdc83a 	sub	r6,r6,r7
   82a5c:	30c00317 	ldw	r3,12(r6)
   82a60:	31400217 	ldw	r5,8(r6)
   82a64:	11c5883a 	add	r2,r2,r7
   82a68:	28c00315 	stw	r3,12(r5)
   82a6c:	19400215 	stw	r5,8(r3)
   82a70:	10c00054 	ori	r3,r2,1
   82a74:	30c00115 	stw	r3,4(r6)
   82a78:	00c00234 	movhi	r3,8
   82a7c:	18dc6f04 	addi	r3,r3,29116
   82a80:	18c00017 	ldw	r3,0(r3)
   82a84:	21800215 	stw	r6,8(r4)
   82a88:	10ffc036 	bltu	r2,r3,8298c <_free_r+0xf0>
   82a8c:	00800274 	movhi	r2,9
   82a90:	10a31704 	addi	r2,r2,-29604
   82a94:	11400017 	ldw	r5,0(r2)
   82a98:	8809883a 	mov	r4,r17
   82a9c:	00827780 	call	82778 <_malloc_trim_r>
   82aa0:	003fba06 	br	8298c <_free_r+0xf0>
   82aa4:	28c9883a 	add	r4,r5,r3
   82aa8:	21000117 	ldw	r4,4(r4)
   82aac:	2100004c 	andi	r4,r4,1
   82ab0:	2000391e 	bne	r4,zero,82b98 <_free_r+0x2fc>
   82ab4:	29c00217 	ldw	r7,8(r5)
   82ab8:	29000317 	ldw	r4,12(r5)
   82abc:	1885883a 	add	r2,r3,r2
   82ac0:	10c00054 	ori	r3,r2,1
   82ac4:	39000315 	stw	r4,12(r7)
   82ac8:	21c00215 	stw	r7,8(r4)
   82acc:	30c00115 	stw	r3,4(r6)
   82ad0:	308d883a 	add	r6,r6,r2
   82ad4:	30800015 	stw	r2,0(r6)
   82ad8:	003fac06 	br	8298c <_free_r+0xf0>
   82adc:	00c00504 	movi	r3,20
   82ae0:	19401536 	bltu	r3,r5,82b38 <_free_r+0x29c>
   82ae4:	28c01704 	addi	r3,r5,92
   82ae8:	18c7883a 	add	r3,r3,r3
   82aec:	294016c4 	addi	r5,r5,91
   82af0:	003fb406 	br	829c4 <_free_r+0x128>
   82af4:	280bd0ba 	srai	r5,r5,2
   82af8:	00c00044 	movi	r3,1
   82afc:	38800117 	ldw	r2,4(r7)
   82b00:	194a983a 	sll	r5,r3,r5
   82b04:	2007883a 	mov	r3,r4
   82b08:	2884b03a 	or	r2,r5,r2
   82b0c:	38800115 	stw	r2,4(r7)
   82b10:	003fbb06 	br	82a00 <_free_r+0x164>
   82b14:	21800515 	stw	r6,20(r4)
   82b18:	21800415 	stw	r6,16(r4)
   82b1c:	10c00054 	ori	r3,r2,1
   82b20:	31c00315 	stw	r7,12(r6)
   82b24:	31c00215 	stw	r7,8(r6)
   82b28:	30c00115 	stw	r3,4(r6)
   82b2c:	308d883a 	add	r6,r6,r2
   82b30:	30800015 	stw	r2,0(r6)
   82b34:	003f9506 	br	8298c <_free_r+0xf0>
   82b38:	00c01504 	movi	r3,84
   82b3c:	19400536 	bltu	r3,r5,82b54 <_free_r+0x2b8>
   82b40:	100ad33a 	srli	r5,r2,12
   82b44:	28c01bc4 	addi	r3,r5,111
   82b48:	18c7883a 	add	r3,r3,r3
   82b4c:	29401b84 	addi	r5,r5,110
   82b50:	003f9c06 	br	829c4 <_free_r+0x128>
   82b54:	00c05504 	movi	r3,340
   82b58:	19400536 	bltu	r3,r5,82b70 <_free_r+0x2d4>
   82b5c:	100ad3fa 	srli	r5,r2,15
   82b60:	28c01e04 	addi	r3,r5,120
   82b64:	18c7883a 	add	r3,r3,r3
   82b68:	29401dc4 	addi	r5,r5,119
   82b6c:	003f9506 	br	829c4 <_free_r+0x128>
   82b70:	00c15504 	movi	r3,1364
   82b74:	19400536 	bltu	r3,r5,82b8c <_free_r+0x2f0>
   82b78:	100ad4ba 	srli	r5,r2,18
   82b7c:	28c01f44 	addi	r3,r5,125
   82b80:	18c7883a 	add	r3,r3,r3
   82b84:	29401f04 	addi	r5,r5,124
   82b88:	003f8e06 	br	829c4 <_free_r+0x128>
   82b8c:	00c03f84 	movi	r3,254
   82b90:	01401f84 	movi	r5,126
   82b94:	003f8b06 	br	829c4 <_free_r+0x128>
   82b98:	10c00054 	ori	r3,r2,1
   82b9c:	30c00115 	stw	r3,4(r6)
   82ba0:	308d883a 	add	r6,r6,r2
   82ba4:	30800015 	stw	r2,0(r6)
   82ba8:	003f7806 	br	8298c <_free_r+0xf0>

00082bac <_lseek_r>:
   82bac:	defffd04 	addi	sp,sp,-12
   82bb0:	2805883a 	mov	r2,r5
   82bb4:	dc000015 	stw	r16,0(sp)
   82bb8:	04000274 	movhi	r16,9
   82bbc:	dc400115 	stw	r17,4(sp)
   82bc0:	300b883a 	mov	r5,r6
   82bc4:	84231804 	addi	r16,r16,-29600
   82bc8:	2023883a 	mov	r17,r4
   82bcc:	380d883a 	mov	r6,r7
   82bd0:	1009883a 	mov	r4,r2
   82bd4:	dfc00215 	stw	ra,8(sp)
   82bd8:	80000015 	stw	zero,0(r16)
   82bdc:	00834b80 	call	834b8 <lseek>
   82be0:	00ffffc4 	movi	r3,-1
   82be4:	10c00526 	beq	r2,r3,82bfc <_lseek_r+0x50>
   82be8:	dfc00217 	ldw	ra,8(sp)
   82bec:	dc400117 	ldw	r17,4(sp)
   82bf0:	dc000017 	ldw	r16,0(sp)
   82bf4:	dec00304 	addi	sp,sp,12
   82bf8:	f800283a 	ret
   82bfc:	80c00017 	ldw	r3,0(r16)
   82c00:	183ff926 	beq	r3,zero,82be8 <_lseek_r+0x3c>
   82c04:	88c00015 	stw	r3,0(r17)
   82c08:	003ff706 	br	82be8 <_lseek_r+0x3c>

00082c0c <__smakebuf_r>:
   82c0c:	2880030b 	ldhu	r2,12(r5)
   82c10:	10c0008c 	andi	r3,r2,2
   82c14:	1800411e 	bne	r3,zero,82d1c <__smakebuf_r+0x110>
   82c18:	deffec04 	addi	sp,sp,-80
   82c1c:	dc000f15 	stw	r16,60(sp)
   82c20:	2821883a 	mov	r16,r5
   82c24:	2940038f 	ldh	r5,14(r5)
   82c28:	dc401015 	stw	r17,64(sp)
   82c2c:	dfc01315 	stw	ra,76(sp)
   82c30:	dcc01215 	stw	r19,72(sp)
   82c34:	dc801115 	stw	r18,68(sp)
   82c38:	2023883a 	mov	r17,r4
   82c3c:	28001c16 	blt	r5,zero,82cb0 <__smakebuf_r+0xa4>
   82c40:	d80d883a 	mov	r6,sp
   82c44:	0082e280 	call	82e28 <_fstat_r>
   82c48:	10001816 	blt	r2,zero,82cac <__smakebuf_r+0xa0>
   82c4c:	d8800117 	ldw	r2,4(sp)
   82c50:	00e00014 	movui	r3,32768
   82c54:	10bc000c 	andi	r2,r2,61440
   82c58:	14c80020 	cmpeqi	r19,r2,8192
   82c5c:	10c03726 	beq	r2,r3,82d3c <__smakebuf_r+0x130>
   82c60:	80c0030b 	ldhu	r3,12(r16)
   82c64:	18c20014 	ori	r3,r3,2048
   82c68:	80c0030d 	sth	r3,12(r16)
   82c6c:	00c80004 	movi	r3,8192
   82c70:	10c0521e 	bne	r2,r3,82dbc <__smakebuf_r+0x1b0>
   82c74:	8140038f 	ldh	r5,14(r16)
   82c78:	8809883a 	mov	r4,r17
   82c7c:	0082e840 	call	82e84 <_isatty_r>
   82c80:	10004c26 	beq	r2,zero,82db4 <__smakebuf_r+0x1a8>
   82c84:	8080030b 	ldhu	r2,12(r16)
   82c88:	80c010c4 	addi	r3,r16,67
   82c8c:	80c00015 	stw	r3,0(r16)
   82c90:	10800054 	ori	r2,r2,1
   82c94:	8080030d 	sth	r2,12(r16)
   82c98:	00800044 	movi	r2,1
   82c9c:	80c00415 	stw	r3,16(r16)
   82ca0:	80800515 	stw	r2,20(r16)
   82ca4:	04810004 	movi	r18,1024
   82ca8:	00000706 	br	82cc8 <__smakebuf_r+0xbc>
   82cac:	8080030b 	ldhu	r2,12(r16)
   82cb0:	10c0200c 	andi	r3,r2,128
   82cb4:	18001f1e 	bne	r3,zero,82d34 <__smakebuf_r+0x128>
   82cb8:	04810004 	movi	r18,1024
   82cbc:	10820014 	ori	r2,r2,2048
   82cc0:	8080030d 	sth	r2,12(r16)
   82cc4:	0027883a 	mov	r19,zero
   82cc8:	900b883a 	mov	r5,r18
   82ccc:	8809883a 	mov	r4,r17
   82cd0:	0080e140 	call	80e14 <_malloc_r>
   82cd4:	10002c26 	beq	r2,zero,82d88 <__smakebuf_r+0x17c>
   82cd8:	80c0030b 	ldhu	r3,12(r16)
   82cdc:	01000234 	movhi	r4,8
   82ce0:	21010e04 	addi	r4,r4,1080
   82ce4:	89000f15 	stw	r4,60(r17)
   82ce8:	18c02014 	ori	r3,r3,128
   82cec:	80c0030d 	sth	r3,12(r16)
   82cf0:	80800015 	stw	r2,0(r16)
   82cf4:	80800415 	stw	r2,16(r16)
   82cf8:	84800515 	stw	r18,20(r16)
   82cfc:	98001a1e 	bne	r19,zero,82d68 <__smakebuf_r+0x15c>
   82d00:	dfc01317 	ldw	ra,76(sp)
   82d04:	dcc01217 	ldw	r19,72(sp)
   82d08:	dc801117 	ldw	r18,68(sp)
   82d0c:	dc401017 	ldw	r17,64(sp)
   82d10:	dc000f17 	ldw	r16,60(sp)
   82d14:	dec01404 	addi	sp,sp,80
   82d18:	f800283a 	ret
   82d1c:	288010c4 	addi	r2,r5,67
   82d20:	28800015 	stw	r2,0(r5)
   82d24:	28800415 	stw	r2,16(r5)
   82d28:	00800044 	movi	r2,1
   82d2c:	28800515 	stw	r2,20(r5)
   82d30:	f800283a 	ret
   82d34:	04801004 	movi	r18,64
   82d38:	003fe006 	br	82cbc <__smakebuf_r+0xb0>
   82d3c:	81000a17 	ldw	r4,40(r16)
   82d40:	00c00234 	movhi	r3,8
   82d44:	18c85804 	addi	r3,r3,8544
   82d48:	20ffc51e 	bne	r4,r3,82c60 <__smakebuf_r+0x54>
   82d4c:	8080030b 	ldhu	r2,12(r16)
   82d50:	04810004 	movi	r18,1024
   82d54:	84801315 	stw	r18,76(r16)
   82d58:	1484b03a 	or	r2,r2,r18
   82d5c:	8080030d 	sth	r2,12(r16)
   82d60:	0027883a 	mov	r19,zero
   82d64:	003fd806 	br	82cc8 <__smakebuf_r+0xbc>
   82d68:	8140038f 	ldh	r5,14(r16)
   82d6c:	8809883a 	mov	r4,r17
   82d70:	0082e840 	call	82e84 <_isatty_r>
   82d74:	103fe226 	beq	r2,zero,82d00 <__smakebuf_r+0xf4>
   82d78:	8080030b 	ldhu	r2,12(r16)
   82d7c:	10800054 	ori	r2,r2,1
   82d80:	8080030d 	sth	r2,12(r16)
   82d84:	003fde06 	br	82d00 <__smakebuf_r+0xf4>
   82d88:	8080030b 	ldhu	r2,12(r16)
   82d8c:	10c0800c 	andi	r3,r2,512
   82d90:	183fdb1e 	bne	r3,zero,82d00 <__smakebuf_r+0xf4>
   82d94:	10800094 	ori	r2,r2,2
   82d98:	80c010c4 	addi	r3,r16,67
   82d9c:	8080030d 	sth	r2,12(r16)
   82da0:	00800044 	movi	r2,1
   82da4:	80c00015 	stw	r3,0(r16)
   82da8:	80c00415 	stw	r3,16(r16)
   82dac:	80800515 	stw	r2,20(r16)
   82db0:	003fd306 	br	82d00 <__smakebuf_r+0xf4>
   82db4:	04810004 	movi	r18,1024
   82db8:	003fc306 	br	82cc8 <__smakebuf_r+0xbc>
   82dbc:	0027883a 	mov	r19,zero
   82dc0:	04810004 	movi	r18,1024
   82dc4:	003fc006 	br	82cc8 <__smakebuf_r+0xbc>

00082dc8 <_read_r>:
   82dc8:	defffd04 	addi	sp,sp,-12
   82dcc:	2805883a 	mov	r2,r5
   82dd0:	dc000015 	stw	r16,0(sp)
   82dd4:	04000274 	movhi	r16,9
   82dd8:	dc400115 	stw	r17,4(sp)
   82ddc:	300b883a 	mov	r5,r6
   82de0:	84231804 	addi	r16,r16,-29600
   82de4:	2023883a 	mov	r17,r4
   82de8:	380d883a 	mov	r6,r7
   82dec:	1009883a 	mov	r4,r2
   82df0:	dfc00215 	stw	ra,8(sp)
   82df4:	80000015 	stw	zero,0(r16)
   82df8:	008368c0 	call	8368c <read>
   82dfc:	00ffffc4 	movi	r3,-1
   82e00:	10c00526 	beq	r2,r3,82e18 <_read_r+0x50>
   82e04:	dfc00217 	ldw	ra,8(sp)
   82e08:	dc400117 	ldw	r17,4(sp)
   82e0c:	dc000017 	ldw	r16,0(sp)
   82e10:	dec00304 	addi	sp,sp,12
   82e14:	f800283a 	ret
   82e18:	80c00017 	ldw	r3,0(r16)
   82e1c:	183ff926 	beq	r3,zero,82e04 <_read_r+0x3c>
   82e20:	88c00015 	stw	r3,0(r17)
   82e24:	003ff706 	br	82e04 <_read_r+0x3c>

00082e28 <_fstat_r>:
   82e28:	defffd04 	addi	sp,sp,-12
   82e2c:	2805883a 	mov	r2,r5
   82e30:	dc000015 	stw	r16,0(sp)
   82e34:	04000274 	movhi	r16,9
   82e38:	dc400115 	stw	r17,4(sp)
   82e3c:	84231804 	addi	r16,r16,-29600
   82e40:	2023883a 	mov	r17,r4
   82e44:	300b883a 	mov	r5,r6
   82e48:	1009883a 	mov	r4,r2
   82e4c:	dfc00215 	stw	ra,8(sp)
   82e50:	80000015 	stw	zero,0(r16)
   82e54:	00832000 	call	83200 <fstat>
   82e58:	00ffffc4 	movi	r3,-1
   82e5c:	10c00526 	beq	r2,r3,82e74 <_fstat_r+0x4c>
   82e60:	dfc00217 	ldw	ra,8(sp)
   82e64:	dc400117 	ldw	r17,4(sp)
   82e68:	dc000017 	ldw	r16,0(sp)
   82e6c:	dec00304 	addi	sp,sp,12
   82e70:	f800283a 	ret
   82e74:	80c00017 	ldw	r3,0(r16)
   82e78:	183ff926 	beq	r3,zero,82e60 <_fstat_r+0x38>
   82e7c:	88c00015 	stw	r3,0(r17)
   82e80:	003ff706 	br	82e60 <_fstat_r+0x38>

00082e84 <_isatty_r>:
   82e84:	defffd04 	addi	sp,sp,-12
   82e88:	dc000015 	stw	r16,0(sp)
   82e8c:	04000274 	movhi	r16,9
   82e90:	dc400115 	stw	r17,4(sp)
   82e94:	84231804 	addi	r16,r16,-29600
   82e98:	2023883a 	mov	r17,r4
   82e9c:	2809883a 	mov	r4,r5
   82ea0:	dfc00215 	stw	ra,8(sp)
   82ea4:	80000015 	stw	zero,0(r16)
   82ea8:	00832ec0 	call	832ec <isatty>
   82eac:	00ffffc4 	movi	r3,-1
   82eb0:	10c00526 	beq	r2,r3,82ec8 <_isatty_r+0x44>
   82eb4:	dfc00217 	ldw	ra,8(sp)
   82eb8:	dc400117 	ldw	r17,4(sp)
   82ebc:	dc000017 	ldw	r16,0(sp)
   82ec0:	dec00304 	addi	sp,sp,12
   82ec4:	f800283a 	ret
   82ec8:	80c00017 	ldw	r3,0(r16)
   82ecc:	183ff926 	beq	r3,zero,82eb4 <_isatty_r+0x30>
   82ed0:	88c00015 	stw	r3,0(r17)
   82ed4:	003ff706 	br	82eb4 <_isatty_r+0x30>

00082ed8 <__divsi3>:
   82ed8:	20001b16 	blt	r4,zero,82f48 <__divsi3+0x70>
   82edc:	000f883a 	mov	r7,zero
   82ee0:	28001616 	blt	r5,zero,82f3c <__divsi3+0x64>
   82ee4:	200d883a 	mov	r6,r4
   82ee8:	29001a2e 	bgeu	r5,r4,82f54 <__divsi3+0x7c>
   82eec:	00800804 	movi	r2,32
   82ef0:	00c00044 	movi	r3,1
   82ef4:	00000106 	br	82efc <__divsi3+0x24>
   82ef8:	10000d26 	beq	r2,zero,82f30 <__divsi3+0x58>
   82efc:	294b883a 	add	r5,r5,r5
   82f00:	10bfffc4 	addi	r2,r2,-1
   82f04:	18c7883a 	add	r3,r3,r3
   82f08:	293ffb36 	bltu	r5,r4,82ef8 <__divsi3+0x20>
   82f0c:	0005883a 	mov	r2,zero
   82f10:	18000726 	beq	r3,zero,82f30 <__divsi3+0x58>
   82f14:	0005883a 	mov	r2,zero
   82f18:	31400236 	bltu	r6,r5,82f24 <__divsi3+0x4c>
   82f1c:	314dc83a 	sub	r6,r6,r5
   82f20:	10c4b03a 	or	r2,r2,r3
   82f24:	1806d07a 	srli	r3,r3,1
   82f28:	280ad07a 	srli	r5,r5,1
   82f2c:	183ffa1e 	bne	r3,zero,82f18 <__divsi3+0x40>
   82f30:	38000126 	beq	r7,zero,82f38 <__divsi3+0x60>
   82f34:	0085c83a 	sub	r2,zero,r2
   82f38:	f800283a 	ret
   82f3c:	014bc83a 	sub	r5,zero,r5
   82f40:	39c0005c 	xori	r7,r7,1
   82f44:	003fe706 	br	82ee4 <__divsi3+0xc>
   82f48:	0109c83a 	sub	r4,zero,r4
   82f4c:	01c00044 	movi	r7,1
   82f50:	003fe306 	br	82ee0 <__divsi3+0x8>
   82f54:	00c00044 	movi	r3,1
   82f58:	003fee06 	br	82f14 <__divsi3+0x3c>

00082f5c <__modsi3>:
   82f5c:	20001716 	blt	r4,zero,82fbc <__modsi3+0x60>
   82f60:	000f883a 	mov	r7,zero
   82f64:	2005883a 	mov	r2,r4
   82f68:	28001216 	blt	r5,zero,82fb4 <__modsi3+0x58>
   82f6c:	2900162e 	bgeu	r5,r4,82fc8 <__modsi3+0x6c>
   82f70:	01800804 	movi	r6,32
   82f74:	00c00044 	movi	r3,1
   82f78:	00000106 	br	82f80 <__modsi3+0x24>
   82f7c:	30000a26 	beq	r6,zero,82fa8 <__modsi3+0x4c>
   82f80:	294b883a 	add	r5,r5,r5
   82f84:	31bfffc4 	addi	r6,r6,-1
   82f88:	18c7883a 	add	r3,r3,r3
   82f8c:	293ffb36 	bltu	r5,r4,82f7c <__modsi3+0x20>
   82f90:	18000526 	beq	r3,zero,82fa8 <__modsi3+0x4c>
   82f94:	1806d07a 	srli	r3,r3,1
   82f98:	11400136 	bltu	r2,r5,82fa0 <__modsi3+0x44>
   82f9c:	1145c83a 	sub	r2,r2,r5
   82fa0:	280ad07a 	srli	r5,r5,1
   82fa4:	183ffb1e 	bne	r3,zero,82f94 <__modsi3+0x38>
   82fa8:	38000126 	beq	r7,zero,82fb0 <__modsi3+0x54>
   82fac:	0085c83a 	sub	r2,zero,r2
   82fb0:	f800283a 	ret
   82fb4:	014bc83a 	sub	r5,zero,r5
   82fb8:	003fec06 	br	82f6c <__modsi3+0x10>
   82fbc:	0109c83a 	sub	r4,zero,r4
   82fc0:	01c00044 	movi	r7,1
   82fc4:	003fe706 	br	82f64 <__modsi3+0x8>
   82fc8:	00c00044 	movi	r3,1
   82fcc:	003ff106 	br	82f94 <__modsi3+0x38>

00082fd0 <__udivsi3>:
   82fd0:	200d883a 	mov	r6,r4
   82fd4:	2900152e 	bgeu	r5,r4,8302c <__udivsi3+0x5c>
   82fd8:	28001416 	blt	r5,zero,8302c <__udivsi3+0x5c>
   82fdc:	00800804 	movi	r2,32
   82fe0:	00c00044 	movi	r3,1
   82fe4:	00000206 	br	82ff0 <__udivsi3+0x20>
   82fe8:	10000e26 	beq	r2,zero,83024 <__udivsi3+0x54>
   82fec:	28000516 	blt	r5,zero,83004 <__udivsi3+0x34>
   82ff0:	294b883a 	add	r5,r5,r5
   82ff4:	10bfffc4 	addi	r2,r2,-1
   82ff8:	18c7883a 	add	r3,r3,r3
   82ffc:	293ffa36 	bltu	r5,r4,82fe8 <__udivsi3+0x18>
   83000:	18000826 	beq	r3,zero,83024 <__udivsi3+0x54>
   83004:	0005883a 	mov	r2,zero
   83008:	31400236 	bltu	r6,r5,83014 <__udivsi3+0x44>
   8300c:	314dc83a 	sub	r6,r6,r5
   83010:	10c4b03a 	or	r2,r2,r3
   83014:	1806d07a 	srli	r3,r3,1
   83018:	280ad07a 	srli	r5,r5,1
   8301c:	183ffa1e 	bne	r3,zero,83008 <__udivsi3+0x38>
   83020:	f800283a 	ret
   83024:	0005883a 	mov	r2,zero
   83028:	f800283a 	ret
   8302c:	00c00044 	movi	r3,1
   83030:	003ff406 	br	83004 <__udivsi3+0x34>

00083034 <__umodsi3>:
   83034:	2005883a 	mov	r2,r4
   83038:	2900122e 	bgeu	r5,r4,83084 <__umodsi3+0x50>
   8303c:	28001116 	blt	r5,zero,83084 <__umodsi3+0x50>
   83040:	01800804 	movi	r6,32
   83044:	00c00044 	movi	r3,1
   83048:	00000206 	br	83054 <__umodsi3+0x20>
   8304c:	30000c26 	beq	r6,zero,83080 <__umodsi3+0x4c>
   83050:	28000516 	blt	r5,zero,83068 <__umodsi3+0x34>
   83054:	294b883a 	add	r5,r5,r5
   83058:	31bfffc4 	addi	r6,r6,-1
   8305c:	18c7883a 	add	r3,r3,r3
   83060:	293ffa36 	bltu	r5,r4,8304c <__umodsi3+0x18>
   83064:	18000626 	beq	r3,zero,83080 <__umodsi3+0x4c>
   83068:	1806d07a 	srli	r3,r3,1
   8306c:	11400136 	bltu	r2,r5,83074 <__umodsi3+0x40>
   83070:	1145c83a 	sub	r2,r2,r5
   83074:	280ad07a 	srli	r5,r5,1
   83078:	183ffb1e 	bne	r3,zero,83068 <__umodsi3+0x34>
   8307c:	f800283a 	ret
   83080:	f800283a 	ret
   83084:	00c00044 	movi	r3,1
   83088:	003ff706 	br	83068 <__umodsi3+0x34>

0008308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8308c:	defffe04 	addi	sp,sp,-8
   83090:	dfc00115 	stw	ra,4(sp)
   83094:	df000015 	stw	fp,0(sp)
   83098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8309c:	d0a00917 	ldw	r2,-32732(gp)
   830a0:	10000326 	beq	r2,zero,830b0 <alt_get_errno+0x24>
   830a4:	d0a00917 	ldw	r2,-32732(gp)
   830a8:	103ee83a 	callr	r2
   830ac:	00000106 	br	830b4 <alt_get_errno+0x28>
   830b0:	d0a6ac04 	addi	r2,gp,-25936
}
   830b4:	e037883a 	mov	sp,fp
   830b8:	dfc00117 	ldw	ra,4(sp)
   830bc:	df000017 	ldw	fp,0(sp)
   830c0:	dec00204 	addi	sp,sp,8
   830c4:	f800283a 	ret

000830c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   830c8:	defffb04 	addi	sp,sp,-20
   830cc:	dfc00415 	stw	ra,16(sp)
   830d0:	df000315 	stw	fp,12(sp)
   830d4:	df000304 	addi	fp,sp,12
   830d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   830dc:	e0bfff17 	ldw	r2,-4(fp)
   830e0:	10000616 	blt	r2,zero,830fc <close+0x34>
   830e4:	e0bfff17 	ldw	r2,-4(fp)
   830e8:	10c00324 	muli	r3,r2,12
   830ec:	00800234 	movhi	r2,8
   830f0:	1097f404 	addi	r2,r2,24528
   830f4:	1885883a 	add	r2,r3,r2
   830f8:	00000106 	br	83100 <close+0x38>
   830fc:	0005883a 	mov	r2,zero
   83100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   83104:	e0bffd17 	ldw	r2,-12(fp)
   83108:	10001926 	beq	r2,zero,83170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8310c:	e0bffd17 	ldw	r2,-12(fp)
   83110:	10800017 	ldw	r2,0(r2)
   83114:	10800417 	ldw	r2,16(r2)
   83118:	10000626 	beq	r2,zero,83134 <close+0x6c>
   8311c:	e0bffd17 	ldw	r2,-12(fp)
   83120:	10800017 	ldw	r2,0(r2)
   83124:	10800417 	ldw	r2,16(r2)
   83128:	e13ffd17 	ldw	r4,-12(fp)
   8312c:	103ee83a 	callr	r2
   83130:	00000106 	br	83138 <close+0x70>
   83134:	0005883a 	mov	r2,zero
   83138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8313c:	e13fff17 	ldw	r4,-4(fp)
   83140:	00837880 	call	83788 <alt_release_fd>
    if (rval < 0)
   83144:	e0bffe17 	ldw	r2,-8(fp)
   83148:	1000070e 	bge	r2,zero,83168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8314c:	008308c0 	call	8308c <alt_get_errno>
   83150:	1007883a 	mov	r3,r2
   83154:	e0bffe17 	ldw	r2,-8(fp)
   83158:	0085c83a 	sub	r2,zero,r2
   8315c:	18800015 	stw	r2,0(r3)
      return -1;
   83160:	00bfffc4 	movi	r2,-1
   83164:	00000706 	br	83184 <close+0xbc>
    }
    return 0;
   83168:	0005883a 	mov	r2,zero
   8316c:	00000506 	br	83184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83170:	008308c0 	call	8308c <alt_get_errno>
   83174:	1007883a 	mov	r3,r2
   83178:	00801444 	movi	r2,81
   8317c:	18800015 	stw	r2,0(r3)
    return -1;
   83180:	00bfffc4 	movi	r2,-1
  }
}
   83184:	e037883a 	mov	sp,fp
   83188:	dfc00117 	ldw	ra,4(sp)
   8318c:	df000017 	ldw	fp,0(sp)
   83190:	dec00204 	addi	sp,sp,8
   83194:	f800283a 	ret

00083198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   83198:	defffc04 	addi	sp,sp,-16
   8319c:	df000315 	stw	fp,12(sp)
   831a0:	df000304 	addi	fp,sp,12
   831a4:	e13ffd15 	stw	r4,-12(fp)
   831a8:	e17ffe15 	stw	r5,-8(fp)
   831ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   831b0:	e0bfff17 	ldw	r2,-4(fp)
}
   831b4:	e037883a 	mov	sp,fp
   831b8:	df000017 	ldw	fp,0(sp)
   831bc:	dec00104 	addi	sp,sp,4
   831c0:	f800283a 	ret

000831c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   831c4:	defffe04 	addi	sp,sp,-8
   831c8:	dfc00115 	stw	ra,4(sp)
   831cc:	df000015 	stw	fp,0(sp)
   831d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   831d4:	d0a00917 	ldw	r2,-32732(gp)
   831d8:	10000326 	beq	r2,zero,831e8 <alt_get_errno+0x24>
   831dc:	d0a00917 	ldw	r2,-32732(gp)
   831e0:	103ee83a 	callr	r2
   831e4:	00000106 	br	831ec <alt_get_errno+0x28>
   831e8:	d0a6ac04 	addi	r2,gp,-25936
}
   831ec:	e037883a 	mov	sp,fp
   831f0:	dfc00117 	ldw	ra,4(sp)
   831f4:	df000017 	ldw	fp,0(sp)
   831f8:	dec00204 	addi	sp,sp,8
   831fc:	f800283a 	ret

00083200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   83200:	defffb04 	addi	sp,sp,-20
   83204:	dfc00415 	stw	ra,16(sp)
   83208:	df000315 	stw	fp,12(sp)
   8320c:	df000304 	addi	fp,sp,12
   83210:	e13ffe15 	stw	r4,-8(fp)
   83214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83218:	e0bffe17 	ldw	r2,-8(fp)
   8321c:	10000616 	blt	r2,zero,83238 <fstat+0x38>
   83220:	e0bffe17 	ldw	r2,-8(fp)
   83224:	10c00324 	muli	r3,r2,12
   83228:	00800234 	movhi	r2,8
   8322c:	1097f404 	addi	r2,r2,24528
   83230:	1885883a 	add	r2,r3,r2
   83234:	00000106 	br	8323c <fstat+0x3c>
   83238:	0005883a 	mov	r2,zero
   8323c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   83240:	e0bffd17 	ldw	r2,-12(fp)
   83244:	10001026 	beq	r2,zero,83288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   83248:	e0bffd17 	ldw	r2,-12(fp)
   8324c:	10800017 	ldw	r2,0(r2)
   83250:	10800817 	ldw	r2,32(r2)
   83254:	10000726 	beq	r2,zero,83274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   83258:	e0bffd17 	ldw	r2,-12(fp)
   8325c:	10800017 	ldw	r2,0(r2)
   83260:	10800817 	ldw	r2,32(r2)
   83264:	e17fff17 	ldw	r5,-4(fp)
   83268:	e13ffd17 	ldw	r4,-12(fp)
   8326c:	103ee83a 	callr	r2
   83270:	00000a06 	br	8329c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   83274:	e0bfff17 	ldw	r2,-4(fp)
   83278:	00c80004 	movi	r3,8192
   8327c:	10c00115 	stw	r3,4(r2)
      return 0;
   83280:	0005883a 	mov	r2,zero
   83284:	00000506 	br	8329c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83288:	00831c40 	call	831c4 <alt_get_errno>
   8328c:	1007883a 	mov	r3,r2
   83290:	00801444 	movi	r2,81
   83294:	18800015 	stw	r2,0(r3)
    return -1;
   83298:	00bfffc4 	movi	r2,-1
  }
}
   8329c:	e037883a 	mov	sp,fp
   832a0:	dfc00117 	ldw	ra,4(sp)
   832a4:	df000017 	ldw	fp,0(sp)
   832a8:	dec00204 	addi	sp,sp,8
   832ac:	f800283a 	ret

000832b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   832b0:	defffe04 	addi	sp,sp,-8
   832b4:	dfc00115 	stw	ra,4(sp)
   832b8:	df000015 	stw	fp,0(sp)
   832bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   832c0:	d0a00917 	ldw	r2,-32732(gp)
   832c4:	10000326 	beq	r2,zero,832d4 <alt_get_errno+0x24>
   832c8:	d0a00917 	ldw	r2,-32732(gp)
   832cc:	103ee83a 	callr	r2
   832d0:	00000106 	br	832d8 <alt_get_errno+0x28>
   832d4:	d0a6ac04 	addi	r2,gp,-25936
}
   832d8:	e037883a 	mov	sp,fp
   832dc:	dfc00117 	ldw	ra,4(sp)
   832e0:	df000017 	ldw	fp,0(sp)
   832e4:	dec00204 	addi	sp,sp,8
   832e8:	f800283a 	ret

000832ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   832ec:	deffed04 	addi	sp,sp,-76
   832f0:	dfc01215 	stw	ra,72(sp)
   832f4:	df001115 	stw	fp,68(sp)
   832f8:	df001104 	addi	fp,sp,68
   832fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83300:	e0bfff17 	ldw	r2,-4(fp)
   83304:	10000616 	blt	r2,zero,83320 <isatty+0x34>
   83308:	e0bfff17 	ldw	r2,-4(fp)
   8330c:	10c00324 	muli	r3,r2,12
   83310:	00800234 	movhi	r2,8
   83314:	1097f404 	addi	r2,r2,24528
   83318:	1885883a 	add	r2,r3,r2
   8331c:	00000106 	br	83324 <isatty+0x38>
   83320:	0005883a 	mov	r2,zero
   83324:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   83328:	e0bfef17 	ldw	r2,-68(fp)
   8332c:	10000e26 	beq	r2,zero,83368 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83330:	e0bfef17 	ldw	r2,-68(fp)
   83334:	10800017 	ldw	r2,0(r2)
   83338:	10800817 	ldw	r2,32(r2)
   8333c:	1000021e 	bne	r2,zero,83348 <isatty+0x5c>
    {
      return 1;
   83340:	00800044 	movi	r2,1
   83344:	00000d06 	br	8337c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   83348:	e0bff004 	addi	r2,fp,-64
   8334c:	100b883a 	mov	r5,r2
   83350:	e13fff17 	ldw	r4,-4(fp)
   83354:	00832000 	call	83200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   83358:	e0bff117 	ldw	r2,-60(fp)
   8335c:	10880020 	cmpeqi	r2,r2,8192
   83360:	10803fcc 	andi	r2,r2,255
   83364:	00000506 	br	8337c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83368:	00832b00 	call	832b0 <alt_get_errno>
   8336c:	1007883a 	mov	r3,r2
   83370:	00801444 	movi	r2,81
   83374:	18800015 	stw	r2,0(r3)
    return 0;
   83378:	0005883a 	mov	r2,zero
  }
}
   8337c:	e037883a 	mov	sp,fp
   83380:	dfc00117 	ldw	ra,4(sp)
   83384:	df000017 	ldw	fp,0(sp)
   83388:	dec00204 	addi	sp,sp,8
   8338c:	f800283a 	ret

00083390 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   83390:	defffc04 	addi	sp,sp,-16
   83394:	df000315 	stw	fp,12(sp)
   83398:	df000304 	addi	fp,sp,12
   8339c:	e13ffd15 	stw	r4,-12(fp)
   833a0:	e17ffe15 	stw	r5,-8(fp)
   833a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   833a8:	e0fffe17 	ldw	r3,-8(fp)
   833ac:	e0bffd17 	ldw	r2,-12(fp)
   833b0:	18800c26 	beq	r3,r2,833e4 <alt_load_section+0x54>
  {
    while( to != end )
   833b4:	00000806 	br	833d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   833b8:	e0bffe17 	ldw	r2,-8(fp)
   833bc:	10c00104 	addi	r3,r2,4
   833c0:	e0fffe15 	stw	r3,-8(fp)
   833c4:	e0fffd17 	ldw	r3,-12(fp)
   833c8:	19000104 	addi	r4,r3,4
   833cc:	e13ffd15 	stw	r4,-12(fp)
   833d0:	18c00017 	ldw	r3,0(r3)
   833d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   833d8:	e0fffe17 	ldw	r3,-8(fp)
   833dc:	e0bfff17 	ldw	r2,-4(fp)
   833e0:	18bff51e 	bne	r3,r2,833b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   833e4:	0001883a 	nop
   833e8:	e037883a 	mov	sp,fp
   833ec:	df000017 	ldw	fp,0(sp)
   833f0:	dec00104 	addi	sp,sp,4
   833f4:	f800283a 	ret

000833f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   833f8:	defffe04 	addi	sp,sp,-8
   833fc:	dfc00115 	stw	ra,4(sp)
   83400:	df000015 	stw	fp,0(sp)
   83404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83408:	01800234 	movhi	r6,8
   8340c:	319c7a04 	addi	r6,r6,29160
   83410:	01400234 	movhi	r5,8
   83414:	2955df04 	addi	r5,r5,22396
   83418:	01000234 	movhi	r4,8
   8341c:	211c7a04 	addi	r4,r4,29160
   83420:	00833900 	call	83390 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83424:	01800234 	movhi	r6,8
   83428:	31809104 	addi	r6,r6,580
   8342c:	01400234 	movhi	r5,8
   83430:	29400804 	addi	r5,r5,32
   83434:	01000234 	movhi	r4,8
   83438:	21000804 	addi	r4,r4,32
   8343c:	00833900 	call	83390 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83440:	01800234 	movhi	r6,8
   83444:	3195df04 	addi	r6,r6,22396
   83448:	01400234 	movhi	r5,8
   8344c:	2955cb04 	addi	r5,r5,22316
   83450:	01000234 	movhi	r4,8
   83454:	2115cb04 	addi	r4,r4,22316
   83458:	00833900 	call	83390 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8345c:	00846180 	call	84618 <alt_dcache_flush_all>
  alt_icache_flush_all();
   83460:	00848000 	call	84800 <alt_icache_flush_all>
}
   83464:	0001883a 	nop
   83468:	e037883a 	mov	sp,fp
   8346c:	dfc00117 	ldw	ra,4(sp)
   83470:	df000017 	ldw	fp,0(sp)
   83474:	dec00204 	addi	sp,sp,8
   83478:	f800283a 	ret

0008347c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8347c:	defffe04 	addi	sp,sp,-8
   83480:	dfc00115 	stw	ra,4(sp)
   83484:	df000015 	stw	fp,0(sp)
   83488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8348c:	d0a00917 	ldw	r2,-32732(gp)
   83490:	10000326 	beq	r2,zero,834a0 <alt_get_errno+0x24>
   83494:	d0a00917 	ldw	r2,-32732(gp)
   83498:	103ee83a 	callr	r2
   8349c:	00000106 	br	834a4 <alt_get_errno+0x28>
   834a0:	d0a6ac04 	addi	r2,gp,-25936
}
   834a4:	e037883a 	mov	sp,fp
   834a8:	dfc00117 	ldw	ra,4(sp)
   834ac:	df000017 	ldw	fp,0(sp)
   834b0:	dec00204 	addi	sp,sp,8
   834b4:	f800283a 	ret

000834b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   834b8:	defff904 	addi	sp,sp,-28
   834bc:	dfc00615 	stw	ra,24(sp)
   834c0:	df000515 	stw	fp,20(sp)
   834c4:	df000504 	addi	fp,sp,20
   834c8:	e13ffd15 	stw	r4,-12(fp)
   834cc:	e17ffe15 	stw	r5,-8(fp)
   834d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   834d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   834d8:	e0bffd17 	ldw	r2,-12(fp)
   834dc:	10000616 	blt	r2,zero,834f8 <lseek+0x40>
   834e0:	e0bffd17 	ldw	r2,-12(fp)
   834e4:	10c00324 	muli	r3,r2,12
   834e8:	00800234 	movhi	r2,8
   834ec:	1097f404 	addi	r2,r2,24528
   834f0:	1885883a 	add	r2,r3,r2
   834f4:	00000106 	br	834fc <lseek+0x44>
   834f8:	0005883a 	mov	r2,zero
   834fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   83500:	e0bffc17 	ldw	r2,-16(fp)
   83504:	10001026 	beq	r2,zero,83548 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   83508:	e0bffc17 	ldw	r2,-16(fp)
   8350c:	10800017 	ldw	r2,0(r2)
   83510:	10800717 	ldw	r2,28(r2)
   83514:	10000926 	beq	r2,zero,8353c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   83518:	e0bffc17 	ldw	r2,-16(fp)
   8351c:	10800017 	ldw	r2,0(r2)
   83520:	10800717 	ldw	r2,28(r2)
   83524:	e1bfff17 	ldw	r6,-4(fp)
   83528:	e17ffe17 	ldw	r5,-8(fp)
   8352c:	e13ffc17 	ldw	r4,-16(fp)
   83530:	103ee83a 	callr	r2
   83534:	e0bffb15 	stw	r2,-20(fp)
   83538:	00000506 	br	83550 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8353c:	00bfde84 	movi	r2,-134
   83540:	e0bffb15 	stw	r2,-20(fp)
   83544:	00000206 	br	83550 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   83548:	00bfebc4 	movi	r2,-81
   8354c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   83550:	e0bffb17 	ldw	r2,-20(fp)
   83554:	1000070e 	bge	r2,zero,83574 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   83558:	008347c0 	call	8347c <alt_get_errno>
   8355c:	1007883a 	mov	r3,r2
   83560:	e0bffb17 	ldw	r2,-20(fp)
   83564:	0085c83a 	sub	r2,zero,r2
   83568:	18800015 	stw	r2,0(r3)
    rc = -1;
   8356c:	00bfffc4 	movi	r2,-1
   83570:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   83574:	e0bffb17 	ldw	r2,-20(fp)
}
   83578:	e037883a 	mov	sp,fp
   8357c:	dfc00117 	ldw	ra,4(sp)
   83580:	df000017 	ldw	fp,0(sp)
   83584:	dec00204 	addi	sp,sp,8
   83588:	f800283a 	ret

0008358c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8358c:	defffd04 	addi	sp,sp,-12
   83590:	dfc00215 	stw	ra,8(sp)
   83594:	df000115 	stw	fp,4(sp)
   83598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8359c:	0009883a 	mov	r4,zero
   835a0:	0083a040 	call	83a04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   835a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   835a8:	0083a3c0 	call	83a3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   835ac:	01800234 	movhi	r6,8
   835b0:	3195d504 	addi	r6,r6,22356
   835b4:	01400234 	movhi	r5,8
   835b8:	2955d504 	addi	r5,r5,22356
   835bc:	01000234 	movhi	r4,8
   835c0:	2115d504 	addi	r4,r4,22356
   835c4:	0084b980 	call	84b98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   835c8:	00847400 	call	84740 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   835cc:	01000234 	movhi	r4,8
   835d0:	2111e804 	addi	r4,r4,18336
   835d4:	00853980 	call	85398 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   835d8:	d0a6ad17 	ldw	r2,-25932(gp)
   835dc:	d0e6ae17 	ldw	r3,-25928(gp)
   835e0:	d126af17 	ldw	r4,-25924(gp)
   835e4:	200d883a 	mov	r6,r4
   835e8:	180b883a 	mov	r5,r3
   835ec:	1009883a 	mov	r4,r2
   835f0:	00802900 	call	80290 <main>
   835f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   835f8:	01000044 	movi	r4,1
   835fc:	00830c80 	call	830c8 <close>
  exit (result);
   83600:	e13fff17 	ldw	r4,-4(fp)
   83604:	00853ac0 	call	853ac <exit>

00083608 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83608:	defffe04 	addi	sp,sp,-8
   8360c:	df000115 	stw	fp,4(sp)
   83610:	df000104 	addi	fp,sp,4
   83614:	e13fff15 	stw	r4,-4(fp)
}
   83618:	0001883a 	nop
   8361c:	e037883a 	mov	sp,fp
   83620:	df000017 	ldw	fp,0(sp)
   83624:	dec00104 	addi	sp,sp,4
   83628:	f800283a 	ret

0008362c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8362c:	defffe04 	addi	sp,sp,-8
   83630:	df000115 	stw	fp,4(sp)
   83634:	df000104 	addi	fp,sp,4
   83638:	e13fff15 	stw	r4,-4(fp)
}
   8363c:	0001883a 	nop
   83640:	e037883a 	mov	sp,fp
   83644:	df000017 	ldw	fp,0(sp)
   83648:	dec00104 	addi	sp,sp,4
   8364c:	f800283a 	ret

00083650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83650:	defffe04 	addi	sp,sp,-8
   83654:	dfc00115 	stw	ra,4(sp)
   83658:	df000015 	stw	fp,0(sp)
   8365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83660:	d0a00917 	ldw	r2,-32732(gp)
   83664:	10000326 	beq	r2,zero,83674 <alt_get_errno+0x24>
   83668:	d0a00917 	ldw	r2,-32732(gp)
   8366c:	103ee83a 	callr	r2
   83670:	00000106 	br	83678 <alt_get_errno+0x28>
   83674:	d0a6ac04 	addi	r2,gp,-25936
}
   83678:	e037883a 	mov	sp,fp
   8367c:	dfc00117 	ldw	ra,4(sp)
   83680:	df000017 	ldw	fp,0(sp)
   83684:	dec00204 	addi	sp,sp,8
   83688:	f800283a 	ret

0008368c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8368c:	defff904 	addi	sp,sp,-28
   83690:	dfc00615 	stw	ra,24(sp)
   83694:	df000515 	stw	fp,20(sp)
   83698:	df000504 	addi	fp,sp,20
   8369c:	e13ffd15 	stw	r4,-12(fp)
   836a0:	e17ffe15 	stw	r5,-8(fp)
   836a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   836a8:	e0bffd17 	ldw	r2,-12(fp)
   836ac:	10000616 	blt	r2,zero,836c8 <read+0x3c>
   836b0:	e0bffd17 	ldw	r2,-12(fp)
   836b4:	10c00324 	muli	r3,r2,12
   836b8:	00800234 	movhi	r2,8
   836bc:	1097f404 	addi	r2,r2,24528
   836c0:	1885883a 	add	r2,r3,r2
   836c4:	00000106 	br	836cc <read+0x40>
   836c8:	0005883a 	mov	r2,zero
   836cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   836d0:	e0bffb17 	ldw	r2,-20(fp)
   836d4:	10002226 	beq	r2,zero,83760 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   836d8:	e0bffb17 	ldw	r2,-20(fp)
   836dc:	10800217 	ldw	r2,8(r2)
   836e0:	108000cc 	andi	r2,r2,3
   836e4:	10800060 	cmpeqi	r2,r2,1
   836e8:	1000181e 	bne	r2,zero,8374c <read+0xc0>
        (fd->dev->read))
   836ec:	e0bffb17 	ldw	r2,-20(fp)
   836f0:	10800017 	ldw	r2,0(r2)
   836f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   836f8:	10001426 	beq	r2,zero,8374c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   836fc:	e0bffb17 	ldw	r2,-20(fp)
   83700:	10800017 	ldw	r2,0(r2)
   83704:	10800517 	ldw	r2,20(r2)
   83708:	e0ffff17 	ldw	r3,-4(fp)
   8370c:	180d883a 	mov	r6,r3
   83710:	e17ffe17 	ldw	r5,-8(fp)
   83714:	e13ffb17 	ldw	r4,-20(fp)
   83718:	103ee83a 	callr	r2
   8371c:	e0bffc15 	stw	r2,-16(fp)
   83720:	e0bffc17 	ldw	r2,-16(fp)
   83724:	1000070e 	bge	r2,zero,83744 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   83728:	00836500 	call	83650 <alt_get_errno>
   8372c:	1007883a 	mov	r3,r2
   83730:	e0bffc17 	ldw	r2,-16(fp)
   83734:	0085c83a 	sub	r2,zero,r2
   83738:	18800015 	stw	r2,0(r3)
          return -1;
   8373c:	00bfffc4 	movi	r2,-1
   83740:	00000c06 	br	83774 <read+0xe8>
        }
        return rval;
   83744:	e0bffc17 	ldw	r2,-16(fp)
   83748:	00000a06 	br	83774 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8374c:	00836500 	call	83650 <alt_get_errno>
   83750:	1007883a 	mov	r3,r2
   83754:	00800344 	movi	r2,13
   83758:	18800015 	stw	r2,0(r3)
   8375c:	00000406 	br	83770 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   83760:	00836500 	call	83650 <alt_get_errno>
   83764:	1007883a 	mov	r3,r2
   83768:	00801444 	movi	r2,81
   8376c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83770:	00bfffc4 	movi	r2,-1
}
   83774:	e037883a 	mov	sp,fp
   83778:	dfc00117 	ldw	ra,4(sp)
   8377c:	df000017 	ldw	fp,0(sp)
   83780:	dec00204 	addi	sp,sp,8
   83784:	f800283a 	ret

00083788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   83788:	defffe04 	addi	sp,sp,-8
   8378c:	df000115 	stw	fp,4(sp)
   83790:	df000104 	addi	fp,sp,4
   83794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   83798:	e0bfff17 	ldw	r2,-4(fp)
   8379c:	108000d0 	cmplti	r2,r2,3
   837a0:	10000d1e 	bne	r2,zero,837d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   837a4:	00800234 	movhi	r2,8
   837a8:	1097f404 	addi	r2,r2,24528
   837ac:	e0ffff17 	ldw	r3,-4(fp)
   837b0:	18c00324 	muli	r3,r3,12
   837b4:	10c5883a 	add	r2,r2,r3
   837b8:	10800204 	addi	r2,r2,8
   837bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   837c0:	00800234 	movhi	r2,8
   837c4:	1097f404 	addi	r2,r2,24528
   837c8:	e0ffff17 	ldw	r3,-4(fp)
   837cc:	18c00324 	muli	r3,r3,12
   837d0:	10c5883a 	add	r2,r2,r3
   837d4:	10000015 	stw	zero,0(r2)
  }
}
   837d8:	0001883a 	nop
   837dc:	e037883a 	mov	sp,fp
   837e0:	df000017 	ldw	fp,0(sp)
   837e4:	dec00104 	addi	sp,sp,4
   837e8:	f800283a 	ret

000837ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   837ec:	defff904 	addi	sp,sp,-28
   837f0:	df000615 	stw	fp,24(sp)
   837f4:	df000604 	addi	fp,sp,24
   837f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   837fc:	0005303a 	rdctl	r2,status
   83800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83804:	e0fffe17 	ldw	r3,-8(fp)
   83808:	00bfff84 	movi	r2,-2
   8380c:	1884703a 	and	r2,r3,r2
   83810:	1001703a 	wrctl	status,r2
  
  return context;
   83814:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   83818:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8381c:	d0a00a17 	ldw	r2,-32728(gp)
   83820:	10c000c4 	addi	r3,r2,3
   83824:	00bfff04 	movi	r2,-4
   83828:	1884703a 	and	r2,r3,r2
   8382c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83830:	d0e00a17 	ldw	r3,-32728(gp)
   83834:	e0bfff17 	ldw	r2,-4(fp)
   83838:	1887883a 	add	r3,r3,r2
   8383c:	008003b4 	movhi	r2,14
   83840:	1086a004 	addi	r2,r2,6784
   83844:	10c0062e 	bgeu	r2,r3,83860 <sbrk+0x74>
   83848:	e0bffb17 	ldw	r2,-20(fp)
   8384c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83850:	e0bffa17 	ldw	r2,-24(fp)
   83854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   83858:	00bfffc4 	movi	r2,-1
   8385c:	00000b06 	br	8388c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   83860:	d0a00a17 	ldw	r2,-32728(gp)
   83864:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   83868:	d0e00a17 	ldw	r3,-32728(gp)
   8386c:	e0bfff17 	ldw	r2,-4(fp)
   83870:	1885883a 	add	r2,r3,r2
   83874:	d0a00a15 	stw	r2,-32728(gp)
   83878:	e0bffb17 	ldw	r2,-20(fp)
   8387c:	e0bffc15 	stw	r2,-16(fp)
   83880:	e0bffc17 	ldw	r2,-16(fp)
   83884:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83888:	e0bffd17 	ldw	r2,-12(fp)
} 
   8388c:	e037883a 	mov	sp,fp
   83890:	df000017 	ldw	fp,0(sp)
   83894:	dec00104 	addi	sp,sp,4
   83898:	f800283a 	ret

0008389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8389c:	defffe04 	addi	sp,sp,-8
   838a0:	dfc00115 	stw	ra,4(sp)
   838a4:	df000015 	stw	fp,0(sp)
   838a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   838ac:	d0a00917 	ldw	r2,-32732(gp)
   838b0:	10000326 	beq	r2,zero,838c0 <alt_get_errno+0x24>
   838b4:	d0a00917 	ldw	r2,-32732(gp)
   838b8:	103ee83a 	callr	r2
   838bc:	00000106 	br	838c4 <alt_get_errno+0x28>
   838c0:	d0a6ac04 	addi	r2,gp,-25936
}
   838c4:	e037883a 	mov	sp,fp
   838c8:	dfc00117 	ldw	ra,4(sp)
   838cc:	df000017 	ldw	fp,0(sp)
   838d0:	dec00204 	addi	sp,sp,8
   838d4:	f800283a 	ret

000838d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   838d8:	defff904 	addi	sp,sp,-28
   838dc:	dfc00615 	stw	ra,24(sp)
   838e0:	df000515 	stw	fp,20(sp)
   838e4:	df000504 	addi	fp,sp,20
   838e8:	e13ffd15 	stw	r4,-12(fp)
   838ec:	e17ffe15 	stw	r5,-8(fp)
   838f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   838f4:	e0bffd17 	ldw	r2,-12(fp)
   838f8:	10000616 	blt	r2,zero,83914 <write+0x3c>
   838fc:	e0bffd17 	ldw	r2,-12(fp)
   83900:	10c00324 	muli	r3,r2,12
   83904:	00800234 	movhi	r2,8
   83908:	1097f404 	addi	r2,r2,24528
   8390c:	1885883a 	add	r2,r3,r2
   83910:	00000106 	br	83918 <write+0x40>
   83914:	0005883a 	mov	r2,zero
   83918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8391c:	e0bffb17 	ldw	r2,-20(fp)
   83920:	10002126 	beq	r2,zero,839a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83924:	e0bffb17 	ldw	r2,-20(fp)
   83928:	10800217 	ldw	r2,8(r2)
   8392c:	108000cc 	andi	r2,r2,3
   83930:	10001826 	beq	r2,zero,83994 <write+0xbc>
   83934:	e0bffb17 	ldw	r2,-20(fp)
   83938:	10800017 	ldw	r2,0(r2)
   8393c:	10800617 	ldw	r2,24(r2)
   83940:	10001426 	beq	r2,zero,83994 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83944:	e0bffb17 	ldw	r2,-20(fp)
   83948:	10800017 	ldw	r2,0(r2)
   8394c:	10800617 	ldw	r2,24(r2)
   83950:	e0ffff17 	ldw	r3,-4(fp)
   83954:	180d883a 	mov	r6,r3
   83958:	e17ffe17 	ldw	r5,-8(fp)
   8395c:	e13ffb17 	ldw	r4,-20(fp)
   83960:	103ee83a 	callr	r2
   83964:	e0bffc15 	stw	r2,-16(fp)
   83968:	e0bffc17 	ldw	r2,-16(fp)
   8396c:	1000070e 	bge	r2,zero,8398c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   83970:	008389c0 	call	8389c <alt_get_errno>
   83974:	1007883a 	mov	r3,r2
   83978:	e0bffc17 	ldw	r2,-16(fp)
   8397c:	0085c83a 	sub	r2,zero,r2
   83980:	18800015 	stw	r2,0(r3)
        return -1;
   83984:	00bfffc4 	movi	r2,-1
   83988:	00000c06 	br	839bc <write+0xe4>
      }
      return rval;
   8398c:	e0bffc17 	ldw	r2,-16(fp)
   83990:	00000a06 	br	839bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   83994:	008389c0 	call	8389c <alt_get_errno>
   83998:	1007883a 	mov	r3,r2
   8399c:	00800344 	movi	r2,13
   839a0:	18800015 	stw	r2,0(r3)
   839a4:	00000406 	br	839b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   839a8:	008389c0 	call	8389c <alt_get_errno>
   839ac:	1007883a 	mov	r3,r2
   839b0:	00801444 	movi	r2,81
   839b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   839b8:	00bfffc4 	movi	r2,-1
}
   839bc:	e037883a 	mov	sp,fp
   839c0:	dfc00117 	ldw	ra,4(sp)
   839c4:	df000017 	ldw	fp,0(sp)
   839c8:	dec00204 	addi	sp,sp,8
   839cc:	f800283a 	ret

000839d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   839d0:	defffd04 	addi	sp,sp,-12
   839d4:	dfc00215 	stw	ra,8(sp)
   839d8:	df000115 	stw	fp,4(sp)
   839dc:	df000104 	addi	fp,sp,4
   839e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   839e4:	d1600604 	addi	r5,gp,-32744
   839e8:	e13fff17 	ldw	r4,-4(fp)
   839ec:	008469c0 	call	8469c <alt_dev_llist_insert>
}
   839f0:	e037883a 	mov	sp,fp
   839f4:	dfc00117 	ldw	ra,4(sp)
   839f8:	df000017 	ldw	fp,0(sp)
   839fc:	dec00204 	addi	sp,sp,8
   83a00:	f800283a 	ret

00083a04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83a04:	defffd04 	addi	sp,sp,-12
   83a08:	dfc00215 	stw	ra,8(sp)
   83a0c:	df000115 	stw	fp,4(sp)
   83a10:	df000104 	addi	fp,sp,4
   83a14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   83a18:	008500c0 	call	8500c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83a1c:	00800044 	movi	r2,1
   83a20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   83a24:	0001883a 	nop
   83a28:	e037883a 	mov	sp,fp
   83a2c:	dfc00117 	ldw	ra,4(sp)
   83a30:	df000017 	ldw	fp,0(sp)
   83a34:	dec00204 	addi	sp,sp,8
   83a38:	f800283a 	ret

00083a3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83a3c:	defffe04 	addi	sp,sp,-8
   83a40:	dfc00115 	stw	ra,4(sp)
   83a44:	df000015 	stw	fp,0(sp)
   83a48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83a4c:	000d883a 	mov	r6,zero
   83a50:	000b883a 	mov	r5,zero
   83a54:	01000234 	movhi	r4,8
   83a58:	21185e04 	addi	r4,r4,24952
   83a5c:	0083be80 	call	83be8 <altera_avalon_jtag_uart_init>
   83a60:	01000234 	movhi	r4,8
   83a64:	21185404 	addi	r4,r4,24912
   83a68:	00839d00 	call	839d0 <alt_dev_reg>
}
   83a6c:	0001883a 	nop
   83a70:	e037883a 	mov	sp,fp
   83a74:	dfc00117 	ldw	ra,4(sp)
   83a78:	df000017 	ldw	fp,0(sp)
   83a7c:	dec00204 	addi	sp,sp,8
   83a80:	f800283a 	ret

00083a84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83a84:	defffa04 	addi	sp,sp,-24
   83a88:	dfc00515 	stw	ra,20(sp)
   83a8c:	df000415 	stw	fp,16(sp)
   83a90:	df000404 	addi	fp,sp,16
   83a94:	e13ffd15 	stw	r4,-12(fp)
   83a98:	e17ffe15 	stw	r5,-8(fp)
   83a9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83aa0:	e0bffd17 	ldw	r2,-12(fp)
   83aa4:	10800017 	ldw	r2,0(r2)
   83aa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83aac:	e0bffc17 	ldw	r2,-16(fp)
   83ab0:	10c00a04 	addi	r3,r2,40
   83ab4:	e0bffd17 	ldw	r2,-12(fp)
   83ab8:	10800217 	ldw	r2,8(r2)
   83abc:	100f883a 	mov	r7,r2
   83ac0:	e1bfff17 	ldw	r6,-4(fp)
   83ac4:	e17ffe17 	ldw	r5,-8(fp)
   83ac8:	1809883a 	mov	r4,r3
   83acc:	00840ac0 	call	840ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83ad0:	e037883a 	mov	sp,fp
   83ad4:	dfc00117 	ldw	ra,4(sp)
   83ad8:	df000017 	ldw	fp,0(sp)
   83adc:	dec00204 	addi	sp,sp,8
   83ae0:	f800283a 	ret

00083ae4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83ae4:	defffa04 	addi	sp,sp,-24
   83ae8:	dfc00515 	stw	ra,20(sp)
   83aec:	df000415 	stw	fp,16(sp)
   83af0:	df000404 	addi	fp,sp,16
   83af4:	e13ffd15 	stw	r4,-12(fp)
   83af8:	e17ffe15 	stw	r5,-8(fp)
   83afc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83b00:	e0bffd17 	ldw	r2,-12(fp)
   83b04:	10800017 	ldw	r2,0(r2)
   83b08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83b0c:	e0bffc17 	ldw	r2,-16(fp)
   83b10:	10c00a04 	addi	r3,r2,40
   83b14:	e0bffd17 	ldw	r2,-12(fp)
   83b18:	10800217 	ldw	r2,8(r2)
   83b1c:	100f883a 	mov	r7,r2
   83b20:	e1bfff17 	ldw	r6,-4(fp)
   83b24:	e17ffe17 	ldw	r5,-8(fp)
   83b28:	1809883a 	mov	r4,r3
   83b2c:	00842c80 	call	842c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83b30:	e037883a 	mov	sp,fp
   83b34:	dfc00117 	ldw	ra,4(sp)
   83b38:	df000017 	ldw	fp,0(sp)
   83b3c:	dec00204 	addi	sp,sp,8
   83b40:	f800283a 	ret

00083b44 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83b44:	defffc04 	addi	sp,sp,-16
   83b48:	dfc00315 	stw	ra,12(sp)
   83b4c:	df000215 	stw	fp,8(sp)
   83b50:	df000204 	addi	fp,sp,8
   83b54:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83b58:	e0bfff17 	ldw	r2,-4(fp)
   83b5c:	10800017 	ldw	r2,0(r2)
   83b60:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83b64:	e0bffe17 	ldw	r2,-8(fp)
   83b68:	10c00a04 	addi	r3,r2,40
   83b6c:	e0bfff17 	ldw	r2,-4(fp)
   83b70:	10800217 	ldw	r2,8(r2)
   83b74:	100b883a 	mov	r5,r2
   83b78:	1809883a 	mov	r4,r3
   83b7c:	0083f540 	call	83f54 <altera_avalon_jtag_uart_close>
}
   83b80:	e037883a 	mov	sp,fp
   83b84:	dfc00117 	ldw	ra,4(sp)
   83b88:	df000017 	ldw	fp,0(sp)
   83b8c:	dec00204 	addi	sp,sp,8
   83b90:	f800283a 	ret

00083b94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83b94:	defffa04 	addi	sp,sp,-24
   83b98:	dfc00515 	stw	ra,20(sp)
   83b9c:	df000415 	stw	fp,16(sp)
   83ba0:	df000404 	addi	fp,sp,16
   83ba4:	e13ffd15 	stw	r4,-12(fp)
   83ba8:	e17ffe15 	stw	r5,-8(fp)
   83bac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83bb0:	e0bffd17 	ldw	r2,-12(fp)
   83bb4:	10800017 	ldw	r2,0(r2)
   83bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83bbc:	e0bffc17 	ldw	r2,-16(fp)
   83bc0:	10800a04 	addi	r2,r2,40
   83bc4:	e1bfff17 	ldw	r6,-4(fp)
   83bc8:	e17ffe17 	ldw	r5,-8(fp)
   83bcc:	1009883a 	mov	r4,r2
   83bd0:	0083fbc0 	call	83fbc <altera_avalon_jtag_uart_ioctl>
}
   83bd4:	e037883a 	mov	sp,fp
   83bd8:	dfc00117 	ldw	ra,4(sp)
   83bdc:	df000017 	ldw	fp,0(sp)
   83be0:	dec00204 	addi	sp,sp,8
   83be4:	f800283a 	ret

00083be8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83be8:	defffa04 	addi	sp,sp,-24
   83bec:	dfc00515 	stw	ra,20(sp)
   83bf0:	df000415 	stw	fp,16(sp)
   83bf4:	df000404 	addi	fp,sp,16
   83bf8:	e13ffd15 	stw	r4,-12(fp)
   83bfc:	e17ffe15 	stw	r5,-8(fp)
   83c00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83c04:	e0bffd17 	ldw	r2,-12(fp)
   83c08:	00c00044 	movi	r3,1
   83c0c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83c10:	e0bffd17 	ldw	r2,-12(fp)
   83c14:	10800017 	ldw	r2,0(r2)
   83c18:	10800104 	addi	r2,r2,4
   83c1c:	1007883a 	mov	r3,r2
   83c20:	e0bffd17 	ldw	r2,-12(fp)
   83c24:	10800817 	ldw	r2,32(r2)
   83c28:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83c2c:	e0bffe17 	ldw	r2,-8(fp)
   83c30:	e0ffff17 	ldw	r3,-4(fp)
   83c34:	d8000015 	stw	zero,0(sp)
   83c38:	e1fffd17 	ldw	r7,-12(fp)
   83c3c:	01800234 	movhi	r6,8
   83c40:	318f2a04 	addi	r6,r6,15528
   83c44:	180b883a 	mov	r5,r3
   83c48:	1009883a 	mov	r4,r2
   83c4c:	00848340 	call	84834 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83c50:	e0bffd17 	ldw	r2,-12(fp)
   83c54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83c58:	e0bffd17 	ldw	r2,-12(fp)
   83c5c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83c60:	d0e6b117 	ldw	r3,-25916(gp)
   83c64:	e1fffd17 	ldw	r7,-12(fp)
   83c68:	01800234 	movhi	r6,8
   83c6c:	318fad04 	addi	r6,r6,16052
   83c70:	180b883a 	mov	r5,r3
   83c74:	1009883a 	mov	r4,r2
   83c78:	00844ec0 	call	844ec <alt_alarm_start>
   83c7c:	1000040e 	bge	r2,zero,83c90 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83c80:	e0fffd17 	ldw	r3,-12(fp)
   83c84:	00a00034 	movhi	r2,32768
   83c88:	10bfffc4 	addi	r2,r2,-1
   83c8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83c90:	0001883a 	nop
   83c94:	e037883a 	mov	sp,fp
   83c98:	dfc00117 	ldw	ra,4(sp)
   83c9c:	df000017 	ldw	fp,0(sp)
   83ca0:	dec00204 	addi	sp,sp,8
   83ca4:	f800283a 	ret

00083ca8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83ca8:	defff804 	addi	sp,sp,-32
   83cac:	df000715 	stw	fp,28(sp)
   83cb0:	df000704 	addi	fp,sp,28
   83cb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83cb8:	e0bfff17 	ldw	r2,-4(fp)
   83cbc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   83cc0:	e0bffb17 	ldw	r2,-20(fp)
   83cc4:	10800017 	ldw	r2,0(r2)
   83cc8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83ccc:	e0bffc17 	ldw	r2,-16(fp)
   83cd0:	10800104 	addi	r2,r2,4
   83cd4:	10800037 	ldwio	r2,0(r2)
   83cd8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83cdc:	e0bffd17 	ldw	r2,-12(fp)
   83ce0:	1080c00c 	andi	r2,r2,768
   83ce4:	10006d26 	beq	r2,zero,83e9c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83ce8:	e0bffd17 	ldw	r2,-12(fp)
   83cec:	1080400c 	andi	r2,r2,256
   83cf0:	10003526 	beq	r2,zero,83dc8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83cf4:	00800074 	movhi	r2,1
   83cf8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83cfc:	e0bffb17 	ldw	r2,-20(fp)
   83d00:	10800a17 	ldw	r2,40(r2)
   83d04:	10800044 	addi	r2,r2,1
   83d08:	1081ffcc 	andi	r2,r2,2047
   83d0c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   83d10:	e0bffb17 	ldw	r2,-20(fp)
   83d14:	10c00b17 	ldw	r3,44(r2)
   83d18:	e0bffe17 	ldw	r2,-8(fp)
   83d1c:	18801526 	beq	r3,r2,83d74 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83d20:	e0bffc17 	ldw	r2,-16(fp)
   83d24:	10800037 	ldwio	r2,0(r2)
   83d28:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83d2c:	e0bff917 	ldw	r2,-28(fp)
   83d30:	10a0000c 	andi	r2,r2,32768
   83d34:	10001126 	beq	r2,zero,83d7c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83d38:	e0bffb17 	ldw	r2,-20(fp)
   83d3c:	10800a17 	ldw	r2,40(r2)
   83d40:	e0fff917 	ldw	r3,-28(fp)
   83d44:	1809883a 	mov	r4,r3
   83d48:	e0fffb17 	ldw	r3,-20(fp)
   83d4c:	1885883a 	add	r2,r3,r2
   83d50:	10800e04 	addi	r2,r2,56
   83d54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83d58:	e0bffb17 	ldw	r2,-20(fp)
   83d5c:	10800a17 	ldw	r2,40(r2)
   83d60:	10800044 	addi	r2,r2,1
   83d64:	10c1ffcc 	andi	r3,r2,2047
   83d68:	e0bffb17 	ldw	r2,-20(fp)
   83d6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83d70:	003fe206 	br	83cfc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   83d74:	0001883a 	nop
   83d78:	00000106 	br	83d80 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   83d7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83d80:	e0bff917 	ldw	r2,-28(fp)
   83d84:	10bfffec 	andhi	r2,r2,65535
   83d88:	10000f26 	beq	r2,zero,83dc8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83d8c:	e0bffb17 	ldw	r2,-20(fp)
   83d90:	10c00817 	ldw	r3,32(r2)
   83d94:	00bfff84 	movi	r2,-2
   83d98:	1886703a 	and	r3,r3,r2
   83d9c:	e0bffb17 	ldw	r2,-20(fp)
   83da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83da4:	e0bffc17 	ldw	r2,-16(fp)
   83da8:	10800104 	addi	r2,r2,4
   83dac:	1007883a 	mov	r3,r2
   83db0:	e0bffb17 	ldw	r2,-20(fp)
   83db4:	10800817 	ldw	r2,32(r2)
   83db8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83dbc:	e0bffc17 	ldw	r2,-16(fp)
   83dc0:	10800104 	addi	r2,r2,4
   83dc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83dc8:	e0bffd17 	ldw	r2,-12(fp)
   83dcc:	1080800c 	andi	r2,r2,512
   83dd0:	103fbe26 	beq	r2,zero,83ccc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83dd4:	e0bffd17 	ldw	r2,-12(fp)
   83dd8:	1004d43a 	srli	r2,r2,16
   83ddc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83de0:	00001406 	br	83e34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83de4:	e0bffc17 	ldw	r2,-16(fp)
   83de8:	e0fffb17 	ldw	r3,-20(fp)
   83dec:	18c00d17 	ldw	r3,52(r3)
   83df0:	e13ffb17 	ldw	r4,-20(fp)
   83df4:	20c7883a 	add	r3,r4,r3
   83df8:	18c20e04 	addi	r3,r3,2104
   83dfc:	18c00003 	ldbu	r3,0(r3)
   83e00:	18c03fcc 	andi	r3,r3,255
   83e04:	18c0201c 	xori	r3,r3,128
   83e08:	18ffe004 	addi	r3,r3,-128
   83e0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83e10:	e0bffb17 	ldw	r2,-20(fp)
   83e14:	10800d17 	ldw	r2,52(r2)
   83e18:	10800044 	addi	r2,r2,1
   83e1c:	10c1ffcc 	andi	r3,r2,2047
   83e20:	e0bffb17 	ldw	r2,-20(fp)
   83e24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83e28:	e0bffa17 	ldw	r2,-24(fp)
   83e2c:	10bfffc4 	addi	r2,r2,-1
   83e30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   83e34:	e0bffa17 	ldw	r2,-24(fp)
   83e38:	10000526 	beq	r2,zero,83e50 <altera_avalon_jtag_uart_irq+0x1a8>
   83e3c:	e0bffb17 	ldw	r2,-20(fp)
   83e40:	10c00d17 	ldw	r3,52(r2)
   83e44:	e0bffb17 	ldw	r2,-20(fp)
   83e48:	10800c17 	ldw	r2,48(r2)
   83e4c:	18bfe51e 	bne	r3,r2,83de4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   83e50:	e0bffa17 	ldw	r2,-24(fp)
   83e54:	103f9d26 	beq	r2,zero,83ccc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83e58:	e0bffb17 	ldw	r2,-20(fp)
   83e5c:	10c00817 	ldw	r3,32(r2)
   83e60:	00bfff44 	movi	r2,-3
   83e64:	1886703a 	and	r3,r3,r2
   83e68:	e0bffb17 	ldw	r2,-20(fp)
   83e6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83e70:	e0bffb17 	ldw	r2,-20(fp)
   83e74:	10800017 	ldw	r2,0(r2)
   83e78:	10800104 	addi	r2,r2,4
   83e7c:	1007883a 	mov	r3,r2
   83e80:	e0bffb17 	ldw	r2,-20(fp)
   83e84:	10800817 	ldw	r2,32(r2)
   83e88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83e8c:	e0bffc17 	ldw	r2,-16(fp)
   83e90:	10800104 	addi	r2,r2,4
   83e94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83e98:	003f8c06 	br	83ccc <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   83e9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   83ea0:	0001883a 	nop
   83ea4:	e037883a 	mov	sp,fp
   83ea8:	df000017 	ldw	fp,0(sp)
   83eac:	dec00104 	addi	sp,sp,4
   83eb0:	f800283a 	ret

00083eb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83eb4:	defff804 	addi	sp,sp,-32
   83eb8:	df000715 	stw	fp,28(sp)
   83ebc:	df000704 	addi	fp,sp,28
   83ec0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83ec4:	e0bffb17 	ldw	r2,-20(fp)
   83ec8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83ecc:	e0bff917 	ldw	r2,-28(fp)
   83ed0:	10800017 	ldw	r2,0(r2)
   83ed4:	10800104 	addi	r2,r2,4
   83ed8:	10800037 	ldwio	r2,0(r2)
   83edc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83ee0:	e0bffa17 	ldw	r2,-24(fp)
   83ee4:	1081000c 	andi	r2,r2,1024
   83ee8:	10000b26 	beq	r2,zero,83f18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83eec:	e0bff917 	ldw	r2,-28(fp)
   83ef0:	10800017 	ldw	r2,0(r2)
   83ef4:	10800104 	addi	r2,r2,4
   83ef8:	1007883a 	mov	r3,r2
   83efc:	e0bff917 	ldw	r2,-28(fp)
   83f00:	10800817 	ldw	r2,32(r2)
   83f04:	10810014 	ori	r2,r2,1024
   83f08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   83f0c:	e0bff917 	ldw	r2,-28(fp)
   83f10:	10000915 	stw	zero,36(r2)
   83f14:	00000a06 	br	83f40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83f18:	e0bff917 	ldw	r2,-28(fp)
   83f1c:	10c00917 	ldw	r3,36(r2)
   83f20:	00a00034 	movhi	r2,32768
   83f24:	10bfff04 	addi	r2,r2,-4
   83f28:	10c00536 	bltu	r2,r3,83f40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   83f2c:	e0bff917 	ldw	r2,-28(fp)
   83f30:	10800917 	ldw	r2,36(r2)
   83f34:	10c00044 	addi	r3,r2,1
   83f38:	e0bff917 	ldw	r2,-28(fp)
   83f3c:	10c00915 	stw	r3,36(r2)
   83f40:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   83f44:	e037883a 	mov	sp,fp
   83f48:	df000017 	ldw	fp,0(sp)
   83f4c:	dec00104 	addi	sp,sp,4
   83f50:	f800283a 	ret

00083f54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   83f54:	defffd04 	addi	sp,sp,-12
   83f58:	df000215 	stw	fp,8(sp)
   83f5c:	df000204 	addi	fp,sp,8
   83f60:	e13ffe15 	stw	r4,-8(fp)
   83f64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83f68:	00000506 	br	83f80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   83f6c:	e0bfff17 	ldw	r2,-4(fp)
   83f70:	1090000c 	andi	r2,r2,16384
   83f74:	10000226 	beq	r2,zero,83f80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   83f78:	00bffd44 	movi	r2,-11
   83f7c:	00000b06 	br	83fac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83f80:	e0bffe17 	ldw	r2,-8(fp)
   83f84:	10c00d17 	ldw	r3,52(r2)
   83f88:	e0bffe17 	ldw	r2,-8(fp)
   83f8c:	10800c17 	ldw	r2,48(r2)
   83f90:	18800526 	beq	r3,r2,83fa8 <altera_avalon_jtag_uart_close+0x54>
   83f94:	e0bffe17 	ldw	r2,-8(fp)
   83f98:	10c00917 	ldw	r3,36(r2)
   83f9c:	e0bffe17 	ldw	r2,-8(fp)
   83fa0:	10800117 	ldw	r2,4(r2)
   83fa4:	18bff136 	bltu	r3,r2,83f6c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   83fa8:	0005883a 	mov	r2,zero
}
   83fac:	e037883a 	mov	sp,fp
   83fb0:	df000017 	ldw	fp,0(sp)
   83fb4:	dec00104 	addi	sp,sp,4
   83fb8:	f800283a 	ret

00083fbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   83fbc:	defffa04 	addi	sp,sp,-24
   83fc0:	df000515 	stw	fp,20(sp)
   83fc4:	df000504 	addi	fp,sp,20
   83fc8:	e13ffd15 	stw	r4,-12(fp)
   83fcc:	e17ffe15 	stw	r5,-8(fp)
   83fd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   83fd4:	00bff9c4 	movi	r2,-25
   83fd8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   83fdc:	e0bffe17 	ldw	r2,-8(fp)
   83fe0:	10da8060 	cmpeqi	r3,r2,27137
   83fe4:	1800031e 	bne	r3,zero,83ff4 <altera_avalon_jtag_uart_ioctl+0x38>
   83fe8:	109a80a0 	cmpeqi	r2,r2,27138
   83fec:	1000181e 	bne	r2,zero,84050 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   83ff0:	00002906 	br	84098 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   83ff4:	e0bffd17 	ldw	r2,-12(fp)
   83ff8:	10c00117 	ldw	r3,4(r2)
   83ffc:	00a00034 	movhi	r2,32768
   84000:	10bfffc4 	addi	r2,r2,-1
   84004:	18802126 	beq	r3,r2,8408c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   84008:	e0bfff17 	ldw	r2,-4(fp)
   8400c:	10800017 	ldw	r2,0(r2)
   84010:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   84014:	e0bffc17 	ldw	r2,-16(fp)
   84018:	10800090 	cmplti	r2,r2,2
   8401c:	1000061e 	bne	r2,zero,84038 <altera_avalon_jtag_uart_ioctl+0x7c>
   84020:	e0fffc17 	ldw	r3,-16(fp)
   84024:	00a00034 	movhi	r2,32768
   84028:	10bfffc4 	addi	r2,r2,-1
   8402c:	18800226 	beq	r3,r2,84038 <altera_avalon_jtag_uart_ioctl+0x7c>
   84030:	e0bffc17 	ldw	r2,-16(fp)
   84034:	00000206 	br	84040 <altera_avalon_jtag_uart_ioctl+0x84>
   84038:	00a00034 	movhi	r2,32768
   8403c:	10bfff84 	addi	r2,r2,-2
   84040:	e0fffd17 	ldw	r3,-12(fp)
   84044:	18800115 	stw	r2,4(r3)
      rc = 0;
   84048:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8404c:	00000f06 	br	8408c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84050:	e0bffd17 	ldw	r2,-12(fp)
   84054:	10c00117 	ldw	r3,4(r2)
   84058:	00a00034 	movhi	r2,32768
   8405c:	10bfffc4 	addi	r2,r2,-1
   84060:	18800c26 	beq	r3,r2,84094 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   84064:	e0bffd17 	ldw	r2,-12(fp)
   84068:	10c00917 	ldw	r3,36(r2)
   8406c:	e0bffd17 	ldw	r2,-12(fp)
   84070:	10800117 	ldw	r2,4(r2)
   84074:	1885803a 	cmpltu	r2,r3,r2
   84078:	10c03fcc 	andi	r3,r2,255
   8407c:	e0bfff17 	ldw	r2,-4(fp)
   84080:	10c00015 	stw	r3,0(r2)
      rc = 0;
   84084:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   84088:	00000206 	br	84094 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8408c:	0001883a 	nop
   84090:	00000106 	br	84098 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   84094:	0001883a 	nop

  default:
    break;
  }

  return rc;
   84098:	e0bffb17 	ldw	r2,-20(fp)
}
   8409c:	e037883a 	mov	sp,fp
   840a0:	df000017 	ldw	fp,0(sp)
   840a4:	dec00104 	addi	sp,sp,4
   840a8:	f800283a 	ret

000840ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   840ac:	defff304 	addi	sp,sp,-52
   840b0:	dfc00c15 	stw	ra,48(sp)
   840b4:	df000b15 	stw	fp,44(sp)
   840b8:	df000b04 	addi	fp,sp,44
   840bc:	e13ffc15 	stw	r4,-16(fp)
   840c0:	e17ffd15 	stw	r5,-12(fp)
   840c4:	e1bffe15 	stw	r6,-8(fp)
   840c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   840cc:	e0bffd17 	ldw	r2,-12(fp)
   840d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   840d4:	00004706 	br	841f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   840d8:	e0bffc17 	ldw	r2,-16(fp)
   840dc:	10800a17 	ldw	r2,40(r2)
   840e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   840e4:	e0bffc17 	ldw	r2,-16(fp)
   840e8:	10800b17 	ldw	r2,44(r2)
   840ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   840f0:	e0fff717 	ldw	r3,-36(fp)
   840f4:	e0bff817 	ldw	r2,-32(fp)
   840f8:	18800536 	bltu	r3,r2,84110 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   840fc:	e0fff717 	ldw	r3,-36(fp)
   84100:	e0bff817 	ldw	r2,-32(fp)
   84104:	1885c83a 	sub	r2,r3,r2
   84108:	e0bff615 	stw	r2,-40(fp)
   8410c:	00000406 	br	84120 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   84110:	00c20004 	movi	r3,2048
   84114:	e0bff817 	ldw	r2,-32(fp)
   84118:	1885c83a 	sub	r2,r3,r2
   8411c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84120:	e0bff617 	ldw	r2,-40(fp)
   84124:	10001e26 	beq	r2,zero,841a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   84128:	e0fffe17 	ldw	r3,-8(fp)
   8412c:	e0bff617 	ldw	r2,-40(fp)
   84130:	1880022e 	bgeu	r3,r2,8413c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   84134:	e0bffe17 	ldw	r2,-8(fp)
   84138:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8413c:	e0bffc17 	ldw	r2,-16(fp)
   84140:	10c00e04 	addi	r3,r2,56
   84144:	e0bff817 	ldw	r2,-32(fp)
   84148:	1885883a 	add	r2,r3,r2
   8414c:	e1bff617 	ldw	r6,-40(fp)
   84150:	100b883a 	mov	r5,r2
   84154:	e13ff517 	ldw	r4,-44(fp)
   84158:	00817040 	call	81704 <memcpy>
      ptr   += n;
   8415c:	e0fff517 	ldw	r3,-44(fp)
   84160:	e0bff617 	ldw	r2,-40(fp)
   84164:	1885883a 	add	r2,r3,r2
   84168:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8416c:	e0fffe17 	ldw	r3,-8(fp)
   84170:	e0bff617 	ldw	r2,-40(fp)
   84174:	1885c83a 	sub	r2,r3,r2
   84178:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8417c:	e0fff817 	ldw	r3,-32(fp)
   84180:	e0bff617 	ldw	r2,-40(fp)
   84184:	1885883a 	add	r2,r3,r2
   84188:	10c1ffcc 	andi	r3,r2,2047
   8418c:	e0bffc17 	ldw	r2,-16(fp)
   84190:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   84194:	e0bffe17 	ldw	r2,-8(fp)
   84198:	00bfcf16 	blt	zero,r2,840d8 <altera_avalon_jtag_uart_read+0x2c>
   8419c:	00000106 	br	841a4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   841a0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   841a4:	e0fff517 	ldw	r3,-44(fp)
   841a8:	e0bffd17 	ldw	r2,-12(fp)
   841ac:	1880141e 	bne	r3,r2,84200 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   841b0:	e0bfff17 	ldw	r2,-4(fp)
   841b4:	1090000c 	andi	r2,r2,16384
   841b8:	1000131e 	bne	r2,zero,84208 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   841bc:	0001883a 	nop
   841c0:	e0bffc17 	ldw	r2,-16(fp)
   841c4:	10c00a17 	ldw	r3,40(r2)
   841c8:	e0bff717 	ldw	r2,-36(fp)
   841cc:	1880051e 	bne	r3,r2,841e4 <altera_avalon_jtag_uart_read+0x138>
   841d0:	e0bffc17 	ldw	r2,-16(fp)
   841d4:	10c00917 	ldw	r3,36(r2)
   841d8:	e0bffc17 	ldw	r2,-16(fp)
   841dc:	10800117 	ldw	r2,4(r2)
   841e0:	18bff736 	bltu	r3,r2,841c0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   841e4:	e0bffc17 	ldw	r2,-16(fp)
   841e8:	10c00a17 	ldw	r3,40(r2)
   841ec:	e0bff717 	ldw	r2,-36(fp)
   841f0:	18800726 	beq	r3,r2,84210 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   841f4:	e0bffe17 	ldw	r2,-8(fp)
   841f8:	00bfb716 	blt	zero,r2,840d8 <altera_avalon_jtag_uart_read+0x2c>
   841fc:	00000506 	br	84214 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   84200:	0001883a 	nop
   84204:	00000306 	br	84214 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   84208:	0001883a 	nop
   8420c:	00000106 	br	84214 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   84210:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   84214:	e0fff517 	ldw	r3,-44(fp)
   84218:	e0bffd17 	ldw	r2,-12(fp)
   8421c:	18801826 	beq	r3,r2,84280 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84220:	0005303a 	rdctl	r2,status
   84224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84228:	e0fffb17 	ldw	r3,-20(fp)
   8422c:	00bfff84 	movi	r2,-2
   84230:	1884703a 	and	r2,r3,r2
   84234:	1001703a 	wrctl	status,r2
  
  return context;
   84238:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8423c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84240:	e0bffc17 	ldw	r2,-16(fp)
   84244:	10800817 	ldw	r2,32(r2)
   84248:	10c00054 	ori	r3,r2,1
   8424c:	e0bffc17 	ldw	r2,-16(fp)
   84250:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84254:	e0bffc17 	ldw	r2,-16(fp)
   84258:	10800017 	ldw	r2,0(r2)
   8425c:	10800104 	addi	r2,r2,4
   84260:	1007883a 	mov	r3,r2
   84264:	e0bffc17 	ldw	r2,-16(fp)
   84268:	10800817 	ldw	r2,32(r2)
   8426c:	18800035 	stwio	r2,0(r3)
   84270:	e0bffa17 	ldw	r2,-24(fp)
   84274:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84278:	e0bff917 	ldw	r2,-28(fp)
   8427c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   84280:	e0fff517 	ldw	r3,-44(fp)
   84284:	e0bffd17 	ldw	r2,-12(fp)
   84288:	18800426 	beq	r3,r2,8429c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8428c:	e0fff517 	ldw	r3,-44(fp)
   84290:	e0bffd17 	ldw	r2,-12(fp)
   84294:	1885c83a 	sub	r2,r3,r2
   84298:	00000606 	br	842b4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8429c:	e0bfff17 	ldw	r2,-4(fp)
   842a0:	1090000c 	andi	r2,r2,16384
   842a4:	10000226 	beq	r2,zero,842b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   842a8:	00bffd44 	movi	r2,-11
   842ac:	00000106 	br	842b4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   842b0:	00bffec4 	movi	r2,-5
}
   842b4:	e037883a 	mov	sp,fp
   842b8:	dfc00117 	ldw	ra,4(sp)
   842bc:	df000017 	ldw	fp,0(sp)
   842c0:	dec00204 	addi	sp,sp,8
   842c4:	f800283a 	ret

000842c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   842c8:	defff304 	addi	sp,sp,-52
   842cc:	dfc00c15 	stw	ra,48(sp)
   842d0:	df000b15 	stw	fp,44(sp)
   842d4:	df000b04 	addi	fp,sp,44
   842d8:	e13ffc15 	stw	r4,-16(fp)
   842dc:	e17ffd15 	stw	r5,-12(fp)
   842e0:	e1bffe15 	stw	r6,-8(fp)
   842e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   842e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   842ec:	e0bffd17 	ldw	r2,-12(fp)
   842f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   842f4:	00003706 	br	843d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   842f8:	e0bffc17 	ldw	r2,-16(fp)
   842fc:	10800c17 	ldw	r2,48(r2)
   84300:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   84304:	e0bffc17 	ldw	r2,-16(fp)
   84308:	10800d17 	ldw	r2,52(r2)
   8430c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   84310:	e0fff917 	ldw	r3,-28(fp)
   84314:	e0bff517 	ldw	r2,-44(fp)
   84318:	1880062e 	bgeu	r3,r2,84334 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8431c:	e0fff517 	ldw	r3,-44(fp)
   84320:	e0bff917 	ldw	r2,-28(fp)
   84324:	1885c83a 	sub	r2,r3,r2
   84328:	10bfffc4 	addi	r2,r2,-1
   8432c:	e0bff615 	stw	r2,-40(fp)
   84330:	00000b06 	br	84360 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   84334:	e0bff517 	ldw	r2,-44(fp)
   84338:	10000526 	beq	r2,zero,84350 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8433c:	00c20004 	movi	r3,2048
   84340:	e0bff917 	ldw	r2,-28(fp)
   84344:	1885c83a 	sub	r2,r3,r2
   84348:	e0bff615 	stw	r2,-40(fp)
   8434c:	00000406 	br	84360 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84350:	00c1ffc4 	movi	r3,2047
   84354:	e0bff917 	ldw	r2,-28(fp)
   84358:	1885c83a 	sub	r2,r3,r2
   8435c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84360:	e0bff617 	ldw	r2,-40(fp)
   84364:	10001e26 	beq	r2,zero,843e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   84368:	e0fffe17 	ldw	r3,-8(fp)
   8436c:	e0bff617 	ldw	r2,-40(fp)
   84370:	1880022e 	bgeu	r3,r2,8437c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   84374:	e0bffe17 	ldw	r2,-8(fp)
   84378:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8437c:	e0bffc17 	ldw	r2,-16(fp)
   84380:	10c20e04 	addi	r3,r2,2104
   84384:	e0bff917 	ldw	r2,-28(fp)
   84388:	1885883a 	add	r2,r3,r2
   8438c:	e1bff617 	ldw	r6,-40(fp)
   84390:	e17ffd17 	ldw	r5,-12(fp)
   84394:	1009883a 	mov	r4,r2
   84398:	00817040 	call	81704 <memcpy>
      ptr   += n;
   8439c:	e0fffd17 	ldw	r3,-12(fp)
   843a0:	e0bff617 	ldw	r2,-40(fp)
   843a4:	1885883a 	add	r2,r3,r2
   843a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   843ac:	e0fffe17 	ldw	r3,-8(fp)
   843b0:	e0bff617 	ldw	r2,-40(fp)
   843b4:	1885c83a 	sub	r2,r3,r2
   843b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   843bc:	e0fff917 	ldw	r3,-28(fp)
   843c0:	e0bff617 	ldw	r2,-40(fp)
   843c4:	1885883a 	add	r2,r3,r2
   843c8:	10c1ffcc 	andi	r3,r2,2047
   843cc:	e0bffc17 	ldw	r2,-16(fp)
   843d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   843d4:	e0bffe17 	ldw	r2,-8(fp)
   843d8:	00bfc716 	blt	zero,r2,842f8 <altera_avalon_jtag_uart_write+0x30>
   843dc:	00000106 	br	843e4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   843e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   843e4:	0005303a 	rdctl	r2,status
   843e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   843ec:	e0fffb17 	ldw	r3,-20(fp)
   843f0:	00bfff84 	movi	r2,-2
   843f4:	1884703a 	and	r2,r3,r2
   843f8:	1001703a 	wrctl	status,r2
  
  return context;
   843fc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   84400:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84404:	e0bffc17 	ldw	r2,-16(fp)
   84408:	10800817 	ldw	r2,32(r2)
   8440c:	10c00094 	ori	r3,r2,2
   84410:	e0bffc17 	ldw	r2,-16(fp)
   84414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84418:	e0bffc17 	ldw	r2,-16(fp)
   8441c:	10800017 	ldw	r2,0(r2)
   84420:	10800104 	addi	r2,r2,4
   84424:	1007883a 	mov	r3,r2
   84428:	e0bffc17 	ldw	r2,-16(fp)
   8442c:	10800817 	ldw	r2,32(r2)
   84430:	18800035 	stwio	r2,0(r3)
   84434:	e0bffa17 	ldw	r2,-24(fp)
   84438:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8443c:	e0bff817 	ldw	r2,-32(fp)
   84440:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   84444:	e0bffe17 	ldw	r2,-8(fp)
   84448:	0080100e 	bge	zero,r2,8448c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8444c:	e0bfff17 	ldw	r2,-4(fp)
   84450:	1090000c 	andi	r2,r2,16384
   84454:	1000101e 	bne	r2,zero,84498 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   84458:	0001883a 	nop
   8445c:	e0bffc17 	ldw	r2,-16(fp)
   84460:	10c00d17 	ldw	r3,52(r2)
   84464:	e0bff517 	ldw	r2,-44(fp)
   84468:	1880051e 	bne	r3,r2,84480 <altera_avalon_jtag_uart_write+0x1b8>
   8446c:	e0bffc17 	ldw	r2,-16(fp)
   84470:	10c00917 	ldw	r3,36(r2)
   84474:	e0bffc17 	ldw	r2,-16(fp)
   84478:	10800117 	ldw	r2,4(r2)
   8447c:	18bff736 	bltu	r3,r2,8445c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   84480:	e0bffc17 	ldw	r2,-16(fp)
   84484:	10800917 	ldw	r2,36(r2)
   84488:	1000051e 	bne	r2,zero,844a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8448c:	e0bffe17 	ldw	r2,-8(fp)
   84490:	00bfd016 	blt	zero,r2,843d4 <altera_avalon_jtag_uart_write+0x10c>
   84494:	00000306 	br	844a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   84498:	0001883a 	nop
   8449c:	00000106 	br	844a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   844a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   844a4:	e0fffd17 	ldw	r3,-12(fp)
   844a8:	e0bff717 	ldw	r2,-36(fp)
   844ac:	18800426 	beq	r3,r2,844c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   844b0:	e0fffd17 	ldw	r3,-12(fp)
   844b4:	e0bff717 	ldw	r2,-36(fp)
   844b8:	1885c83a 	sub	r2,r3,r2
   844bc:	00000606 	br	844d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   844c0:	e0bfff17 	ldw	r2,-4(fp)
   844c4:	1090000c 	andi	r2,r2,16384
   844c8:	10000226 	beq	r2,zero,844d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   844cc:	00bffd44 	movi	r2,-11
   844d0:	00000106 	br	844d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   844d4:	00bffec4 	movi	r2,-5
}
   844d8:	e037883a 	mov	sp,fp
   844dc:	dfc00117 	ldw	ra,4(sp)
   844e0:	df000017 	ldw	fp,0(sp)
   844e4:	dec00204 	addi	sp,sp,8
   844e8:	f800283a 	ret

000844ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   844ec:	defff504 	addi	sp,sp,-44
   844f0:	df000a15 	stw	fp,40(sp)
   844f4:	df000a04 	addi	fp,sp,40
   844f8:	e13ffc15 	stw	r4,-16(fp)
   844fc:	e17ffd15 	stw	r5,-12(fp)
   84500:	e1bffe15 	stw	r6,-8(fp)
   84504:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   84508:	e03ff615 	stw	zero,-40(fp)
   8450c:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   84510:	10003c26 	beq	r2,zero,84604 <alt_alarm_start+0x118>
  {
    if (alarm)
   84514:	e0bffc17 	ldw	r2,-16(fp)
   84518:	10003826 	beq	r2,zero,845fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   8451c:	e0bffc17 	ldw	r2,-16(fp)
   84520:	e0fffe17 	ldw	r3,-8(fp)
   84524:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   84528:	e0bffc17 	ldw	r2,-16(fp)
   8452c:	e0ffff17 	ldw	r3,-4(fp)
   84530:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84534:	0005303a 	rdctl	r2,status
   84538:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8453c:	e0fff917 	ldw	r3,-28(fp)
   84540:	00bfff84 	movi	r2,-2
   84544:	1884703a 	and	r2,r3,r2
   84548:	1001703a 	wrctl	status,r2
  
  return context;
   8454c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   84550:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84554:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
   84558:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8455c:	e0fffd17 	ldw	r3,-12(fp)
   84560:	e0bff617 	ldw	r2,-40(fp)
   84564:	1885883a 	add	r2,r3,r2
   84568:	10c00044 	addi	r3,r2,1
   8456c:	e0bffc17 	ldw	r2,-16(fp)
   84570:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   84574:	e0bffc17 	ldw	r2,-16(fp)
   84578:	10c00217 	ldw	r3,8(r2)
   8457c:	e0bff617 	ldw	r2,-40(fp)
   84580:	1880042e 	bgeu	r3,r2,84594 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   84584:	e0bffc17 	ldw	r2,-16(fp)
   84588:	00c00044 	movi	r3,1
   8458c:	10c00405 	stb	r3,16(r2)
   84590:	00000206 	br	8459c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   84594:	e0bffc17 	ldw	r2,-16(fp)
   84598:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8459c:	e0bffc17 	ldw	r2,-16(fp)
   845a0:	d0e00c04 	addi	r3,gp,-32720
   845a4:	e0fffa15 	stw	r3,-24(fp)
   845a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   845ac:	e0bffb17 	ldw	r2,-20(fp)
   845b0:	e0fffa17 	ldw	r3,-24(fp)
   845b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   845b8:	e0bffa17 	ldw	r2,-24(fp)
   845bc:	10c00017 	ldw	r3,0(r2)
   845c0:	e0bffb17 	ldw	r2,-20(fp)
   845c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   845c8:	e0bffa17 	ldw	r2,-24(fp)
   845cc:	10800017 	ldw	r2,0(r2)
   845d0:	e0fffb17 	ldw	r3,-20(fp)
   845d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   845d8:	e0bffa17 	ldw	r2,-24(fp)
   845dc:	e0fffb17 	ldw	r3,-20(fp)
   845e0:	10c00015 	stw	r3,0(r2)
   845e4:	e0bff817 	ldw	r2,-32(fp)
   845e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   845ec:	e0bff717 	ldw	r2,-36(fp)
   845f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   845f4:	0005883a 	mov	r2,zero
   845f8:	00000306 	br	84608 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   845fc:	00bffa84 	movi	r2,-22
   84600:	00000106 	br	84608 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   84604:	00bfde84 	movi	r2,-134
  }
}
   84608:	e037883a 	mov	sp,fp
   8460c:	df000017 	ldw	fp,0(sp)
   84610:	dec00104 	addi	sp,sp,4
   84614:	f800283a 	ret

00084618 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   84618:	defffe04 	addi	sp,sp,-8
   8461c:	df000115 	stw	fp,4(sp)
   84620:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   84624:	e03fff15 	stw	zero,-4(fp)
   84628:	00000506 	br	84640 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8462c:	e0bfff17 	ldw	r2,-4(fp)
   84630:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   84634:	e0bfff17 	ldw	r2,-4(fp)
   84638:	10800804 	addi	r2,r2,32
   8463c:	e0bfff15 	stw	r2,-4(fp)
   84640:	e0bfff17 	ldw	r2,-4(fp)
   84644:	10820030 	cmpltui	r2,r2,2048
   84648:	103ff81e 	bne	r2,zero,8462c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8464c:	0001883a 	nop
   84650:	e037883a 	mov	sp,fp
   84654:	df000017 	ldw	fp,0(sp)
   84658:	dec00104 	addi	sp,sp,4
   8465c:	f800283a 	ret

00084660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84660:	defffe04 	addi	sp,sp,-8
   84664:	dfc00115 	stw	ra,4(sp)
   84668:	df000015 	stw	fp,0(sp)
   8466c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84670:	d0a00917 	ldw	r2,-32732(gp)
   84674:	10000326 	beq	r2,zero,84684 <alt_get_errno+0x24>
   84678:	d0a00917 	ldw	r2,-32732(gp)
   8467c:	103ee83a 	callr	r2
   84680:	00000106 	br	84688 <alt_get_errno+0x28>
   84684:	d0a6ac04 	addi	r2,gp,-25936
}
   84688:	e037883a 	mov	sp,fp
   8468c:	dfc00117 	ldw	ra,4(sp)
   84690:	df000017 	ldw	fp,0(sp)
   84694:	dec00204 	addi	sp,sp,8
   84698:	f800283a 	ret

0008469c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8469c:	defffa04 	addi	sp,sp,-24
   846a0:	dfc00515 	stw	ra,20(sp)
   846a4:	df000415 	stw	fp,16(sp)
   846a8:	df000404 	addi	fp,sp,16
   846ac:	e13ffe15 	stw	r4,-8(fp)
   846b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   846b4:	e0bffe17 	ldw	r2,-8(fp)
   846b8:	10000326 	beq	r2,zero,846c8 <alt_dev_llist_insert+0x2c>
   846bc:	e0bffe17 	ldw	r2,-8(fp)
   846c0:	10800217 	ldw	r2,8(r2)
   846c4:	1000061e 	bne	r2,zero,846e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   846c8:	00846600 	call	84660 <alt_get_errno>
   846cc:	1007883a 	mov	r3,r2
   846d0:	00800584 	movi	r2,22
   846d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   846d8:	00bffa84 	movi	r2,-22
   846dc:	00001306 	br	8472c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   846e0:	e0bffe17 	ldw	r2,-8(fp)
   846e4:	e0ffff17 	ldw	r3,-4(fp)
   846e8:	e0fffc15 	stw	r3,-16(fp)
   846ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   846f0:	e0bffd17 	ldw	r2,-12(fp)
   846f4:	e0fffc17 	ldw	r3,-16(fp)
   846f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   846fc:	e0bffc17 	ldw	r2,-16(fp)
   84700:	10c00017 	ldw	r3,0(r2)
   84704:	e0bffd17 	ldw	r2,-12(fp)
   84708:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8470c:	e0bffc17 	ldw	r2,-16(fp)
   84710:	10800017 	ldw	r2,0(r2)
   84714:	e0fffd17 	ldw	r3,-12(fp)
   84718:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8471c:	e0bffc17 	ldw	r2,-16(fp)
   84720:	e0fffd17 	ldw	r3,-12(fp)
   84724:	10c00015 	stw	r3,0(r2)

  return 0;  
   84728:	0005883a 	mov	r2,zero
}
   8472c:	e037883a 	mov	sp,fp
   84730:	dfc00117 	ldw	ra,4(sp)
   84734:	df000017 	ldw	fp,0(sp)
   84738:	dec00204 	addi	sp,sp,8
   8473c:	f800283a 	ret

00084740 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84740:	defffd04 	addi	sp,sp,-12
   84744:	dfc00215 	stw	ra,8(sp)
   84748:	df000115 	stw	fp,4(sp)
   8474c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84750:	00800234 	movhi	r2,8
   84754:	1095ca04 	addi	r2,r2,22312
   84758:	e0bfff15 	stw	r2,-4(fp)
   8475c:	00000606 	br	84778 <_do_ctors+0x38>
        (*ctor) (); 
   84760:	e0bfff17 	ldw	r2,-4(fp)
   84764:	10800017 	ldw	r2,0(r2)
   84768:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8476c:	e0bfff17 	ldw	r2,-4(fp)
   84770:	10bfff04 	addi	r2,r2,-4
   84774:	e0bfff15 	stw	r2,-4(fp)
   84778:	e0ffff17 	ldw	r3,-4(fp)
   8477c:	00800234 	movhi	r2,8
   84780:	1095cb04 	addi	r2,r2,22316
   84784:	18bff62e 	bgeu	r3,r2,84760 <_do_ctors+0x20>
        (*ctor) (); 
}
   84788:	0001883a 	nop
   8478c:	e037883a 	mov	sp,fp
   84790:	dfc00117 	ldw	ra,4(sp)
   84794:	df000017 	ldw	fp,0(sp)
   84798:	dec00204 	addi	sp,sp,8
   8479c:	f800283a 	ret

000847a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   847a0:	defffd04 	addi	sp,sp,-12
   847a4:	dfc00215 	stw	ra,8(sp)
   847a8:	df000115 	stw	fp,4(sp)
   847ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   847b0:	00800234 	movhi	r2,8
   847b4:	1095ca04 	addi	r2,r2,22312
   847b8:	e0bfff15 	stw	r2,-4(fp)
   847bc:	00000606 	br	847d8 <_do_dtors+0x38>
        (*dtor) (); 
   847c0:	e0bfff17 	ldw	r2,-4(fp)
   847c4:	10800017 	ldw	r2,0(r2)
   847c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   847cc:	e0bfff17 	ldw	r2,-4(fp)
   847d0:	10bfff04 	addi	r2,r2,-4
   847d4:	e0bfff15 	stw	r2,-4(fp)
   847d8:	e0ffff17 	ldw	r3,-4(fp)
   847dc:	00800234 	movhi	r2,8
   847e0:	1095cb04 	addi	r2,r2,22316
   847e4:	18bff62e 	bgeu	r3,r2,847c0 <_do_dtors+0x20>
        (*dtor) (); 
}
   847e8:	0001883a 	nop
   847ec:	e037883a 	mov	sp,fp
   847f0:	dfc00117 	ldw	ra,4(sp)
   847f4:	df000017 	ldw	fp,0(sp)
   847f8:	dec00204 	addi	sp,sp,8
   847fc:	f800283a 	ret

00084800 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84800:	defffe04 	addi	sp,sp,-8
   84804:	dfc00115 	stw	ra,4(sp)
   84808:	df000015 	stw	fp,0(sp)
   8480c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   84810:	01440004 	movi	r5,4096
   84814:	0009883a 	mov	r4,zero
   84818:	008526c0 	call	8526c <alt_icache_flush>
#endif
}
   8481c:	0001883a 	nop
   84820:	e037883a 	mov	sp,fp
   84824:	dfc00117 	ldw	ra,4(sp)
   84828:	df000017 	ldw	fp,0(sp)
   8482c:	dec00204 	addi	sp,sp,8
   84830:	f800283a 	ret

00084834 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84834:	defff904 	addi	sp,sp,-28
   84838:	dfc00615 	stw	ra,24(sp)
   8483c:	df000515 	stw	fp,20(sp)
   84840:	df000504 	addi	fp,sp,20
   84844:	e13ffc15 	stw	r4,-16(fp)
   84848:	e17ffd15 	stw	r5,-12(fp)
   8484c:	e1bffe15 	stw	r6,-8(fp)
   84850:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   84854:	e0800217 	ldw	r2,8(fp)
   84858:	d8800015 	stw	r2,0(sp)
   8485c:	e1ffff17 	ldw	r7,-4(fp)
   84860:	e1bffe17 	ldw	r6,-8(fp)
   84864:	e17ffd17 	ldw	r5,-12(fp)
   84868:	e13ffc17 	ldw	r4,-16(fp)
   8486c:	00849e40 	call	849e4 <alt_iic_isr_register>
}  
   84870:	e037883a 	mov	sp,fp
   84874:	dfc00117 	ldw	ra,4(sp)
   84878:	df000017 	ldw	fp,0(sp)
   8487c:	dec00204 	addi	sp,sp,8
   84880:	f800283a 	ret

00084884 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   84884:	defff904 	addi	sp,sp,-28
   84888:	df000615 	stw	fp,24(sp)
   8488c:	df000604 	addi	fp,sp,24
   84890:	e13ffe15 	stw	r4,-8(fp)
   84894:	e17fff15 	stw	r5,-4(fp)
   84898:	e0bfff17 	ldw	r2,-4(fp)
   8489c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   848a0:	0005303a 	rdctl	r2,status
   848a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   848a8:	e0fffb17 	ldw	r3,-20(fp)
   848ac:	00bfff84 	movi	r2,-2
   848b0:	1884703a 	and	r2,r3,r2
   848b4:	1001703a 	wrctl	status,r2
  
  return context;
   848b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   848bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   848c0:	00c00044 	movi	r3,1
   848c4:	e0bffa17 	ldw	r2,-24(fp)
   848c8:	1884983a 	sll	r2,r3,r2
   848cc:	1007883a 	mov	r3,r2
   848d0:	d0a6b017 	ldw	r2,-25920(gp)
   848d4:	1884b03a 	or	r2,r3,r2
   848d8:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   848dc:	d0a6b017 	ldw	r2,-25920(gp)
   848e0:	100170fa 	wrctl	ienable,r2
   848e4:	e0bffc17 	ldw	r2,-16(fp)
   848e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   848ec:	e0bffd17 	ldw	r2,-12(fp)
   848f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   848f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   848f8:	0001883a 	nop
}
   848fc:	e037883a 	mov	sp,fp
   84900:	df000017 	ldw	fp,0(sp)
   84904:	dec00104 	addi	sp,sp,4
   84908:	f800283a 	ret

0008490c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8490c:	defff904 	addi	sp,sp,-28
   84910:	df000615 	stw	fp,24(sp)
   84914:	df000604 	addi	fp,sp,24
   84918:	e13ffe15 	stw	r4,-8(fp)
   8491c:	e17fff15 	stw	r5,-4(fp)
   84920:	e0bfff17 	ldw	r2,-4(fp)
   84924:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84928:	0005303a 	rdctl	r2,status
   8492c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84930:	e0fffb17 	ldw	r3,-20(fp)
   84934:	00bfff84 	movi	r2,-2
   84938:	1884703a 	and	r2,r3,r2
   8493c:	1001703a 	wrctl	status,r2
  
  return context;
   84940:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84944:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   84948:	00c00044 	movi	r3,1
   8494c:	e0bffa17 	ldw	r2,-24(fp)
   84950:	1884983a 	sll	r2,r3,r2
   84954:	0084303a 	nor	r2,zero,r2
   84958:	1007883a 	mov	r3,r2
   8495c:	d0a6b017 	ldw	r2,-25920(gp)
   84960:	1884703a 	and	r2,r3,r2
   84964:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84968:	d0a6b017 	ldw	r2,-25920(gp)
   8496c:	100170fa 	wrctl	ienable,r2
   84970:	e0bffc17 	ldw	r2,-16(fp)
   84974:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84978:	e0bffd17 	ldw	r2,-12(fp)
   8497c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84980:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   84984:	0001883a 	nop
}
   84988:	e037883a 	mov	sp,fp
   8498c:	df000017 	ldw	fp,0(sp)
   84990:	dec00104 	addi	sp,sp,4
   84994:	f800283a 	ret

00084998 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   84998:	defffc04 	addi	sp,sp,-16
   8499c:	df000315 	stw	fp,12(sp)
   849a0:	df000304 	addi	fp,sp,12
   849a4:	e13ffe15 	stw	r4,-8(fp)
   849a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   849ac:	000530fa 	rdctl	r2,ienable
   849b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   849b4:	00c00044 	movi	r3,1
   849b8:	e0bfff17 	ldw	r2,-4(fp)
   849bc:	1884983a 	sll	r2,r3,r2
   849c0:	1007883a 	mov	r3,r2
   849c4:	e0bffd17 	ldw	r2,-12(fp)
   849c8:	1884703a 	and	r2,r3,r2
   849cc:	1004c03a 	cmpne	r2,r2,zero
   849d0:	10803fcc 	andi	r2,r2,255
}
   849d4:	e037883a 	mov	sp,fp
   849d8:	df000017 	ldw	fp,0(sp)
   849dc:	dec00104 	addi	sp,sp,4
   849e0:	f800283a 	ret

000849e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   849e4:	defff504 	addi	sp,sp,-44
   849e8:	dfc00a15 	stw	ra,40(sp)
   849ec:	df000915 	stw	fp,36(sp)
   849f0:	df000904 	addi	fp,sp,36
   849f4:	e13ffc15 	stw	r4,-16(fp)
   849f8:	e17ffd15 	stw	r5,-12(fp)
   849fc:	e1bffe15 	stw	r6,-8(fp)
   84a00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   84a04:	00bffa84 	movi	r2,-22
   84a08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   84a0c:	e0bffd17 	ldw	r2,-12(fp)
   84a10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   84a14:	e0bff817 	ldw	r2,-32(fp)
   84a18:	10800808 	cmpgei	r2,r2,32
   84a1c:	1000271e 	bne	r2,zero,84abc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84a20:	0005303a 	rdctl	r2,status
   84a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a28:	e0fffb17 	ldw	r3,-20(fp)
   84a2c:	00bfff84 	movi	r2,-2
   84a30:	1884703a 	and	r2,r3,r2
   84a34:	1001703a 	wrctl	status,r2
  
  return context;
   84a38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   84a3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   84a40:	00800274 	movhi	r2,9
   84a44:	10a32a04 	addi	r2,r2,-29528
   84a48:	e0fff817 	ldw	r3,-32(fp)
   84a4c:	180690fa 	slli	r3,r3,3
   84a50:	10c5883a 	add	r2,r2,r3
   84a54:	e0fffe17 	ldw	r3,-8(fp)
   84a58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   84a5c:	00800274 	movhi	r2,9
   84a60:	10a32a04 	addi	r2,r2,-29528
   84a64:	e0fff817 	ldw	r3,-32(fp)
   84a68:	180690fa 	slli	r3,r3,3
   84a6c:	10c5883a 	add	r2,r2,r3
   84a70:	10800104 	addi	r2,r2,4
   84a74:	e0ffff17 	ldw	r3,-4(fp)
   84a78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   84a7c:	e0bffe17 	ldw	r2,-8(fp)
   84a80:	10000526 	beq	r2,zero,84a98 <alt_iic_isr_register+0xb4>
   84a84:	e0bff817 	ldw	r2,-32(fp)
   84a88:	100b883a 	mov	r5,r2
   84a8c:	e13ffc17 	ldw	r4,-16(fp)
   84a90:	00848840 	call	84884 <alt_ic_irq_enable>
   84a94:	00000406 	br	84aa8 <alt_iic_isr_register+0xc4>
   84a98:	e0bff817 	ldw	r2,-32(fp)
   84a9c:	100b883a 	mov	r5,r2
   84aa0:	e13ffc17 	ldw	r4,-16(fp)
   84aa4:	008490c0 	call	8490c <alt_ic_irq_disable>
   84aa8:	e0bff715 	stw	r2,-36(fp)
   84aac:	e0bffa17 	ldw	r2,-24(fp)
   84ab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84ab4:	e0bff917 	ldw	r2,-28(fp)
   84ab8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   84abc:	e0bff717 	ldw	r2,-36(fp)
}
   84ac0:	e037883a 	mov	sp,fp
   84ac4:	dfc00117 	ldw	ra,4(sp)
   84ac8:	df000017 	ldw	fp,0(sp)
   84acc:	dec00204 	addi	sp,sp,8
   84ad0:	f800283a 	ret

00084ad4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84ad4:	defff904 	addi	sp,sp,-28
   84ad8:	dfc00615 	stw	ra,24(sp)
   84adc:	df000515 	stw	fp,20(sp)
   84ae0:	df000504 	addi	fp,sp,20
   84ae4:	e13ffc15 	stw	r4,-16(fp)
   84ae8:	e17ffd15 	stw	r5,-12(fp)
   84aec:	e1bffe15 	stw	r6,-8(fp)
   84af0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   84af4:	e1bfff17 	ldw	r6,-4(fp)
   84af8:	e17ffe17 	ldw	r5,-8(fp)
   84afc:	e13ffd17 	ldw	r4,-12(fp)
   84b00:	0084d140 	call	84d14 <open>
   84b04:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   84b08:	e0bffb17 	ldw	r2,-20(fp)
   84b0c:	10001c16 	blt	r2,zero,84b80 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   84b10:	00800234 	movhi	r2,8
   84b14:	1097f404 	addi	r2,r2,24528
   84b18:	e0fffb17 	ldw	r3,-20(fp)
   84b1c:	18c00324 	muli	r3,r3,12
   84b20:	10c5883a 	add	r2,r2,r3
   84b24:	10c00017 	ldw	r3,0(r2)
   84b28:	e0bffc17 	ldw	r2,-16(fp)
   84b2c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   84b30:	00800234 	movhi	r2,8
   84b34:	1097f404 	addi	r2,r2,24528
   84b38:	e0fffb17 	ldw	r3,-20(fp)
   84b3c:	18c00324 	muli	r3,r3,12
   84b40:	10c5883a 	add	r2,r2,r3
   84b44:	10800104 	addi	r2,r2,4
   84b48:	10c00017 	ldw	r3,0(r2)
   84b4c:	e0bffc17 	ldw	r2,-16(fp)
   84b50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   84b54:	00800234 	movhi	r2,8
   84b58:	1097f404 	addi	r2,r2,24528
   84b5c:	e0fffb17 	ldw	r3,-20(fp)
   84b60:	18c00324 	muli	r3,r3,12
   84b64:	10c5883a 	add	r2,r2,r3
   84b68:	10800204 	addi	r2,r2,8
   84b6c:	10c00017 	ldw	r3,0(r2)
   84b70:	e0bffc17 	ldw	r2,-16(fp)
   84b74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   84b78:	e13ffb17 	ldw	r4,-20(fp)
   84b7c:	00837880 	call	83788 <alt_release_fd>
  }
} 
   84b80:	0001883a 	nop
   84b84:	e037883a 	mov	sp,fp
   84b88:	dfc00117 	ldw	ra,4(sp)
   84b8c:	df000017 	ldw	fp,0(sp)
   84b90:	dec00204 	addi	sp,sp,8
   84b94:	f800283a 	ret

00084b98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84b98:	defffb04 	addi	sp,sp,-20
   84b9c:	dfc00415 	stw	ra,16(sp)
   84ba0:	df000315 	stw	fp,12(sp)
   84ba4:	df000304 	addi	fp,sp,12
   84ba8:	e13ffd15 	stw	r4,-12(fp)
   84bac:	e17ffe15 	stw	r5,-8(fp)
   84bb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84bb4:	01c07fc4 	movi	r7,511
   84bb8:	01800044 	movi	r6,1
   84bbc:	e17ffd17 	ldw	r5,-12(fp)
   84bc0:	01000234 	movhi	r4,8
   84bc4:	2117f704 	addi	r4,r4,24540
   84bc8:	0084ad40 	call	84ad4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84bcc:	01c07fc4 	movi	r7,511
   84bd0:	000d883a 	mov	r6,zero
   84bd4:	e17ffe17 	ldw	r5,-8(fp)
   84bd8:	01000234 	movhi	r4,8
   84bdc:	2117f404 	addi	r4,r4,24528
   84be0:	0084ad40 	call	84ad4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84be4:	01c07fc4 	movi	r7,511
   84be8:	01800044 	movi	r6,1
   84bec:	e17fff17 	ldw	r5,-4(fp)
   84bf0:	01000234 	movhi	r4,8
   84bf4:	2117fa04 	addi	r4,r4,24552
   84bf8:	0084ad40 	call	84ad4 <alt_open_fd>
}  
   84bfc:	0001883a 	nop
   84c00:	e037883a 	mov	sp,fp
   84c04:	dfc00117 	ldw	ra,4(sp)
   84c08:	df000017 	ldw	fp,0(sp)
   84c0c:	dec00204 	addi	sp,sp,8
   84c10:	f800283a 	ret

00084c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84c14:	defffe04 	addi	sp,sp,-8
   84c18:	dfc00115 	stw	ra,4(sp)
   84c1c:	df000015 	stw	fp,0(sp)
   84c20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84c24:	d0a00917 	ldw	r2,-32732(gp)
   84c28:	10000326 	beq	r2,zero,84c38 <alt_get_errno+0x24>
   84c2c:	d0a00917 	ldw	r2,-32732(gp)
   84c30:	103ee83a 	callr	r2
   84c34:	00000106 	br	84c3c <alt_get_errno+0x28>
   84c38:	d0a6ac04 	addi	r2,gp,-25936
}
   84c3c:	e037883a 	mov	sp,fp
   84c40:	dfc00117 	ldw	ra,4(sp)
   84c44:	df000017 	ldw	fp,0(sp)
   84c48:	dec00204 	addi	sp,sp,8
   84c4c:	f800283a 	ret

00084c50 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84c50:	defffd04 	addi	sp,sp,-12
   84c54:	df000215 	stw	fp,8(sp)
   84c58:	df000204 	addi	fp,sp,8
   84c5c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84c60:	e0bfff17 	ldw	r2,-4(fp)
   84c64:	10800217 	ldw	r2,8(r2)
   84c68:	10d00034 	orhi	r3,r2,16384
   84c6c:	e0bfff17 	ldw	r2,-4(fp)
   84c70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84c74:	e03ffe15 	stw	zero,-8(fp)
   84c78:	00001d06 	br	84cf0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84c7c:	00800234 	movhi	r2,8
   84c80:	1097f404 	addi	r2,r2,24528
   84c84:	e0fffe17 	ldw	r3,-8(fp)
   84c88:	18c00324 	muli	r3,r3,12
   84c8c:	10c5883a 	add	r2,r2,r3
   84c90:	10c00017 	ldw	r3,0(r2)
   84c94:	e0bfff17 	ldw	r2,-4(fp)
   84c98:	10800017 	ldw	r2,0(r2)
   84c9c:	1880111e 	bne	r3,r2,84ce4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84ca0:	00800234 	movhi	r2,8
   84ca4:	1097f404 	addi	r2,r2,24528
   84ca8:	e0fffe17 	ldw	r3,-8(fp)
   84cac:	18c00324 	muli	r3,r3,12
   84cb0:	10c5883a 	add	r2,r2,r3
   84cb4:	10800204 	addi	r2,r2,8
   84cb8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84cbc:	1000090e 	bge	r2,zero,84ce4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   84cc0:	e0bffe17 	ldw	r2,-8(fp)
   84cc4:	10c00324 	muli	r3,r2,12
   84cc8:	00800234 	movhi	r2,8
   84ccc:	1097f404 	addi	r2,r2,24528
   84cd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84cd4:	e0bfff17 	ldw	r2,-4(fp)
   84cd8:	18800226 	beq	r3,r2,84ce4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   84cdc:	00bffcc4 	movi	r2,-13
   84ce0:	00000806 	br	84d04 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84ce4:	e0bffe17 	ldw	r2,-8(fp)
   84ce8:	10800044 	addi	r2,r2,1
   84cec:	e0bffe15 	stw	r2,-8(fp)
   84cf0:	d0a00817 	ldw	r2,-32736(gp)
   84cf4:	1007883a 	mov	r3,r2
   84cf8:	e0bffe17 	ldw	r2,-8(fp)
   84cfc:	18bfdf2e 	bgeu	r3,r2,84c7c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   84d00:	0005883a 	mov	r2,zero
}
   84d04:	e037883a 	mov	sp,fp
   84d08:	df000017 	ldw	fp,0(sp)
   84d0c:	dec00104 	addi	sp,sp,4
   84d10:	f800283a 	ret

00084d14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   84d14:	defff604 	addi	sp,sp,-40
   84d18:	dfc00915 	stw	ra,36(sp)
   84d1c:	df000815 	stw	fp,32(sp)
   84d20:	df000804 	addi	fp,sp,32
   84d24:	e13ffd15 	stw	r4,-12(fp)
   84d28:	e17ffe15 	stw	r5,-8(fp)
   84d2c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   84d30:	00bfffc4 	movi	r2,-1
   84d34:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   84d38:	00bffb44 	movi	r2,-19
   84d3c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   84d40:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   84d44:	d1600604 	addi	r5,gp,-32744
   84d48:	e13ffd17 	ldw	r4,-12(fp)
   84d4c:	00850300 	call	85030 <alt_find_dev>
   84d50:	e0bff815 	stw	r2,-32(fp)
   84d54:	e0bff817 	ldw	r2,-32(fp)
   84d58:	1000051e 	bne	r2,zero,84d70 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   84d5c:	e13ffd17 	ldw	r4,-12(fp)
   84d60:	00850c00 	call	850c0 <alt_find_file>
   84d64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   84d68:	00800044 	movi	r2,1
   84d6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   84d70:	e0bff817 	ldw	r2,-32(fp)
   84d74:	10002926 	beq	r2,zero,84e1c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   84d78:	e13ff817 	ldw	r4,-32(fp)
   84d7c:	00851c80 	call	851c8 <alt_get_fd>
   84d80:	e0bff915 	stw	r2,-28(fp)
   84d84:	e0bff917 	ldw	r2,-28(fp)
   84d88:	1000030e 	bge	r2,zero,84d98 <open+0x84>
    {
      status = index;
   84d8c:	e0bff917 	ldw	r2,-28(fp)
   84d90:	e0bffa15 	stw	r2,-24(fp)
   84d94:	00002306 	br	84e24 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   84d98:	e0bff917 	ldw	r2,-28(fp)
   84d9c:	10c00324 	muli	r3,r2,12
   84da0:	00800234 	movhi	r2,8
   84da4:	1097f404 	addi	r2,r2,24528
   84da8:	1885883a 	add	r2,r3,r2
   84dac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   84db0:	e0fffe17 	ldw	r3,-8(fp)
   84db4:	00900034 	movhi	r2,16384
   84db8:	10bfffc4 	addi	r2,r2,-1
   84dbc:	1886703a 	and	r3,r3,r2
   84dc0:	e0bffc17 	ldw	r2,-16(fp)
   84dc4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   84dc8:	e0bffb17 	ldw	r2,-20(fp)
   84dcc:	1000051e 	bne	r2,zero,84de4 <open+0xd0>
   84dd0:	e13ffc17 	ldw	r4,-16(fp)
   84dd4:	0084c500 	call	84c50 <alt_file_locked>
   84dd8:	e0bffa15 	stw	r2,-24(fp)
   84ddc:	e0bffa17 	ldw	r2,-24(fp)
   84de0:	10001016 	blt	r2,zero,84e24 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   84de4:	e0bff817 	ldw	r2,-32(fp)
   84de8:	10800317 	ldw	r2,12(r2)
   84dec:	10000826 	beq	r2,zero,84e10 <open+0xfc>
   84df0:	e0bff817 	ldw	r2,-32(fp)
   84df4:	10800317 	ldw	r2,12(r2)
   84df8:	e1ffff17 	ldw	r7,-4(fp)
   84dfc:	e1bffe17 	ldw	r6,-8(fp)
   84e00:	e17ffd17 	ldw	r5,-12(fp)
   84e04:	e13ffc17 	ldw	r4,-16(fp)
   84e08:	103ee83a 	callr	r2
   84e0c:	00000106 	br	84e14 <open+0x100>
   84e10:	0005883a 	mov	r2,zero
   84e14:	e0bffa15 	stw	r2,-24(fp)
   84e18:	00000206 	br	84e24 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   84e1c:	00bffb44 	movi	r2,-19
   84e20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   84e24:	e0bffa17 	ldw	r2,-24(fp)
   84e28:	1000090e 	bge	r2,zero,84e50 <open+0x13c>
  {
    alt_release_fd (index);  
   84e2c:	e13ff917 	ldw	r4,-28(fp)
   84e30:	00837880 	call	83788 <alt_release_fd>
    ALT_ERRNO = -status;
   84e34:	0084c140 	call	84c14 <alt_get_errno>
   84e38:	1007883a 	mov	r3,r2
   84e3c:	e0bffa17 	ldw	r2,-24(fp)
   84e40:	0085c83a 	sub	r2,zero,r2
   84e44:	18800015 	stw	r2,0(r3)
    return -1;
   84e48:	00bfffc4 	movi	r2,-1
   84e4c:	00000106 	br	84e54 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   84e50:	e0bff917 	ldw	r2,-28(fp)
}
   84e54:	e037883a 	mov	sp,fp
   84e58:	dfc00117 	ldw	ra,4(sp)
   84e5c:	df000017 	ldw	fp,0(sp)
   84e60:	dec00204 	addi	sp,sp,8
   84e64:	f800283a 	ret

00084e68 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   84e68:	defffa04 	addi	sp,sp,-24
   84e6c:	df000515 	stw	fp,20(sp)
   84e70:	df000504 	addi	fp,sp,20
   84e74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84e78:	0005303a 	rdctl	r2,status
   84e7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84e80:	e0fffc17 	ldw	r3,-16(fp)
   84e84:	00bfff84 	movi	r2,-2
   84e88:	1884703a 	and	r2,r3,r2
   84e8c:	1001703a 	wrctl	status,r2
  
  return context;
   84e90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   84e94:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   84e98:	e0bfff17 	ldw	r2,-4(fp)
   84e9c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   84ea0:	e0bffd17 	ldw	r2,-12(fp)
   84ea4:	10800017 	ldw	r2,0(r2)
   84ea8:	e0fffd17 	ldw	r3,-12(fp)
   84eac:	18c00117 	ldw	r3,4(r3)
   84eb0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   84eb4:	e0bffd17 	ldw	r2,-12(fp)
   84eb8:	10800117 	ldw	r2,4(r2)
   84ebc:	e0fffd17 	ldw	r3,-12(fp)
   84ec0:	18c00017 	ldw	r3,0(r3)
   84ec4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   84ec8:	e0bffd17 	ldw	r2,-12(fp)
   84ecc:	e0fffd17 	ldw	r3,-12(fp)
   84ed0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   84ed4:	e0bffd17 	ldw	r2,-12(fp)
   84ed8:	e0fffd17 	ldw	r3,-12(fp)
   84edc:	10c00015 	stw	r3,0(r2)
   84ee0:	e0bffb17 	ldw	r2,-20(fp)
   84ee4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84ee8:	e0bffe17 	ldw	r2,-8(fp)
   84eec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   84ef0:	0001883a 	nop
   84ef4:	e037883a 	mov	sp,fp
   84ef8:	df000017 	ldw	fp,0(sp)
   84efc:	dec00104 	addi	sp,sp,4
   84f00:	f800283a 	ret

00084f04 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   84f04:	defffb04 	addi	sp,sp,-20
   84f08:	dfc00415 	stw	ra,16(sp)
   84f0c:	df000315 	stw	fp,12(sp)
   84f10:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   84f14:	d0a00c17 	ldw	r2,-32720(gp)
   84f18:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   84f1c:	d0a6b217 	ldw	r2,-25912(gp)
   84f20:	10800044 	addi	r2,r2,1
   84f24:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   84f28:	00002e06 	br	84fe4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   84f2c:	e0bffd17 	ldw	r2,-12(fp)
   84f30:	10800017 	ldw	r2,0(r2)
   84f34:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   84f38:	e0bffd17 	ldw	r2,-12(fp)
   84f3c:	10800403 	ldbu	r2,16(r2)
   84f40:	10803fcc 	andi	r2,r2,255
   84f44:	10000426 	beq	r2,zero,84f58 <alt_tick+0x54>
   84f48:	d0a6b217 	ldw	r2,-25912(gp)
   84f4c:	1000021e 	bne	r2,zero,84f58 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   84f50:	e0bffd17 	ldw	r2,-12(fp)
   84f54:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   84f58:	e0bffd17 	ldw	r2,-12(fp)
   84f5c:	10800217 	ldw	r2,8(r2)
   84f60:	d0e6b217 	ldw	r3,-25912(gp)
   84f64:	18801d36 	bltu	r3,r2,84fdc <alt_tick+0xd8>
   84f68:	e0bffd17 	ldw	r2,-12(fp)
   84f6c:	10800403 	ldbu	r2,16(r2)
   84f70:	10803fcc 	andi	r2,r2,255
   84f74:	1000191e 	bne	r2,zero,84fdc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   84f78:	e0bffd17 	ldw	r2,-12(fp)
   84f7c:	10800317 	ldw	r2,12(r2)
   84f80:	e0fffd17 	ldw	r3,-12(fp)
   84f84:	18c00517 	ldw	r3,20(r3)
   84f88:	1809883a 	mov	r4,r3
   84f8c:	103ee83a 	callr	r2
   84f90:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   84f94:	e0bfff17 	ldw	r2,-4(fp)
   84f98:	1000031e 	bne	r2,zero,84fa8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   84f9c:	e13ffd17 	ldw	r4,-12(fp)
   84fa0:	0084e680 	call	84e68 <alt_alarm_stop>
   84fa4:	00000d06 	br	84fdc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   84fa8:	e0bffd17 	ldw	r2,-12(fp)
   84fac:	10c00217 	ldw	r3,8(r2)
   84fb0:	e0bfff17 	ldw	r2,-4(fp)
   84fb4:	1887883a 	add	r3,r3,r2
   84fb8:	e0bffd17 	ldw	r2,-12(fp)
   84fbc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   84fc0:	e0bffd17 	ldw	r2,-12(fp)
   84fc4:	10c00217 	ldw	r3,8(r2)
   84fc8:	d0a6b217 	ldw	r2,-25912(gp)
   84fcc:	1880032e 	bgeu	r3,r2,84fdc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   84fd0:	e0bffd17 	ldw	r2,-12(fp)
   84fd4:	00c00044 	movi	r3,1
   84fd8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   84fdc:	e0bffe17 	ldw	r2,-8(fp)
   84fe0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   84fe4:	e0fffd17 	ldw	r3,-12(fp)
   84fe8:	d0a00c04 	addi	r2,gp,-32720
   84fec:	18bfcf1e 	bne	r3,r2,84f2c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   84ff0:	0001883a 	nop
}
   84ff4:	0001883a 	nop
   84ff8:	e037883a 	mov	sp,fp
   84ffc:	dfc00117 	ldw	ra,4(sp)
   85000:	df000017 	ldw	fp,0(sp)
   85004:	dec00204 	addi	sp,sp,8
   85008:	f800283a 	ret

0008500c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   8500c:	deffff04 	addi	sp,sp,-4
   85010:	df000015 	stw	fp,0(sp)
   85014:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   85018:	000170fa 	wrctl	ienable,zero
}
   8501c:	0001883a 	nop
   85020:	e037883a 	mov	sp,fp
   85024:	df000017 	ldw	fp,0(sp)
   85028:	dec00104 	addi	sp,sp,4
   8502c:	f800283a 	ret

00085030 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   85030:	defffa04 	addi	sp,sp,-24
   85034:	dfc00515 	stw	ra,20(sp)
   85038:	df000415 	stw	fp,16(sp)
   8503c:	df000404 	addi	fp,sp,16
   85040:	e13ffe15 	stw	r4,-8(fp)
   85044:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   85048:	e0bfff17 	ldw	r2,-4(fp)
   8504c:	10800017 	ldw	r2,0(r2)
   85050:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   85054:	e13ffe17 	ldw	r4,-8(fp)
   85058:	00803980 	call	80398 <strlen>
   8505c:	10800044 	addi	r2,r2,1
   85060:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   85064:	00000d06 	br	8509c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   85068:	e0bffc17 	ldw	r2,-16(fp)
   8506c:	10800217 	ldw	r2,8(r2)
   85070:	e0fffd17 	ldw	r3,-12(fp)
   85074:	180d883a 	mov	r6,r3
   85078:	e17ffe17 	ldw	r5,-8(fp)
   8507c:	1009883a 	mov	r4,r2
   85080:	00853e40 	call	853e4 <memcmp>
   85084:	1000021e 	bne	r2,zero,85090 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   85088:	e0bffc17 	ldw	r2,-16(fp)
   8508c:	00000706 	br	850ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   85090:	e0bffc17 	ldw	r2,-16(fp)
   85094:	10800017 	ldw	r2,0(r2)
   85098:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8509c:	e0fffc17 	ldw	r3,-16(fp)
   850a0:	e0bfff17 	ldw	r2,-4(fp)
   850a4:	18bff01e 	bne	r3,r2,85068 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   850a8:	0005883a 	mov	r2,zero
}
   850ac:	e037883a 	mov	sp,fp
   850b0:	dfc00117 	ldw	ra,4(sp)
   850b4:	df000017 	ldw	fp,0(sp)
   850b8:	dec00204 	addi	sp,sp,8
   850bc:	f800283a 	ret

000850c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   850c0:	defffb04 	addi	sp,sp,-20
   850c4:	dfc00415 	stw	ra,16(sp)
   850c8:	df000315 	stw	fp,12(sp)
   850cc:	df000304 	addi	fp,sp,12
   850d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   850d4:	d0a00417 	ldw	r2,-32752(gp)
   850d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   850dc:	00003106 	br	851a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   850e0:	e0bffd17 	ldw	r2,-12(fp)
   850e4:	10800217 	ldw	r2,8(r2)
   850e8:	1009883a 	mov	r4,r2
   850ec:	00803980 	call	80398 <strlen>
   850f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   850f4:	e0bffd17 	ldw	r2,-12(fp)
   850f8:	10c00217 	ldw	r3,8(r2)
   850fc:	e0bffe17 	ldw	r2,-8(fp)
   85100:	10bfffc4 	addi	r2,r2,-1
   85104:	1885883a 	add	r2,r3,r2
   85108:	10800003 	ldbu	r2,0(r2)
   8510c:	10803fcc 	andi	r2,r2,255
   85110:	1080201c 	xori	r2,r2,128
   85114:	10bfe004 	addi	r2,r2,-128
   85118:	10800bd8 	cmpnei	r2,r2,47
   8511c:	1000031e 	bne	r2,zero,8512c <alt_find_file+0x6c>
    {
      len -= 1;
   85120:	e0bffe17 	ldw	r2,-8(fp)
   85124:	10bfffc4 	addi	r2,r2,-1
   85128:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8512c:	e0bffe17 	ldw	r2,-8(fp)
   85130:	e0ffff17 	ldw	r3,-4(fp)
   85134:	1885883a 	add	r2,r3,r2
   85138:	10800003 	ldbu	r2,0(r2)
   8513c:	10803fcc 	andi	r2,r2,255
   85140:	1080201c 	xori	r2,r2,128
   85144:	10bfe004 	addi	r2,r2,-128
   85148:	10800be0 	cmpeqi	r2,r2,47
   8514c:	1000081e 	bne	r2,zero,85170 <alt_find_file+0xb0>
   85150:	e0bffe17 	ldw	r2,-8(fp)
   85154:	e0ffff17 	ldw	r3,-4(fp)
   85158:	1885883a 	add	r2,r3,r2
   8515c:	10800003 	ldbu	r2,0(r2)
   85160:	10803fcc 	andi	r2,r2,255
   85164:	1080201c 	xori	r2,r2,128
   85168:	10bfe004 	addi	r2,r2,-128
   8516c:	10000a1e 	bne	r2,zero,85198 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   85170:	e0bffd17 	ldw	r2,-12(fp)
   85174:	10800217 	ldw	r2,8(r2)
   85178:	e0fffe17 	ldw	r3,-8(fp)
   8517c:	180d883a 	mov	r6,r3
   85180:	e17fff17 	ldw	r5,-4(fp)
   85184:	1009883a 	mov	r4,r2
   85188:	00853e40 	call	853e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8518c:	1000021e 	bne	r2,zero,85198 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   85190:	e0bffd17 	ldw	r2,-12(fp)
   85194:	00000706 	br	851b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   85198:	e0bffd17 	ldw	r2,-12(fp)
   8519c:	10800017 	ldw	r2,0(r2)
   851a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   851a4:	e0fffd17 	ldw	r3,-12(fp)
   851a8:	d0a00404 	addi	r2,gp,-32752
   851ac:	18bfcc1e 	bne	r3,r2,850e0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   851b0:	0005883a 	mov	r2,zero
}
   851b4:	e037883a 	mov	sp,fp
   851b8:	dfc00117 	ldw	ra,4(sp)
   851bc:	df000017 	ldw	fp,0(sp)
   851c0:	dec00204 	addi	sp,sp,8
   851c4:	f800283a 	ret

000851c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   851c8:	defffc04 	addi	sp,sp,-16
   851cc:	df000315 	stw	fp,12(sp)
   851d0:	df000304 	addi	fp,sp,12
   851d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   851d8:	00bffa04 	movi	r2,-24
   851dc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   851e0:	e03ffd15 	stw	zero,-12(fp)
   851e4:	00001906 	br	8524c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   851e8:	00800234 	movhi	r2,8
   851ec:	1097f404 	addi	r2,r2,24528
   851f0:	e0fffd17 	ldw	r3,-12(fp)
   851f4:	18c00324 	muli	r3,r3,12
   851f8:	10c5883a 	add	r2,r2,r3
   851fc:	10800017 	ldw	r2,0(r2)
   85200:	10000f1e 	bne	r2,zero,85240 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   85204:	00800234 	movhi	r2,8
   85208:	1097f404 	addi	r2,r2,24528
   8520c:	e0fffd17 	ldw	r3,-12(fp)
   85210:	18c00324 	muli	r3,r3,12
   85214:	10c5883a 	add	r2,r2,r3
   85218:	e0ffff17 	ldw	r3,-4(fp)
   8521c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   85220:	d0e00817 	ldw	r3,-32736(gp)
   85224:	e0bffd17 	ldw	r2,-12(fp)
   85228:	1880020e 	bge	r3,r2,85234 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   8522c:	e0bffd17 	ldw	r2,-12(fp)
   85230:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   85234:	e0bffd17 	ldw	r2,-12(fp)
   85238:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8523c:	00000606 	br	85258 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85240:	e0bffd17 	ldw	r2,-12(fp)
   85244:	10800044 	addi	r2,r2,1
   85248:	e0bffd15 	stw	r2,-12(fp)
   8524c:	e0bffd17 	ldw	r2,-12(fp)
   85250:	10800810 	cmplti	r2,r2,32
   85254:	103fe41e 	bne	r2,zero,851e8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   85258:	e0bffe17 	ldw	r2,-8(fp)
}
   8525c:	e037883a 	mov	sp,fp
   85260:	df000017 	ldw	fp,0(sp)
   85264:	dec00104 	addi	sp,sp,4
   85268:	f800283a 	ret

0008526c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8526c:	defffb04 	addi	sp,sp,-20
   85270:	df000415 	stw	fp,16(sp)
   85274:	df000404 	addi	fp,sp,16
   85278:	e13ffe15 	stw	r4,-8(fp)
   8527c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   85280:	e0bfff17 	ldw	r2,-4(fp)
   85284:	10840070 	cmpltui	r2,r2,4097
   85288:	1000021e 	bne	r2,zero,85294 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8528c:	00840004 	movi	r2,4096
   85290:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   85294:	e0fffe17 	ldw	r3,-8(fp)
   85298:	e0bfff17 	ldw	r2,-4(fp)
   8529c:	1885883a 	add	r2,r3,r2
   852a0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   852a4:	e0bffe17 	ldw	r2,-8(fp)
   852a8:	e0bffc15 	stw	r2,-16(fp)
   852ac:	00000506 	br	852c4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   852b0:	e0bffc17 	ldw	r2,-16(fp)
   852b4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   852b8:	e0bffc17 	ldw	r2,-16(fp)
   852bc:	10800804 	addi	r2,r2,32
   852c0:	e0bffc15 	stw	r2,-16(fp)
   852c4:	e0fffc17 	ldw	r3,-16(fp)
   852c8:	e0bffd17 	ldw	r2,-12(fp)
   852cc:	18bff836 	bltu	r3,r2,852b0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   852d0:	e0bffe17 	ldw	r2,-8(fp)
   852d4:	108007cc 	andi	r2,r2,31
   852d8:	10000226 	beq	r2,zero,852e4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   852dc:	e0bffc17 	ldw	r2,-16(fp)
   852e0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   852e4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   852e8:	0001883a 	nop
   852ec:	e037883a 	mov	sp,fp
   852f0:	df000017 	ldw	fp,0(sp)
   852f4:	dec00104 	addi	sp,sp,4
   852f8:	f800283a 	ret

000852fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   852fc:	defffe04 	addi	sp,sp,-8
   85300:	df000115 	stw	fp,4(sp)
   85304:	df000104 	addi	fp,sp,4
   85308:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   8530c:	e0bfff17 	ldw	r2,-4(fp)
   85310:	10bffe84 	addi	r2,r2,-6
   85314:	10c00428 	cmpgeui	r3,r2,16
   85318:	18001a1e 	bne	r3,zero,85384 <alt_exception_cause_generated_bad_addr+0x88>
   8531c:	100690ba 	slli	r3,r2,2
   85320:	00800234 	movhi	r2,8
   85324:	1094cd04 	addi	r2,r2,21300
   85328:	1885883a 	add	r2,r3,r2
   8532c:	10800017 	ldw	r2,0(r2)
   85330:	1000683a 	jmp	r2
   85334:	00085374 	movhi	zero,8525
   85338:	00085374 	movhi	zero,8525
   8533c:	00085384 	movi	zero,8526
   85340:	00085384 	movi	zero,8526
   85344:	00085384 	movi	zero,8526
   85348:	00085374 	movhi	zero,8525
   8534c:	0008537c 	xorhi	zero,zero,8525
   85350:	00085384 	movi	zero,8526
   85354:	00085374 	movhi	zero,8525
   85358:	00085374 	movhi	zero,8525
   8535c:	00085384 	movi	zero,8526
   85360:	00085374 	movhi	zero,8525
   85364:	0008537c 	xorhi	zero,zero,8525
   85368:	00085384 	movi	zero,8526
   8536c:	00085384 	movi	zero,8526
   85370:	00085374 	movhi	zero,8525
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   85374:	00800044 	movi	r2,1
   85378:	00000306 	br	85388 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   8537c:	0005883a 	mov	r2,zero
   85380:	00000106 	br	85388 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   85384:	0005883a 	mov	r2,zero
  }
}
   85388:	e037883a 	mov	sp,fp
   8538c:	df000017 	ldw	fp,0(sp)
   85390:	dec00104 	addi	sp,sp,4
   85394:	f800283a 	ret

00085398 <atexit>:
   85398:	200b883a 	mov	r5,r4
   8539c:	000f883a 	mov	r7,zero
   853a0:	000d883a 	mov	r6,zero
   853a4:	0009883a 	mov	r4,zero
   853a8:	00854601 	jmpi	85460 <__register_exitproc>

000853ac <exit>:
   853ac:	defffe04 	addi	sp,sp,-8
   853b0:	000b883a 	mov	r5,zero
   853b4:	dc000015 	stw	r16,0(sp)
   853b8:	dfc00115 	stw	ra,4(sp)
   853bc:	2021883a 	mov	r16,r4
   853c0:	00855780 	call	85578 <__call_exitprocs>
   853c4:	00800234 	movhi	r2,8
   853c8:	109c6c04 	addi	r2,r2,29104
   853cc:	11000017 	ldw	r4,0(r2)
   853d0:	20800f17 	ldw	r2,60(r4)
   853d4:	10000126 	beq	r2,zero,853dc <exit+0x30>
   853d8:	103ee83a 	callr	r2
   853dc:	8009883a 	mov	r4,r16
   853e0:	00856f80 	call	856f8 <_exit>

000853e4 <memcmp>:
   853e4:	01c000c4 	movi	r7,3
   853e8:	3980192e 	bgeu	r7,r6,85450 <memcmp+0x6c>
   853ec:	2144b03a 	or	r2,r4,r5
   853f0:	11c4703a 	and	r2,r2,r7
   853f4:	10000f26 	beq	r2,zero,85434 <memcmp+0x50>
   853f8:	20800003 	ldbu	r2,0(r4)
   853fc:	28c00003 	ldbu	r3,0(r5)
   85400:	10c0151e 	bne	r2,r3,85458 <memcmp+0x74>
   85404:	31bfff84 	addi	r6,r6,-2
   85408:	01ffffc4 	movi	r7,-1
   8540c:	00000406 	br	85420 <memcmp+0x3c>
   85410:	20800003 	ldbu	r2,0(r4)
   85414:	28c00003 	ldbu	r3,0(r5)
   85418:	31bfffc4 	addi	r6,r6,-1
   8541c:	10c00e1e 	bne	r2,r3,85458 <memcmp+0x74>
   85420:	21000044 	addi	r4,r4,1
   85424:	29400044 	addi	r5,r5,1
   85428:	31fff91e 	bne	r6,r7,85410 <memcmp+0x2c>
   8542c:	0005883a 	mov	r2,zero
   85430:	f800283a 	ret
   85434:	20c00017 	ldw	r3,0(r4)
   85438:	28800017 	ldw	r2,0(r5)
   8543c:	18bfee1e 	bne	r3,r2,853f8 <memcmp+0x14>
   85440:	31bfff04 	addi	r6,r6,-4
   85444:	21000104 	addi	r4,r4,4
   85448:	29400104 	addi	r5,r5,4
   8544c:	39bff936 	bltu	r7,r6,85434 <memcmp+0x50>
   85450:	303fe91e 	bne	r6,zero,853f8 <memcmp+0x14>
   85454:	003ff506 	br	8542c <memcmp+0x48>
   85458:	10c5c83a 	sub	r2,r2,r3
   8545c:	f800283a 	ret

00085460 <__register_exitproc>:
   85460:	defffa04 	addi	sp,sp,-24
   85464:	dc000315 	stw	r16,12(sp)
   85468:	04000234 	movhi	r16,8
   8546c:	841c6c04 	addi	r16,r16,29104
   85470:	80c00017 	ldw	r3,0(r16)
   85474:	dc400415 	stw	r17,16(sp)
   85478:	dfc00515 	stw	ra,20(sp)
   8547c:	18805217 	ldw	r2,328(r3)
   85480:	2023883a 	mov	r17,r4
   85484:	10003726 	beq	r2,zero,85564 <__register_exitproc+0x104>
   85488:	10c00117 	ldw	r3,4(r2)
   8548c:	010007c4 	movi	r4,31
   85490:	20c00e16 	blt	r4,r3,854cc <__register_exitproc+0x6c>
   85494:	1a000044 	addi	r8,r3,1
   85498:	8800221e 	bne	r17,zero,85524 <__register_exitproc+0xc4>
   8549c:	18c00084 	addi	r3,r3,2
   854a0:	18c7883a 	add	r3,r3,r3
   854a4:	18c7883a 	add	r3,r3,r3
   854a8:	12000115 	stw	r8,4(r2)
   854ac:	10c7883a 	add	r3,r2,r3
   854b0:	19400015 	stw	r5,0(r3)
   854b4:	0005883a 	mov	r2,zero
   854b8:	dfc00517 	ldw	ra,20(sp)
   854bc:	dc400417 	ldw	r17,16(sp)
   854c0:	dc000317 	ldw	r16,12(sp)
   854c4:	dec00604 	addi	sp,sp,24
   854c8:	f800283a 	ret
   854cc:	00800034 	movhi	r2,0
   854d0:	10800004 	addi	r2,r2,0
   854d4:	10002626 	beq	r2,zero,85570 <__register_exitproc+0x110>
   854d8:	01006404 	movi	r4,400
   854dc:	d9400015 	stw	r5,0(sp)
   854e0:	d9800115 	stw	r6,4(sp)
   854e4:	d9c00215 	stw	r7,8(sp)
   854e8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   854ec:	d9400017 	ldw	r5,0(sp)
   854f0:	d9800117 	ldw	r6,4(sp)
   854f4:	d9c00217 	ldw	r7,8(sp)
   854f8:	10001d26 	beq	r2,zero,85570 <__register_exitproc+0x110>
   854fc:	81000017 	ldw	r4,0(r16)
   85500:	10000115 	stw	zero,4(r2)
   85504:	02000044 	movi	r8,1
   85508:	22405217 	ldw	r9,328(r4)
   8550c:	0007883a 	mov	r3,zero
   85510:	12400015 	stw	r9,0(r2)
   85514:	20805215 	stw	r2,328(r4)
   85518:	10006215 	stw	zero,392(r2)
   8551c:	10006315 	stw	zero,396(r2)
   85520:	883fde26 	beq	r17,zero,8549c <__register_exitproc+0x3c>
   85524:	18c9883a 	add	r4,r3,r3
   85528:	2109883a 	add	r4,r4,r4
   8552c:	1109883a 	add	r4,r2,r4
   85530:	21802215 	stw	r6,136(r4)
   85534:	01800044 	movi	r6,1
   85538:	12406217 	ldw	r9,392(r2)
   8553c:	30cc983a 	sll	r6,r6,r3
   85540:	4992b03a 	or	r9,r9,r6
   85544:	12406215 	stw	r9,392(r2)
   85548:	21c04215 	stw	r7,264(r4)
   8554c:	01000084 	movi	r4,2
   85550:	893fd21e 	bne	r17,r4,8549c <__register_exitproc+0x3c>
   85554:	11006317 	ldw	r4,396(r2)
   85558:	218cb03a 	or	r6,r4,r6
   8555c:	11806315 	stw	r6,396(r2)
   85560:	003fce06 	br	8549c <__register_exitproc+0x3c>
   85564:	18805304 	addi	r2,r3,332
   85568:	18805215 	stw	r2,328(r3)
   8556c:	003fc606 	br	85488 <__register_exitproc+0x28>
   85570:	00bfffc4 	movi	r2,-1
   85574:	003fd006 	br	854b8 <__register_exitproc+0x58>

00085578 <__call_exitprocs>:
   85578:	defff504 	addi	sp,sp,-44
   8557c:	df000915 	stw	fp,36(sp)
   85580:	dd400615 	stw	r21,24(sp)
   85584:	dc800315 	stw	r18,12(sp)
   85588:	dfc00a15 	stw	ra,40(sp)
   8558c:	ddc00815 	stw	r23,32(sp)
   85590:	dd800715 	stw	r22,28(sp)
   85594:	dd000515 	stw	r20,20(sp)
   85598:	dcc00415 	stw	r19,16(sp)
   8559c:	dc400215 	stw	r17,8(sp)
   855a0:	dc000115 	stw	r16,4(sp)
   855a4:	d9000015 	stw	r4,0(sp)
   855a8:	2839883a 	mov	fp,r5
   855ac:	04800044 	movi	r18,1
   855b0:	057fffc4 	movi	r21,-1
   855b4:	00800234 	movhi	r2,8
   855b8:	109c6c04 	addi	r2,r2,29104
   855bc:	12000017 	ldw	r8,0(r2)
   855c0:	45005217 	ldw	r20,328(r8)
   855c4:	44c05204 	addi	r19,r8,328
   855c8:	a0001c26 	beq	r20,zero,8563c <__call_exitprocs+0xc4>
   855cc:	a0800117 	ldw	r2,4(r20)
   855d0:	15ffffc4 	addi	r23,r2,-1
   855d4:	b8000d16 	blt	r23,zero,8560c <__call_exitprocs+0x94>
   855d8:	14000044 	addi	r16,r2,1
   855dc:	8421883a 	add	r16,r16,r16
   855e0:	8421883a 	add	r16,r16,r16
   855e4:	84402004 	addi	r17,r16,128
   855e8:	a463883a 	add	r17,r20,r17
   855ec:	a421883a 	add	r16,r20,r16
   855f0:	e0001e26 	beq	fp,zero,8566c <__call_exitprocs+0xf4>
   855f4:	80804017 	ldw	r2,256(r16)
   855f8:	e0801c26 	beq	fp,r2,8566c <__call_exitprocs+0xf4>
   855fc:	bdffffc4 	addi	r23,r23,-1
   85600:	843fff04 	addi	r16,r16,-4
   85604:	8c7fff04 	addi	r17,r17,-4
   85608:	bd7ff91e 	bne	r23,r21,855f0 <__call_exitprocs+0x78>
   8560c:	00800034 	movhi	r2,0
   85610:	10800004 	addi	r2,r2,0
   85614:	10000926 	beq	r2,zero,8563c <__call_exitprocs+0xc4>
   85618:	a0800117 	ldw	r2,4(r20)
   8561c:	1000301e 	bne	r2,zero,856e0 <__call_exitprocs+0x168>
   85620:	a0800017 	ldw	r2,0(r20)
   85624:	10003226 	beq	r2,zero,856f0 <__call_exitprocs+0x178>
   85628:	a009883a 	mov	r4,r20
   8562c:	98800015 	stw	r2,0(r19)
   85630:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   85634:	9d000017 	ldw	r20,0(r19)
   85638:	a03fe41e 	bne	r20,zero,855cc <__call_exitprocs+0x54>
   8563c:	dfc00a17 	ldw	ra,40(sp)
   85640:	df000917 	ldw	fp,36(sp)
   85644:	ddc00817 	ldw	r23,32(sp)
   85648:	dd800717 	ldw	r22,28(sp)
   8564c:	dd400617 	ldw	r21,24(sp)
   85650:	dd000517 	ldw	r20,20(sp)
   85654:	dcc00417 	ldw	r19,16(sp)
   85658:	dc800317 	ldw	r18,12(sp)
   8565c:	dc400217 	ldw	r17,8(sp)
   85660:	dc000117 	ldw	r16,4(sp)
   85664:	dec00b04 	addi	sp,sp,44
   85668:	f800283a 	ret
   8566c:	a0800117 	ldw	r2,4(r20)
   85670:	80c00017 	ldw	r3,0(r16)
   85674:	10bfffc4 	addi	r2,r2,-1
   85678:	15c01426 	beq	r2,r23,856cc <__call_exitprocs+0x154>
   8567c:	80000015 	stw	zero,0(r16)
   85680:	183fde26 	beq	r3,zero,855fc <__call_exitprocs+0x84>
   85684:	95c8983a 	sll	r4,r18,r23
   85688:	a0806217 	ldw	r2,392(r20)
   8568c:	a5800117 	ldw	r22,4(r20)
   85690:	2084703a 	and	r2,r4,r2
   85694:	10000b26 	beq	r2,zero,856c4 <__call_exitprocs+0x14c>
   85698:	a0806317 	ldw	r2,396(r20)
   8569c:	2088703a 	and	r4,r4,r2
   856a0:	20000c1e 	bne	r4,zero,856d4 <__call_exitprocs+0x15c>
   856a4:	89400017 	ldw	r5,0(r17)
   856a8:	d9000017 	ldw	r4,0(sp)
   856ac:	183ee83a 	callr	r3
   856b0:	a0800117 	ldw	r2,4(r20)
   856b4:	15bfbf1e 	bne	r2,r22,855b4 <__call_exitprocs+0x3c>
   856b8:	98800017 	ldw	r2,0(r19)
   856bc:	153fcf26 	beq	r2,r20,855fc <__call_exitprocs+0x84>
   856c0:	003fbc06 	br	855b4 <__call_exitprocs+0x3c>
   856c4:	183ee83a 	callr	r3
   856c8:	003ff906 	br	856b0 <__call_exitprocs+0x138>
   856cc:	a5c00115 	stw	r23,4(r20)
   856d0:	003feb06 	br	85680 <__call_exitprocs+0x108>
   856d4:	89000017 	ldw	r4,0(r17)
   856d8:	183ee83a 	callr	r3
   856dc:	003ff406 	br	856b0 <__call_exitprocs+0x138>
   856e0:	a0800017 	ldw	r2,0(r20)
   856e4:	a027883a 	mov	r19,r20
   856e8:	1029883a 	mov	r20,r2
   856ec:	003fb606 	br	855c8 <__call_exitprocs+0x50>
   856f0:	0005883a 	mov	r2,zero
   856f4:	003ffb06 	br	856e4 <__call_exitprocs+0x16c>

000856f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   856f8:	defffd04 	addi	sp,sp,-12
   856fc:	df000215 	stw	fp,8(sp)
   85700:	df000204 	addi	fp,sp,8
   85704:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   85708:	0001883a 	nop
   8570c:	e0bfff17 	ldw	r2,-4(fp)
   85710:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   85714:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   85718:	10000226 	beq	r2,zero,85724 <_exit+0x2c>
    ALT_SIM_FAIL();
   8571c:	002af070 	cmpltui	zero,zero,43969
   85720:	00000106 	br	85728 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   85724:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   85728:	003fff06 	br	85728 <_exit+0x30>
