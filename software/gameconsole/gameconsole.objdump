
gameconsole.elf:     file format elf32-littlenios2
gameconsole.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00280248

Program Header:
    LOAD off    0x00001000 vaddr 0x00280000 paddr 0x00280000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00280020 paddr 0x00280020 align 2**12
         filesz 0x00006998 memsz 0x00006998 flags r-x
    LOAD off    0x000079b8 vaddr 0x002869b8 paddr 0x002884a8 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00009f98 vaddr 0x00289f98 paddr 0x00289f98 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00280000  00280000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00280020  00280020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000066b4  00280248  00280248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  002868fc  002868fc  000078fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  002869b8  002884a8  000079b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00289f98  00289f98  00009f98  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0028a0ec  0028a0ec  000094a8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000094a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  000094d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001727d  00000000  00000000  00009f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006172  00000000  00000000  0002119d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000716e  00000000  00000000  0002730f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001768  00000000  00000000  0002e480  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029dc  00000000  00000000  0002fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  000325c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00037010  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00037070  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039e1a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00039e1d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039e29  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039e2a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00039e2b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00039e36  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00039e41  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00039e4c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00039e57  2**0
                  CONTENTS, READONLY
 26 .jdi          00005da1  00000000  00000000  00039e8b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004e18d  00000000  00000000  0003fc2c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00280000 l    d  .entry	00000000 .entry
00280020 l    d  .exceptions	00000000 .exceptions
00280248 l    d  .text	00000000 .text
002868fc l    d  .rodata	00000000 .rodata
002869b8 l    d  .rwdata	00000000 .rwdata
00289f98 l    d  .bss	00000000 .bss
0028a0ec l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gameconsole_bsp//obj/HAL/src/crt0.o
00280290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
002806b8 l     F .text	00000008 __fp_unlock
002806cc l     F .text	0000019c __sinit.part.1
00280868 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
002869b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
00283160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0028326c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00283298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00283384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00283464 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00283550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00283724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00288498 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
002839a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00283ad4 l     F .text	00000034 alt_dev_reg
0028738c l     O .rwdata	00001060 jtag_uart_0
002883ec l     O .rwdata	00000030 audio_0
0028841c l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00283f88 l     F .text	00000210 altera_avalon_jtag_uart_irq
00284198 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00285950 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00285bb4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00285e74 l     F .text	0000003c alt_get_errno
00285eb0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00289fc0 g     O .bss	00000004 alt_instruction_exception_handler
0028310c g     F .text	00000054 _isatty_r
00283660 g     F .text	0000007c alt_main
002850a4 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
0028054c g     F .text	000000c0 _puts_r
00289fec g     O .bss	00000100 alt_irq
00282e34 g     F .text	00000060 _lseek_r
002884a8 g       *ABS*	00000000 __flash_rwdata_start
0028a0ec g       *ABS*	00000000 __alt_heap_start
002823e8 g     F .text	0000005c __sseek
00280a08 g     F .text	00000010 __sinit
00280870 g     F .text	00000068 __sfmoreglue
00283700 g     F .text	00000024 __malloc_unlock
00281ad4 g     F .text	0000015c memmove
002809f0 g     F .text	00000018 _cleanup
0028480c g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0028626c g     F .text	00000024 altera_nios2_gen2_irq_init
002847d0 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
00280000 g     F .entry	0000001c __reset
00280020 g       *ABS*	00000000 __flash_exceptions_start
002830b0 g     F .text	0000005c _fstat_r
00289fa4 g     O .bss	00000004 errno
00282364 g     F .text	00000008 __seofread
00289fac g     O .bss	00000004 alt_argv
00290470 g       *ABS*	00000000 _gp
00283970 g     F .text	00000030 usleep
002849a0 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0028720c g     O .rwdata	00000180 alt_fd_list
00285af0 g     F .text	00000090 alt_find_dev
0028198c g     F .text	00000148 memcpy
002806c0 g     F .text	0000000c _cleanup_r
00285c78 g     F .text	0000007c alt_io_redirect
002868fc g       *ABS*	00000000 __DTOR_END__
0028060c g     F .text	00000014 puts
002864cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00284a5c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00284390 g     F .text	0000021c altera_avalon_jtag_uart_read
00280000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00280490 g     F .text	00000064 .hidden __udivsi3
002833c0 g     F .text	000000a4 isatty
00284e94 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
0028643c g     F .text	00000090 alt_icache_flush
00289fa0 g     O .bss	00000004 __malloc_top_pad
00280a58 g     F .text	000004bc __sfvwrite_r
002822bc g     F .text	00000054 _sbrk_r
002853b8 g     F .text	00000084 helper_plot_pixel
00283050 g     F .text	00000060 _read_r
00288490 g     O .rwdata	00000004 alt_max_fd
00282654 g     F .text	000000f0 _fclose_r
002829d0 g     F .text	00000030 fflush
00289f9c g     O .bss	00000004 __malloc_max_sbrked_mem
00285cf4 g     F .text	00000180 alt_irq_register
00284a90 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0028358c g     F .text	000000d4 lseek
00288470 g     O .rwdata	00000004 _global_impure_ptr
00281d58 g     F .text	00000564 _realloc_r
0028a0ec g       *ABS*	00000000 __bss_end
00284bb8 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
00286164 g     F .text	00000108 alt_tick
00280a28 g     F .text	00000018 __fp_lock_all
002860c8 g     F .text	0000009c alt_alarm_stop
00289fb4 g     O .bss	00000004 alt_irq_active
002800fc g     F .exceptions	000000d8 alt_irq_handler
002871e4 g     O .rwdata	00000028 alt_dev_null
00285908 g     F .text	00000048 alt_dcache_flush_all
002852f0 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
002884a8 g       *ABS*	00000000 __ram_rwdata_end
00288488 g     O .rwdata	00000008 alt_dev_list
002839dc g     F .text	000000f8 write
0028543c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
002869b8 g       *ABS*	00000000 __ram_rodata_end
002832d4 g     F .text	000000b0 fstat
002804f4 g     F .text	00000058 .hidden __umodsi3
0028a0ec g       *ABS*	00000000 end
00283ed4 g     F .text	000000b4 altera_avalon_jtag_uart_init
002801d4 g     F .exceptions	00000074 alt_instruction_exception_entry
002868fc g       *ABS*	00000000 __CTOR_LIST__
002e1a80 g       *ABS*	00000000 __alt_stack_pointer
002845ac g     F .text	00000224 altera_avalon_jtag_uart_write
00280a18 g     F .text	00000004 __sfp_lock_acquire
002818a8 g     F .text	000000e4 memchr
00282b24 g     F .text	00000310 _free_r
00286748 g     F .text	00000180 __call_exitprocs
00288478 g     O .rwdata	00000004 __malloc_sbrk_base
00280248 g     F .text	0000004c _start
00289fb8 g     O .bss	00000004 _alt_tick_rate
00289fbc g     O .bss	00000004 _alt_nticks
00283760 g     F .text	000000fc read
00283b40 g     F .text	00000230 alt_sys_init
00286630 g     F .text	00000118 __register_exitproc
00284238 g     F .text	00000068 altera_avalon_jtag_uart_close
002869b8 g       *ABS*	00000000 __ram_rwdata_start
002868fc g       *ABS*	00000000 __ram_rodata_start
00289fc4 g     O .bss	00000028 __malloc_current_mallinfo
00283d70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00286398 g     F .text	000000a4 alt_get_fd
002857b0 g     F .text	00000158 alt_busy_sleep
00282600 g     F .text	00000054 _close_r
002865b4 g     F .text	0000007c memcmp
00283e30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0028a0ec g       *ABS*	00000000 __alt_stack_base
00283e80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
002824ac g     F .text	00000154 __swsetup_r
002808d8 g     F .text	00000118 __sfp
00286ddc g     O .rwdata	00000408 __malloc_av_
00280a24 g     F .text	00000004 __sinit_lock_release
00282310 g     F .text	00000054 __sread
00286290 g     F .text	00000108 alt_find_file
0028598c g     F .text	000000a4 alt_dev_llist_insert
002836dc g     F .text	00000024 __malloc_lock
002838c0 g     F .text	000000b0 sbrk
00282974 g     F .text	0000005c _fflush_r
00289f98 g       *ABS*	00000000 __bss_start
00281c30 g     F .text	00000128 memset
00280294 g     F .text	00000104 main
00289fb0 g     O .bss	00000004 alt_envp
00289f98 g     O .bss	00000004 __malloc_max_total_mem
002849fc g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
00283dd0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00282444 g     F .text	00000008 __sclose
002e1a80 g       *ABS*	00000000 __alt_heap_limit
00282744 g     F .text	00000014 fclose
0028109c g     F .text	0000080c _malloc_r
00288494 g     O .rwdata	00000004 alt_errno
00280f14 g     F .text	000000c4 _fwalk
00280398 g     F .text	00000084 .hidden __divsi3
00282a00 g     F .text	00000124 _malloc_trim_r
002868fc g       *ABS*	00000000 __CTOR_END__
002868fc g       *ABS*	00000000 __flash_rodata_start
002868fc g       *ABS*	00000000 __DTOR_LIST__
00283b08 g     F .text	00000038 alt_irq_init
0028385c g     F .text	00000064 alt_release_fd
00286568 g     F .text	00000014 atexit
0028244c g     F .text	00000060 _write_r
00288474 g     O .rwdata	00000004 _impure_ptr
00289fa8 g     O .bss	00000004 alt_argc
00282758 g     F .text	0000021c __sflush_r
00285a90 g     F .text	00000060 _do_dtors
00280020 g       .exceptions	00000000 alt_irq_entry
00280a40 g     F .text	00000018 __fp_unlock_all
00288480 g     O .rwdata	00000008 alt_fs_list
00280020 g       *ABS*	00000000 __ram_exceptions_start
002884a8 g       *ABS*	00000000 _edata
0028a0ec g       *ABS*	00000000 _end
00280248 g       *ABS*	00000000 __ram_exceptions_end
002842a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0028236c g     F .text	0000007c __swrite
0028847c g     O .rwdata	00000004 __malloc_trim_threshold
0028657c g     F .text	00000038 exit
00280fd8 g     F .text	000000c4 _fwalk_reent
0028041c g     F .text	00000074 .hidden __modsi3
002e1a80 g       *ABS*	00000000 __alt_data_end
00280020 g     F .exceptions	00000000 alt_exception
00280a1c g     F .text	00000004 __sfp_lock_release
002868c8 g     F .text	00000034 _exit
00285684 g     F .text	0000012c alt_alarm_start
00282e94 g     F .text	000001bc __smakebuf_r
00280620 g     F .text	00000098 strlen
00285f74 g     F .text	00000154 open
00285b80 g     F .text	00000034 alt_icache_flush_all
0028849c g     O .rwdata	00000004 alt_priority_mask
002884a0 g     O .rwdata	00000008 alt_alarm_list
00285a30 g     F .text	00000060 _do_ctors
0028319c g     F .text	000000d0 close
002834cc g     F .text	00000084 alt_load
00280a20 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00280000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  280000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  280004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  280008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  28000c:	00bffd16 	blt	zero,r2,280004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  280010:	00400a34 	movhi	at,40
    ori r1, r1, %lo(_start)
  280014:	08409214 	ori	at,at,584
    jmp r1
  280018:	0800683a 	jmp	at
  28001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x280000>

Disassembly of section .exceptions:

00280020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  280020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  280024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  280028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  28002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  280030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  280034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  280038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  28003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  280040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  280044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  280048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  28004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  280050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  280054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  280058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  28005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  280060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  280064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  280068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  28006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  280070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  280074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  280078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  28007c:	10000326 	beq	r2,zero,28008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  280080:	20000226 	beq	r4,zero,28008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  280084:	02800fc0 	call	2800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  280088:	00000706 	br	2800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  28008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  280090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  280094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  280098:	02801d40 	call	2801d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  28009c:	1000021e 	bne	r2,zero,2800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  2800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  2800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  2800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  2800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  2800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2800f8:	ef80083a 	eret

002800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2800fc:	defff904 	addi	sp,sp,-28
  280100:	dfc00615 	stw	ra,24(sp)
  280104:	df000515 	stw	fp,20(sp)
  280108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  28010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  280110:	0005313a 	rdctl	r2,ipending
  280114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  280118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  28011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  280120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  280124:	00800044 	movi	r2,1
  280128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  28012c:	e0fffb17 	ldw	r3,-20(fp)
  280130:	e0bffc17 	ldw	r2,-16(fp)
  280134:	1884703a 	and	r2,r3,r2
  280138:	10001526 	beq	r2,zero,280190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  28013c:	00800a74 	movhi	r2,41
  280140:	10a7fb04 	addi	r2,r2,-24596
  280144:	e0fffd17 	ldw	r3,-12(fp)
  280148:	180690fa 	slli	r3,r3,3
  28014c:	10c5883a 	add	r2,r2,r3
  280150:	10c00017 	ldw	r3,0(r2)
  280154:	00800a74 	movhi	r2,41
  280158:	10a7fb04 	addi	r2,r2,-24596
  28015c:	e13ffd17 	ldw	r4,-12(fp)
  280160:	200890fa 	slli	r4,r4,3
  280164:	1105883a 	add	r2,r2,r4
  280168:	10800104 	addi	r2,r2,4
  28016c:	10800017 	ldw	r2,0(r2)
  280170:	e17ffd17 	ldw	r5,-12(fp)
  280174:	1009883a 	mov	r4,r2
  280178:	183ee83a 	callr	r3
#endif
        break;
  28017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  280180:	0005313a 	rdctl	r2,ipending
  280184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  280188:	e0bfff17 	ldw	r2,-4(fp)
  28018c:	00000706 	br	2801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  280190:	e0bffc17 	ldw	r2,-16(fp)
  280194:	1085883a 	add	r2,r2,r2
  280198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  28019c:	e0bffd17 	ldw	r2,-12(fp)
  2801a0:	10800044 	addi	r2,r2,1
  2801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2801a8:	003fe006 	br	28012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
  2801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  2801b0:	e0bffb17 	ldw	r2,-20(fp)
  2801b4:	103fda1e 	bne	r2,zero,280120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  2801b8:	0001883a 	nop
}
  2801bc:	0001883a 	nop
  2801c0:	e037883a 	mov	sp,fp
  2801c4:	dfc00117 	ldw	ra,4(sp)
  2801c8:	df000017 	ldw	fp,0(sp)
  2801cc:	dec00204 	addi	sp,sp,8
  2801d0:	f800283a 	ret

002801d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  2801d4:	defffb04 	addi	sp,sp,-20
  2801d8:	dfc00415 	stw	ra,16(sp)
  2801dc:	df000315 	stw	fp,12(sp)
  2801e0:	df000304 	addi	fp,sp,12
  2801e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  2801e8:	000531fa 	rdctl	r2,exception
  2801ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  2801f0:	e0bffd17 	ldw	r2,-12(fp)
  2801f4:	10801f0c 	andi	r2,r2,124
  2801f8:	1004d0ba 	srli	r2,r2,2
  2801fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  280200:	0005333a 	rdctl	r2,badaddr
  280204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  280208:	d0a6d417 	ldw	r2,-25776(gp)
  28020c:	10000726 	beq	r2,zero,28022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  280210:	d0a6d417 	ldw	r2,-25776(gp)
  280214:	e0fffd17 	ldw	r3,-12(fp)
  280218:	e1bffe17 	ldw	r6,-8(fp)
  28021c:	e17fff17 	ldw	r5,-4(fp)
  280220:	1809883a 	mov	r4,r3
  280224:	103ee83a 	callr	r2
  280228:	00000206 	br	280234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  28022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  280230:	0005883a 	mov	r2,zero
}
  280234:	e037883a 	mov	sp,fp
  280238:	dfc00117 	ldw	ra,4(sp)
  28023c:	df000017 	ldw	fp,0(sp)
  280240:	dec00204 	addi	sp,sp,8
  280244:	f800283a 	ret

Disassembly of section .text:

00280248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  280248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  28024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  280250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  280254:	00bffd16 	blt	zero,r2,28024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  280258:	06c00bb4 	movhi	sp,46
    ori sp, sp, %lo(__alt_stack_pointer)
  28025c:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
  280260:	06800a74 	movhi	gp,41
    ori gp, gp, %lo(_gp)
  280264:	d6811c14 	ori	gp,gp,1136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  280268:	00800a34 	movhi	r2,40
    ori r2, r2, %lo(__bss_start)
  28026c:	10a7e614 	ori	r2,r2,40856

    movhi r3, %hi(__bss_end)
  280270:	00c00a34 	movhi	r3,40
    ori r3, r3, %lo(__bss_end)
  280274:	18e83b14 	ori	r3,r3,41196

    beq r2, r3, 1f
  280278:	10c00326 	beq	r2,r3,280288 <_start+0x40>

0:
    stw zero, (r2)
  28027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  280280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  280284:	10fffd36 	bltu	r2,r3,28027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  280288:	02834cc0 	call	2834cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  28028c:	02836600 	call	283660 <alt_main>

00280290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  280290:	003fff06 	br	280290 <alt_after_alt_main>

00280294 <main>:
#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define RGB(r, g, b) (((r) << 20) | ((g) << 10) | (b))
#define RGB_MAX (0x3ff)

int main() {
  280294:	defff804 	addi	sp,sp,-32
  280298:	dfc00715 	stw	ra,28(sp)
  28029c:	df000615 	stw	fp,24(sp)
  2802a0:	df000604 	addi	fp,sp,24

	alt_up_pixel_buffer_dma_dev* pixel_buffer = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  2802a4:	01000a34 	movhi	r4,40
  2802a8:	211a3f04 	addi	r4,r4,26876
  2802ac:	02847d00 	call	2847d0 <alt_up_pixel_buffer_dma_open_dev>
  2802b0:	e0bffe15 	stw	r2,-8(fp)
	if (pixel_buffer == NULL) {
  2802b4:	e0bffe17 	ldw	r2,-8(fp)
  2802b8:	1000041e 	bne	r2,zero,2802cc <main+0x38>
		printf("Failed to open device\n");
  2802bc:	01000a34 	movhi	r4,40
  2802c0:	211a4704 	addi	r4,r4,26908
  2802c4:	028060c0 	call	28060c <puts>
  2802c8:	00000306 	br	2802d8 <main+0x44>
	} else {
		printf("I am a god amongst men\n");
  2802cc:	01000a34 	movhi	r4,40
  2802d0:	211a4d04 	addi	r4,r4,26932
  2802d4:	028060c0 	call	28060c <puts>
	}

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  2802d8:	000b883a 	mov	r5,zero
  2802dc:	e13ffe17 	ldw	r4,-8(fp)
  2802e0:	0284a900 	call	284a90 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_draw(pixel_buffer, 0xffffffff, 5, 5);
  2802e4:	01c00144 	movi	r7,5
  2802e8:	01800144 	movi	r6,5
  2802ec:	017fffc4 	movi	r5,-1
  2802f0:	e13ffe17 	ldw	r4,-8(fp)
  2802f4:	028480c0 	call	28480c <alt_up_pixel_buffer_dma_draw>
	alt_up_pixel_buffer_dma_draw(pixel_buffer, 0xffffffff, 15, 5);
  2802f8:	01c00144 	movi	r7,5
  2802fc:	018003c4 	movi	r6,15
  280300:	017fffc4 	movi	r5,-1
  280304:	e13ffe17 	ldw	r4,-8(fp)
  280308:	028480c0 	call	28480c <alt_up_pixel_buffer_dma_draw>

	int x = 0;
  28030c:	e03ffd15 	stw	zero,-12(fp)
	while (1) {
//		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x, 200, x + 20, 220, 0, 0);

		x += 1;
  280310:	e0bffd17 	ldw	r2,-12(fp)
  280314:	10800044 	addi	r2,r2,1
  280318:	e0bffd15 	stw	r2,-12(fp)
		if (x == 620) {
  28031c:	e0bffd17 	ldw	r2,-12(fp)
  280320:	10809b18 	cmpnei	r2,r2,620
  280324:	1000011e 	bne	r2,zero,28032c <main+0x98>
			x = 0;
  280328:	e03ffd15 	stw	zero,-12(fp)
		}

		int normalized = x * RGB_MAX / 620;
  28032c:	e0bffd17 	ldw	r2,-12(fp)
  280330:	1080ffe4 	muli	r2,r2,1023
  280334:	01409b04 	movi	r5,620
  280338:	1009883a 	mov	r4,r2
  28033c:	02803980 	call	280398 <__divsi3>
  280340:	e0bfff15 	stw	r2,-4(fp)

		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x, 200, x + 20, 220, RGB(normalized, RGB_MAX - normalized, 0), 0);
  280344:	e0bffd17 	ldw	r2,-12(fp)
  280348:	11400504 	addi	r5,r2,20
  28034c:	e0bfff17 	ldw	r2,-4(fp)
  280350:	1006953a 	slli	r3,r2,20
  280354:	0100ffc4 	movi	r4,1023
  280358:	e0bfff17 	ldw	r2,-4(fp)
  28035c:	2085c83a 	sub	r2,r4,r2
  280360:	100492ba 	slli	r2,r2,10
  280364:	1884b03a 	or	r2,r3,r2
  280368:	d8000215 	stw	zero,8(sp)
  28036c:	d8800115 	stw	r2,4(sp)
  280370:	00803704 	movi	r2,220
  280374:	d8800015 	stw	r2,0(sp)
  280378:	280f883a 	mov	r7,r5
  28037c:	01803204 	movi	r6,200
  280380:	e17ffd17 	ldw	r5,-12(fp)
  280384:	e13ffe17 	ldw	r4,-8(fp)
  280388:	0284bb80 	call	284bb8 <alt_up_pixel_buffer_dma_draw_box>

		usleep(16000);
  28038c:	010fa004 	movi	r4,16000
  280390:	02839700 	call	283970 <usleep>
	}
  280394:	003fde06 	br	280310 <main+0x7c>

00280398 <__divsi3>:
  280398:	20001b16 	blt	r4,zero,280408 <__divsi3+0x70>
  28039c:	000f883a 	mov	r7,zero
  2803a0:	28001616 	blt	r5,zero,2803fc <__divsi3+0x64>
  2803a4:	200d883a 	mov	r6,r4
  2803a8:	29001a2e 	bgeu	r5,r4,280414 <__divsi3+0x7c>
  2803ac:	00800804 	movi	r2,32
  2803b0:	00c00044 	movi	r3,1
  2803b4:	00000106 	br	2803bc <__divsi3+0x24>
  2803b8:	10000d26 	beq	r2,zero,2803f0 <__divsi3+0x58>
  2803bc:	294b883a 	add	r5,r5,r5
  2803c0:	10bfffc4 	addi	r2,r2,-1
  2803c4:	18c7883a 	add	r3,r3,r3
  2803c8:	293ffb36 	bltu	r5,r4,2803b8 <__divsi3+0x20>
  2803cc:	0005883a 	mov	r2,zero
  2803d0:	18000726 	beq	r3,zero,2803f0 <__divsi3+0x58>
  2803d4:	0005883a 	mov	r2,zero
  2803d8:	31400236 	bltu	r6,r5,2803e4 <__divsi3+0x4c>
  2803dc:	314dc83a 	sub	r6,r6,r5
  2803e0:	10c4b03a 	or	r2,r2,r3
  2803e4:	1806d07a 	srli	r3,r3,1
  2803e8:	280ad07a 	srli	r5,r5,1
  2803ec:	183ffa1e 	bne	r3,zero,2803d8 <__divsi3+0x40>
  2803f0:	38000126 	beq	r7,zero,2803f8 <__divsi3+0x60>
  2803f4:	0085c83a 	sub	r2,zero,r2
  2803f8:	f800283a 	ret
  2803fc:	014bc83a 	sub	r5,zero,r5
  280400:	39c0005c 	xori	r7,r7,1
  280404:	003fe706 	br	2803a4 <__divsi3+0xc>
  280408:	0109c83a 	sub	r4,zero,r4
  28040c:	01c00044 	movi	r7,1
  280410:	003fe306 	br	2803a0 <__divsi3+0x8>
  280414:	00c00044 	movi	r3,1
  280418:	003fee06 	br	2803d4 <__divsi3+0x3c>

0028041c <__modsi3>:
  28041c:	20001716 	blt	r4,zero,28047c <__modsi3+0x60>
  280420:	000f883a 	mov	r7,zero
  280424:	2005883a 	mov	r2,r4
  280428:	28001216 	blt	r5,zero,280474 <__modsi3+0x58>
  28042c:	2900162e 	bgeu	r5,r4,280488 <__modsi3+0x6c>
  280430:	01800804 	movi	r6,32
  280434:	00c00044 	movi	r3,1
  280438:	00000106 	br	280440 <__modsi3+0x24>
  28043c:	30000a26 	beq	r6,zero,280468 <__modsi3+0x4c>
  280440:	294b883a 	add	r5,r5,r5
  280444:	31bfffc4 	addi	r6,r6,-1
  280448:	18c7883a 	add	r3,r3,r3
  28044c:	293ffb36 	bltu	r5,r4,28043c <__modsi3+0x20>
  280450:	18000526 	beq	r3,zero,280468 <__modsi3+0x4c>
  280454:	1806d07a 	srli	r3,r3,1
  280458:	11400136 	bltu	r2,r5,280460 <__modsi3+0x44>
  28045c:	1145c83a 	sub	r2,r2,r5
  280460:	280ad07a 	srli	r5,r5,1
  280464:	183ffb1e 	bne	r3,zero,280454 <__modsi3+0x38>
  280468:	38000126 	beq	r7,zero,280470 <__modsi3+0x54>
  28046c:	0085c83a 	sub	r2,zero,r2
  280470:	f800283a 	ret
  280474:	014bc83a 	sub	r5,zero,r5
  280478:	003fec06 	br	28042c <__modsi3+0x10>
  28047c:	0109c83a 	sub	r4,zero,r4
  280480:	01c00044 	movi	r7,1
  280484:	003fe706 	br	280424 <__modsi3+0x8>
  280488:	00c00044 	movi	r3,1
  28048c:	003ff106 	br	280454 <__modsi3+0x38>

00280490 <__udivsi3>:
  280490:	200d883a 	mov	r6,r4
  280494:	2900152e 	bgeu	r5,r4,2804ec <__udivsi3+0x5c>
  280498:	28001416 	blt	r5,zero,2804ec <__udivsi3+0x5c>
  28049c:	00800804 	movi	r2,32
  2804a0:	00c00044 	movi	r3,1
  2804a4:	00000206 	br	2804b0 <__udivsi3+0x20>
  2804a8:	10000e26 	beq	r2,zero,2804e4 <__udivsi3+0x54>
  2804ac:	28000516 	blt	r5,zero,2804c4 <__udivsi3+0x34>
  2804b0:	294b883a 	add	r5,r5,r5
  2804b4:	10bfffc4 	addi	r2,r2,-1
  2804b8:	18c7883a 	add	r3,r3,r3
  2804bc:	293ffa36 	bltu	r5,r4,2804a8 <__udivsi3+0x18>
  2804c0:	18000826 	beq	r3,zero,2804e4 <__udivsi3+0x54>
  2804c4:	0005883a 	mov	r2,zero
  2804c8:	31400236 	bltu	r6,r5,2804d4 <__udivsi3+0x44>
  2804cc:	314dc83a 	sub	r6,r6,r5
  2804d0:	10c4b03a 	or	r2,r2,r3
  2804d4:	1806d07a 	srli	r3,r3,1
  2804d8:	280ad07a 	srli	r5,r5,1
  2804dc:	183ffa1e 	bne	r3,zero,2804c8 <__udivsi3+0x38>
  2804e0:	f800283a 	ret
  2804e4:	0005883a 	mov	r2,zero
  2804e8:	f800283a 	ret
  2804ec:	00c00044 	movi	r3,1
  2804f0:	003ff406 	br	2804c4 <__udivsi3+0x34>

002804f4 <__umodsi3>:
  2804f4:	2005883a 	mov	r2,r4
  2804f8:	2900122e 	bgeu	r5,r4,280544 <__umodsi3+0x50>
  2804fc:	28001116 	blt	r5,zero,280544 <__umodsi3+0x50>
  280500:	01800804 	movi	r6,32
  280504:	00c00044 	movi	r3,1
  280508:	00000206 	br	280514 <__umodsi3+0x20>
  28050c:	30000c26 	beq	r6,zero,280540 <__umodsi3+0x4c>
  280510:	28000516 	blt	r5,zero,280528 <__umodsi3+0x34>
  280514:	294b883a 	add	r5,r5,r5
  280518:	31bfffc4 	addi	r6,r6,-1
  28051c:	18c7883a 	add	r3,r3,r3
  280520:	293ffa36 	bltu	r5,r4,28050c <__umodsi3+0x18>
  280524:	18000626 	beq	r3,zero,280540 <__umodsi3+0x4c>
  280528:	1806d07a 	srli	r3,r3,1
  28052c:	11400136 	bltu	r2,r5,280534 <__umodsi3+0x40>
  280530:	1145c83a 	sub	r2,r2,r5
  280534:	280ad07a 	srli	r5,r5,1
  280538:	183ffb1e 	bne	r3,zero,280528 <__umodsi3+0x34>
  28053c:	f800283a 	ret
  280540:	f800283a 	ret
  280544:	00c00044 	movi	r3,1
  280548:	003ff706 	br	280528 <__umodsi3+0x34>

0028054c <_puts_r>:
  28054c:	defff604 	addi	sp,sp,-40
  280550:	dc000715 	stw	r16,28(sp)
  280554:	2021883a 	mov	r16,r4
  280558:	2809883a 	mov	r4,r5
  28055c:	dc400815 	stw	r17,32(sp)
  280560:	dfc00915 	stw	ra,36(sp)
  280564:	2823883a 	mov	r17,r5
  280568:	02806200 	call	280620 <strlen>
  28056c:	10c00044 	addi	r3,r2,1
  280570:	d8800115 	stw	r2,4(sp)
  280574:	00800a34 	movhi	r2,40
  280578:	109a5304 	addi	r2,r2,26956
  28057c:	d8800215 	stw	r2,8(sp)
  280580:	00800044 	movi	r2,1
  280584:	d8800315 	stw	r2,12(sp)
  280588:	00800084 	movi	r2,2
  28058c:	dc400015 	stw	r17,0(sp)
  280590:	d8c00615 	stw	r3,24(sp)
  280594:	dec00415 	stw	sp,16(sp)
  280598:	d8800515 	stw	r2,20(sp)
  28059c:	80000226 	beq	r16,zero,2805a8 <_puts_r+0x5c>
  2805a0:	80800e17 	ldw	r2,56(r16)
  2805a4:	10001426 	beq	r2,zero,2805f8 <_puts_r+0xac>
  2805a8:	81400217 	ldw	r5,8(r16)
  2805ac:	2880030b 	ldhu	r2,12(r5)
  2805b0:	10c8000c 	andi	r3,r2,8192
  2805b4:	1800061e 	bne	r3,zero,2805d0 <_puts_r+0x84>
  2805b8:	29001917 	ldw	r4,100(r5)
  2805bc:	00f7ffc4 	movi	r3,-8193
  2805c0:	10880014 	ori	r2,r2,8192
  2805c4:	20c6703a 	and	r3,r4,r3
  2805c8:	2880030d 	sth	r2,12(r5)
  2805cc:	28c01915 	stw	r3,100(r5)
  2805d0:	d9800404 	addi	r6,sp,16
  2805d4:	8009883a 	mov	r4,r16
  2805d8:	0280a580 	call	280a58 <__sfvwrite_r>
  2805dc:	1000091e 	bne	r2,zero,280604 <_puts_r+0xb8>
  2805e0:	00800284 	movi	r2,10
  2805e4:	dfc00917 	ldw	ra,36(sp)
  2805e8:	dc400817 	ldw	r17,32(sp)
  2805ec:	dc000717 	ldw	r16,28(sp)
  2805f0:	dec00a04 	addi	sp,sp,40
  2805f4:	f800283a 	ret
  2805f8:	8009883a 	mov	r4,r16
  2805fc:	0280a080 	call	280a08 <__sinit>
  280600:	003fe906 	br	2805a8 <_puts_r+0x5c>
  280604:	00bfffc4 	movi	r2,-1
  280608:	003ff606 	br	2805e4 <_puts_r+0x98>

0028060c <puts>:
  28060c:	00800a74 	movhi	r2,41
  280610:	10a11d04 	addi	r2,r2,-31628
  280614:	200b883a 	mov	r5,r4
  280618:	11000017 	ldw	r4,0(r2)
  28061c:	028054c1 	jmpi	28054c <_puts_r>

00280620 <strlen>:
  280620:	208000cc 	andi	r2,r4,3
  280624:	10002026 	beq	r2,zero,2806a8 <strlen+0x88>
  280628:	20800007 	ldb	r2,0(r4)
  28062c:	10002026 	beq	r2,zero,2806b0 <strlen+0x90>
  280630:	2005883a 	mov	r2,r4
  280634:	00000206 	br	280640 <strlen+0x20>
  280638:	10c00007 	ldb	r3,0(r2)
  28063c:	18001826 	beq	r3,zero,2806a0 <strlen+0x80>
  280640:	10800044 	addi	r2,r2,1
  280644:	10c000cc 	andi	r3,r2,3
  280648:	183ffb1e 	bne	r3,zero,280638 <strlen+0x18>
  28064c:	10c00017 	ldw	r3,0(r2)
  280650:	01ffbff4 	movhi	r7,65279
  280654:	39ffbfc4 	addi	r7,r7,-257
  280658:	00ca303a 	nor	r5,zero,r3
  28065c:	01a02074 	movhi	r6,32897
  280660:	19c7883a 	add	r3,r3,r7
  280664:	31a02004 	addi	r6,r6,-32640
  280668:	1946703a 	and	r3,r3,r5
  28066c:	1986703a 	and	r3,r3,r6
  280670:	1800091e 	bne	r3,zero,280698 <strlen+0x78>
  280674:	10800104 	addi	r2,r2,4
  280678:	10c00017 	ldw	r3,0(r2)
  28067c:	19cb883a 	add	r5,r3,r7
  280680:	00c6303a 	nor	r3,zero,r3
  280684:	28c6703a 	and	r3,r5,r3
  280688:	1986703a 	and	r3,r3,r6
  28068c:	183ff926 	beq	r3,zero,280674 <strlen+0x54>
  280690:	00000106 	br	280698 <strlen+0x78>
  280694:	10800044 	addi	r2,r2,1
  280698:	10c00007 	ldb	r3,0(r2)
  28069c:	183ffd1e 	bne	r3,zero,280694 <strlen+0x74>
  2806a0:	1105c83a 	sub	r2,r2,r4
  2806a4:	f800283a 	ret
  2806a8:	2005883a 	mov	r2,r4
  2806ac:	003fe706 	br	28064c <strlen+0x2c>
  2806b0:	0005883a 	mov	r2,zero
  2806b4:	f800283a 	ret

002806b8 <__fp_unlock>:
  2806b8:	0005883a 	mov	r2,zero
  2806bc:	f800283a 	ret

002806c0 <_cleanup_r>:
  2806c0:	01400a34 	movhi	r5,40
  2806c4:	29499504 	addi	r5,r5,9812
  2806c8:	0280fd81 	jmpi	280fd8 <_fwalk_reent>

002806cc <__sinit.part.1>:
  2806cc:	defff704 	addi	sp,sp,-36
  2806d0:	00c00a34 	movhi	r3,40
  2806d4:	dfc00815 	stw	ra,32(sp)
  2806d8:	ddc00715 	stw	r23,28(sp)
  2806dc:	dd800615 	stw	r22,24(sp)
  2806e0:	dd400515 	stw	r21,20(sp)
  2806e4:	dd000415 	stw	r20,16(sp)
  2806e8:	dcc00315 	stw	r19,12(sp)
  2806ec:	dc800215 	stw	r18,8(sp)
  2806f0:	dc400115 	stw	r17,4(sp)
  2806f4:	dc000015 	stw	r16,0(sp)
  2806f8:	18c1b004 	addi	r3,r3,1728
  2806fc:	24000117 	ldw	r16,4(r4)
  280700:	20c00f15 	stw	r3,60(r4)
  280704:	2080bb04 	addi	r2,r4,748
  280708:	00c000c4 	movi	r3,3
  28070c:	20c0b915 	stw	r3,740(r4)
  280710:	2080ba15 	stw	r2,744(r4)
  280714:	2000b815 	stw	zero,736(r4)
  280718:	05c00204 	movi	r23,8
  28071c:	00800104 	movi	r2,4
  280720:	2025883a 	mov	r18,r4
  280724:	b80d883a 	mov	r6,r23
  280728:	81001704 	addi	r4,r16,92
  28072c:	000b883a 	mov	r5,zero
  280730:	80000015 	stw	zero,0(r16)
  280734:	80000115 	stw	zero,4(r16)
  280738:	80000215 	stw	zero,8(r16)
  28073c:	8080030d 	sth	r2,12(r16)
  280740:	80001915 	stw	zero,100(r16)
  280744:	8000038d 	sth	zero,14(r16)
  280748:	80000415 	stw	zero,16(r16)
  28074c:	80000515 	stw	zero,20(r16)
  280750:	80000615 	stw	zero,24(r16)
  280754:	0281c300 	call	281c30 <memset>
  280758:	05800a34 	movhi	r22,40
  28075c:	94400217 	ldw	r17,8(r18)
  280760:	05400a34 	movhi	r21,40
  280764:	05000a34 	movhi	r20,40
  280768:	04c00a34 	movhi	r19,40
  28076c:	b588c404 	addi	r22,r22,8976
  280770:	ad48db04 	addi	r21,r21,9068
  280774:	a508fa04 	addi	r20,r20,9192
  280778:	9cc91104 	addi	r19,r19,9284
  28077c:	85800815 	stw	r22,32(r16)
  280780:	85400915 	stw	r21,36(r16)
  280784:	85000a15 	stw	r20,40(r16)
  280788:	84c00b15 	stw	r19,44(r16)
  28078c:	84000715 	stw	r16,28(r16)
  280790:	00800284 	movi	r2,10
  280794:	8880030d 	sth	r2,12(r17)
  280798:	00800044 	movi	r2,1
  28079c:	b80d883a 	mov	r6,r23
  2807a0:	89001704 	addi	r4,r17,92
  2807a4:	000b883a 	mov	r5,zero
  2807a8:	88000015 	stw	zero,0(r17)
  2807ac:	88000115 	stw	zero,4(r17)
  2807b0:	88000215 	stw	zero,8(r17)
  2807b4:	88001915 	stw	zero,100(r17)
  2807b8:	8880038d 	sth	r2,14(r17)
  2807bc:	88000415 	stw	zero,16(r17)
  2807c0:	88000515 	stw	zero,20(r17)
  2807c4:	88000615 	stw	zero,24(r17)
  2807c8:	0281c300 	call	281c30 <memset>
  2807cc:	94000317 	ldw	r16,12(r18)
  2807d0:	00800484 	movi	r2,18
  2807d4:	8c400715 	stw	r17,28(r17)
  2807d8:	8d800815 	stw	r22,32(r17)
  2807dc:	8d400915 	stw	r21,36(r17)
  2807e0:	8d000a15 	stw	r20,40(r17)
  2807e4:	8cc00b15 	stw	r19,44(r17)
  2807e8:	8080030d 	sth	r2,12(r16)
  2807ec:	00800084 	movi	r2,2
  2807f0:	80000015 	stw	zero,0(r16)
  2807f4:	80000115 	stw	zero,4(r16)
  2807f8:	80000215 	stw	zero,8(r16)
  2807fc:	80001915 	stw	zero,100(r16)
  280800:	8080038d 	sth	r2,14(r16)
  280804:	80000415 	stw	zero,16(r16)
  280808:	80000515 	stw	zero,20(r16)
  28080c:	80000615 	stw	zero,24(r16)
  280810:	b80d883a 	mov	r6,r23
  280814:	000b883a 	mov	r5,zero
  280818:	81001704 	addi	r4,r16,92
  28081c:	0281c300 	call	281c30 <memset>
  280820:	00800044 	movi	r2,1
  280824:	84000715 	stw	r16,28(r16)
  280828:	85800815 	stw	r22,32(r16)
  28082c:	85400915 	stw	r21,36(r16)
  280830:	85000a15 	stw	r20,40(r16)
  280834:	84c00b15 	stw	r19,44(r16)
  280838:	90800e15 	stw	r2,56(r18)
  28083c:	dfc00817 	ldw	ra,32(sp)
  280840:	ddc00717 	ldw	r23,28(sp)
  280844:	dd800617 	ldw	r22,24(sp)
  280848:	dd400517 	ldw	r21,20(sp)
  28084c:	dd000417 	ldw	r20,16(sp)
  280850:	dcc00317 	ldw	r19,12(sp)
  280854:	dc800217 	ldw	r18,8(sp)
  280858:	dc400117 	ldw	r17,4(sp)
  28085c:	dc000017 	ldw	r16,0(sp)
  280860:	dec00904 	addi	sp,sp,36
  280864:	f800283a 	ret

00280868 <__fp_lock>:
  280868:	0005883a 	mov	r2,zero
  28086c:	f800283a 	ret

00280870 <__sfmoreglue>:
  280870:	defffc04 	addi	sp,sp,-16
  280874:	dc400115 	stw	r17,4(sp)
  280878:	2c7fffc4 	addi	r17,r5,-1
  28087c:	8c401a24 	muli	r17,r17,104
  280880:	dc800215 	stw	r18,8(sp)
  280884:	2825883a 	mov	r18,r5
  280888:	89401d04 	addi	r5,r17,116
  28088c:	dc000015 	stw	r16,0(sp)
  280890:	dfc00315 	stw	ra,12(sp)
  280894:	028109c0 	call	28109c <_malloc_r>
  280898:	1021883a 	mov	r16,r2
  28089c:	10000726 	beq	r2,zero,2808bc <__sfmoreglue+0x4c>
  2808a0:	11000304 	addi	r4,r2,12
  2808a4:	10000015 	stw	zero,0(r2)
  2808a8:	14800115 	stw	r18,4(r2)
  2808ac:	11000215 	stw	r4,8(r2)
  2808b0:	89801a04 	addi	r6,r17,104
  2808b4:	000b883a 	mov	r5,zero
  2808b8:	0281c300 	call	281c30 <memset>
  2808bc:	8005883a 	mov	r2,r16
  2808c0:	dfc00317 	ldw	ra,12(sp)
  2808c4:	dc800217 	ldw	r18,8(sp)
  2808c8:	dc400117 	ldw	r17,4(sp)
  2808cc:	dc000017 	ldw	r16,0(sp)
  2808d0:	dec00404 	addi	sp,sp,16
  2808d4:	f800283a 	ret

002808d8 <__sfp>:
  2808d8:	defffb04 	addi	sp,sp,-20
  2808dc:	dc000015 	stw	r16,0(sp)
  2808e0:	04000a74 	movhi	r16,41
  2808e4:	84211c04 	addi	r16,r16,-31632
  2808e8:	dcc00315 	stw	r19,12(sp)
  2808ec:	2027883a 	mov	r19,r4
  2808f0:	81000017 	ldw	r4,0(r16)
  2808f4:	dfc00415 	stw	ra,16(sp)
  2808f8:	dc800215 	stw	r18,8(sp)
  2808fc:	20800e17 	ldw	r2,56(r4)
  280900:	dc400115 	stw	r17,4(sp)
  280904:	1000021e 	bne	r2,zero,280910 <__sfp+0x38>
  280908:	02806cc0 	call	2806cc <__sinit.part.1>
  28090c:	81000017 	ldw	r4,0(r16)
  280910:	2480b804 	addi	r18,r4,736
  280914:	047fffc4 	movi	r17,-1
  280918:	91000117 	ldw	r4,4(r18)
  28091c:	94000217 	ldw	r16,8(r18)
  280920:	213fffc4 	addi	r4,r4,-1
  280924:	20000a16 	blt	r4,zero,280950 <__sfp+0x78>
  280928:	8080030f 	ldh	r2,12(r16)
  28092c:	10000c26 	beq	r2,zero,280960 <__sfp+0x88>
  280930:	80c01d04 	addi	r3,r16,116
  280934:	00000206 	br	280940 <__sfp+0x68>
  280938:	18bfe60f 	ldh	r2,-104(r3)
  28093c:	10000826 	beq	r2,zero,280960 <__sfp+0x88>
  280940:	213fffc4 	addi	r4,r4,-1
  280944:	1c3ffd04 	addi	r16,r3,-12
  280948:	18c01a04 	addi	r3,r3,104
  28094c:	247ffa1e 	bne	r4,r17,280938 <__sfp+0x60>
  280950:	90800017 	ldw	r2,0(r18)
  280954:	10001d26 	beq	r2,zero,2809cc <__sfp+0xf4>
  280958:	1025883a 	mov	r18,r2
  28095c:	003fee06 	br	280918 <__sfp+0x40>
  280960:	00bfffc4 	movi	r2,-1
  280964:	8080038d 	sth	r2,14(r16)
  280968:	00800044 	movi	r2,1
  28096c:	8080030d 	sth	r2,12(r16)
  280970:	80001915 	stw	zero,100(r16)
  280974:	80000015 	stw	zero,0(r16)
  280978:	80000215 	stw	zero,8(r16)
  28097c:	80000115 	stw	zero,4(r16)
  280980:	80000415 	stw	zero,16(r16)
  280984:	80000515 	stw	zero,20(r16)
  280988:	80000615 	stw	zero,24(r16)
  28098c:	01800204 	movi	r6,8
  280990:	000b883a 	mov	r5,zero
  280994:	81001704 	addi	r4,r16,92
  280998:	0281c300 	call	281c30 <memset>
  28099c:	8005883a 	mov	r2,r16
  2809a0:	80000c15 	stw	zero,48(r16)
  2809a4:	80000d15 	stw	zero,52(r16)
  2809a8:	80001115 	stw	zero,68(r16)
  2809ac:	80001215 	stw	zero,72(r16)
  2809b0:	dfc00417 	ldw	ra,16(sp)
  2809b4:	dcc00317 	ldw	r19,12(sp)
  2809b8:	dc800217 	ldw	r18,8(sp)
  2809bc:	dc400117 	ldw	r17,4(sp)
  2809c0:	dc000017 	ldw	r16,0(sp)
  2809c4:	dec00504 	addi	sp,sp,20
  2809c8:	f800283a 	ret
  2809cc:	01400104 	movi	r5,4
  2809d0:	9809883a 	mov	r4,r19
  2809d4:	02808700 	call	280870 <__sfmoreglue>
  2809d8:	90800015 	stw	r2,0(r18)
  2809dc:	103fde1e 	bne	r2,zero,280958 <__sfp+0x80>
  2809e0:	00800304 	movi	r2,12
  2809e4:	98800015 	stw	r2,0(r19)
  2809e8:	0005883a 	mov	r2,zero
  2809ec:	003ff006 	br	2809b0 <__sfp+0xd8>

002809f0 <_cleanup>:
  2809f0:	00800a74 	movhi	r2,41
  2809f4:	10a11c04 	addi	r2,r2,-31632
  2809f8:	11000017 	ldw	r4,0(r2)
  2809fc:	01400a34 	movhi	r5,40
  280a00:	29499504 	addi	r5,r5,9812
  280a04:	0280fd81 	jmpi	280fd8 <_fwalk_reent>

00280a08 <__sinit>:
  280a08:	20800e17 	ldw	r2,56(r4)
  280a0c:	10000126 	beq	r2,zero,280a14 <__sinit+0xc>
  280a10:	f800283a 	ret
  280a14:	02806cc1 	jmpi	2806cc <__sinit.part.1>

00280a18 <__sfp_lock_acquire>:
  280a18:	f800283a 	ret

00280a1c <__sfp_lock_release>:
  280a1c:	f800283a 	ret

00280a20 <__sinit_lock_acquire>:
  280a20:	f800283a 	ret

00280a24 <__sinit_lock_release>:
  280a24:	f800283a 	ret

00280a28 <__fp_lock_all>:
  280a28:	00800a74 	movhi	r2,41
  280a2c:	10a11d04 	addi	r2,r2,-31628
  280a30:	11000017 	ldw	r4,0(r2)
  280a34:	01400a34 	movhi	r5,40
  280a38:	29421a04 	addi	r5,r5,2152
  280a3c:	0280f141 	jmpi	280f14 <_fwalk>

00280a40 <__fp_unlock_all>:
  280a40:	00800a74 	movhi	r2,41
  280a44:	10a11d04 	addi	r2,r2,-31628
  280a48:	11000017 	ldw	r4,0(r2)
  280a4c:	01400a34 	movhi	r5,40
  280a50:	2941ae04 	addi	r5,r5,1720
  280a54:	0280f141 	jmpi	280f14 <_fwalk>

00280a58 <__sfvwrite_r>:
  280a58:	30800217 	ldw	r2,8(r6)
  280a5c:	10006726 	beq	r2,zero,280bfc <__sfvwrite_r+0x1a4>
  280a60:	28c0030b 	ldhu	r3,12(r5)
  280a64:	defff404 	addi	sp,sp,-48
  280a68:	dd400715 	stw	r21,28(sp)
  280a6c:	dd000615 	stw	r20,24(sp)
  280a70:	dc000215 	stw	r16,8(sp)
  280a74:	dfc00b15 	stw	ra,44(sp)
  280a78:	df000a15 	stw	fp,40(sp)
  280a7c:	ddc00915 	stw	r23,36(sp)
  280a80:	dd800815 	stw	r22,32(sp)
  280a84:	dcc00515 	stw	r19,20(sp)
  280a88:	dc800415 	stw	r18,16(sp)
  280a8c:	dc400315 	stw	r17,12(sp)
  280a90:	1880020c 	andi	r2,r3,8
  280a94:	2821883a 	mov	r16,r5
  280a98:	202b883a 	mov	r21,r4
  280a9c:	3029883a 	mov	r20,r6
  280aa0:	10002726 	beq	r2,zero,280b40 <__sfvwrite_r+0xe8>
  280aa4:	28800417 	ldw	r2,16(r5)
  280aa8:	10002526 	beq	r2,zero,280b40 <__sfvwrite_r+0xe8>
  280aac:	1880008c 	andi	r2,r3,2
  280ab0:	a4400017 	ldw	r17,0(r20)
  280ab4:	10002a26 	beq	r2,zero,280b60 <__sfvwrite_r+0x108>
  280ab8:	05a00034 	movhi	r22,32768
  280abc:	0027883a 	mov	r19,zero
  280ac0:	0025883a 	mov	r18,zero
  280ac4:	b5bf0004 	addi	r22,r22,-1024
  280ac8:	980d883a 	mov	r6,r19
  280acc:	a809883a 	mov	r4,r21
  280ad0:	90004626 	beq	r18,zero,280bec <__sfvwrite_r+0x194>
  280ad4:	900f883a 	mov	r7,r18
  280ad8:	b480022e 	bgeu	r22,r18,280ae4 <__sfvwrite_r+0x8c>
  280adc:	01e00034 	movhi	r7,32768
  280ae0:	39ff0004 	addi	r7,r7,-1024
  280ae4:	80800917 	ldw	r2,36(r16)
  280ae8:	81400717 	ldw	r5,28(r16)
  280aec:	103ee83a 	callr	r2
  280af0:	0080570e 	bge	zero,r2,280c50 <__sfvwrite_r+0x1f8>
  280af4:	a0c00217 	ldw	r3,8(r20)
  280af8:	98a7883a 	add	r19,r19,r2
  280afc:	90a5c83a 	sub	r18,r18,r2
  280b00:	1885c83a 	sub	r2,r3,r2
  280b04:	a0800215 	stw	r2,8(r20)
  280b08:	103fef1e 	bne	r2,zero,280ac8 <__sfvwrite_r+0x70>
  280b0c:	0005883a 	mov	r2,zero
  280b10:	dfc00b17 	ldw	ra,44(sp)
  280b14:	df000a17 	ldw	fp,40(sp)
  280b18:	ddc00917 	ldw	r23,36(sp)
  280b1c:	dd800817 	ldw	r22,32(sp)
  280b20:	dd400717 	ldw	r21,28(sp)
  280b24:	dd000617 	ldw	r20,24(sp)
  280b28:	dcc00517 	ldw	r19,20(sp)
  280b2c:	dc800417 	ldw	r18,16(sp)
  280b30:	dc400317 	ldw	r17,12(sp)
  280b34:	dc000217 	ldw	r16,8(sp)
  280b38:	dec00c04 	addi	sp,sp,48
  280b3c:	f800283a 	ret
  280b40:	800b883a 	mov	r5,r16
  280b44:	a809883a 	mov	r4,r21
  280b48:	02824ac0 	call	2824ac <__swsetup_r>
  280b4c:	1000eb1e 	bne	r2,zero,280efc <__sfvwrite_r+0x4a4>
  280b50:	80c0030b 	ldhu	r3,12(r16)
  280b54:	a4400017 	ldw	r17,0(r20)
  280b58:	1880008c 	andi	r2,r3,2
  280b5c:	103fd61e 	bne	r2,zero,280ab8 <__sfvwrite_r+0x60>
  280b60:	1880004c 	andi	r2,r3,1
  280b64:	10003f1e 	bne	r2,zero,280c64 <__sfvwrite_r+0x20c>
  280b68:	0039883a 	mov	fp,zero
  280b6c:	0025883a 	mov	r18,zero
  280b70:	90001a26 	beq	r18,zero,280bdc <__sfvwrite_r+0x184>
  280b74:	1880800c 	andi	r2,r3,512
  280b78:	84c00217 	ldw	r19,8(r16)
  280b7c:	10002126 	beq	r2,zero,280c04 <__sfvwrite_r+0x1ac>
  280b80:	982f883a 	mov	r23,r19
  280b84:	94c09336 	bltu	r18,r19,280dd4 <__sfvwrite_r+0x37c>
  280b88:	1881200c 	andi	r2,r3,1152
  280b8c:	10009e1e 	bne	r2,zero,280e08 <__sfvwrite_r+0x3b0>
  280b90:	81000017 	ldw	r4,0(r16)
  280b94:	b80d883a 	mov	r6,r23
  280b98:	e00b883a 	mov	r5,fp
  280b9c:	0281ad40 	call	281ad4 <memmove>
  280ba0:	80c00217 	ldw	r3,8(r16)
  280ba4:	81000017 	ldw	r4,0(r16)
  280ba8:	9005883a 	mov	r2,r18
  280bac:	1ce7c83a 	sub	r19,r3,r19
  280bb0:	25cf883a 	add	r7,r4,r23
  280bb4:	84c00215 	stw	r19,8(r16)
  280bb8:	81c00015 	stw	r7,0(r16)
  280bbc:	a0c00217 	ldw	r3,8(r20)
  280bc0:	e0b9883a 	add	fp,fp,r2
  280bc4:	90a5c83a 	sub	r18,r18,r2
  280bc8:	18a7c83a 	sub	r19,r3,r2
  280bcc:	a4c00215 	stw	r19,8(r20)
  280bd0:	983fce26 	beq	r19,zero,280b0c <__sfvwrite_r+0xb4>
  280bd4:	80c0030b 	ldhu	r3,12(r16)
  280bd8:	903fe61e 	bne	r18,zero,280b74 <__sfvwrite_r+0x11c>
  280bdc:	8f000017 	ldw	fp,0(r17)
  280be0:	8c800117 	ldw	r18,4(r17)
  280be4:	8c400204 	addi	r17,r17,8
  280be8:	003fe106 	br	280b70 <__sfvwrite_r+0x118>
  280bec:	8cc00017 	ldw	r19,0(r17)
  280bf0:	8c800117 	ldw	r18,4(r17)
  280bf4:	8c400204 	addi	r17,r17,8
  280bf8:	003fb306 	br	280ac8 <__sfvwrite_r+0x70>
  280bfc:	0005883a 	mov	r2,zero
  280c00:	f800283a 	ret
  280c04:	81000017 	ldw	r4,0(r16)
  280c08:	80800417 	ldw	r2,16(r16)
  280c0c:	11005736 	bltu	r2,r4,280d6c <__sfvwrite_r+0x314>
  280c10:	85c00517 	ldw	r23,20(r16)
  280c14:	95c05536 	bltu	r18,r23,280d6c <__sfvwrite_r+0x314>
  280c18:	00a00034 	movhi	r2,32768
  280c1c:	10bfffc4 	addi	r2,r2,-1
  280c20:	9009883a 	mov	r4,r18
  280c24:	1480012e 	bgeu	r2,r18,280c2c <__sfvwrite_r+0x1d4>
  280c28:	1009883a 	mov	r4,r2
  280c2c:	b80b883a 	mov	r5,r23
  280c30:	02803980 	call	280398 <__divsi3>
  280c34:	15cf383a 	mul	r7,r2,r23
  280c38:	81400717 	ldw	r5,28(r16)
  280c3c:	80800917 	ldw	r2,36(r16)
  280c40:	e00d883a 	mov	r6,fp
  280c44:	a809883a 	mov	r4,r21
  280c48:	103ee83a 	callr	r2
  280c4c:	00bfdb16 	blt	zero,r2,280bbc <__sfvwrite_r+0x164>
  280c50:	8080030b 	ldhu	r2,12(r16)
  280c54:	10801014 	ori	r2,r2,64
  280c58:	8080030d 	sth	r2,12(r16)
  280c5c:	00bfffc4 	movi	r2,-1
  280c60:	003fab06 	br	280b10 <__sfvwrite_r+0xb8>
  280c64:	0027883a 	mov	r19,zero
  280c68:	0011883a 	mov	r8,zero
  280c6c:	0039883a 	mov	fp,zero
  280c70:	0025883a 	mov	r18,zero
  280c74:	90001f26 	beq	r18,zero,280cf4 <__sfvwrite_r+0x29c>
  280c78:	40005a26 	beq	r8,zero,280de4 <__sfvwrite_r+0x38c>
  280c7c:	982d883a 	mov	r22,r19
  280c80:	94c0012e 	bgeu	r18,r19,280c88 <__sfvwrite_r+0x230>
  280c84:	902d883a 	mov	r22,r18
  280c88:	81000017 	ldw	r4,0(r16)
  280c8c:	80800417 	ldw	r2,16(r16)
  280c90:	b02f883a 	mov	r23,r22
  280c94:	81c00517 	ldw	r7,20(r16)
  280c98:	1100032e 	bgeu	r2,r4,280ca8 <__sfvwrite_r+0x250>
  280c9c:	80c00217 	ldw	r3,8(r16)
  280ca0:	38c7883a 	add	r3,r7,r3
  280ca4:	1d801816 	blt	r3,r22,280d08 <__sfvwrite_r+0x2b0>
  280ca8:	b1c03e16 	blt	r22,r7,280da4 <__sfvwrite_r+0x34c>
  280cac:	80800917 	ldw	r2,36(r16)
  280cb0:	81400717 	ldw	r5,28(r16)
  280cb4:	e00d883a 	mov	r6,fp
  280cb8:	da000115 	stw	r8,4(sp)
  280cbc:	a809883a 	mov	r4,r21
  280cc0:	103ee83a 	callr	r2
  280cc4:	102f883a 	mov	r23,r2
  280cc8:	da000117 	ldw	r8,4(sp)
  280ccc:	00bfe00e 	bge	zero,r2,280c50 <__sfvwrite_r+0x1f8>
  280cd0:	9de7c83a 	sub	r19,r19,r23
  280cd4:	98001f26 	beq	r19,zero,280d54 <__sfvwrite_r+0x2fc>
  280cd8:	a0800217 	ldw	r2,8(r20)
  280cdc:	e5f9883a 	add	fp,fp,r23
  280ce0:	95e5c83a 	sub	r18,r18,r23
  280ce4:	15efc83a 	sub	r23,r2,r23
  280ce8:	a5c00215 	stw	r23,8(r20)
  280cec:	b83f8726 	beq	r23,zero,280b0c <__sfvwrite_r+0xb4>
  280cf0:	903fe11e 	bne	r18,zero,280c78 <__sfvwrite_r+0x220>
  280cf4:	8f000017 	ldw	fp,0(r17)
  280cf8:	8c800117 	ldw	r18,4(r17)
  280cfc:	0011883a 	mov	r8,zero
  280d00:	8c400204 	addi	r17,r17,8
  280d04:	003fdb06 	br	280c74 <__sfvwrite_r+0x21c>
  280d08:	180d883a 	mov	r6,r3
  280d0c:	e00b883a 	mov	r5,fp
  280d10:	da000115 	stw	r8,4(sp)
  280d14:	d8c00015 	stw	r3,0(sp)
  280d18:	0281ad40 	call	281ad4 <memmove>
  280d1c:	d8c00017 	ldw	r3,0(sp)
  280d20:	80800017 	ldw	r2,0(r16)
  280d24:	800b883a 	mov	r5,r16
  280d28:	a809883a 	mov	r4,r21
  280d2c:	10c5883a 	add	r2,r2,r3
  280d30:	80800015 	stw	r2,0(r16)
  280d34:	d8c00015 	stw	r3,0(sp)
  280d38:	02829740 	call	282974 <_fflush_r>
  280d3c:	d8c00017 	ldw	r3,0(sp)
  280d40:	da000117 	ldw	r8,4(sp)
  280d44:	103fc21e 	bne	r2,zero,280c50 <__sfvwrite_r+0x1f8>
  280d48:	182f883a 	mov	r23,r3
  280d4c:	9de7c83a 	sub	r19,r19,r23
  280d50:	983fe11e 	bne	r19,zero,280cd8 <__sfvwrite_r+0x280>
  280d54:	800b883a 	mov	r5,r16
  280d58:	a809883a 	mov	r4,r21
  280d5c:	02829740 	call	282974 <_fflush_r>
  280d60:	103fbb1e 	bne	r2,zero,280c50 <__sfvwrite_r+0x1f8>
  280d64:	0011883a 	mov	r8,zero
  280d68:	003fdb06 	br	280cd8 <__sfvwrite_r+0x280>
  280d6c:	94c0012e 	bgeu	r18,r19,280d74 <__sfvwrite_r+0x31c>
  280d70:	9027883a 	mov	r19,r18
  280d74:	980d883a 	mov	r6,r19
  280d78:	e00b883a 	mov	r5,fp
  280d7c:	0281ad40 	call	281ad4 <memmove>
  280d80:	80800217 	ldw	r2,8(r16)
  280d84:	80c00017 	ldw	r3,0(r16)
  280d88:	14c5c83a 	sub	r2,r2,r19
  280d8c:	1cc7883a 	add	r3,r3,r19
  280d90:	80800215 	stw	r2,8(r16)
  280d94:	80c00015 	stw	r3,0(r16)
  280d98:	10004326 	beq	r2,zero,280ea8 <__sfvwrite_r+0x450>
  280d9c:	9805883a 	mov	r2,r19
  280da0:	003f8606 	br	280bbc <__sfvwrite_r+0x164>
  280da4:	b00d883a 	mov	r6,r22
  280da8:	e00b883a 	mov	r5,fp
  280dac:	da000115 	stw	r8,4(sp)
  280db0:	0281ad40 	call	281ad4 <memmove>
  280db4:	80800217 	ldw	r2,8(r16)
  280db8:	80c00017 	ldw	r3,0(r16)
  280dbc:	da000117 	ldw	r8,4(sp)
  280dc0:	1585c83a 	sub	r2,r2,r22
  280dc4:	1dad883a 	add	r22,r3,r22
  280dc8:	80800215 	stw	r2,8(r16)
  280dcc:	85800015 	stw	r22,0(r16)
  280dd0:	003fbf06 	br	280cd0 <__sfvwrite_r+0x278>
  280dd4:	81000017 	ldw	r4,0(r16)
  280dd8:	9027883a 	mov	r19,r18
  280ddc:	902f883a 	mov	r23,r18
  280de0:	003f6c06 	br	280b94 <__sfvwrite_r+0x13c>
  280de4:	900d883a 	mov	r6,r18
  280de8:	01400284 	movi	r5,10
  280dec:	e009883a 	mov	r4,fp
  280df0:	02818a80 	call	2818a8 <memchr>
  280df4:	10003e26 	beq	r2,zero,280ef0 <__sfvwrite_r+0x498>
  280df8:	10800044 	addi	r2,r2,1
  280dfc:	1727c83a 	sub	r19,r2,fp
  280e00:	02000044 	movi	r8,1
  280e04:	003f9d06 	br	280c7c <__sfvwrite_r+0x224>
  280e08:	80800517 	ldw	r2,20(r16)
  280e0c:	81400417 	ldw	r5,16(r16)
  280e10:	81c00017 	ldw	r7,0(r16)
  280e14:	10a7883a 	add	r19,r2,r2
  280e18:	9885883a 	add	r2,r19,r2
  280e1c:	1026d7fa 	srli	r19,r2,31
  280e20:	396dc83a 	sub	r22,r7,r5
  280e24:	b1000044 	addi	r4,r22,1
  280e28:	9885883a 	add	r2,r19,r2
  280e2c:	1027d07a 	srai	r19,r2,1
  280e30:	2485883a 	add	r2,r4,r18
  280e34:	980d883a 	mov	r6,r19
  280e38:	9880022e 	bgeu	r19,r2,280e44 <__sfvwrite_r+0x3ec>
  280e3c:	1027883a 	mov	r19,r2
  280e40:	100d883a 	mov	r6,r2
  280e44:	18c1000c 	andi	r3,r3,1024
  280e48:	18001c26 	beq	r3,zero,280ebc <__sfvwrite_r+0x464>
  280e4c:	300b883a 	mov	r5,r6
  280e50:	a809883a 	mov	r4,r21
  280e54:	028109c0 	call	28109c <_malloc_r>
  280e58:	102f883a 	mov	r23,r2
  280e5c:	10002926 	beq	r2,zero,280f04 <__sfvwrite_r+0x4ac>
  280e60:	81400417 	ldw	r5,16(r16)
  280e64:	b00d883a 	mov	r6,r22
  280e68:	1009883a 	mov	r4,r2
  280e6c:	028198c0 	call	28198c <memcpy>
  280e70:	8080030b 	ldhu	r2,12(r16)
  280e74:	00fedfc4 	movi	r3,-1153
  280e78:	10c4703a 	and	r2,r2,r3
  280e7c:	10802014 	ori	r2,r2,128
  280e80:	8080030d 	sth	r2,12(r16)
  280e84:	bd89883a 	add	r4,r23,r22
  280e88:	9d8fc83a 	sub	r7,r19,r22
  280e8c:	85c00415 	stw	r23,16(r16)
  280e90:	84c00515 	stw	r19,20(r16)
  280e94:	81000015 	stw	r4,0(r16)
  280e98:	9027883a 	mov	r19,r18
  280e9c:	81c00215 	stw	r7,8(r16)
  280ea0:	902f883a 	mov	r23,r18
  280ea4:	003f3b06 	br	280b94 <__sfvwrite_r+0x13c>
  280ea8:	800b883a 	mov	r5,r16
  280eac:	a809883a 	mov	r4,r21
  280eb0:	02829740 	call	282974 <_fflush_r>
  280eb4:	103fb926 	beq	r2,zero,280d9c <__sfvwrite_r+0x344>
  280eb8:	003f6506 	br	280c50 <__sfvwrite_r+0x1f8>
  280ebc:	a809883a 	mov	r4,r21
  280ec0:	0281d580 	call	281d58 <_realloc_r>
  280ec4:	102f883a 	mov	r23,r2
  280ec8:	103fee1e 	bne	r2,zero,280e84 <__sfvwrite_r+0x42c>
  280ecc:	81400417 	ldw	r5,16(r16)
  280ed0:	a809883a 	mov	r4,r21
  280ed4:	0282b240 	call	282b24 <_free_r>
  280ed8:	8080030b 	ldhu	r2,12(r16)
  280edc:	00ffdfc4 	movi	r3,-129
  280ee0:	1884703a 	and	r2,r3,r2
  280ee4:	00c00304 	movi	r3,12
  280ee8:	a8c00015 	stw	r3,0(r21)
  280eec:	003f5906 	br	280c54 <__sfvwrite_r+0x1fc>
  280ef0:	94c00044 	addi	r19,r18,1
  280ef4:	02000044 	movi	r8,1
  280ef8:	003f6006 	br	280c7c <__sfvwrite_r+0x224>
  280efc:	00bfffc4 	movi	r2,-1
  280f00:	003f0306 	br	280b10 <__sfvwrite_r+0xb8>
  280f04:	00800304 	movi	r2,12
  280f08:	a8800015 	stw	r2,0(r21)
  280f0c:	8080030b 	ldhu	r2,12(r16)
  280f10:	003f5006 	br	280c54 <__sfvwrite_r+0x1fc>

00280f14 <_fwalk>:
  280f14:	defff704 	addi	sp,sp,-36
  280f18:	dd000415 	stw	r20,16(sp)
  280f1c:	dfc00815 	stw	ra,32(sp)
  280f20:	ddc00715 	stw	r23,28(sp)
  280f24:	dd800615 	stw	r22,24(sp)
  280f28:	dd400515 	stw	r21,20(sp)
  280f2c:	dcc00315 	stw	r19,12(sp)
  280f30:	dc800215 	stw	r18,8(sp)
  280f34:	dc400115 	stw	r17,4(sp)
  280f38:	dc000015 	stw	r16,0(sp)
  280f3c:	2500b804 	addi	r20,r4,736
  280f40:	a0002326 	beq	r20,zero,280fd0 <_fwalk+0xbc>
  280f44:	282b883a 	mov	r21,r5
  280f48:	002f883a 	mov	r23,zero
  280f4c:	05800044 	movi	r22,1
  280f50:	04ffffc4 	movi	r19,-1
  280f54:	a4400117 	ldw	r17,4(r20)
  280f58:	a4800217 	ldw	r18,8(r20)
  280f5c:	8c7fffc4 	addi	r17,r17,-1
  280f60:	88000d16 	blt	r17,zero,280f98 <_fwalk+0x84>
  280f64:	94000304 	addi	r16,r18,12
  280f68:	94800384 	addi	r18,r18,14
  280f6c:	8080000b 	ldhu	r2,0(r16)
  280f70:	8c7fffc4 	addi	r17,r17,-1
  280f74:	813ffd04 	addi	r4,r16,-12
  280f78:	b080042e 	bgeu	r22,r2,280f8c <_fwalk+0x78>
  280f7c:	9080000f 	ldh	r2,0(r18)
  280f80:	14c00226 	beq	r2,r19,280f8c <_fwalk+0x78>
  280f84:	a83ee83a 	callr	r21
  280f88:	b8aeb03a 	or	r23,r23,r2
  280f8c:	84001a04 	addi	r16,r16,104
  280f90:	94801a04 	addi	r18,r18,104
  280f94:	8cfff51e 	bne	r17,r19,280f6c <_fwalk+0x58>
  280f98:	a5000017 	ldw	r20,0(r20)
  280f9c:	a03fed1e 	bne	r20,zero,280f54 <_fwalk+0x40>
  280fa0:	b805883a 	mov	r2,r23
  280fa4:	dfc00817 	ldw	ra,32(sp)
  280fa8:	ddc00717 	ldw	r23,28(sp)
  280fac:	dd800617 	ldw	r22,24(sp)
  280fb0:	dd400517 	ldw	r21,20(sp)
  280fb4:	dd000417 	ldw	r20,16(sp)
  280fb8:	dcc00317 	ldw	r19,12(sp)
  280fbc:	dc800217 	ldw	r18,8(sp)
  280fc0:	dc400117 	ldw	r17,4(sp)
  280fc4:	dc000017 	ldw	r16,0(sp)
  280fc8:	dec00904 	addi	sp,sp,36
  280fcc:	f800283a 	ret
  280fd0:	002f883a 	mov	r23,zero
  280fd4:	003ff206 	br	280fa0 <_fwalk+0x8c>

00280fd8 <_fwalk_reent>:
  280fd8:	defff704 	addi	sp,sp,-36
  280fdc:	dd000415 	stw	r20,16(sp)
  280fe0:	dfc00815 	stw	ra,32(sp)
  280fe4:	ddc00715 	stw	r23,28(sp)
  280fe8:	dd800615 	stw	r22,24(sp)
  280fec:	dd400515 	stw	r21,20(sp)
  280ff0:	dcc00315 	stw	r19,12(sp)
  280ff4:	dc800215 	stw	r18,8(sp)
  280ff8:	dc400115 	stw	r17,4(sp)
  280ffc:	dc000015 	stw	r16,0(sp)
  281000:	2500b804 	addi	r20,r4,736
  281004:	a0002326 	beq	r20,zero,281094 <_fwalk_reent+0xbc>
  281008:	282b883a 	mov	r21,r5
  28100c:	2027883a 	mov	r19,r4
  281010:	002f883a 	mov	r23,zero
  281014:	05800044 	movi	r22,1
  281018:	04bfffc4 	movi	r18,-1
  28101c:	a4400117 	ldw	r17,4(r20)
  281020:	a4000217 	ldw	r16,8(r20)
  281024:	8c7fffc4 	addi	r17,r17,-1
  281028:	88000c16 	blt	r17,zero,28105c <_fwalk_reent+0x84>
  28102c:	84000304 	addi	r16,r16,12
  281030:	8080000b 	ldhu	r2,0(r16)
  281034:	8c7fffc4 	addi	r17,r17,-1
  281038:	817ffd04 	addi	r5,r16,-12
  28103c:	b080052e 	bgeu	r22,r2,281054 <_fwalk_reent+0x7c>
  281040:	8080008f 	ldh	r2,2(r16)
  281044:	9809883a 	mov	r4,r19
  281048:	14800226 	beq	r2,r18,281054 <_fwalk_reent+0x7c>
  28104c:	a83ee83a 	callr	r21
  281050:	b8aeb03a 	or	r23,r23,r2
  281054:	84001a04 	addi	r16,r16,104
  281058:	8cbff51e 	bne	r17,r18,281030 <_fwalk_reent+0x58>
  28105c:	a5000017 	ldw	r20,0(r20)
  281060:	a03fee1e 	bne	r20,zero,28101c <_fwalk_reent+0x44>
  281064:	b805883a 	mov	r2,r23
  281068:	dfc00817 	ldw	ra,32(sp)
  28106c:	ddc00717 	ldw	r23,28(sp)
  281070:	dd800617 	ldw	r22,24(sp)
  281074:	dd400517 	ldw	r21,20(sp)
  281078:	dd000417 	ldw	r20,16(sp)
  28107c:	dcc00317 	ldw	r19,12(sp)
  281080:	dc800217 	ldw	r18,8(sp)
  281084:	dc400117 	ldw	r17,4(sp)
  281088:	dc000017 	ldw	r16,0(sp)
  28108c:	dec00904 	addi	sp,sp,36
  281090:	f800283a 	ret
  281094:	002f883a 	mov	r23,zero
  281098:	003ff206 	br	281064 <_fwalk_reent+0x8c>

0028109c <_malloc_r>:
  28109c:	defff504 	addi	sp,sp,-44
  2810a0:	dc800315 	stw	r18,12(sp)
  2810a4:	dfc00a15 	stw	ra,40(sp)
  2810a8:	df000915 	stw	fp,36(sp)
  2810ac:	ddc00815 	stw	r23,32(sp)
  2810b0:	dd800715 	stw	r22,28(sp)
  2810b4:	dd400615 	stw	r21,24(sp)
  2810b8:	dd000515 	stw	r20,20(sp)
  2810bc:	dcc00415 	stw	r19,16(sp)
  2810c0:	dc400215 	stw	r17,8(sp)
  2810c4:	dc000115 	stw	r16,4(sp)
  2810c8:	288002c4 	addi	r2,r5,11
  2810cc:	00c00584 	movi	r3,22
  2810d0:	2025883a 	mov	r18,r4
  2810d4:	18807f2e 	bgeu	r3,r2,2812d4 <_malloc_r+0x238>
  2810d8:	047ffe04 	movi	r17,-8
  2810dc:	1462703a 	and	r17,r2,r17
  2810e0:	8800a316 	blt	r17,zero,281370 <_malloc_r+0x2d4>
  2810e4:	8940a236 	bltu	r17,r5,281370 <_malloc_r+0x2d4>
  2810e8:	02836dc0 	call	2836dc <__malloc_lock>
  2810ec:	00807dc4 	movi	r2,503
  2810f0:	1441e92e 	bgeu	r2,r17,281898 <_malloc_r+0x7fc>
  2810f4:	8804d27a 	srli	r2,r17,9
  2810f8:	1000a126 	beq	r2,zero,281380 <_malloc_r+0x2e4>
  2810fc:	00c00104 	movi	r3,4
  281100:	18811e36 	bltu	r3,r2,28157c <_malloc_r+0x4e0>
  281104:	8804d1ba 	srli	r2,r17,6
  281108:	12000e44 	addi	r8,r2,57
  28110c:	11c00e04 	addi	r7,r2,56
  281110:	4209883a 	add	r4,r8,r8
  281114:	04c00a34 	movhi	r19,40
  281118:	2109883a 	add	r4,r4,r4
  28111c:	9cdb7704 	addi	r19,r19,28124
  281120:	2109883a 	add	r4,r4,r4
  281124:	9909883a 	add	r4,r19,r4
  281128:	24000117 	ldw	r16,4(r4)
  28112c:	213ffe04 	addi	r4,r4,-8
  281130:	24009726 	beq	r4,r16,281390 <_malloc_r+0x2f4>
  281134:	80800117 	ldw	r2,4(r16)
  281138:	01bfff04 	movi	r6,-4
  28113c:	014003c4 	movi	r5,15
  281140:	1184703a 	and	r2,r2,r6
  281144:	1447c83a 	sub	r3,r2,r17
  281148:	28c00716 	blt	r5,r3,281168 <_malloc_r+0xcc>
  28114c:	1800920e 	bge	r3,zero,281398 <_malloc_r+0x2fc>
  281150:	84000317 	ldw	r16,12(r16)
  281154:	24008e26 	beq	r4,r16,281390 <_malloc_r+0x2f4>
  281158:	80800117 	ldw	r2,4(r16)
  28115c:	1184703a 	and	r2,r2,r6
  281160:	1447c83a 	sub	r3,r2,r17
  281164:	28fff90e 	bge	r5,r3,28114c <_malloc_r+0xb0>
  281168:	3809883a 	mov	r4,r7
  28116c:	01800a34 	movhi	r6,40
  281170:	9c000417 	ldw	r16,16(r19)
  281174:	319b7704 	addi	r6,r6,28124
  281178:	32000204 	addi	r8,r6,8
  28117c:	82013426 	beq	r16,r8,281650 <_malloc_r+0x5b4>
  281180:	80c00117 	ldw	r3,4(r16)
  281184:	00bfff04 	movi	r2,-4
  281188:	188e703a 	and	r7,r3,r2
  28118c:	3c45c83a 	sub	r2,r7,r17
  281190:	00c003c4 	movi	r3,15
  281194:	18811f16 	blt	r3,r2,281614 <_malloc_r+0x578>
  281198:	32000515 	stw	r8,20(r6)
  28119c:	32000415 	stw	r8,16(r6)
  2811a0:	10007f0e 	bge	r2,zero,2813a0 <_malloc_r+0x304>
  2811a4:	00807fc4 	movi	r2,511
  2811a8:	11c0fd36 	bltu	r2,r7,2815a0 <_malloc_r+0x504>
  2811ac:	3806d0fa 	srli	r3,r7,3
  2811b0:	01c00044 	movi	r7,1
  2811b4:	30800117 	ldw	r2,4(r6)
  2811b8:	19400044 	addi	r5,r3,1
  2811bc:	294b883a 	add	r5,r5,r5
  2811c0:	1807d0ba 	srai	r3,r3,2
  2811c4:	294b883a 	add	r5,r5,r5
  2811c8:	294b883a 	add	r5,r5,r5
  2811cc:	298b883a 	add	r5,r5,r6
  2811d0:	38c6983a 	sll	r3,r7,r3
  2811d4:	29c00017 	ldw	r7,0(r5)
  2811d8:	2a7ffe04 	addi	r9,r5,-8
  2811dc:	1886b03a 	or	r3,r3,r2
  2811e0:	82400315 	stw	r9,12(r16)
  2811e4:	81c00215 	stw	r7,8(r16)
  2811e8:	30c00115 	stw	r3,4(r6)
  2811ec:	2c000015 	stw	r16,0(r5)
  2811f0:	3c000315 	stw	r16,12(r7)
  2811f4:	2005d0ba 	srai	r2,r4,2
  2811f8:	01400044 	movi	r5,1
  2811fc:	288a983a 	sll	r5,r5,r2
  281200:	19406f36 	bltu	r3,r5,2813c0 <_malloc_r+0x324>
  281204:	28c4703a 	and	r2,r5,r3
  281208:	10000a1e 	bne	r2,zero,281234 <_malloc_r+0x198>
  28120c:	00bfff04 	movi	r2,-4
  281210:	294b883a 	add	r5,r5,r5
  281214:	2088703a 	and	r4,r4,r2
  281218:	28c4703a 	and	r2,r5,r3
  28121c:	21000104 	addi	r4,r4,4
  281220:	1000041e 	bne	r2,zero,281234 <_malloc_r+0x198>
  281224:	294b883a 	add	r5,r5,r5
  281228:	28c4703a 	and	r2,r5,r3
  28122c:	21000104 	addi	r4,r4,4
  281230:	103ffc26 	beq	r2,zero,281224 <_malloc_r+0x188>
  281234:	02bfff04 	movi	r10,-4
  281238:	024003c4 	movi	r9,15
  28123c:	21800044 	addi	r6,r4,1
  281240:	318d883a 	add	r6,r6,r6
  281244:	318d883a 	add	r6,r6,r6
  281248:	318d883a 	add	r6,r6,r6
  28124c:	998d883a 	add	r6,r19,r6
  281250:	333ffe04 	addi	r12,r6,-8
  281254:	2017883a 	mov	r11,r4
  281258:	31800104 	addi	r6,r6,4
  28125c:	34000017 	ldw	r16,0(r6)
  281260:	31fffd04 	addi	r7,r6,-12
  281264:	81c0041e 	bne	r16,r7,281278 <_malloc_r+0x1dc>
  281268:	0000fb06 	br	281658 <_malloc_r+0x5bc>
  28126c:	1801030e 	bge	r3,zero,28167c <_malloc_r+0x5e0>
  281270:	84000317 	ldw	r16,12(r16)
  281274:	81c0f826 	beq	r16,r7,281658 <_malloc_r+0x5bc>
  281278:	80800117 	ldw	r2,4(r16)
  28127c:	1284703a 	and	r2,r2,r10
  281280:	1447c83a 	sub	r3,r2,r17
  281284:	48fff90e 	bge	r9,r3,28126c <_malloc_r+0x1d0>
  281288:	80800317 	ldw	r2,12(r16)
  28128c:	81000217 	ldw	r4,8(r16)
  281290:	89400054 	ori	r5,r17,1
  281294:	81400115 	stw	r5,4(r16)
  281298:	20800315 	stw	r2,12(r4)
  28129c:	11000215 	stw	r4,8(r2)
  2812a0:	8463883a 	add	r17,r16,r17
  2812a4:	9c400515 	stw	r17,20(r19)
  2812a8:	9c400415 	stw	r17,16(r19)
  2812ac:	18800054 	ori	r2,r3,1
  2812b0:	88800115 	stw	r2,4(r17)
  2812b4:	8a000315 	stw	r8,12(r17)
  2812b8:	8a000215 	stw	r8,8(r17)
  2812bc:	88e3883a 	add	r17,r17,r3
  2812c0:	88c00015 	stw	r3,0(r17)
  2812c4:	9009883a 	mov	r4,r18
  2812c8:	02837000 	call	283700 <__malloc_unlock>
  2812cc:	80800204 	addi	r2,r16,8
  2812d0:	00001b06 	br	281340 <_malloc_r+0x2a4>
  2812d4:	04400404 	movi	r17,16
  2812d8:	89402536 	bltu	r17,r5,281370 <_malloc_r+0x2d4>
  2812dc:	02836dc0 	call	2836dc <__malloc_lock>
  2812e0:	00800184 	movi	r2,6
  2812e4:	01000084 	movi	r4,2
  2812e8:	04c00a34 	movhi	r19,40
  2812ec:	1085883a 	add	r2,r2,r2
  2812f0:	9cdb7704 	addi	r19,r19,28124
  2812f4:	1085883a 	add	r2,r2,r2
  2812f8:	9885883a 	add	r2,r19,r2
  2812fc:	14000117 	ldw	r16,4(r2)
  281300:	10fffe04 	addi	r3,r2,-8
  281304:	80c0d926 	beq	r16,r3,28166c <_malloc_r+0x5d0>
  281308:	80c00117 	ldw	r3,4(r16)
  28130c:	81000317 	ldw	r4,12(r16)
  281310:	00bfff04 	movi	r2,-4
  281314:	1884703a 	and	r2,r3,r2
  281318:	81400217 	ldw	r5,8(r16)
  28131c:	8085883a 	add	r2,r16,r2
  281320:	10c00117 	ldw	r3,4(r2)
  281324:	29000315 	stw	r4,12(r5)
  281328:	21400215 	stw	r5,8(r4)
  28132c:	18c00054 	ori	r3,r3,1
  281330:	10c00115 	stw	r3,4(r2)
  281334:	9009883a 	mov	r4,r18
  281338:	02837000 	call	283700 <__malloc_unlock>
  28133c:	80800204 	addi	r2,r16,8
  281340:	dfc00a17 	ldw	ra,40(sp)
  281344:	df000917 	ldw	fp,36(sp)
  281348:	ddc00817 	ldw	r23,32(sp)
  28134c:	dd800717 	ldw	r22,28(sp)
  281350:	dd400617 	ldw	r21,24(sp)
  281354:	dd000517 	ldw	r20,20(sp)
  281358:	dcc00417 	ldw	r19,16(sp)
  28135c:	dc800317 	ldw	r18,12(sp)
  281360:	dc400217 	ldw	r17,8(sp)
  281364:	dc000117 	ldw	r16,4(sp)
  281368:	dec00b04 	addi	sp,sp,44
  28136c:	f800283a 	ret
  281370:	00800304 	movi	r2,12
  281374:	90800015 	stw	r2,0(r18)
  281378:	0005883a 	mov	r2,zero
  28137c:	003ff006 	br	281340 <_malloc_r+0x2a4>
  281380:	01002004 	movi	r4,128
  281384:	02001004 	movi	r8,64
  281388:	01c00fc4 	movi	r7,63
  28138c:	003f6106 	br	281114 <_malloc_r+0x78>
  281390:	4009883a 	mov	r4,r8
  281394:	003f7506 	br	28116c <_malloc_r+0xd0>
  281398:	81000317 	ldw	r4,12(r16)
  28139c:	003fde06 	br	281318 <_malloc_r+0x27c>
  2813a0:	81c5883a 	add	r2,r16,r7
  2813a4:	11400117 	ldw	r5,4(r2)
  2813a8:	9009883a 	mov	r4,r18
  2813ac:	29400054 	ori	r5,r5,1
  2813b0:	11400115 	stw	r5,4(r2)
  2813b4:	02837000 	call	283700 <__malloc_unlock>
  2813b8:	80800204 	addi	r2,r16,8
  2813bc:	003fe006 	br	281340 <_malloc_r+0x2a4>
  2813c0:	9c000217 	ldw	r16,8(r19)
  2813c4:	00bfff04 	movi	r2,-4
  2813c8:	85800117 	ldw	r22,4(r16)
  2813cc:	b0ac703a 	and	r22,r22,r2
  2813d0:	b4400336 	bltu	r22,r17,2813e0 <_malloc_r+0x344>
  2813d4:	b445c83a 	sub	r2,r22,r17
  2813d8:	00c003c4 	movi	r3,15
  2813dc:	18805d16 	blt	r3,r2,281554 <_malloc_r+0x4b8>
  2813e0:	05c00a74 	movhi	r23,41
  2813e4:	00800a74 	movhi	r2,41
  2813e8:	10a7e804 	addi	r2,r2,-24672
  2813ec:	bde11e04 	addi	r23,r23,-31624
  2813f0:	15400017 	ldw	r21,0(r2)
  2813f4:	b8c00017 	ldw	r3,0(r23)
  2813f8:	00bfffc4 	movi	r2,-1
  2813fc:	858d883a 	add	r6,r16,r22
  281400:	8d6b883a 	add	r21,r17,r21
  281404:	1880ea26 	beq	r3,r2,2817b0 <_malloc_r+0x714>
  281408:	ad4403c4 	addi	r21,r21,4111
  28140c:	00bc0004 	movi	r2,-4096
  281410:	a8aa703a 	and	r21,r21,r2
  281414:	a80b883a 	mov	r5,r21
  281418:	9009883a 	mov	r4,r18
  28141c:	d9800015 	stw	r6,0(sp)
  281420:	02822bc0 	call	2822bc <_sbrk_r>
  281424:	1029883a 	mov	r20,r2
  281428:	00bfffc4 	movi	r2,-1
  28142c:	d9800017 	ldw	r6,0(sp)
  281430:	a080e826 	beq	r20,r2,2817d4 <_malloc_r+0x738>
  281434:	a180a636 	bltu	r20,r6,2816d0 <_malloc_r+0x634>
  281438:	07000a74 	movhi	fp,41
  28143c:	e727f104 	addi	fp,fp,-24636
  281440:	e0800017 	ldw	r2,0(fp)
  281444:	a887883a 	add	r3,r21,r2
  281448:	e0c00015 	stw	r3,0(fp)
  28144c:	3500e626 	beq	r6,r20,2817e8 <_malloc_r+0x74c>
  281450:	b9000017 	ldw	r4,0(r23)
  281454:	00bfffc4 	movi	r2,-1
  281458:	2080ee26 	beq	r4,r2,281814 <_malloc_r+0x778>
  28145c:	a185c83a 	sub	r2,r20,r6
  281460:	10c5883a 	add	r2,r2,r3
  281464:	e0800015 	stw	r2,0(fp)
  281468:	a0c001cc 	andi	r3,r20,7
  28146c:	1800bc26 	beq	r3,zero,281760 <_malloc_r+0x6c4>
  281470:	a0e9c83a 	sub	r20,r20,r3
  281474:	00840204 	movi	r2,4104
  281478:	a5000204 	addi	r20,r20,8
  28147c:	10c7c83a 	sub	r3,r2,r3
  281480:	a545883a 	add	r2,r20,r21
  281484:	1083ffcc 	andi	r2,r2,4095
  281488:	18abc83a 	sub	r21,r3,r2
  28148c:	a80b883a 	mov	r5,r21
  281490:	9009883a 	mov	r4,r18
  281494:	02822bc0 	call	2822bc <_sbrk_r>
  281498:	00ffffc4 	movi	r3,-1
  28149c:	10c0e126 	beq	r2,r3,281824 <_malloc_r+0x788>
  2814a0:	1505c83a 	sub	r2,r2,r20
  2814a4:	1545883a 	add	r2,r2,r21
  2814a8:	10800054 	ori	r2,r2,1
  2814ac:	e0c00017 	ldw	r3,0(fp)
  2814b0:	9d000215 	stw	r20,8(r19)
  2814b4:	a0800115 	stw	r2,4(r20)
  2814b8:	a8c7883a 	add	r3,r21,r3
  2814bc:	e0c00015 	stw	r3,0(fp)
  2814c0:	84c00e26 	beq	r16,r19,2814fc <_malloc_r+0x460>
  2814c4:	018003c4 	movi	r6,15
  2814c8:	3580a72e 	bgeu	r6,r22,281768 <_malloc_r+0x6cc>
  2814cc:	81400117 	ldw	r5,4(r16)
  2814d0:	013ffe04 	movi	r4,-8
  2814d4:	b0bffd04 	addi	r2,r22,-12
  2814d8:	1104703a 	and	r2,r2,r4
  2814dc:	2900004c 	andi	r4,r5,1
  2814e0:	2088b03a 	or	r4,r4,r2
  2814e4:	81000115 	stw	r4,4(r16)
  2814e8:	01400144 	movi	r5,5
  2814ec:	8089883a 	add	r4,r16,r2
  2814f0:	21400115 	stw	r5,4(r4)
  2814f4:	21400215 	stw	r5,8(r4)
  2814f8:	3080cd36 	bltu	r6,r2,281830 <_malloc_r+0x794>
  2814fc:	00800a74 	movhi	r2,41
  281500:	10a7e704 	addi	r2,r2,-24676
  281504:	11000017 	ldw	r4,0(r2)
  281508:	20c0012e 	bgeu	r4,r3,281510 <_malloc_r+0x474>
  28150c:	10c00015 	stw	r3,0(r2)
  281510:	00800a74 	movhi	r2,41
  281514:	10a7e604 	addi	r2,r2,-24680
  281518:	11000017 	ldw	r4,0(r2)
  28151c:	9c000217 	ldw	r16,8(r19)
  281520:	20c0012e 	bgeu	r4,r3,281528 <_malloc_r+0x48c>
  281524:	10c00015 	stw	r3,0(r2)
  281528:	80c00117 	ldw	r3,4(r16)
  28152c:	00bfff04 	movi	r2,-4
  281530:	1886703a 	and	r3,r3,r2
  281534:	1c45c83a 	sub	r2,r3,r17
  281538:	1c400236 	bltu	r3,r17,281544 <_malloc_r+0x4a8>
  28153c:	00c003c4 	movi	r3,15
  281540:	18800416 	blt	r3,r2,281554 <_malloc_r+0x4b8>
  281544:	9009883a 	mov	r4,r18
  281548:	02837000 	call	283700 <__malloc_unlock>
  28154c:	0005883a 	mov	r2,zero
  281550:	003f7b06 	br	281340 <_malloc_r+0x2a4>
  281554:	88c00054 	ori	r3,r17,1
  281558:	80c00115 	stw	r3,4(r16)
  28155c:	8463883a 	add	r17,r16,r17
  281560:	10800054 	ori	r2,r2,1
  281564:	9c400215 	stw	r17,8(r19)
  281568:	88800115 	stw	r2,4(r17)
  28156c:	9009883a 	mov	r4,r18
  281570:	02837000 	call	283700 <__malloc_unlock>
  281574:	80800204 	addi	r2,r16,8
  281578:	003f7106 	br	281340 <_malloc_r+0x2a4>
  28157c:	00c00504 	movi	r3,20
  281580:	18804a2e 	bgeu	r3,r2,2816ac <_malloc_r+0x610>
  281584:	00c01504 	movi	r3,84
  281588:	18806e36 	bltu	r3,r2,281744 <_malloc_r+0x6a8>
  28158c:	8804d33a 	srli	r2,r17,12
  281590:	12001bc4 	addi	r8,r2,111
  281594:	11c01b84 	addi	r7,r2,110
  281598:	4209883a 	add	r4,r8,r8
  28159c:	003edd06 	br	281114 <_malloc_r+0x78>
  2815a0:	3804d27a 	srli	r2,r7,9
  2815a4:	00c00104 	movi	r3,4
  2815a8:	1880442e 	bgeu	r3,r2,2816bc <_malloc_r+0x620>
  2815ac:	00c00504 	movi	r3,20
  2815b0:	18808136 	bltu	r3,r2,2817b8 <_malloc_r+0x71c>
  2815b4:	11401704 	addi	r5,r2,92
  2815b8:	10c016c4 	addi	r3,r2,91
  2815bc:	294b883a 	add	r5,r5,r5
  2815c0:	294b883a 	add	r5,r5,r5
  2815c4:	294b883a 	add	r5,r5,r5
  2815c8:	994b883a 	add	r5,r19,r5
  2815cc:	28800017 	ldw	r2,0(r5)
  2815d0:	01800a34 	movhi	r6,40
  2815d4:	297ffe04 	addi	r5,r5,-8
  2815d8:	319b7704 	addi	r6,r6,28124
  2815dc:	28806526 	beq	r5,r2,281774 <_malloc_r+0x6d8>
  2815e0:	01bfff04 	movi	r6,-4
  2815e4:	10c00117 	ldw	r3,4(r2)
  2815e8:	1986703a 	and	r3,r3,r6
  2815ec:	38c0022e 	bgeu	r7,r3,2815f8 <_malloc_r+0x55c>
  2815f0:	10800217 	ldw	r2,8(r2)
  2815f4:	28bffb1e 	bne	r5,r2,2815e4 <_malloc_r+0x548>
  2815f8:	11400317 	ldw	r5,12(r2)
  2815fc:	98c00117 	ldw	r3,4(r19)
  281600:	81400315 	stw	r5,12(r16)
  281604:	80800215 	stw	r2,8(r16)
  281608:	2c000215 	stw	r16,8(r5)
  28160c:	14000315 	stw	r16,12(r2)
  281610:	003ef806 	br	2811f4 <_malloc_r+0x158>
  281614:	88c00054 	ori	r3,r17,1
  281618:	80c00115 	stw	r3,4(r16)
  28161c:	8463883a 	add	r17,r16,r17
  281620:	34400515 	stw	r17,20(r6)
  281624:	34400415 	stw	r17,16(r6)
  281628:	10c00054 	ori	r3,r2,1
  28162c:	8a000315 	stw	r8,12(r17)
  281630:	8a000215 	stw	r8,8(r17)
  281634:	88c00115 	stw	r3,4(r17)
  281638:	88a3883a 	add	r17,r17,r2
  28163c:	88800015 	stw	r2,0(r17)
  281640:	9009883a 	mov	r4,r18
  281644:	02837000 	call	283700 <__malloc_unlock>
  281648:	80800204 	addi	r2,r16,8
  28164c:	003f3c06 	br	281340 <_malloc_r+0x2a4>
  281650:	30c00117 	ldw	r3,4(r6)
  281654:	003ee706 	br	2811f4 <_malloc_r+0x158>
  281658:	5ac00044 	addi	r11,r11,1
  28165c:	588000cc 	andi	r2,r11,3
  281660:	31800204 	addi	r6,r6,8
  281664:	103efd1e 	bne	r2,zero,28125c <_malloc_r+0x1c0>
  281668:	00002406 	br	2816fc <_malloc_r+0x660>
  28166c:	14000317 	ldw	r16,12(r2)
  281670:	143f251e 	bne	r2,r16,281308 <_malloc_r+0x26c>
  281674:	21000084 	addi	r4,r4,2
  281678:	003ebc06 	br	28116c <_malloc_r+0xd0>
  28167c:	8085883a 	add	r2,r16,r2
  281680:	10c00117 	ldw	r3,4(r2)
  281684:	81000317 	ldw	r4,12(r16)
  281688:	81400217 	ldw	r5,8(r16)
  28168c:	18c00054 	ori	r3,r3,1
  281690:	10c00115 	stw	r3,4(r2)
  281694:	29000315 	stw	r4,12(r5)
  281698:	21400215 	stw	r5,8(r4)
  28169c:	9009883a 	mov	r4,r18
  2816a0:	02837000 	call	283700 <__malloc_unlock>
  2816a4:	80800204 	addi	r2,r16,8
  2816a8:	003f2506 	br	281340 <_malloc_r+0x2a4>
  2816ac:	12001704 	addi	r8,r2,92
  2816b0:	11c016c4 	addi	r7,r2,91
  2816b4:	4209883a 	add	r4,r8,r8
  2816b8:	003e9606 	br	281114 <_malloc_r+0x78>
  2816bc:	3804d1ba 	srli	r2,r7,6
  2816c0:	11400e44 	addi	r5,r2,57
  2816c4:	10c00e04 	addi	r3,r2,56
  2816c8:	294b883a 	add	r5,r5,r5
  2816cc:	003fbc06 	br	2815c0 <_malloc_r+0x524>
  2816d0:	84ff5926 	beq	r16,r19,281438 <_malloc_r+0x39c>
  2816d4:	00800a34 	movhi	r2,40
  2816d8:	109b7704 	addi	r2,r2,28124
  2816dc:	14000217 	ldw	r16,8(r2)
  2816e0:	00bfff04 	movi	r2,-4
  2816e4:	80c00117 	ldw	r3,4(r16)
  2816e8:	1886703a 	and	r3,r3,r2
  2816ec:	003f9106 	br	281534 <_malloc_r+0x498>
  2816f0:	60800217 	ldw	r2,8(r12)
  2816f4:	213fffc4 	addi	r4,r4,-1
  2816f8:	1300651e 	bne	r2,r12,281890 <_malloc_r+0x7f4>
  2816fc:	208000cc 	andi	r2,r4,3
  281700:	633ffe04 	addi	r12,r12,-8
  281704:	103ffa1e 	bne	r2,zero,2816f0 <_malloc_r+0x654>
  281708:	98800117 	ldw	r2,4(r19)
  28170c:	0146303a 	nor	r3,zero,r5
  281710:	1884703a 	and	r2,r3,r2
  281714:	98800115 	stw	r2,4(r19)
  281718:	294b883a 	add	r5,r5,r5
  28171c:	117f2836 	bltu	r2,r5,2813c0 <_malloc_r+0x324>
  281720:	283f2726 	beq	r5,zero,2813c0 <_malloc_r+0x324>
  281724:	2886703a 	and	r3,r5,r2
  281728:	5809883a 	mov	r4,r11
  28172c:	183ec31e 	bne	r3,zero,28123c <_malloc_r+0x1a0>
  281730:	294b883a 	add	r5,r5,r5
  281734:	2886703a 	and	r3,r5,r2
  281738:	21000104 	addi	r4,r4,4
  28173c:	183ffc26 	beq	r3,zero,281730 <_malloc_r+0x694>
  281740:	003ebe06 	br	28123c <_malloc_r+0x1a0>
  281744:	00c05504 	movi	r3,340
  281748:	18801236 	bltu	r3,r2,281794 <_malloc_r+0x6f8>
  28174c:	8804d3fa 	srli	r2,r17,15
  281750:	12001e04 	addi	r8,r2,120
  281754:	11c01dc4 	addi	r7,r2,119
  281758:	4209883a 	add	r4,r8,r8
  28175c:	003e6d06 	br	281114 <_malloc_r+0x78>
  281760:	00c40004 	movi	r3,4096
  281764:	003f4606 	br	281480 <_malloc_r+0x3e4>
  281768:	00800044 	movi	r2,1
  28176c:	a0800115 	stw	r2,4(r20)
  281770:	003f7406 	br	281544 <_malloc_r+0x4a8>
  281774:	1805d0ba 	srai	r2,r3,2
  281778:	01c00044 	movi	r7,1
  28177c:	30c00117 	ldw	r3,4(r6)
  281780:	388e983a 	sll	r7,r7,r2
  281784:	2805883a 	mov	r2,r5
  281788:	38c6b03a 	or	r3,r7,r3
  28178c:	30c00115 	stw	r3,4(r6)
  281790:	003f9b06 	br	281600 <_malloc_r+0x564>
  281794:	00c15504 	movi	r3,1364
  281798:	18801a36 	bltu	r3,r2,281804 <_malloc_r+0x768>
  28179c:	8804d4ba 	srli	r2,r17,18
  2817a0:	12001f44 	addi	r8,r2,125
  2817a4:	11c01f04 	addi	r7,r2,124
  2817a8:	4209883a 	add	r4,r8,r8
  2817ac:	003e5906 	br	281114 <_malloc_r+0x78>
  2817b0:	ad400404 	addi	r21,r21,16
  2817b4:	003f1706 	br	281414 <_malloc_r+0x378>
  2817b8:	00c01504 	movi	r3,84
  2817bc:	18802336 	bltu	r3,r2,28184c <_malloc_r+0x7b0>
  2817c0:	3804d33a 	srli	r2,r7,12
  2817c4:	11401bc4 	addi	r5,r2,111
  2817c8:	10c01b84 	addi	r3,r2,110
  2817cc:	294b883a 	add	r5,r5,r5
  2817d0:	003f7b06 	br	2815c0 <_malloc_r+0x524>
  2817d4:	9c000217 	ldw	r16,8(r19)
  2817d8:	00bfff04 	movi	r2,-4
  2817dc:	80c00117 	ldw	r3,4(r16)
  2817e0:	1886703a 	and	r3,r3,r2
  2817e4:	003f5306 	br	281534 <_malloc_r+0x498>
  2817e8:	3083ffcc 	andi	r2,r6,4095
  2817ec:	103f181e 	bne	r2,zero,281450 <_malloc_r+0x3b4>
  2817f0:	99000217 	ldw	r4,8(r19)
  2817f4:	b545883a 	add	r2,r22,r21
  2817f8:	10800054 	ori	r2,r2,1
  2817fc:	20800115 	stw	r2,4(r4)
  281800:	003f3e06 	br	2814fc <_malloc_r+0x460>
  281804:	01003f84 	movi	r4,254
  281808:	02001fc4 	movi	r8,127
  28180c:	01c01f84 	movi	r7,126
  281810:	003e4006 	br	281114 <_malloc_r+0x78>
  281814:	00800a74 	movhi	r2,41
  281818:	10a11e04 	addi	r2,r2,-31624
  28181c:	15000015 	stw	r20,0(r2)
  281820:	003f1106 	br	281468 <_malloc_r+0x3cc>
  281824:	00800044 	movi	r2,1
  281828:	002b883a 	mov	r21,zero
  28182c:	003f1f06 	br	2814ac <_malloc_r+0x410>
  281830:	81400204 	addi	r5,r16,8
  281834:	9009883a 	mov	r4,r18
  281838:	0282b240 	call	282b24 <_free_r>
  28183c:	00800a74 	movhi	r2,41
  281840:	10a7f104 	addi	r2,r2,-24636
  281844:	10c00017 	ldw	r3,0(r2)
  281848:	003f2c06 	br	2814fc <_malloc_r+0x460>
  28184c:	00c05504 	movi	r3,340
  281850:	18800536 	bltu	r3,r2,281868 <_malloc_r+0x7cc>
  281854:	3804d3fa 	srli	r2,r7,15
  281858:	11401e04 	addi	r5,r2,120
  28185c:	10c01dc4 	addi	r3,r2,119
  281860:	294b883a 	add	r5,r5,r5
  281864:	003f5606 	br	2815c0 <_malloc_r+0x524>
  281868:	00c15504 	movi	r3,1364
  28186c:	18800536 	bltu	r3,r2,281884 <_malloc_r+0x7e8>
  281870:	3804d4ba 	srli	r2,r7,18
  281874:	11401f44 	addi	r5,r2,125
  281878:	10c01f04 	addi	r3,r2,124
  28187c:	294b883a 	add	r5,r5,r5
  281880:	003f4f06 	br	2815c0 <_malloc_r+0x524>
  281884:	01403f84 	movi	r5,254
  281888:	00c01f84 	movi	r3,126
  28188c:	003f4c06 	br	2815c0 <_malloc_r+0x524>
  281890:	98800117 	ldw	r2,4(r19)
  281894:	003fa006 	br	281718 <_malloc_r+0x67c>
  281898:	8808d0fa 	srli	r4,r17,3
  28189c:	20800044 	addi	r2,r4,1
  2818a0:	1085883a 	add	r2,r2,r2
  2818a4:	003e9006 	br	2812e8 <_malloc_r+0x24c>

002818a8 <memchr>:
  2818a8:	208000cc 	andi	r2,r4,3
  2818ac:	280f883a 	mov	r7,r5
  2818b0:	10003426 	beq	r2,zero,281984 <memchr+0xdc>
  2818b4:	30bfffc4 	addi	r2,r6,-1
  2818b8:	30001a26 	beq	r6,zero,281924 <memchr+0x7c>
  2818bc:	20c00003 	ldbu	r3,0(r4)
  2818c0:	29803fcc 	andi	r6,r5,255
  2818c4:	30c0051e 	bne	r6,r3,2818dc <memchr+0x34>
  2818c8:	00001806 	br	28192c <memchr+0x84>
  2818cc:	10001526 	beq	r2,zero,281924 <memchr+0x7c>
  2818d0:	20c00003 	ldbu	r3,0(r4)
  2818d4:	10bfffc4 	addi	r2,r2,-1
  2818d8:	30c01426 	beq	r6,r3,28192c <memchr+0x84>
  2818dc:	21000044 	addi	r4,r4,1
  2818e0:	20c000cc 	andi	r3,r4,3
  2818e4:	183ff91e 	bne	r3,zero,2818cc <memchr+0x24>
  2818e8:	020000c4 	movi	r8,3
  2818ec:	40801136 	bltu	r8,r2,281934 <memchr+0x8c>
  2818f0:	10000c26 	beq	r2,zero,281924 <memchr+0x7c>
  2818f4:	20c00003 	ldbu	r3,0(r4)
  2818f8:	29403fcc 	andi	r5,r5,255
  2818fc:	28c00b26 	beq	r5,r3,28192c <memchr+0x84>
  281900:	20c00044 	addi	r3,r4,1
  281904:	39803fcc 	andi	r6,r7,255
  281908:	2089883a 	add	r4,r4,r2
  28190c:	00000306 	br	28191c <memchr+0x74>
  281910:	18c00044 	addi	r3,r3,1
  281914:	197fffc3 	ldbu	r5,-1(r3)
  281918:	31400526 	beq	r6,r5,281930 <memchr+0x88>
  28191c:	1805883a 	mov	r2,r3
  281920:	20fffb1e 	bne	r4,r3,281910 <memchr+0x68>
  281924:	0005883a 	mov	r2,zero
  281928:	f800283a 	ret
  28192c:	2005883a 	mov	r2,r4
  281930:	f800283a 	ret
  281934:	28c03fcc 	andi	r3,r5,255
  281938:	1812923a 	slli	r9,r3,8
  28193c:	02ffbff4 	movhi	r11,65279
  281940:	02a02074 	movhi	r10,32897
  281944:	48d2b03a 	or	r9,r9,r3
  281948:	4806943a 	slli	r3,r9,16
  28194c:	5affbfc4 	addi	r11,r11,-257
  281950:	52a02004 	addi	r10,r10,-32640
  281954:	48d2b03a 	or	r9,r9,r3
  281958:	20c00017 	ldw	r3,0(r4)
  28195c:	48c6f03a 	xor	r3,r9,r3
  281960:	1acd883a 	add	r6,r3,r11
  281964:	00c6303a 	nor	r3,zero,r3
  281968:	30c6703a 	and	r3,r6,r3
  28196c:	1a86703a 	and	r3,r3,r10
  281970:	183fe01e 	bne	r3,zero,2818f4 <memchr+0x4c>
  281974:	10bfff04 	addi	r2,r2,-4
  281978:	21000104 	addi	r4,r4,4
  28197c:	40bff636 	bltu	r8,r2,281958 <memchr+0xb0>
  281980:	003fdb06 	br	2818f0 <memchr+0x48>
  281984:	3005883a 	mov	r2,r6
  281988:	003fd706 	br	2818e8 <memchr+0x40>

0028198c <memcpy>:
  28198c:	defffd04 	addi	sp,sp,-12
  281990:	dfc00215 	stw	ra,8(sp)
  281994:	dc400115 	stw	r17,4(sp)
  281998:	dc000015 	stw	r16,0(sp)
  28199c:	00c003c4 	movi	r3,15
  2819a0:	2005883a 	mov	r2,r4
  2819a4:	1980452e 	bgeu	r3,r6,281abc <memcpy+0x130>
  2819a8:	2906b03a 	or	r3,r5,r4
  2819ac:	18c000cc 	andi	r3,r3,3
  2819b0:	1800441e 	bne	r3,zero,281ac4 <memcpy+0x138>
  2819b4:	347ffc04 	addi	r17,r6,-16
  2819b8:	8822d13a 	srli	r17,r17,4
  2819bc:	28c00104 	addi	r3,r5,4
  2819c0:	23400104 	addi	r13,r4,4
  2819c4:	8820913a 	slli	r16,r17,4
  2819c8:	2b000204 	addi	r12,r5,8
  2819cc:	22c00204 	addi	r11,r4,8
  2819d0:	84000504 	addi	r16,r16,20
  2819d4:	2a800304 	addi	r10,r5,12
  2819d8:	22400304 	addi	r9,r4,12
  2819dc:	2c21883a 	add	r16,r5,r16
  2819e0:	2811883a 	mov	r8,r5
  2819e4:	200f883a 	mov	r7,r4
  2819e8:	41000017 	ldw	r4,0(r8)
  2819ec:	1fc00017 	ldw	ra,0(r3)
  2819f0:	63c00017 	ldw	r15,0(r12)
  2819f4:	39000015 	stw	r4,0(r7)
  2819f8:	53800017 	ldw	r14,0(r10)
  2819fc:	6fc00015 	stw	ra,0(r13)
  281a00:	5bc00015 	stw	r15,0(r11)
  281a04:	4b800015 	stw	r14,0(r9)
  281a08:	18c00404 	addi	r3,r3,16
  281a0c:	39c00404 	addi	r7,r7,16
  281a10:	42000404 	addi	r8,r8,16
  281a14:	6b400404 	addi	r13,r13,16
  281a18:	63000404 	addi	r12,r12,16
  281a1c:	5ac00404 	addi	r11,r11,16
  281a20:	52800404 	addi	r10,r10,16
  281a24:	4a400404 	addi	r9,r9,16
  281a28:	1c3fef1e 	bne	r3,r16,2819e8 <memcpy+0x5c>
  281a2c:	89c00044 	addi	r7,r17,1
  281a30:	380e913a 	slli	r7,r7,4
  281a34:	310003cc 	andi	r4,r6,15
  281a38:	02c000c4 	movi	r11,3
  281a3c:	11c7883a 	add	r3,r2,r7
  281a40:	29cb883a 	add	r5,r5,r7
  281a44:	5900212e 	bgeu	r11,r4,281acc <memcpy+0x140>
  281a48:	1813883a 	mov	r9,r3
  281a4c:	2811883a 	mov	r8,r5
  281a50:	200f883a 	mov	r7,r4
  281a54:	42800017 	ldw	r10,0(r8)
  281a58:	4a400104 	addi	r9,r9,4
  281a5c:	39ffff04 	addi	r7,r7,-4
  281a60:	4abfff15 	stw	r10,-4(r9)
  281a64:	42000104 	addi	r8,r8,4
  281a68:	59fffa36 	bltu	r11,r7,281a54 <memcpy+0xc8>
  281a6c:	213fff04 	addi	r4,r4,-4
  281a70:	2008d0ba 	srli	r4,r4,2
  281a74:	318000cc 	andi	r6,r6,3
  281a78:	21000044 	addi	r4,r4,1
  281a7c:	2109883a 	add	r4,r4,r4
  281a80:	2109883a 	add	r4,r4,r4
  281a84:	1907883a 	add	r3,r3,r4
  281a88:	290b883a 	add	r5,r5,r4
  281a8c:	30000626 	beq	r6,zero,281aa8 <memcpy+0x11c>
  281a90:	198d883a 	add	r6,r3,r6
  281a94:	29c00003 	ldbu	r7,0(r5)
  281a98:	18c00044 	addi	r3,r3,1
  281a9c:	29400044 	addi	r5,r5,1
  281aa0:	19ffffc5 	stb	r7,-1(r3)
  281aa4:	19bffb1e 	bne	r3,r6,281a94 <memcpy+0x108>
  281aa8:	dfc00217 	ldw	ra,8(sp)
  281aac:	dc400117 	ldw	r17,4(sp)
  281ab0:	dc000017 	ldw	r16,0(sp)
  281ab4:	dec00304 	addi	sp,sp,12
  281ab8:	f800283a 	ret
  281abc:	2007883a 	mov	r3,r4
  281ac0:	003ff206 	br	281a8c <memcpy+0x100>
  281ac4:	2007883a 	mov	r3,r4
  281ac8:	003ff106 	br	281a90 <memcpy+0x104>
  281acc:	200d883a 	mov	r6,r4
  281ad0:	003fee06 	br	281a8c <memcpy+0x100>

00281ad4 <memmove>:
  281ad4:	2005883a 	mov	r2,r4
  281ad8:	29000b2e 	bgeu	r5,r4,281b08 <memmove+0x34>
  281adc:	298f883a 	add	r7,r5,r6
  281ae0:	21c0092e 	bgeu	r4,r7,281b08 <memmove+0x34>
  281ae4:	2187883a 	add	r3,r4,r6
  281ae8:	198bc83a 	sub	r5,r3,r6
  281aec:	30004826 	beq	r6,zero,281c10 <memmove+0x13c>
  281af0:	39ffffc4 	addi	r7,r7,-1
  281af4:	39000003 	ldbu	r4,0(r7)
  281af8:	18ffffc4 	addi	r3,r3,-1
  281afc:	19000005 	stb	r4,0(r3)
  281b00:	28fffb1e 	bne	r5,r3,281af0 <memmove+0x1c>
  281b04:	f800283a 	ret
  281b08:	00c003c4 	movi	r3,15
  281b0c:	1980412e 	bgeu	r3,r6,281c14 <memmove+0x140>
  281b10:	2886b03a 	or	r3,r5,r2
  281b14:	18c000cc 	andi	r3,r3,3
  281b18:	1800401e 	bne	r3,zero,281c1c <memmove+0x148>
  281b1c:	33fffc04 	addi	r15,r6,-16
  281b20:	781ed13a 	srli	r15,r15,4
  281b24:	28c00104 	addi	r3,r5,4
  281b28:	13400104 	addi	r13,r2,4
  281b2c:	781c913a 	slli	r14,r15,4
  281b30:	2b000204 	addi	r12,r5,8
  281b34:	12c00204 	addi	r11,r2,8
  281b38:	73800504 	addi	r14,r14,20
  281b3c:	2a800304 	addi	r10,r5,12
  281b40:	12400304 	addi	r9,r2,12
  281b44:	2b9d883a 	add	r14,r5,r14
  281b48:	2811883a 	mov	r8,r5
  281b4c:	100f883a 	mov	r7,r2
  281b50:	41000017 	ldw	r4,0(r8)
  281b54:	39c00404 	addi	r7,r7,16
  281b58:	18c00404 	addi	r3,r3,16
  281b5c:	393ffc15 	stw	r4,-16(r7)
  281b60:	193ffc17 	ldw	r4,-16(r3)
  281b64:	6b400404 	addi	r13,r13,16
  281b68:	5ac00404 	addi	r11,r11,16
  281b6c:	693ffc15 	stw	r4,-16(r13)
  281b70:	61000017 	ldw	r4,0(r12)
  281b74:	4a400404 	addi	r9,r9,16
  281b78:	42000404 	addi	r8,r8,16
  281b7c:	593ffc15 	stw	r4,-16(r11)
  281b80:	51000017 	ldw	r4,0(r10)
  281b84:	63000404 	addi	r12,r12,16
  281b88:	52800404 	addi	r10,r10,16
  281b8c:	493ffc15 	stw	r4,-16(r9)
  281b90:	1bbfef1e 	bne	r3,r14,281b50 <memmove+0x7c>
  281b94:	79000044 	addi	r4,r15,1
  281b98:	2008913a 	slli	r4,r4,4
  281b9c:	328003cc 	andi	r10,r6,15
  281ba0:	02c000c4 	movi	r11,3
  281ba4:	1107883a 	add	r3,r2,r4
  281ba8:	290b883a 	add	r5,r5,r4
  281bac:	5a801e2e 	bgeu	r11,r10,281c28 <memmove+0x154>
  281bb0:	1813883a 	mov	r9,r3
  281bb4:	2811883a 	mov	r8,r5
  281bb8:	500f883a 	mov	r7,r10
  281bbc:	41000017 	ldw	r4,0(r8)
  281bc0:	4a400104 	addi	r9,r9,4
  281bc4:	39ffff04 	addi	r7,r7,-4
  281bc8:	493fff15 	stw	r4,-4(r9)
  281bcc:	42000104 	addi	r8,r8,4
  281bd0:	59fffa36 	bltu	r11,r7,281bbc <memmove+0xe8>
  281bd4:	513fff04 	addi	r4,r10,-4
  281bd8:	2008d0ba 	srli	r4,r4,2
  281bdc:	318000cc 	andi	r6,r6,3
  281be0:	21000044 	addi	r4,r4,1
  281be4:	2109883a 	add	r4,r4,r4
  281be8:	2109883a 	add	r4,r4,r4
  281bec:	1907883a 	add	r3,r3,r4
  281bf0:	290b883a 	add	r5,r5,r4
  281bf4:	30000b26 	beq	r6,zero,281c24 <memmove+0x150>
  281bf8:	198d883a 	add	r6,r3,r6
  281bfc:	29c00003 	ldbu	r7,0(r5)
  281c00:	18c00044 	addi	r3,r3,1
  281c04:	29400044 	addi	r5,r5,1
  281c08:	19ffffc5 	stb	r7,-1(r3)
  281c0c:	19bffb1e 	bne	r3,r6,281bfc <memmove+0x128>
  281c10:	f800283a 	ret
  281c14:	1007883a 	mov	r3,r2
  281c18:	003ff606 	br	281bf4 <memmove+0x120>
  281c1c:	1007883a 	mov	r3,r2
  281c20:	003ff506 	br	281bf8 <memmove+0x124>
  281c24:	f800283a 	ret
  281c28:	500d883a 	mov	r6,r10
  281c2c:	003ff106 	br	281bf4 <memmove+0x120>

00281c30 <memset>:
  281c30:	20c000cc 	andi	r3,r4,3
  281c34:	2005883a 	mov	r2,r4
  281c38:	18004426 	beq	r3,zero,281d4c <memset+0x11c>
  281c3c:	31ffffc4 	addi	r7,r6,-1
  281c40:	30004026 	beq	r6,zero,281d44 <memset+0x114>
  281c44:	2813883a 	mov	r9,r5
  281c48:	200d883a 	mov	r6,r4
  281c4c:	2007883a 	mov	r3,r4
  281c50:	00000406 	br	281c64 <memset+0x34>
  281c54:	3a3fffc4 	addi	r8,r7,-1
  281c58:	31800044 	addi	r6,r6,1
  281c5c:	38003926 	beq	r7,zero,281d44 <memset+0x114>
  281c60:	400f883a 	mov	r7,r8
  281c64:	18c00044 	addi	r3,r3,1
  281c68:	32400005 	stb	r9,0(r6)
  281c6c:	1a0000cc 	andi	r8,r3,3
  281c70:	403ff81e 	bne	r8,zero,281c54 <memset+0x24>
  281c74:	010000c4 	movi	r4,3
  281c78:	21c02d2e 	bgeu	r4,r7,281d30 <memset+0x100>
  281c7c:	29003fcc 	andi	r4,r5,255
  281c80:	200c923a 	slli	r6,r4,8
  281c84:	3108b03a 	or	r4,r6,r4
  281c88:	200c943a 	slli	r6,r4,16
  281c8c:	218cb03a 	or	r6,r4,r6
  281c90:	010003c4 	movi	r4,15
  281c94:	21c0182e 	bgeu	r4,r7,281cf8 <memset+0xc8>
  281c98:	3b3ffc04 	addi	r12,r7,-16
  281c9c:	6018d13a 	srli	r12,r12,4
  281ca0:	1a000104 	addi	r8,r3,4
  281ca4:	1ac00204 	addi	r11,r3,8
  281ca8:	6008913a 	slli	r4,r12,4
  281cac:	1a800304 	addi	r10,r3,12
  281cb0:	1813883a 	mov	r9,r3
  281cb4:	21000504 	addi	r4,r4,20
  281cb8:	1909883a 	add	r4,r3,r4
  281cbc:	49800015 	stw	r6,0(r9)
  281cc0:	41800015 	stw	r6,0(r8)
  281cc4:	59800015 	stw	r6,0(r11)
  281cc8:	51800015 	stw	r6,0(r10)
  281ccc:	42000404 	addi	r8,r8,16
  281cd0:	4a400404 	addi	r9,r9,16
  281cd4:	5ac00404 	addi	r11,r11,16
  281cd8:	52800404 	addi	r10,r10,16
  281cdc:	413ff71e 	bne	r8,r4,281cbc <memset+0x8c>
  281ce0:	63000044 	addi	r12,r12,1
  281ce4:	6018913a 	slli	r12,r12,4
  281ce8:	39c003cc 	andi	r7,r7,15
  281cec:	010000c4 	movi	r4,3
  281cf0:	1b07883a 	add	r3,r3,r12
  281cf4:	21c00e2e 	bgeu	r4,r7,281d30 <memset+0x100>
  281cf8:	1813883a 	mov	r9,r3
  281cfc:	3811883a 	mov	r8,r7
  281d00:	010000c4 	movi	r4,3
  281d04:	49800015 	stw	r6,0(r9)
  281d08:	423fff04 	addi	r8,r8,-4
  281d0c:	4a400104 	addi	r9,r9,4
  281d10:	223ffc36 	bltu	r4,r8,281d04 <memset+0xd4>
  281d14:	393fff04 	addi	r4,r7,-4
  281d18:	2008d0ba 	srli	r4,r4,2
  281d1c:	39c000cc 	andi	r7,r7,3
  281d20:	21000044 	addi	r4,r4,1
  281d24:	2109883a 	add	r4,r4,r4
  281d28:	2109883a 	add	r4,r4,r4
  281d2c:	1907883a 	add	r3,r3,r4
  281d30:	38000526 	beq	r7,zero,281d48 <memset+0x118>
  281d34:	19cf883a 	add	r7,r3,r7
  281d38:	19400005 	stb	r5,0(r3)
  281d3c:	18c00044 	addi	r3,r3,1
  281d40:	38fffd1e 	bne	r7,r3,281d38 <memset+0x108>
  281d44:	f800283a 	ret
  281d48:	f800283a 	ret
  281d4c:	2007883a 	mov	r3,r4
  281d50:	300f883a 	mov	r7,r6
  281d54:	003fc706 	br	281c74 <memset+0x44>

00281d58 <_realloc_r>:
  281d58:	defff604 	addi	sp,sp,-40
  281d5c:	dc800215 	stw	r18,8(sp)
  281d60:	dfc00915 	stw	ra,36(sp)
  281d64:	df000815 	stw	fp,32(sp)
  281d68:	ddc00715 	stw	r23,28(sp)
  281d6c:	dd800615 	stw	r22,24(sp)
  281d70:	dd400515 	stw	r21,20(sp)
  281d74:	dd000415 	stw	r20,16(sp)
  281d78:	dcc00315 	stw	r19,12(sp)
  281d7c:	dc400115 	stw	r17,4(sp)
  281d80:	dc000015 	stw	r16,0(sp)
  281d84:	3025883a 	mov	r18,r6
  281d88:	2800b726 	beq	r5,zero,282068 <_realloc_r+0x310>
  281d8c:	282b883a 	mov	r21,r5
  281d90:	2029883a 	mov	r20,r4
  281d94:	02836dc0 	call	2836dc <__malloc_lock>
  281d98:	a8bfff17 	ldw	r2,-4(r21)
  281d9c:	043fff04 	movi	r16,-4
  281da0:	90c002c4 	addi	r3,r18,11
  281da4:	01000584 	movi	r4,22
  281da8:	acfffe04 	addi	r19,r21,-8
  281dac:	1420703a 	and	r16,r2,r16
  281db0:	20c0332e 	bgeu	r4,r3,281e80 <_realloc_r+0x128>
  281db4:	047ffe04 	movi	r17,-8
  281db8:	1c62703a 	and	r17,r3,r17
  281dbc:	8807883a 	mov	r3,r17
  281dc0:	88005816 	blt	r17,zero,281f24 <_realloc_r+0x1cc>
  281dc4:	8c805736 	bltu	r17,r18,281f24 <_realloc_r+0x1cc>
  281dc8:	80c0300e 	bge	r16,r3,281e8c <_realloc_r+0x134>
  281dcc:	07000a34 	movhi	fp,40
  281dd0:	e71b7704 	addi	fp,fp,28124
  281dd4:	e1c00217 	ldw	r7,8(fp)
  281dd8:	9c09883a 	add	r4,r19,r16
  281ddc:	22000117 	ldw	r8,4(r4)
  281de0:	21c06326 	beq	r4,r7,281f70 <_realloc_r+0x218>
  281de4:	017fff84 	movi	r5,-2
  281de8:	414a703a 	and	r5,r8,r5
  281dec:	214b883a 	add	r5,r4,r5
  281df0:	29800117 	ldw	r6,4(r5)
  281df4:	3180004c 	andi	r6,r6,1
  281df8:	30003f26 	beq	r6,zero,281ef8 <_realloc_r+0x1a0>
  281dfc:	1080004c 	andi	r2,r2,1
  281e00:	10008326 	beq	r2,zero,282010 <_realloc_r+0x2b8>
  281e04:	900b883a 	mov	r5,r18
  281e08:	a009883a 	mov	r4,r20
  281e0c:	028109c0 	call	28109c <_malloc_r>
  281e10:	1025883a 	mov	r18,r2
  281e14:	10011e26 	beq	r2,zero,282290 <_realloc_r+0x538>
  281e18:	a93fff17 	ldw	r4,-4(r21)
  281e1c:	10fffe04 	addi	r3,r2,-8
  281e20:	00bfff84 	movi	r2,-2
  281e24:	2084703a 	and	r2,r4,r2
  281e28:	9885883a 	add	r2,r19,r2
  281e2c:	1880ee26 	beq	r3,r2,2821e8 <_realloc_r+0x490>
  281e30:	81bfff04 	addi	r6,r16,-4
  281e34:	00800904 	movi	r2,36
  281e38:	1180b836 	bltu	r2,r6,28211c <_realloc_r+0x3c4>
  281e3c:	00c004c4 	movi	r3,19
  281e40:	19809636 	bltu	r3,r6,28209c <_realloc_r+0x344>
  281e44:	9005883a 	mov	r2,r18
  281e48:	a807883a 	mov	r3,r21
  281e4c:	19000017 	ldw	r4,0(r3)
  281e50:	11000015 	stw	r4,0(r2)
  281e54:	19000117 	ldw	r4,4(r3)
  281e58:	11000115 	stw	r4,4(r2)
  281e5c:	18c00217 	ldw	r3,8(r3)
  281e60:	10c00215 	stw	r3,8(r2)
  281e64:	a80b883a 	mov	r5,r21
  281e68:	a009883a 	mov	r4,r20
  281e6c:	0282b240 	call	282b24 <_free_r>
  281e70:	a009883a 	mov	r4,r20
  281e74:	02837000 	call	283700 <__malloc_unlock>
  281e78:	9005883a 	mov	r2,r18
  281e7c:	00001206 	br	281ec8 <_realloc_r+0x170>
  281e80:	00c00404 	movi	r3,16
  281e84:	1823883a 	mov	r17,r3
  281e88:	003fce06 	br	281dc4 <_realloc_r+0x6c>
  281e8c:	a825883a 	mov	r18,r21
  281e90:	8445c83a 	sub	r2,r16,r17
  281e94:	00c003c4 	movi	r3,15
  281e98:	18802636 	bltu	r3,r2,281f34 <_realloc_r+0x1dc>
  281e9c:	99800117 	ldw	r6,4(r19)
  281ea0:	9c07883a 	add	r3,r19,r16
  281ea4:	3180004c 	andi	r6,r6,1
  281ea8:	3420b03a 	or	r16,r6,r16
  281eac:	9c000115 	stw	r16,4(r19)
  281eb0:	18800117 	ldw	r2,4(r3)
  281eb4:	10800054 	ori	r2,r2,1
  281eb8:	18800115 	stw	r2,4(r3)
  281ebc:	a009883a 	mov	r4,r20
  281ec0:	02837000 	call	283700 <__malloc_unlock>
  281ec4:	9005883a 	mov	r2,r18
  281ec8:	dfc00917 	ldw	ra,36(sp)
  281ecc:	df000817 	ldw	fp,32(sp)
  281ed0:	ddc00717 	ldw	r23,28(sp)
  281ed4:	dd800617 	ldw	r22,24(sp)
  281ed8:	dd400517 	ldw	r21,20(sp)
  281edc:	dd000417 	ldw	r20,16(sp)
  281ee0:	dcc00317 	ldw	r19,12(sp)
  281ee4:	dc800217 	ldw	r18,8(sp)
  281ee8:	dc400117 	ldw	r17,4(sp)
  281eec:	dc000017 	ldw	r16,0(sp)
  281ef0:	dec00a04 	addi	sp,sp,40
  281ef4:	f800283a 	ret
  281ef8:	017fff04 	movi	r5,-4
  281efc:	414a703a 	and	r5,r8,r5
  281f00:	814d883a 	add	r6,r16,r5
  281f04:	30c01f16 	blt	r6,r3,281f84 <_realloc_r+0x22c>
  281f08:	20800317 	ldw	r2,12(r4)
  281f0c:	20c00217 	ldw	r3,8(r4)
  281f10:	a825883a 	mov	r18,r21
  281f14:	3021883a 	mov	r16,r6
  281f18:	18800315 	stw	r2,12(r3)
  281f1c:	10c00215 	stw	r3,8(r2)
  281f20:	003fdb06 	br	281e90 <_realloc_r+0x138>
  281f24:	00800304 	movi	r2,12
  281f28:	a0800015 	stw	r2,0(r20)
  281f2c:	0005883a 	mov	r2,zero
  281f30:	003fe506 	br	281ec8 <_realloc_r+0x170>
  281f34:	98c00117 	ldw	r3,4(r19)
  281f38:	9c4b883a 	add	r5,r19,r17
  281f3c:	11000054 	ori	r4,r2,1
  281f40:	18c0004c 	andi	r3,r3,1
  281f44:	1c62b03a 	or	r17,r3,r17
  281f48:	9c400115 	stw	r17,4(r19)
  281f4c:	29000115 	stw	r4,4(r5)
  281f50:	2885883a 	add	r2,r5,r2
  281f54:	10c00117 	ldw	r3,4(r2)
  281f58:	29400204 	addi	r5,r5,8
  281f5c:	a009883a 	mov	r4,r20
  281f60:	18c00054 	ori	r3,r3,1
  281f64:	10c00115 	stw	r3,4(r2)
  281f68:	0282b240 	call	282b24 <_free_r>
  281f6c:	003fd306 	br	281ebc <_realloc_r+0x164>
  281f70:	017fff04 	movi	r5,-4
  281f74:	414a703a 	and	r5,r8,r5
  281f78:	89800404 	addi	r6,r17,16
  281f7c:	8151883a 	add	r8,r16,r5
  281f80:	4180590e 	bge	r8,r6,2820e8 <_realloc_r+0x390>
  281f84:	1080004c 	andi	r2,r2,1
  281f88:	103f9e1e 	bne	r2,zero,281e04 <_realloc_r+0xac>
  281f8c:	adbffe17 	ldw	r22,-8(r21)
  281f90:	00bfff04 	movi	r2,-4
  281f94:	9dadc83a 	sub	r22,r19,r22
  281f98:	b1800117 	ldw	r6,4(r22)
  281f9c:	3084703a 	and	r2,r6,r2
  281fa0:	20002026 	beq	r4,zero,282024 <_realloc_r+0x2cc>
  281fa4:	80af883a 	add	r23,r16,r2
  281fa8:	b96f883a 	add	r23,r23,r5
  281fac:	21c05f26 	beq	r4,r7,28212c <_realloc_r+0x3d4>
  281fb0:	b8c01c16 	blt	r23,r3,282024 <_realloc_r+0x2cc>
  281fb4:	20800317 	ldw	r2,12(r4)
  281fb8:	20c00217 	ldw	r3,8(r4)
  281fbc:	81bfff04 	addi	r6,r16,-4
  281fc0:	01000904 	movi	r4,36
  281fc4:	18800315 	stw	r2,12(r3)
  281fc8:	10c00215 	stw	r3,8(r2)
  281fcc:	b0c00217 	ldw	r3,8(r22)
  281fd0:	b0800317 	ldw	r2,12(r22)
  281fd4:	b4800204 	addi	r18,r22,8
  281fd8:	18800315 	stw	r2,12(r3)
  281fdc:	10c00215 	stw	r3,8(r2)
  281fe0:	21801b36 	bltu	r4,r6,282050 <_realloc_r+0x2f8>
  281fe4:	008004c4 	movi	r2,19
  281fe8:	1180352e 	bgeu	r2,r6,2820c0 <_realloc_r+0x368>
  281fec:	a8800017 	ldw	r2,0(r21)
  281ff0:	b0800215 	stw	r2,8(r22)
  281ff4:	a8800117 	ldw	r2,4(r21)
  281ff8:	b0800315 	stw	r2,12(r22)
  281ffc:	008006c4 	movi	r2,27
  282000:	11807f36 	bltu	r2,r6,282200 <_realloc_r+0x4a8>
  282004:	b0800404 	addi	r2,r22,16
  282008:	ad400204 	addi	r21,r21,8
  28200c:	00002d06 	br	2820c4 <_realloc_r+0x36c>
  282010:	adbffe17 	ldw	r22,-8(r21)
  282014:	00bfff04 	movi	r2,-4
  282018:	9dadc83a 	sub	r22,r19,r22
  28201c:	b1000117 	ldw	r4,4(r22)
  282020:	2084703a 	and	r2,r4,r2
  282024:	b03f7726 	beq	r22,zero,281e04 <_realloc_r+0xac>
  282028:	80af883a 	add	r23,r16,r2
  28202c:	b8ff7516 	blt	r23,r3,281e04 <_realloc_r+0xac>
  282030:	b0800317 	ldw	r2,12(r22)
  282034:	b0c00217 	ldw	r3,8(r22)
  282038:	81bfff04 	addi	r6,r16,-4
  28203c:	01000904 	movi	r4,36
  282040:	18800315 	stw	r2,12(r3)
  282044:	10c00215 	stw	r3,8(r2)
  282048:	b4800204 	addi	r18,r22,8
  28204c:	21bfe52e 	bgeu	r4,r6,281fe4 <_realloc_r+0x28c>
  282050:	a80b883a 	mov	r5,r21
  282054:	9009883a 	mov	r4,r18
  282058:	0281ad40 	call	281ad4 <memmove>
  28205c:	b821883a 	mov	r16,r23
  282060:	b027883a 	mov	r19,r22
  282064:	003f8a06 	br	281e90 <_realloc_r+0x138>
  282068:	300b883a 	mov	r5,r6
  28206c:	dfc00917 	ldw	ra,36(sp)
  282070:	df000817 	ldw	fp,32(sp)
  282074:	ddc00717 	ldw	r23,28(sp)
  282078:	dd800617 	ldw	r22,24(sp)
  28207c:	dd400517 	ldw	r21,20(sp)
  282080:	dd000417 	ldw	r20,16(sp)
  282084:	dcc00317 	ldw	r19,12(sp)
  282088:	dc800217 	ldw	r18,8(sp)
  28208c:	dc400117 	ldw	r17,4(sp)
  282090:	dc000017 	ldw	r16,0(sp)
  282094:	dec00a04 	addi	sp,sp,40
  282098:	028109c1 	jmpi	28109c <_malloc_r>
  28209c:	a8c00017 	ldw	r3,0(r21)
  2820a0:	90c00015 	stw	r3,0(r18)
  2820a4:	a8c00117 	ldw	r3,4(r21)
  2820a8:	90c00115 	stw	r3,4(r18)
  2820ac:	00c006c4 	movi	r3,27
  2820b0:	19804536 	bltu	r3,r6,2821c8 <_realloc_r+0x470>
  2820b4:	90800204 	addi	r2,r18,8
  2820b8:	a8c00204 	addi	r3,r21,8
  2820bc:	003f6306 	br	281e4c <_realloc_r+0xf4>
  2820c0:	9005883a 	mov	r2,r18
  2820c4:	a8c00017 	ldw	r3,0(r21)
  2820c8:	b821883a 	mov	r16,r23
  2820cc:	b027883a 	mov	r19,r22
  2820d0:	10c00015 	stw	r3,0(r2)
  2820d4:	a8c00117 	ldw	r3,4(r21)
  2820d8:	10c00115 	stw	r3,4(r2)
  2820dc:	a8c00217 	ldw	r3,8(r21)
  2820e0:	10c00215 	stw	r3,8(r2)
  2820e4:	003f6a06 	br	281e90 <_realloc_r+0x138>
  2820e8:	9c67883a 	add	r19,r19,r17
  2820ec:	4445c83a 	sub	r2,r8,r17
  2820f0:	e4c00215 	stw	r19,8(fp)
  2820f4:	10800054 	ori	r2,r2,1
  2820f8:	98800115 	stw	r2,4(r19)
  2820fc:	a8bfff17 	ldw	r2,-4(r21)
  282100:	a009883a 	mov	r4,r20
  282104:	1080004c 	andi	r2,r2,1
  282108:	1462b03a 	or	r17,r2,r17
  28210c:	ac7fff15 	stw	r17,-4(r21)
  282110:	02837000 	call	283700 <__malloc_unlock>
  282114:	a805883a 	mov	r2,r21
  282118:	003f6b06 	br	281ec8 <_realloc_r+0x170>
  28211c:	a80b883a 	mov	r5,r21
  282120:	9009883a 	mov	r4,r18
  282124:	0281ad40 	call	281ad4 <memmove>
  282128:	003f4e06 	br	281e64 <_realloc_r+0x10c>
  28212c:	89000404 	addi	r4,r17,16
  282130:	b93fbc16 	blt	r23,r4,282024 <_realloc_r+0x2cc>
  282134:	b0800317 	ldw	r2,12(r22)
  282138:	b0c00217 	ldw	r3,8(r22)
  28213c:	81bfff04 	addi	r6,r16,-4
  282140:	01000904 	movi	r4,36
  282144:	18800315 	stw	r2,12(r3)
  282148:	10c00215 	stw	r3,8(r2)
  28214c:	b4800204 	addi	r18,r22,8
  282150:	21804336 	bltu	r4,r6,282260 <_realloc_r+0x508>
  282154:	008004c4 	movi	r2,19
  282158:	11803f2e 	bgeu	r2,r6,282258 <_realloc_r+0x500>
  28215c:	a8800017 	ldw	r2,0(r21)
  282160:	b0800215 	stw	r2,8(r22)
  282164:	a8800117 	ldw	r2,4(r21)
  282168:	b0800315 	stw	r2,12(r22)
  28216c:	008006c4 	movi	r2,27
  282170:	11803f36 	bltu	r2,r6,282270 <_realloc_r+0x518>
  282174:	b0800404 	addi	r2,r22,16
  282178:	ad400204 	addi	r21,r21,8
  28217c:	a8c00017 	ldw	r3,0(r21)
  282180:	10c00015 	stw	r3,0(r2)
  282184:	a8c00117 	ldw	r3,4(r21)
  282188:	10c00115 	stw	r3,4(r2)
  28218c:	a8c00217 	ldw	r3,8(r21)
  282190:	10c00215 	stw	r3,8(r2)
  282194:	b447883a 	add	r3,r22,r17
  282198:	bc45c83a 	sub	r2,r23,r17
  28219c:	e0c00215 	stw	r3,8(fp)
  2821a0:	10800054 	ori	r2,r2,1
  2821a4:	18800115 	stw	r2,4(r3)
  2821a8:	b0800117 	ldw	r2,4(r22)
  2821ac:	a009883a 	mov	r4,r20
  2821b0:	1080004c 	andi	r2,r2,1
  2821b4:	1462b03a 	or	r17,r2,r17
  2821b8:	b4400115 	stw	r17,4(r22)
  2821bc:	02837000 	call	283700 <__malloc_unlock>
  2821c0:	9005883a 	mov	r2,r18
  2821c4:	003f4006 	br	281ec8 <_realloc_r+0x170>
  2821c8:	a8c00217 	ldw	r3,8(r21)
  2821cc:	90c00215 	stw	r3,8(r18)
  2821d0:	a8c00317 	ldw	r3,12(r21)
  2821d4:	90c00315 	stw	r3,12(r18)
  2821d8:	30801126 	beq	r6,r2,282220 <_realloc_r+0x4c8>
  2821dc:	90800404 	addi	r2,r18,16
  2821e0:	a8c00404 	addi	r3,r21,16
  2821e4:	003f1906 	br	281e4c <_realloc_r+0xf4>
  2821e8:	90ffff17 	ldw	r3,-4(r18)
  2821ec:	00bfff04 	movi	r2,-4
  2821f0:	a825883a 	mov	r18,r21
  2821f4:	1884703a 	and	r2,r3,r2
  2821f8:	80a1883a 	add	r16,r16,r2
  2821fc:	003f2406 	br	281e90 <_realloc_r+0x138>
  282200:	a8800217 	ldw	r2,8(r21)
  282204:	b0800415 	stw	r2,16(r22)
  282208:	a8800317 	ldw	r2,12(r21)
  28220c:	b0800515 	stw	r2,20(r22)
  282210:	31000a26 	beq	r6,r4,28223c <_realloc_r+0x4e4>
  282214:	b0800604 	addi	r2,r22,24
  282218:	ad400404 	addi	r21,r21,16
  28221c:	003fa906 	br	2820c4 <_realloc_r+0x36c>
  282220:	a9000417 	ldw	r4,16(r21)
  282224:	90800604 	addi	r2,r18,24
  282228:	a8c00604 	addi	r3,r21,24
  28222c:	91000415 	stw	r4,16(r18)
  282230:	a9000517 	ldw	r4,20(r21)
  282234:	91000515 	stw	r4,20(r18)
  282238:	003f0406 	br	281e4c <_realloc_r+0xf4>
  28223c:	a8c00417 	ldw	r3,16(r21)
  282240:	ad400604 	addi	r21,r21,24
  282244:	b0800804 	addi	r2,r22,32
  282248:	b0c00615 	stw	r3,24(r22)
  28224c:	a8ffff17 	ldw	r3,-4(r21)
  282250:	b0c00715 	stw	r3,28(r22)
  282254:	003f9b06 	br	2820c4 <_realloc_r+0x36c>
  282258:	9005883a 	mov	r2,r18
  28225c:	003fc706 	br	28217c <_realloc_r+0x424>
  282260:	a80b883a 	mov	r5,r21
  282264:	9009883a 	mov	r4,r18
  282268:	0281ad40 	call	281ad4 <memmove>
  28226c:	003fc906 	br	282194 <_realloc_r+0x43c>
  282270:	a8800217 	ldw	r2,8(r21)
  282274:	b0800415 	stw	r2,16(r22)
  282278:	a8800317 	ldw	r2,12(r21)
  28227c:	b0800515 	stw	r2,20(r22)
  282280:	31000726 	beq	r6,r4,2822a0 <_realloc_r+0x548>
  282284:	b0800604 	addi	r2,r22,24
  282288:	ad400404 	addi	r21,r21,16
  28228c:	003fbb06 	br	28217c <_realloc_r+0x424>
  282290:	a009883a 	mov	r4,r20
  282294:	02837000 	call	283700 <__malloc_unlock>
  282298:	0005883a 	mov	r2,zero
  28229c:	003f0a06 	br	281ec8 <_realloc_r+0x170>
  2822a0:	a8c00417 	ldw	r3,16(r21)
  2822a4:	ad400604 	addi	r21,r21,24
  2822a8:	b0800804 	addi	r2,r22,32
  2822ac:	b0c00615 	stw	r3,24(r22)
  2822b0:	a8ffff17 	ldw	r3,-4(r21)
  2822b4:	b0c00715 	stw	r3,28(r22)
  2822b8:	003fb006 	br	28217c <_realloc_r+0x424>

002822bc <_sbrk_r>:
  2822bc:	defffd04 	addi	sp,sp,-12
  2822c0:	dc000015 	stw	r16,0(sp)
  2822c4:	04000a74 	movhi	r16,41
  2822c8:	dc400115 	stw	r17,4(sp)
  2822cc:	8427e904 	addi	r16,r16,-24668
  2822d0:	2023883a 	mov	r17,r4
  2822d4:	2809883a 	mov	r4,r5
  2822d8:	dfc00215 	stw	ra,8(sp)
  2822dc:	80000015 	stw	zero,0(r16)
  2822e0:	02838c00 	call	2838c0 <sbrk>
  2822e4:	00ffffc4 	movi	r3,-1
  2822e8:	10c00526 	beq	r2,r3,282300 <_sbrk_r+0x44>
  2822ec:	dfc00217 	ldw	ra,8(sp)
  2822f0:	dc400117 	ldw	r17,4(sp)
  2822f4:	dc000017 	ldw	r16,0(sp)
  2822f8:	dec00304 	addi	sp,sp,12
  2822fc:	f800283a 	ret
  282300:	80c00017 	ldw	r3,0(r16)
  282304:	183ff926 	beq	r3,zero,2822ec <_sbrk_r+0x30>
  282308:	88c00015 	stw	r3,0(r17)
  28230c:	003ff706 	br	2822ec <_sbrk_r+0x30>

00282310 <__sread>:
  282310:	defffe04 	addi	sp,sp,-8
  282314:	dc000015 	stw	r16,0(sp)
  282318:	2821883a 	mov	r16,r5
  28231c:	2940038f 	ldh	r5,14(r5)
  282320:	dfc00115 	stw	ra,4(sp)
  282324:	02830500 	call	283050 <_read_r>
  282328:	10000716 	blt	r2,zero,282348 <__sread+0x38>
  28232c:	80c01417 	ldw	r3,80(r16)
  282330:	1887883a 	add	r3,r3,r2
  282334:	80c01415 	stw	r3,80(r16)
  282338:	dfc00117 	ldw	ra,4(sp)
  28233c:	dc000017 	ldw	r16,0(sp)
  282340:	dec00204 	addi	sp,sp,8
  282344:	f800283a 	ret
  282348:	80c0030b 	ldhu	r3,12(r16)
  28234c:	18fbffcc 	andi	r3,r3,61439
  282350:	80c0030d 	sth	r3,12(r16)
  282354:	dfc00117 	ldw	ra,4(sp)
  282358:	dc000017 	ldw	r16,0(sp)
  28235c:	dec00204 	addi	sp,sp,8
  282360:	f800283a 	ret

00282364 <__seofread>:
  282364:	0005883a 	mov	r2,zero
  282368:	f800283a 	ret

0028236c <__swrite>:
  28236c:	2880030b 	ldhu	r2,12(r5)
  282370:	defffb04 	addi	sp,sp,-20
  282374:	dcc00315 	stw	r19,12(sp)
  282378:	dc800215 	stw	r18,8(sp)
  28237c:	dc400115 	stw	r17,4(sp)
  282380:	dc000015 	stw	r16,0(sp)
  282384:	dfc00415 	stw	ra,16(sp)
  282388:	10c0400c 	andi	r3,r2,256
  28238c:	2821883a 	mov	r16,r5
  282390:	2023883a 	mov	r17,r4
  282394:	3025883a 	mov	r18,r6
  282398:	3827883a 	mov	r19,r7
  28239c:	18000526 	beq	r3,zero,2823b4 <__swrite+0x48>
  2823a0:	2940038f 	ldh	r5,14(r5)
  2823a4:	01c00084 	movi	r7,2
  2823a8:	000d883a 	mov	r6,zero
  2823ac:	0282e340 	call	282e34 <_lseek_r>
  2823b0:	8080030b 	ldhu	r2,12(r16)
  2823b4:	8140038f 	ldh	r5,14(r16)
  2823b8:	10bbffcc 	andi	r2,r2,61439
  2823bc:	980f883a 	mov	r7,r19
  2823c0:	900d883a 	mov	r6,r18
  2823c4:	8809883a 	mov	r4,r17
  2823c8:	8080030d 	sth	r2,12(r16)
  2823cc:	dfc00417 	ldw	ra,16(sp)
  2823d0:	dcc00317 	ldw	r19,12(sp)
  2823d4:	dc800217 	ldw	r18,8(sp)
  2823d8:	dc400117 	ldw	r17,4(sp)
  2823dc:	dc000017 	ldw	r16,0(sp)
  2823e0:	dec00504 	addi	sp,sp,20
  2823e4:	028244c1 	jmpi	28244c <_write_r>

002823e8 <__sseek>:
  2823e8:	defffe04 	addi	sp,sp,-8
  2823ec:	dc000015 	stw	r16,0(sp)
  2823f0:	2821883a 	mov	r16,r5
  2823f4:	2940038f 	ldh	r5,14(r5)
  2823f8:	dfc00115 	stw	ra,4(sp)
  2823fc:	0282e340 	call	282e34 <_lseek_r>
  282400:	00ffffc4 	movi	r3,-1
  282404:	10c00826 	beq	r2,r3,282428 <__sseek+0x40>
  282408:	80c0030b 	ldhu	r3,12(r16)
  28240c:	80801415 	stw	r2,80(r16)
  282410:	18c40014 	ori	r3,r3,4096
  282414:	80c0030d 	sth	r3,12(r16)
  282418:	dfc00117 	ldw	ra,4(sp)
  28241c:	dc000017 	ldw	r16,0(sp)
  282420:	dec00204 	addi	sp,sp,8
  282424:	f800283a 	ret
  282428:	80c0030b 	ldhu	r3,12(r16)
  28242c:	18fbffcc 	andi	r3,r3,61439
  282430:	80c0030d 	sth	r3,12(r16)
  282434:	dfc00117 	ldw	ra,4(sp)
  282438:	dc000017 	ldw	r16,0(sp)
  28243c:	dec00204 	addi	sp,sp,8
  282440:	f800283a 	ret

00282444 <__sclose>:
  282444:	2940038f 	ldh	r5,14(r5)
  282448:	02826001 	jmpi	282600 <_close_r>

0028244c <_write_r>:
  28244c:	defffd04 	addi	sp,sp,-12
  282450:	2805883a 	mov	r2,r5
  282454:	dc000015 	stw	r16,0(sp)
  282458:	04000a74 	movhi	r16,41
  28245c:	dc400115 	stw	r17,4(sp)
  282460:	300b883a 	mov	r5,r6
  282464:	8427e904 	addi	r16,r16,-24668
  282468:	2023883a 	mov	r17,r4
  28246c:	380d883a 	mov	r6,r7
  282470:	1009883a 	mov	r4,r2
  282474:	dfc00215 	stw	ra,8(sp)
  282478:	80000015 	stw	zero,0(r16)
  28247c:	02839dc0 	call	2839dc <write>
  282480:	00ffffc4 	movi	r3,-1
  282484:	10c00526 	beq	r2,r3,28249c <_write_r+0x50>
  282488:	dfc00217 	ldw	ra,8(sp)
  28248c:	dc400117 	ldw	r17,4(sp)
  282490:	dc000017 	ldw	r16,0(sp)
  282494:	dec00304 	addi	sp,sp,12
  282498:	f800283a 	ret
  28249c:	80c00017 	ldw	r3,0(r16)
  2824a0:	183ff926 	beq	r3,zero,282488 <_write_r+0x3c>
  2824a4:	88c00015 	stw	r3,0(r17)
  2824a8:	003ff706 	br	282488 <_write_r+0x3c>

002824ac <__swsetup_r>:
  2824ac:	00800a74 	movhi	r2,41
  2824b0:	defffd04 	addi	sp,sp,-12
  2824b4:	10a11d04 	addi	r2,r2,-31628
  2824b8:	dc400115 	stw	r17,4(sp)
  2824bc:	2023883a 	mov	r17,r4
  2824c0:	11000017 	ldw	r4,0(r2)
  2824c4:	dc000015 	stw	r16,0(sp)
  2824c8:	dfc00215 	stw	ra,8(sp)
  2824cc:	2821883a 	mov	r16,r5
  2824d0:	20000226 	beq	r4,zero,2824dc <__swsetup_r+0x30>
  2824d4:	20800e17 	ldw	r2,56(r4)
  2824d8:	10003126 	beq	r2,zero,2825a0 <__swsetup_r+0xf4>
  2824dc:	8080030b 	ldhu	r2,12(r16)
  2824e0:	10c0020c 	andi	r3,r2,8
  2824e4:	1009883a 	mov	r4,r2
  2824e8:	18000f26 	beq	r3,zero,282528 <__swsetup_r+0x7c>
  2824ec:	80c00417 	ldw	r3,16(r16)
  2824f0:	18001526 	beq	r3,zero,282548 <__swsetup_r+0x9c>
  2824f4:	1100004c 	andi	r4,r2,1
  2824f8:	20001c1e 	bne	r4,zero,28256c <__swsetup_r+0xc0>
  2824fc:	1080008c 	andi	r2,r2,2
  282500:	1000291e 	bne	r2,zero,2825a8 <__swsetup_r+0xfc>
  282504:	80800517 	ldw	r2,20(r16)
  282508:	80800215 	stw	r2,8(r16)
  28250c:	18001c26 	beq	r3,zero,282580 <__swsetup_r+0xd4>
  282510:	0005883a 	mov	r2,zero
  282514:	dfc00217 	ldw	ra,8(sp)
  282518:	dc400117 	ldw	r17,4(sp)
  28251c:	dc000017 	ldw	r16,0(sp)
  282520:	dec00304 	addi	sp,sp,12
  282524:	f800283a 	ret
  282528:	2080040c 	andi	r2,r4,16
  28252c:	10002e26 	beq	r2,zero,2825e8 <__swsetup_r+0x13c>
  282530:	2080010c 	andi	r2,r4,4
  282534:	10001e1e 	bne	r2,zero,2825b0 <__swsetup_r+0x104>
  282538:	80c00417 	ldw	r3,16(r16)
  28253c:	20800214 	ori	r2,r4,8
  282540:	8080030d 	sth	r2,12(r16)
  282544:	183feb1e 	bne	r3,zero,2824f4 <__swsetup_r+0x48>
  282548:	1100a00c 	andi	r4,r2,640
  28254c:	01408004 	movi	r5,512
  282550:	217fe826 	beq	r4,r5,2824f4 <__swsetup_r+0x48>
  282554:	800b883a 	mov	r5,r16
  282558:	8809883a 	mov	r4,r17
  28255c:	0282e940 	call	282e94 <__smakebuf_r>
  282560:	8080030b 	ldhu	r2,12(r16)
  282564:	80c00417 	ldw	r3,16(r16)
  282568:	003fe206 	br	2824f4 <__swsetup_r+0x48>
  28256c:	80800517 	ldw	r2,20(r16)
  282570:	80000215 	stw	zero,8(r16)
  282574:	0085c83a 	sub	r2,zero,r2
  282578:	80800615 	stw	r2,24(r16)
  28257c:	183fe41e 	bne	r3,zero,282510 <__swsetup_r+0x64>
  282580:	80c0030b 	ldhu	r3,12(r16)
  282584:	0005883a 	mov	r2,zero
  282588:	1900200c 	andi	r4,r3,128
  28258c:	203fe126 	beq	r4,zero,282514 <__swsetup_r+0x68>
  282590:	18c01014 	ori	r3,r3,64
  282594:	80c0030d 	sth	r3,12(r16)
  282598:	00bfffc4 	movi	r2,-1
  28259c:	003fdd06 	br	282514 <__swsetup_r+0x68>
  2825a0:	0280a080 	call	280a08 <__sinit>
  2825a4:	003fcd06 	br	2824dc <__swsetup_r+0x30>
  2825a8:	0005883a 	mov	r2,zero
  2825ac:	003fd606 	br	282508 <__swsetup_r+0x5c>
  2825b0:	81400c17 	ldw	r5,48(r16)
  2825b4:	28000626 	beq	r5,zero,2825d0 <__swsetup_r+0x124>
  2825b8:	80801004 	addi	r2,r16,64
  2825bc:	28800326 	beq	r5,r2,2825cc <__swsetup_r+0x120>
  2825c0:	8809883a 	mov	r4,r17
  2825c4:	0282b240 	call	282b24 <_free_r>
  2825c8:	8100030b 	ldhu	r4,12(r16)
  2825cc:	80000c15 	stw	zero,48(r16)
  2825d0:	80c00417 	ldw	r3,16(r16)
  2825d4:	00bff6c4 	movi	r2,-37
  2825d8:	1108703a 	and	r4,r2,r4
  2825dc:	80000115 	stw	zero,4(r16)
  2825e0:	80c00015 	stw	r3,0(r16)
  2825e4:	003fd506 	br	28253c <__swsetup_r+0x90>
  2825e8:	00800244 	movi	r2,9
  2825ec:	88800015 	stw	r2,0(r17)
  2825f0:	20801014 	ori	r2,r4,64
  2825f4:	8080030d 	sth	r2,12(r16)
  2825f8:	00bfffc4 	movi	r2,-1
  2825fc:	003fc506 	br	282514 <__swsetup_r+0x68>

00282600 <_close_r>:
  282600:	defffd04 	addi	sp,sp,-12
  282604:	dc000015 	stw	r16,0(sp)
  282608:	04000a74 	movhi	r16,41
  28260c:	dc400115 	stw	r17,4(sp)
  282610:	8427e904 	addi	r16,r16,-24668
  282614:	2023883a 	mov	r17,r4
  282618:	2809883a 	mov	r4,r5
  28261c:	dfc00215 	stw	ra,8(sp)
  282620:	80000015 	stw	zero,0(r16)
  282624:	028319c0 	call	28319c <close>
  282628:	00ffffc4 	movi	r3,-1
  28262c:	10c00526 	beq	r2,r3,282644 <_close_r+0x44>
  282630:	dfc00217 	ldw	ra,8(sp)
  282634:	dc400117 	ldw	r17,4(sp)
  282638:	dc000017 	ldw	r16,0(sp)
  28263c:	dec00304 	addi	sp,sp,12
  282640:	f800283a 	ret
  282644:	80c00017 	ldw	r3,0(r16)
  282648:	183ff926 	beq	r3,zero,282630 <_close_r+0x30>
  28264c:	88c00015 	stw	r3,0(r17)
  282650:	003ff706 	br	282630 <_close_r+0x30>

00282654 <_fclose_r>:
  282654:	28003926 	beq	r5,zero,28273c <_fclose_r+0xe8>
  282658:	defffc04 	addi	sp,sp,-16
  28265c:	dc400115 	stw	r17,4(sp)
  282660:	dc000015 	stw	r16,0(sp)
  282664:	dfc00315 	stw	ra,12(sp)
  282668:	dc800215 	stw	r18,8(sp)
  28266c:	2023883a 	mov	r17,r4
  282670:	2821883a 	mov	r16,r5
  282674:	20000226 	beq	r4,zero,282680 <_fclose_r+0x2c>
  282678:	20800e17 	ldw	r2,56(r4)
  28267c:	10002726 	beq	r2,zero,28271c <_fclose_r+0xc8>
  282680:	8080030f 	ldh	r2,12(r16)
  282684:	1000071e 	bne	r2,zero,2826a4 <_fclose_r+0x50>
  282688:	0005883a 	mov	r2,zero
  28268c:	dfc00317 	ldw	ra,12(sp)
  282690:	dc800217 	ldw	r18,8(sp)
  282694:	dc400117 	ldw	r17,4(sp)
  282698:	dc000017 	ldw	r16,0(sp)
  28269c:	dec00404 	addi	sp,sp,16
  2826a0:	f800283a 	ret
  2826a4:	800b883a 	mov	r5,r16
  2826a8:	8809883a 	mov	r4,r17
  2826ac:	02827580 	call	282758 <__sflush_r>
  2826b0:	1025883a 	mov	r18,r2
  2826b4:	80800b17 	ldw	r2,44(r16)
  2826b8:	10000426 	beq	r2,zero,2826cc <_fclose_r+0x78>
  2826bc:	81400717 	ldw	r5,28(r16)
  2826c0:	8809883a 	mov	r4,r17
  2826c4:	103ee83a 	callr	r2
  2826c8:	10001616 	blt	r2,zero,282724 <_fclose_r+0xd0>
  2826cc:	8080030b 	ldhu	r2,12(r16)
  2826d0:	1080200c 	andi	r2,r2,128
  2826d4:	1000151e 	bne	r2,zero,28272c <_fclose_r+0xd8>
  2826d8:	81400c17 	ldw	r5,48(r16)
  2826dc:	28000526 	beq	r5,zero,2826f4 <_fclose_r+0xa0>
  2826e0:	80801004 	addi	r2,r16,64
  2826e4:	28800226 	beq	r5,r2,2826f0 <_fclose_r+0x9c>
  2826e8:	8809883a 	mov	r4,r17
  2826ec:	0282b240 	call	282b24 <_free_r>
  2826f0:	80000c15 	stw	zero,48(r16)
  2826f4:	81401117 	ldw	r5,68(r16)
  2826f8:	28000326 	beq	r5,zero,282708 <_fclose_r+0xb4>
  2826fc:	8809883a 	mov	r4,r17
  282700:	0282b240 	call	282b24 <_free_r>
  282704:	80001115 	stw	zero,68(r16)
  282708:	0280a180 	call	280a18 <__sfp_lock_acquire>
  28270c:	8000030d 	sth	zero,12(r16)
  282710:	0280a1c0 	call	280a1c <__sfp_lock_release>
  282714:	9005883a 	mov	r2,r18
  282718:	003fdc06 	br	28268c <_fclose_r+0x38>
  28271c:	0280a080 	call	280a08 <__sinit>
  282720:	003fd706 	br	282680 <_fclose_r+0x2c>
  282724:	04bfffc4 	movi	r18,-1
  282728:	003fe806 	br	2826cc <_fclose_r+0x78>
  28272c:	81400417 	ldw	r5,16(r16)
  282730:	8809883a 	mov	r4,r17
  282734:	0282b240 	call	282b24 <_free_r>
  282738:	003fe706 	br	2826d8 <_fclose_r+0x84>
  28273c:	0005883a 	mov	r2,zero
  282740:	f800283a 	ret

00282744 <fclose>:
  282744:	00800a74 	movhi	r2,41
  282748:	10a11d04 	addi	r2,r2,-31628
  28274c:	200b883a 	mov	r5,r4
  282750:	11000017 	ldw	r4,0(r2)
  282754:	02826541 	jmpi	282654 <_fclose_r>

00282758 <__sflush_r>:
  282758:	2880030b 	ldhu	r2,12(r5)
  28275c:	defffb04 	addi	sp,sp,-20
  282760:	dcc00315 	stw	r19,12(sp)
  282764:	dc400115 	stw	r17,4(sp)
  282768:	dfc00415 	stw	ra,16(sp)
  28276c:	dc800215 	stw	r18,8(sp)
  282770:	dc000015 	stw	r16,0(sp)
  282774:	10c0020c 	andi	r3,r2,8
  282778:	2823883a 	mov	r17,r5
  28277c:	2027883a 	mov	r19,r4
  282780:	1800311e 	bne	r3,zero,282848 <__sflush_r+0xf0>
  282784:	28c00117 	ldw	r3,4(r5)
  282788:	10820014 	ori	r2,r2,2048
  28278c:	2880030d 	sth	r2,12(r5)
  282790:	00c04b0e 	bge	zero,r3,2828c0 <__sflush_r+0x168>
  282794:	8a000a17 	ldw	r8,40(r17)
  282798:	40002326 	beq	r8,zero,282828 <__sflush_r+0xd0>
  28279c:	9c000017 	ldw	r16,0(r19)
  2827a0:	10c4000c 	andi	r3,r2,4096
  2827a4:	98000015 	stw	zero,0(r19)
  2827a8:	18004826 	beq	r3,zero,2828cc <__sflush_r+0x174>
  2827ac:	89801417 	ldw	r6,80(r17)
  2827b0:	10c0010c 	andi	r3,r2,4
  2827b4:	18000626 	beq	r3,zero,2827d0 <__sflush_r+0x78>
  2827b8:	88c00117 	ldw	r3,4(r17)
  2827bc:	88800c17 	ldw	r2,48(r17)
  2827c0:	30cdc83a 	sub	r6,r6,r3
  2827c4:	10000226 	beq	r2,zero,2827d0 <__sflush_r+0x78>
  2827c8:	88800f17 	ldw	r2,60(r17)
  2827cc:	308dc83a 	sub	r6,r6,r2
  2827d0:	89400717 	ldw	r5,28(r17)
  2827d4:	000f883a 	mov	r7,zero
  2827d8:	9809883a 	mov	r4,r19
  2827dc:	403ee83a 	callr	r8
  2827e0:	00ffffc4 	movi	r3,-1
  2827e4:	10c04426 	beq	r2,r3,2828f8 <__sflush_r+0x1a0>
  2827e8:	88c0030b 	ldhu	r3,12(r17)
  2827ec:	89000417 	ldw	r4,16(r17)
  2827f0:	88000115 	stw	zero,4(r17)
  2827f4:	197dffcc 	andi	r5,r3,63487
  2827f8:	8940030d 	sth	r5,12(r17)
  2827fc:	89000015 	stw	r4,0(r17)
  282800:	18c4000c 	andi	r3,r3,4096
  282804:	18002c1e 	bne	r3,zero,2828b8 <__sflush_r+0x160>
  282808:	89400c17 	ldw	r5,48(r17)
  28280c:	9c000015 	stw	r16,0(r19)
  282810:	28000526 	beq	r5,zero,282828 <__sflush_r+0xd0>
  282814:	88801004 	addi	r2,r17,64
  282818:	28800226 	beq	r5,r2,282824 <__sflush_r+0xcc>
  28281c:	9809883a 	mov	r4,r19
  282820:	0282b240 	call	282b24 <_free_r>
  282824:	88000c15 	stw	zero,48(r17)
  282828:	0005883a 	mov	r2,zero
  28282c:	dfc00417 	ldw	ra,16(sp)
  282830:	dcc00317 	ldw	r19,12(sp)
  282834:	dc800217 	ldw	r18,8(sp)
  282838:	dc400117 	ldw	r17,4(sp)
  28283c:	dc000017 	ldw	r16,0(sp)
  282840:	dec00504 	addi	sp,sp,20
  282844:	f800283a 	ret
  282848:	2c800417 	ldw	r18,16(r5)
  28284c:	903ff626 	beq	r18,zero,282828 <__sflush_r+0xd0>
  282850:	2c000017 	ldw	r16,0(r5)
  282854:	108000cc 	andi	r2,r2,3
  282858:	2c800015 	stw	r18,0(r5)
  28285c:	84a1c83a 	sub	r16,r16,r18
  282860:	1000131e 	bne	r2,zero,2828b0 <__sflush_r+0x158>
  282864:	28800517 	ldw	r2,20(r5)
  282868:	88800215 	stw	r2,8(r17)
  28286c:	04000316 	blt	zero,r16,28287c <__sflush_r+0x124>
  282870:	003fed06 	br	282828 <__sflush_r+0xd0>
  282874:	90a5883a 	add	r18,r18,r2
  282878:	043feb0e 	bge	zero,r16,282828 <__sflush_r+0xd0>
  28287c:	88800917 	ldw	r2,36(r17)
  282880:	89400717 	ldw	r5,28(r17)
  282884:	800f883a 	mov	r7,r16
  282888:	900d883a 	mov	r6,r18
  28288c:	9809883a 	mov	r4,r19
  282890:	103ee83a 	callr	r2
  282894:	80a1c83a 	sub	r16,r16,r2
  282898:	00bff616 	blt	zero,r2,282874 <__sflush_r+0x11c>
  28289c:	88c0030b 	ldhu	r3,12(r17)
  2828a0:	00bfffc4 	movi	r2,-1
  2828a4:	18c01014 	ori	r3,r3,64
  2828a8:	88c0030d 	sth	r3,12(r17)
  2828ac:	003fdf06 	br	28282c <__sflush_r+0xd4>
  2828b0:	0005883a 	mov	r2,zero
  2828b4:	003fec06 	br	282868 <__sflush_r+0x110>
  2828b8:	88801415 	stw	r2,80(r17)
  2828bc:	003fd206 	br	282808 <__sflush_r+0xb0>
  2828c0:	28c00f17 	ldw	r3,60(r5)
  2828c4:	00ffb316 	blt	zero,r3,282794 <__sflush_r+0x3c>
  2828c8:	003fd706 	br	282828 <__sflush_r+0xd0>
  2828cc:	89400717 	ldw	r5,28(r17)
  2828d0:	000d883a 	mov	r6,zero
  2828d4:	01c00044 	movi	r7,1
  2828d8:	9809883a 	mov	r4,r19
  2828dc:	403ee83a 	callr	r8
  2828e0:	100d883a 	mov	r6,r2
  2828e4:	00bfffc4 	movi	r2,-1
  2828e8:	30801426 	beq	r6,r2,28293c <__sflush_r+0x1e4>
  2828ec:	8880030b 	ldhu	r2,12(r17)
  2828f0:	8a000a17 	ldw	r8,40(r17)
  2828f4:	003fae06 	br	2827b0 <__sflush_r+0x58>
  2828f8:	98c00017 	ldw	r3,0(r19)
  2828fc:	183fba26 	beq	r3,zero,2827e8 <__sflush_r+0x90>
  282900:	01000744 	movi	r4,29
  282904:	19000626 	beq	r3,r4,282920 <__sflush_r+0x1c8>
  282908:	01000584 	movi	r4,22
  28290c:	19000426 	beq	r3,r4,282920 <__sflush_r+0x1c8>
  282910:	88c0030b 	ldhu	r3,12(r17)
  282914:	18c01014 	ori	r3,r3,64
  282918:	88c0030d 	sth	r3,12(r17)
  28291c:	003fc306 	br	28282c <__sflush_r+0xd4>
  282920:	8880030b 	ldhu	r2,12(r17)
  282924:	88c00417 	ldw	r3,16(r17)
  282928:	88000115 	stw	zero,4(r17)
  28292c:	10bdffcc 	andi	r2,r2,63487
  282930:	8880030d 	sth	r2,12(r17)
  282934:	88c00015 	stw	r3,0(r17)
  282938:	003fb306 	br	282808 <__sflush_r+0xb0>
  28293c:	98800017 	ldw	r2,0(r19)
  282940:	103fea26 	beq	r2,zero,2828ec <__sflush_r+0x194>
  282944:	00c00744 	movi	r3,29
  282948:	10c00226 	beq	r2,r3,282954 <__sflush_r+0x1fc>
  28294c:	00c00584 	movi	r3,22
  282950:	10c0031e 	bne	r2,r3,282960 <__sflush_r+0x208>
  282954:	9c000015 	stw	r16,0(r19)
  282958:	0005883a 	mov	r2,zero
  28295c:	003fb306 	br	28282c <__sflush_r+0xd4>
  282960:	88c0030b 	ldhu	r3,12(r17)
  282964:	3005883a 	mov	r2,r6
  282968:	18c01014 	ori	r3,r3,64
  28296c:	88c0030d 	sth	r3,12(r17)
  282970:	003fae06 	br	28282c <__sflush_r+0xd4>

00282974 <_fflush_r>:
  282974:	defffd04 	addi	sp,sp,-12
  282978:	dc000115 	stw	r16,4(sp)
  28297c:	dfc00215 	stw	ra,8(sp)
  282980:	2021883a 	mov	r16,r4
  282984:	20000226 	beq	r4,zero,282990 <_fflush_r+0x1c>
  282988:	20800e17 	ldw	r2,56(r4)
  28298c:	10000c26 	beq	r2,zero,2829c0 <_fflush_r+0x4c>
  282990:	2880030f 	ldh	r2,12(r5)
  282994:	1000051e 	bne	r2,zero,2829ac <_fflush_r+0x38>
  282998:	0005883a 	mov	r2,zero
  28299c:	dfc00217 	ldw	ra,8(sp)
  2829a0:	dc000117 	ldw	r16,4(sp)
  2829a4:	dec00304 	addi	sp,sp,12
  2829a8:	f800283a 	ret
  2829ac:	8009883a 	mov	r4,r16
  2829b0:	dfc00217 	ldw	ra,8(sp)
  2829b4:	dc000117 	ldw	r16,4(sp)
  2829b8:	dec00304 	addi	sp,sp,12
  2829bc:	02827581 	jmpi	282758 <__sflush_r>
  2829c0:	d9400015 	stw	r5,0(sp)
  2829c4:	0280a080 	call	280a08 <__sinit>
  2829c8:	d9400017 	ldw	r5,0(sp)
  2829cc:	003ff006 	br	282990 <_fflush_r+0x1c>

002829d0 <fflush>:
  2829d0:	20000526 	beq	r4,zero,2829e8 <fflush+0x18>
  2829d4:	00800a74 	movhi	r2,41
  2829d8:	10a11d04 	addi	r2,r2,-31628
  2829dc:	200b883a 	mov	r5,r4
  2829e0:	11000017 	ldw	r4,0(r2)
  2829e4:	02829741 	jmpi	282974 <_fflush_r>
  2829e8:	00800a74 	movhi	r2,41
  2829ec:	10a11c04 	addi	r2,r2,-31632
  2829f0:	11000017 	ldw	r4,0(r2)
  2829f4:	01400a34 	movhi	r5,40
  2829f8:	294a5d04 	addi	r5,r5,10612
  2829fc:	0280fd81 	jmpi	280fd8 <_fwalk_reent>

00282a00 <_malloc_trim_r>:
  282a00:	defffb04 	addi	sp,sp,-20
  282a04:	dcc00315 	stw	r19,12(sp)
  282a08:	04c00a34 	movhi	r19,40
  282a0c:	dc800215 	stw	r18,8(sp)
  282a10:	dc400115 	stw	r17,4(sp)
  282a14:	dc000015 	stw	r16,0(sp)
  282a18:	dfc00415 	stw	ra,16(sp)
  282a1c:	2821883a 	mov	r16,r5
  282a20:	9cdb7704 	addi	r19,r19,28124
  282a24:	2025883a 	mov	r18,r4
  282a28:	02836dc0 	call	2836dc <__malloc_lock>
  282a2c:	98800217 	ldw	r2,8(r19)
  282a30:	14400117 	ldw	r17,4(r2)
  282a34:	00bfff04 	movi	r2,-4
  282a38:	88a2703a 	and	r17,r17,r2
  282a3c:	8c21c83a 	sub	r16,r17,r16
  282a40:	8403fbc4 	addi	r16,r16,4079
  282a44:	8020d33a 	srli	r16,r16,12
  282a48:	0083ffc4 	movi	r2,4095
  282a4c:	843fffc4 	addi	r16,r16,-1
  282a50:	8020933a 	slli	r16,r16,12
  282a54:	1400060e 	bge	r2,r16,282a70 <_malloc_trim_r+0x70>
  282a58:	000b883a 	mov	r5,zero
  282a5c:	9009883a 	mov	r4,r18
  282a60:	02822bc0 	call	2822bc <_sbrk_r>
  282a64:	98c00217 	ldw	r3,8(r19)
  282a68:	1c47883a 	add	r3,r3,r17
  282a6c:	10c00a26 	beq	r2,r3,282a98 <_malloc_trim_r+0x98>
  282a70:	9009883a 	mov	r4,r18
  282a74:	02837000 	call	283700 <__malloc_unlock>
  282a78:	0005883a 	mov	r2,zero
  282a7c:	dfc00417 	ldw	ra,16(sp)
  282a80:	dcc00317 	ldw	r19,12(sp)
  282a84:	dc800217 	ldw	r18,8(sp)
  282a88:	dc400117 	ldw	r17,4(sp)
  282a8c:	dc000017 	ldw	r16,0(sp)
  282a90:	dec00504 	addi	sp,sp,20
  282a94:	f800283a 	ret
  282a98:	040bc83a 	sub	r5,zero,r16
  282a9c:	9009883a 	mov	r4,r18
  282aa0:	02822bc0 	call	2822bc <_sbrk_r>
  282aa4:	00ffffc4 	movi	r3,-1
  282aa8:	10c00d26 	beq	r2,r3,282ae0 <_malloc_trim_r+0xe0>
  282aac:	00c00a74 	movhi	r3,41
  282ab0:	18e7f104 	addi	r3,r3,-24636
  282ab4:	18800017 	ldw	r2,0(r3)
  282ab8:	99000217 	ldw	r4,8(r19)
  282abc:	8c23c83a 	sub	r17,r17,r16
  282ac0:	8c400054 	ori	r17,r17,1
  282ac4:	1421c83a 	sub	r16,r2,r16
  282ac8:	24400115 	stw	r17,4(r4)
  282acc:	9009883a 	mov	r4,r18
  282ad0:	1c000015 	stw	r16,0(r3)
  282ad4:	02837000 	call	283700 <__malloc_unlock>
  282ad8:	00800044 	movi	r2,1
  282adc:	003fe706 	br	282a7c <_malloc_trim_r+0x7c>
  282ae0:	000b883a 	mov	r5,zero
  282ae4:	9009883a 	mov	r4,r18
  282ae8:	02822bc0 	call	2822bc <_sbrk_r>
  282aec:	99000217 	ldw	r4,8(r19)
  282af0:	014003c4 	movi	r5,15
  282af4:	1107c83a 	sub	r3,r2,r4
  282af8:	28ffdd0e 	bge	r5,r3,282a70 <_malloc_trim_r+0x70>
  282afc:	01400a74 	movhi	r5,41
  282b00:	29611e04 	addi	r5,r5,-31624
  282b04:	29400017 	ldw	r5,0(r5)
  282b08:	18c00054 	ori	r3,r3,1
  282b0c:	20c00115 	stw	r3,4(r4)
  282b10:	00c00a74 	movhi	r3,41
  282b14:	1145c83a 	sub	r2,r2,r5
  282b18:	18e7f104 	addi	r3,r3,-24636
  282b1c:	18800015 	stw	r2,0(r3)
  282b20:	003fd306 	br	282a70 <_malloc_trim_r+0x70>

00282b24 <_free_r>:
  282b24:	28004126 	beq	r5,zero,282c2c <_free_r+0x108>
  282b28:	defffd04 	addi	sp,sp,-12
  282b2c:	dc400115 	stw	r17,4(sp)
  282b30:	dc000015 	stw	r16,0(sp)
  282b34:	2023883a 	mov	r17,r4
  282b38:	2821883a 	mov	r16,r5
  282b3c:	dfc00215 	stw	ra,8(sp)
  282b40:	02836dc0 	call	2836dc <__malloc_lock>
  282b44:	81ffff17 	ldw	r7,-4(r16)
  282b48:	00bfff84 	movi	r2,-2
  282b4c:	01000a34 	movhi	r4,40
  282b50:	81bffe04 	addi	r6,r16,-8
  282b54:	3884703a 	and	r2,r7,r2
  282b58:	211b7704 	addi	r4,r4,28124
  282b5c:	308b883a 	add	r5,r6,r2
  282b60:	2a400117 	ldw	r9,4(r5)
  282b64:	22000217 	ldw	r8,8(r4)
  282b68:	00ffff04 	movi	r3,-4
  282b6c:	48c6703a 	and	r3,r9,r3
  282b70:	2a005726 	beq	r5,r8,282cd0 <_free_r+0x1ac>
  282b74:	28c00115 	stw	r3,4(r5)
  282b78:	39c0004c 	andi	r7,r7,1
  282b7c:	3800091e 	bne	r7,zero,282ba4 <_free_r+0x80>
  282b80:	823ffe17 	ldw	r8,-8(r16)
  282b84:	22400204 	addi	r9,r4,8
  282b88:	320dc83a 	sub	r6,r6,r8
  282b8c:	31c00217 	ldw	r7,8(r6)
  282b90:	1205883a 	add	r2,r2,r8
  282b94:	3a406526 	beq	r7,r9,282d2c <_free_r+0x208>
  282b98:	32000317 	ldw	r8,12(r6)
  282b9c:	3a000315 	stw	r8,12(r7)
  282ba0:	41c00215 	stw	r7,8(r8)
  282ba4:	28cf883a 	add	r7,r5,r3
  282ba8:	39c00117 	ldw	r7,4(r7)
  282bac:	39c0004c 	andi	r7,r7,1
  282bb0:	38003a26 	beq	r7,zero,282c9c <_free_r+0x178>
  282bb4:	10c00054 	ori	r3,r2,1
  282bb8:	30c00115 	stw	r3,4(r6)
  282bbc:	3087883a 	add	r3,r6,r2
  282bc0:	18800015 	stw	r2,0(r3)
  282bc4:	00c07fc4 	movi	r3,511
  282bc8:	18801936 	bltu	r3,r2,282c30 <_free_r+0x10c>
  282bcc:	1004d0fa 	srli	r2,r2,3
  282bd0:	01c00044 	movi	r7,1
  282bd4:	21400117 	ldw	r5,4(r4)
  282bd8:	10c00044 	addi	r3,r2,1
  282bdc:	18c7883a 	add	r3,r3,r3
  282be0:	1005d0ba 	srai	r2,r2,2
  282be4:	18c7883a 	add	r3,r3,r3
  282be8:	18c7883a 	add	r3,r3,r3
  282bec:	1907883a 	add	r3,r3,r4
  282bf0:	3884983a 	sll	r2,r7,r2
  282bf4:	19c00017 	ldw	r7,0(r3)
  282bf8:	1a3ffe04 	addi	r8,r3,-8
  282bfc:	1144b03a 	or	r2,r2,r5
  282c00:	32000315 	stw	r8,12(r6)
  282c04:	31c00215 	stw	r7,8(r6)
  282c08:	20800115 	stw	r2,4(r4)
  282c0c:	19800015 	stw	r6,0(r3)
  282c10:	39800315 	stw	r6,12(r7)
  282c14:	8809883a 	mov	r4,r17
  282c18:	dfc00217 	ldw	ra,8(sp)
  282c1c:	dc400117 	ldw	r17,4(sp)
  282c20:	dc000017 	ldw	r16,0(sp)
  282c24:	dec00304 	addi	sp,sp,12
  282c28:	02837001 	jmpi	283700 <__malloc_unlock>
  282c2c:	f800283a 	ret
  282c30:	100ad27a 	srli	r5,r2,9
  282c34:	00c00104 	movi	r3,4
  282c38:	19404a36 	bltu	r3,r5,282d64 <_free_r+0x240>
  282c3c:	100ad1ba 	srli	r5,r2,6
  282c40:	28c00e44 	addi	r3,r5,57
  282c44:	18c7883a 	add	r3,r3,r3
  282c48:	29400e04 	addi	r5,r5,56
  282c4c:	18c7883a 	add	r3,r3,r3
  282c50:	18c7883a 	add	r3,r3,r3
  282c54:	1909883a 	add	r4,r3,r4
  282c58:	20c00017 	ldw	r3,0(r4)
  282c5c:	01c00a34 	movhi	r7,40
  282c60:	213ffe04 	addi	r4,r4,-8
  282c64:	39db7704 	addi	r7,r7,28124
  282c68:	20c04426 	beq	r4,r3,282d7c <_free_r+0x258>
  282c6c:	01ffff04 	movi	r7,-4
  282c70:	19400117 	ldw	r5,4(r3)
  282c74:	29ca703a 	and	r5,r5,r7
  282c78:	1140022e 	bgeu	r2,r5,282c84 <_free_r+0x160>
  282c7c:	18c00217 	ldw	r3,8(r3)
  282c80:	20fffb1e 	bne	r4,r3,282c70 <_free_r+0x14c>
  282c84:	19000317 	ldw	r4,12(r3)
  282c88:	31000315 	stw	r4,12(r6)
  282c8c:	30c00215 	stw	r3,8(r6)
  282c90:	21800215 	stw	r6,8(r4)
  282c94:	19800315 	stw	r6,12(r3)
  282c98:	003fde06 	br	282c14 <_free_r+0xf0>
  282c9c:	29c00217 	ldw	r7,8(r5)
  282ca0:	10c5883a 	add	r2,r2,r3
  282ca4:	00c00a34 	movhi	r3,40
  282ca8:	18db7904 	addi	r3,r3,28132
  282cac:	38c03b26 	beq	r7,r3,282d9c <_free_r+0x278>
  282cb0:	2a000317 	ldw	r8,12(r5)
  282cb4:	11400054 	ori	r5,r2,1
  282cb8:	3087883a 	add	r3,r6,r2
  282cbc:	3a000315 	stw	r8,12(r7)
  282cc0:	41c00215 	stw	r7,8(r8)
  282cc4:	31400115 	stw	r5,4(r6)
  282cc8:	18800015 	stw	r2,0(r3)
  282ccc:	003fbd06 	br	282bc4 <_free_r+0xa0>
  282cd0:	39c0004c 	andi	r7,r7,1
  282cd4:	10c5883a 	add	r2,r2,r3
  282cd8:	3800071e 	bne	r7,zero,282cf8 <_free_r+0x1d4>
  282cdc:	81fffe17 	ldw	r7,-8(r16)
  282ce0:	31cdc83a 	sub	r6,r6,r7
  282ce4:	30c00317 	ldw	r3,12(r6)
  282ce8:	31400217 	ldw	r5,8(r6)
  282cec:	11c5883a 	add	r2,r2,r7
  282cf0:	28c00315 	stw	r3,12(r5)
  282cf4:	19400215 	stw	r5,8(r3)
  282cf8:	10c00054 	ori	r3,r2,1
  282cfc:	30c00115 	stw	r3,4(r6)
  282d00:	00c00a74 	movhi	r3,41
  282d04:	18e11f04 	addi	r3,r3,-31620
  282d08:	18c00017 	ldw	r3,0(r3)
  282d0c:	21800215 	stw	r6,8(r4)
  282d10:	10ffc036 	bltu	r2,r3,282c14 <_free_r+0xf0>
  282d14:	00800a74 	movhi	r2,41
  282d18:	10a7e804 	addi	r2,r2,-24672
  282d1c:	11400017 	ldw	r5,0(r2)
  282d20:	8809883a 	mov	r4,r17
  282d24:	0282a000 	call	282a00 <_malloc_trim_r>
  282d28:	003fba06 	br	282c14 <_free_r+0xf0>
  282d2c:	28c9883a 	add	r4,r5,r3
  282d30:	21000117 	ldw	r4,4(r4)
  282d34:	2100004c 	andi	r4,r4,1
  282d38:	2000391e 	bne	r4,zero,282e20 <_free_r+0x2fc>
  282d3c:	29c00217 	ldw	r7,8(r5)
  282d40:	29000317 	ldw	r4,12(r5)
  282d44:	1885883a 	add	r2,r3,r2
  282d48:	10c00054 	ori	r3,r2,1
  282d4c:	39000315 	stw	r4,12(r7)
  282d50:	21c00215 	stw	r7,8(r4)
  282d54:	30c00115 	stw	r3,4(r6)
  282d58:	308d883a 	add	r6,r6,r2
  282d5c:	30800015 	stw	r2,0(r6)
  282d60:	003fac06 	br	282c14 <_free_r+0xf0>
  282d64:	00c00504 	movi	r3,20
  282d68:	19401536 	bltu	r3,r5,282dc0 <_free_r+0x29c>
  282d6c:	28c01704 	addi	r3,r5,92
  282d70:	18c7883a 	add	r3,r3,r3
  282d74:	294016c4 	addi	r5,r5,91
  282d78:	003fb406 	br	282c4c <_free_r+0x128>
  282d7c:	280bd0ba 	srai	r5,r5,2
  282d80:	00c00044 	movi	r3,1
  282d84:	38800117 	ldw	r2,4(r7)
  282d88:	194a983a 	sll	r5,r3,r5
  282d8c:	2007883a 	mov	r3,r4
  282d90:	2884b03a 	or	r2,r5,r2
  282d94:	38800115 	stw	r2,4(r7)
  282d98:	003fbb06 	br	282c88 <_free_r+0x164>
  282d9c:	21800515 	stw	r6,20(r4)
  282da0:	21800415 	stw	r6,16(r4)
  282da4:	10c00054 	ori	r3,r2,1
  282da8:	31c00315 	stw	r7,12(r6)
  282dac:	31c00215 	stw	r7,8(r6)
  282db0:	30c00115 	stw	r3,4(r6)
  282db4:	308d883a 	add	r6,r6,r2
  282db8:	30800015 	stw	r2,0(r6)
  282dbc:	003f9506 	br	282c14 <_free_r+0xf0>
  282dc0:	00c01504 	movi	r3,84
  282dc4:	19400536 	bltu	r3,r5,282ddc <_free_r+0x2b8>
  282dc8:	100ad33a 	srli	r5,r2,12
  282dcc:	28c01bc4 	addi	r3,r5,111
  282dd0:	18c7883a 	add	r3,r3,r3
  282dd4:	29401b84 	addi	r5,r5,110
  282dd8:	003f9c06 	br	282c4c <_free_r+0x128>
  282ddc:	00c05504 	movi	r3,340
  282de0:	19400536 	bltu	r3,r5,282df8 <_free_r+0x2d4>
  282de4:	100ad3fa 	srli	r5,r2,15
  282de8:	28c01e04 	addi	r3,r5,120
  282dec:	18c7883a 	add	r3,r3,r3
  282df0:	29401dc4 	addi	r5,r5,119
  282df4:	003f9506 	br	282c4c <_free_r+0x128>
  282df8:	00c15504 	movi	r3,1364
  282dfc:	19400536 	bltu	r3,r5,282e14 <_free_r+0x2f0>
  282e00:	100ad4ba 	srli	r5,r2,18
  282e04:	28c01f44 	addi	r3,r5,125
  282e08:	18c7883a 	add	r3,r3,r3
  282e0c:	29401f04 	addi	r5,r5,124
  282e10:	003f8e06 	br	282c4c <_free_r+0x128>
  282e14:	00c03f84 	movi	r3,254
  282e18:	01401f84 	movi	r5,126
  282e1c:	003f8b06 	br	282c4c <_free_r+0x128>
  282e20:	10c00054 	ori	r3,r2,1
  282e24:	30c00115 	stw	r3,4(r6)
  282e28:	308d883a 	add	r6,r6,r2
  282e2c:	30800015 	stw	r2,0(r6)
  282e30:	003f7806 	br	282c14 <_free_r+0xf0>

00282e34 <_lseek_r>:
  282e34:	defffd04 	addi	sp,sp,-12
  282e38:	2805883a 	mov	r2,r5
  282e3c:	dc000015 	stw	r16,0(sp)
  282e40:	04000a74 	movhi	r16,41
  282e44:	dc400115 	stw	r17,4(sp)
  282e48:	300b883a 	mov	r5,r6
  282e4c:	8427e904 	addi	r16,r16,-24668
  282e50:	2023883a 	mov	r17,r4
  282e54:	380d883a 	mov	r6,r7
  282e58:	1009883a 	mov	r4,r2
  282e5c:	dfc00215 	stw	ra,8(sp)
  282e60:	80000015 	stw	zero,0(r16)
  282e64:	028358c0 	call	28358c <lseek>
  282e68:	00ffffc4 	movi	r3,-1
  282e6c:	10c00526 	beq	r2,r3,282e84 <_lseek_r+0x50>
  282e70:	dfc00217 	ldw	ra,8(sp)
  282e74:	dc400117 	ldw	r17,4(sp)
  282e78:	dc000017 	ldw	r16,0(sp)
  282e7c:	dec00304 	addi	sp,sp,12
  282e80:	f800283a 	ret
  282e84:	80c00017 	ldw	r3,0(r16)
  282e88:	183ff926 	beq	r3,zero,282e70 <_lseek_r+0x3c>
  282e8c:	88c00015 	stw	r3,0(r17)
  282e90:	003ff706 	br	282e70 <_lseek_r+0x3c>

00282e94 <__smakebuf_r>:
  282e94:	2880030b 	ldhu	r2,12(r5)
  282e98:	10c0008c 	andi	r3,r2,2
  282e9c:	1800411e 	bne	r3,zero,282fa4 <__smakebuf_r+0x110>
  282ea0:	deffec04 	addi	sp,sp,-80
  282ea4:	dc000f15 	stw	r16,60(sp)
  282ea8:	2821883a 	mov	r16,r5
  282eac:	2940038f 	ldh	r5,14(r5)
  282eb0:	dc401015 	stw	r17,64(sp)
  282eb4:	dfc01315 	stw	ra,76(sp)
  282eb8:	dcc01215 	stw	r19,72(sp)
  282ebc:	dc801115 	stw	r18,68(sp)
  282ec0:	2023883a 	mov	r17,r4
  282ec4:	28001c16 	blt	r5,zero,282f38 <__smakebuf_r+0xa4>
  282ec8:	d80d883a 	mov	r6,sp
  282ecc:	02830b00 	call	2830b0 <_fstat_r>
  282ed0:	10001816 	blt	r2,zero,282f34 <__smakebuf_r+0xa0>
  282ed4:	d8800117 	ldw	r2,4(sp)
  282ed8:	00e00014 	movui	r3,32768
  282edc:	10bc000c 	andi	r2,r2,61440
  282ee0:	14c80020 	cmpeqi	r19,r2,8192
  282ee4:	10c03726 	beq	r2,r3,282fc4 <__smakebuf_r+0x130>
  282ee8:	80c0030b 	ldhu	r3,12(r16)
  282eec:	18c20014 	ori	r3,r3,2048
  282ef0:	80c0030d 	sth	r3,12(r16)
  282ef4:	00c80004 	movi	r3,8192
  282ef8:	10c0521e 	bne	r2,r3,283044 <__smakebuf_r+0x1b0>
  282efc:	8140038f 	ldh	r5,14(r16)
  282f00:	8809883a 	mov	r4,r17
  282f04:	028310c0 	call	28310c <_isatty_r>
  282f08:	10004c26 	beq	r2,zero,28303c <__smakebuf_r+0x1a8>
  282f0c:	8080030b 	ldhu	r2,12(r16)
  282f10:	80c010c4 	addi	r3,r16,67
  282f14:	80c00015 	stw	r3,0(r16)
  282f18:	10800054 	ori	r2,r2,1
  282f1c:	8080030d 	sth	r2,12(r16)
  282f20:	00800044 	movi	r2,1
  282f24:	80c00415 	stw	r3,16(r16)
  282f28:	80800515 	stw	r2,20(r16)
  282f2c:	04810004 	movi	r18,1024
  282f30:	00000706 	br	282f50 <__smakebuf_r+0xbc>
  282f34:	8080030b 	ldhu	r2,12(r16)
  282f38:	10c0200c 	andi	r3,r2,128
  282f3c:	18001f1e 	bne	r3,zero,282fbc <__smakebuf_r+0x128>
  282f40:	04810004 	movi	r18,1024
  282f44:	10820014 	ori	r2,r2,2048
  282f48:	8080030d 	sth	r2,12(r16)
  282f4c:	0027883a 	mov	r19,zero
  282f50:	900b883a 	mov	r5,r18
  282f54:	8809883a 	mov	r4,r17
  282f58:	028109c0 	call	28109c <_malloc_r>
  282f5c:	10002c26 	beq	r2,zero,283010 <__smakebuf_r+0x17c>
  282f60:	80c0030b 	ldhu	r3,12(r16)
  282f64:	01000a34 	movhi	r4,40
  282f68:	2101b004 	addi	r4,r4,1728
  282f6c:	89000f15 	stw	r4,60(r17)
  282f70:	18c02014 	ori	r3,r3,128
  282f74:	80c0030d 	sth	r3,12(r16)
  282f78:	80800015 	stw	r2,0(r16)
  282f7c:	80800415 	stw	r2,16(r16)
  282f80:	84800515 	stw	r18,20(r16)
  282f84:	98001a1e 	bne	r19,zero,282ff0 <__smakebuf_r+0x15c>
  282f88:	dfc01317 	ldw	ra,76(sp)
  282f8c:	dcc01217 	ldw	r19,72(sp)
  282f90:	dc801117 	ldw	r18,68(sp)
  282f94:	dc401017 	ldw	r17,64(sp)
  282f98:	dc000f17 	ldw	r16,60(sp)
  282f9c:	dec01404 	addi	sp,sp,80
  282fa0:	f800283a 	ret
  282fa4:	288010c4 	addi	r2,r5,67
  282fa8:	28800015 	stw	r2,0(r5)
  282fac:	28800415 	stw	r2,16(r5)
  282fb0:	00800044 	movi	r2,1
  282fb4:	28800515 	stw	r2,20(r5)
  282fb8:	f800283a 	ret
  282fbc:	04801004 	movi	r18,64
  282fc0:	003fe006 	br	282f44 <__smakebuf_r+0xb0>
  282fc4:	81000a17 	ldw	r4,40(r16)
  282fc8:	00c00a34 	movhi	r3,40
  282fcc:	18c8fa04 	addi	r3,r3,9192
  282fd0:	20ffc51e 	bne	r4,r3,282ee8 <__smakebuf_r+0x54>
  282fd4:	8080030b 	ldhu	r2,12(r16)
  282fd8:	04810004 	movi	r18,1024
  282fdc:	84801315 	stw	r18,76(r16)
  282fe0:	1484b03a 	or	r2,r2,r18
  282fe4:	8080030d 	sth	r2,12(r16)
  282fe8:	0027883a 	mov	r19,zero
  282fec:	003fd806 	br	282f50 <__smakebuf_r+0xbc>
  282ff0:	8140038f 	ldh	r5,14(r16)
  282ff4:	8809883a 	mov	r4,r17
  282ff8:	028310c0 	call	28310c <_isatty_r>
  282ffc:	103fe226 	beq	r2,zero,282f88 <__smakebuf_r+0xf4>
  283000:	8080030b 	ldhu	r2,12(r16)
  283004:	10800054 	ori	r2,r2,1
  283008:	8080030d 	sth	r2,12(r16)
  28300c:	003fde06 	br	282f88 <__smakebuf_r+0xf4>
  283010:	8080030b 	ldhu	r2,12(r16)
  283014:	10c0800c 	andi	r3,r2,512
  283018:	183fdb1e 	bne	r3,zero,282f88 <__smakebuf_r+0xf4>
  28301c:	10800094 	ori	r2,r2,2
  283020:	80c010c4 	addi	r3,r16,67
  283024:	8080030d 	sth	r2,12(r16)
  283028:	00800044 	movi	r2,1
  28302c:	80c00015 	stw	r3,0(r16)
  283030:	80c00415 	stw	r3,16(r16)
  283034:	80800515 	stw	r2,20(r16)
  283038:	003fd306 	br	282f88 <__smakebuf_r+0xf4>
  28303c:	04810004 	movi	r18,1024
  283040:	003fc306 	br	282f50 <__smakebuf_r+0xbc>
  283044:	0027883a 	mov	r19,zero
  283048:	04810004 	movi	r18,1024
  28304c:	003fc006 	br	282f50 <__smakebuf_r+0xbc>

00283050 <_read_r>:
  283050:	defffd04 	addi	sp,sp,-12
  283054:	2805883a 	mov	r2,r5
  283058:	dc000015 	stw	r16,0(sp)
  28305c:	04000a74 	movhi	r16,41
  283060:	dc400115 	stw	r17,4(sp)
  283064:	300b883a 	mov	r5,r6
  283068:	8427e904 	addi	r16,r16,-24668
  28306c:	2023883a 	mov	r17,r4
  283070:	380d883a 	mov	r6,r7
  283074:	1009883a 	mov	r4,r2
  283078:	dfc00215 	stw	ra,8(sp)
  28307c:	80000015 	stw	zero,0(r16)
  283080:	02837600 	call	283760 <read>
  283084:	00ffffc4 	movi	r3,-1
  283088:	10c00526 	beq	r2,r3,2830a0 <_read_r+0x50>
  28308c:	dfc00217 	ldw	ra,8(sp)
  283090:	dc400117 	ldw	r17,4(sp)
  283094:	dc000017 	ldw	r16,0(sp)
  283098:	dec00304 	addi	sp,sp,12
  28309c:	f800283a 	ret
  2830a0:	80c00017 	ldw	r3,0(r16)
  2830a4:	183ff926 	beq	r3,zero,28308c <_read_r+0x3c>
  2830a8:	88c00015 	stw	r3,0(r17)
  2830ac:	003ff706 	br	28308c <_read_r+0x3c>

002830b0 <_fstat_r>:
  2830b0:	defffd04 	addi	sp,sp,-12
  2830b4:	2805883a 	mov	r2,r5
  2830b8:	dc000015 	stw	r16,0(sp)
  2830bc:	04000a74 	movhi	r16,41
  2830c0:	dc400115 	stw	r17,4(sp)
  2830c4:	8427e904 	addi	r16,r16,-24668
  2830c8:	2023883a 	mov	r17,r4
  2830cc:	300b883a 	mov	r5,r6
  2830d0:	1009883a 	mov	r4,r2
  2830d4:	dfc00215 	stw	ra,8(sp)
  2830d8:	80000015 	stw	zero,0(r16)
  2830dc:	02832d40 	call	2832d4 <fstat>
  2830e0:	00ffffc4 	movi	r3,-1
  2830e4:	10c00526 	beq	r2,r3,2830fc <_fstat_r+0x4c>
  2830e8:	dfc00217 	ldw	ra,8(sp)
  2830ec:	dc400117 	ldw	r17,4(sp)
  2830f0:	dc000017 	ldw	r16,0(sp)
  2830f4:	dec00304 	addi	sp,sp,12
  2830f8:	f800283a 	ret
  2830fc:	80c00017 	ldw	r3,0(r16)
  283100:	183ff926 	beq	r3,zero,2830e8 <_fstat_r+0x38>
  283104:	88c00015 	stw	r3,0(r17)
  283108:	003ff706 	br	2830e8 <_fstat_r+0x38>

0028310c <_isatty_r>:
  28310c:	defffd04 	addi	sp,sp,-12
  283110:	dc000015 	stw	r16,0(sp)
  283114:	04000a74 	movhi	r16,41
  283118:	dc400115 	stw	r17,4(sp)
  28311c:	8427e904 	addi	r16,r16,-24668
  283120:	2023883a 	mov	r17,r4
  283124:	2809883a 	mov	r4,r5
  283128:	dfc00215 	stw	ra,8(sp)
  28312c:	80000015 	stw	zero,0(r16)
  283130:	02833c00 	call	2833c0 <isatty>
  283134:	00ffffc4 	movi	r3,-1
  283138:	10c00526 	beq	r2,r3,283150 <_isatty_r+0x44>
  28313c:	dfc00217 	ldw	ra,8(sp)
  283140:	dc400117 	ldw	r17,4(sp)
  283144:	dc000017 	ldw	r16,0(sp)
  283148:	dec00304 	addi	sp,sp,12
  28314c:	f800283a 	ret
  283150:	80c00017 	ldw	r3,0(r16)
  283154:	183ff926 	beq	r3,zero,28313c <_isatty_r+0x30>
  283158:	88c00015 	stw	r3,0(r17)
  28315c:	003ff706 	br	28313c <_isatty_r+0x30>

00283160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283160:	defffe04 	addi	sp,sp,-8
  283164:	dfc00115 	stw	ra,4(sp)
  283168:	df000015 	stw	fp,0(sp)
  28316c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  283170:	d0a00917 	ldw	r2,-32732(gp)
  283174:	10000326 	beq	r2,zero,283184 <alt_get_errno+0x24>
  283178:	d0a00917 	ldw	r2,-32732(gp)
  28317c:	103ee83a 	callr	r2
  283180:	00000106 	br	283188 <alt_get_errno+0x28>
  283184:	d0a6cd04 	addi	r2,gp,-25804
}
  283188:	e037883a 	mov	sp,fp
  28318c:	dfc00117 	ldw	ra,4(sp)
  283190:	df000017 	ldw	fp,0(sp)
  283194:	dec00204 	addi	sp,sp,8
  283198:	f800283a 	ret

0028319c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  28319c:	defffb04 	addi	sp,sp,-20
  2831a0:	dfc00415 	stw	ra,16(sp)
  2831a4:	df000315 	stw	fp,12(sp)
  2831a8:	df000304 	addi	fp,sp,12
  2831ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  2831b0:	e0bfff17 	ldw	r2,-4(fp)
  2831b4:	10000616 	blt	r2,zero,2831d0 <close+0x34>
  2831b8:	e0bfff17 	ldw	r2,-4(fp)
  2831bc:	10c00324 	muli	r3,r2,12
  2831c0:	00800a34 	movhi	r2,40
  2831c4:	109c8304 	addi	r2,r2,29196
  2831c8:	1885883a 	add	r2,r3,r2
  2831cc:	00000106 	br	2831d4 <close+0x38>
  2831d0:	0005883a 	mov	r2,zero
  2831d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  2831d8:	e0bffd17 	ldw	r2,-12(fp)
  2831dc:	10001926 	beq	r2,zero,283244 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  2831e0:	e0bffd17 	ldw	r2,-12(fp)
  2831e4:	10800017 	ldw	r2,0(r2)
  2831e8:	10800417 	ldw	r2,16(r2)
  2831ec:	10000626 	beq	r2,zero,283208 <close+0x6c>
  2831f0:	e0bffd17 	ldw	r2,-12(fp)
  2831f4:	10800017 	ldw	r2,0(r2)
  2831f8:	10800417 	ldw	r2,16(r2)
  2831fc:	e13ffd17 	ldw	r4,-12(fp)
  283200:	103ee83a 	callr	r2
  283204:	00000106 	br	28320c <close+0x70>
  283208:	0005883a 	mov	r2,zero
  28320c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  283210:	e13fff17 	ldw	r4,-4(fp)
  283214:	028385c0 	call	28385c <alt_release_fd>
    if (rval < 0)
  283218:	e0bffe17 	ldw	r2,-8(fp)
  28321c:	1000070e 	bge	r2,zero,28323c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  283220:	02831600 	call	283160 <alt_get_errno>
  283224:	1007883a 	mov	r3,r2
  283228:	e0bffe17 	ldw	r2,-8(fp)
  28322c:	0085c83a 	sub	r2,zero,r2
  283230:	18800015 	stw	r2,0(r3)
      return -1;
  283234:	00bfffc4 	movi	r2,-1
  283238:	00000706 	br	283258 <close+0xbc>
    }
    return 0;
  28323c:	0005883a 	mov	r2,zero
  283240:	00000506 	br	283258 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  283244:	02831600 	call	283160 <alt_get_errno>
  283248:	1007883a 	mov	r3,r2
  28324c:	00801444 	movi	r2,81
  283250:	18800015 	stw	r2,0(r3)
    return -1;
  283254:	00bfffc4 	movi	r2,-1
  }
}
  283258:	e037883a 	mov	sp,fp
  28325c:	dfc00117 	ldw	ra,4(sp)
  283260:	df000017 	ldw	fp,0(sp)
  283264:	dec00204 	addi	sp,sp,8
  283268:	f800283a 	ret

0028326c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  28326c:	defffc04 	addi	sp,sp,-16
  283270:	df000315 	stw	fp,12(sp)
  283274:	df000304 	addi	fp,sp,12
  283278:	e13ffd15 	stw	r4,-12(fp)
  28327c:	e17ffe15 	stw	r5,-8(fp)
  283280:	e1bfff15 	stw	r6,-4(fp)
  return len;
  283284:	e0bfff17 	ldw	r2,-4(fp)
}
  283288:	e037883a 	mov	sp,fp
  28328c:	df000017 	ldw	fp,0(sp)
  283290:	dec00104 	addi	sp,sp,4
  283294:	f800283a 	ret

00283298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283298:	defffe04 	addi	sp,sp,-8
  28329c:	dfc00115 	stw	ra,4(sp)
  2832a0:	df000015 	stw	fp,0(sp)
  2832a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2832a8:	d0a00917 	ldw	r2,-32732(gp)
  2832ac:	10000326 	beq	r2,zero,2832bc <alt_get_errno+0x24>
  2832b0:	d0a00917 	ldw	r2,-32732(gp)
  2832b4:	103ee83a 	callr	r2
  2832b8:	00000106 	br	2832c0 <alt_get_errno+0x28>
  2832bc:	d0a6cd04 	addi	r2,gp,-25804
}
  2832c0:	e037883a 	mov	sp,fp
  2832c4:	dfc00117 	ldw	ra,4(sp)
  2832c8:	df000017 	ldw	fp,0(sp)
  2832cc:	dec00204 	addi	sp,sp,8
  2832d0:	f800283a 	ret

002832d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  2832d4:	defffb04 	addi	sp,sp,-20
  2832d8:	dfc00415 	stw	ra,16(sp)
  2832dc:	df000315 	stw	fp,12(sp)
  2832e0:	df000304 	addi	fp,sp,12
  2832e4:	e13ffe15 	stw	r4,-8(fp)
  2832e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2832ec:	e0bffe17 	ldw	r2,-8(fp)
  2832f0:	10000616 	blt	r2,zero,28330c <fstat+0x38>
  2832f4:	e0bffe17 	ldw	r2,-8(fp)
  2832f8:	10c00324 	muli	r3,r2,12
  2832fc:	00800a34 	movhi	r2,40
  283300:	109c8304 	addi	r2,r2,29196
  283304:	1885883a 	add	r2,r3,r2
  283308:	00000106 	br	283310 <fstat+0x3c>
  28330c:	0005883a 	mov	r2,zero
  283310:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  283314:	e0bffd17 	ldw	r2,-12(fp)
  283318:	10001026 	beq	r2,zero,28335c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  28331c:	e0bffd17 	ldw	r2,-12(fp)
  283320:	10800017 	ldw	r2,0(r2)
  283324:	10800817 	ldw	r2,32(r2)
  283328:	10000726 	beq	r2,zero,283348 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  28332c:	e0bffd17 	ldw	r2,-12(fp)
  283330:	10800017 	ldw	r2,0(r2)
  283334:	10800817 	ldw	r2,32(r2)
  283338:	e17fff17 	ldw	r5,-4(fp)
  28333c:	e13ffd17 	ldw	r4,-12(fp)
  283340:	103ee83a 	callr	r2
  283344:	00000a06 	br	283370 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  283348:	e0bfff17 	ldw	r2,-4(fp)
  28334c:	00c80004 	movi	r3,8192
  283350:	10c00115 	stw	r3,4(r2)
      return 0;
  283354:	0005883a 	mov	r2,zero
  283358:	00000506 	br	283370 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  28335c:	02832980 	call	283298 <alt_get_errno>
  283360:	1007883a 	mov	r3,r2
  283364:	00801444 	movi	r2,81
  283368:	18800015 	stw	r2,0(r3)
    return -1;
  28336c:	00bfffc4 	movi	r2,-1
  }
}
  283370:	e037883a 	mov	sp,fp
  283374:	dfc00117 	ldw	ra,4(sp)
  283378:	df000017 	ldw	fp,0(sp)
  28337c:	dec00204 	addi	sp,sp,8
  283380:	f800283a 	ret

00283384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283384:	defffe04 	addi	sp,sp,-8
  283388:	dfc00115 	stw	ra,4(sp)
  28338c:	df000015 	stw	fp,0(sp)
  283390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  283394:	d0a00917 	ldw	r2,-32732(gp)
  283398:	10000326 	beq	r2,zero,2833a8 <alt_get_errno+0x24>
  28339c:	d0a00917 	ldw	r2,-32732(gp)
  2833a0:	103ee83a 	callr	r2
  2833a4:	00000106 	br	2833ac <alt_get_errno+0x28>
  2833a8:	d0a6cd04 	addi	r2,gp,-25804
}
  2833ac:	e037883a 	mov	sp,fp
  2833b0:	dfc00117 	ldw	ra,4(sp)
  2833b4:	df000017 	ldw	fp,0(sp)
  2833b8:	dec00204 	addi	sp,sp,8
  2833bc:	f800283a 	ret

002833c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  2833c0:	deffed04 	addi	sp,sp,-76
  2833c4:	dfc01215 	stw	ra,72(sp)
  2833c8:	df001115 	stw	fp,68(sp)
  2833cc:	df001104 	addi	fp,sp,68
  2833d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2833d4:	e0bfff17 	ldw	r2,-4(fp)
  2833d8:	10000616 	blt	r2,zero,2833f4 <isatty+0x34>
  2833dc:	e0bfff17 	ldw	r2,-4(fp)
  2833e0:	10c00324 	muli	r3,r2,12
  2833e4:	00800a34 	movhi	r2,40
  2833e8:	109c8304 	addi	r2,r2,29196
  2833ec:	1885883a 	add	r2,r3,r2
  2833f0:	00000106 	br	2833f8 <isatty+0x38>
  2833f4:	0005883a 	mov	r2,zero
  2833f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  2833fc:	e0bfef17 	ldw	r2,-68(fp)
  283400:	10000e26 	beq	r2,zero,28343c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  283404:	e0bfef17 	ldw	r2,-68(fp)
  283408:	10800017 	ldw	r2,0(r2)
  28340c:	10800817 	ldw	r2,32(r2)
  283410:	1000021e 	bne	r2,zero,28341c <isatty+0x5c>
    {
      return 1;
  283414:	00800044 	movi	r2,1
  283418:	00000d06 	br	283450 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  28341c:	e0bff004 	addi	r2,fp,-64
  283420:	100b883a 	mov	r5,r2
  283424:	e13fff17 	ldw	r4,-4(fp)
  283428:	02832d40 	call	2832d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  28342c:	e0bff117 	ldw	r2,-60(fp)
  283430:	10880020 	cmpeqi	r2,r2,8192
  283434:	10803fcc 	andi	r2,r2,255
  283438:	00000506 	br	283450 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  28343c:	02833840 	call	283384 <alt_get_errno>
  283440:	1007883a 	mov	r3,r2
  283444:	00801444 	movi	r2,81
  283448:	18800015 	stw	r2,0(r3)
    return 0;
  28344c:	0005883a 	mov	r2,zero
  }
}
  283450:	e037883a 	mov	sp,fp
  283454:	dfc00117 	ldw	ra,4(sp)
  283458:	df000017 	ldw	fp,0(sp)
  28345c:	dec00204 	addi	sp,sp,8
  283460:	f800283a 	ret

00283464 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  283464:	defffc04 	addi	sp,sp,-16
  283468:	df000315 	stw	fp,12(sp)
  28346c:	df000304 	addi	fp,sp,12
  283470:	e13ffd15 	stw	r4,-12(fp)
  283474:	e17ffe15 	stw	r5,-8(fp)
  283478:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  28347c:	e0fffe17 	ldw	r3,-8(fp)
  283480:	e0bffd17 	ldw	r2,-12(fp)
  283484:	18800c26 	beq	r3,r2,2834b8 <alt_load_section+0x54>
  {
    while( to != end )
  283488:	00000806 	br	2834ac <alt_load_section+0x48>
    {
      *to++ = *from++;
  28348c:	e0bffe17 	ldw	r2,-8(fp)
  283490:	10c00104 	addi	r3,r2,4
  283494:	e0fffe15 	stw	r3,-8(fp)
  283498:	e0fffd17 	ldw	r3,-12(fp)
  28349c:	19000104 	addi	r4,r3,4
  2834a0:	e13ffd15 	stw	r4,-12(fp)
  2834a4:	18c00017 	ldw	r3,0(r3)
  2834a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  2834ac:	e0fffe17 	ldw	r3,-8(fp)
  2834b0:	e0bfff17 	ldw	r2,-4(fp)
  2834b4:	18bff51e 	bne	r3,r2,28348c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  2834b8:	0001883a 	nop
  2834bc:	e037883a 	mov	sp,fp
  2834c0:	df000017 	ldw	fp,0(sp)
  2834c4:	dec00104 	addi	sp,sp,4
  2834c8:	f800283a 	ret

002834cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  2834cc:	defffe04 	addi	sp,sp,-8
  2834d0:	dfc00115 	stw	ra,4(sp)
  2834d4:	df000015 	stw	fp,0(sp)
  2834d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  2834dc:	01800a74 	movhi	r6,41
  2834e0:	31a12a04 	addi	r6,r6,-31576
  2834e4:	01400a34 	movhi	r5,40
  2834e8:	295a6e04 	addi	r5,r5,27064
  2834ec:	01000a74 	movhi	r4,41
  2834f0:	21212a04 	addi	r4,r4,-31576
  2834f4:	02834640 	call	283464 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  2834f8:	01800a34 	movhi	r6,40
  2834fc:	31809204 	addi	r6,r6,584
  283500:	01400a34 	movhi	r5,40
  283504:	29400804 	addi	r5,r5,32
  283508:	01000a34 	movhi	r4,40
  28350c:	21000804 	addi	r4,r4,32
  283510:	02834640 	call	283464 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  283514:	01800a34 	movhi	r6,40
  283518:	319a6e04 	addi	r6,r6,27064
  28351c:	01400a34 	movhi	r5,40
  283520:	295a3f04 	addi	r5,r5,26876
  283524:	01000a34 	movhi	r4,40
  283528:	211a3f04 	addi	r4,r4,26876
  28352c:	02834640 	call	283464 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  283530:	02859080 	call	285908 <alt_dcache_flush_all>
  alt_icache_flush_all();
  283534:	0285b800 	call	285b80 <alt_icache_flush_all>
}
  283538:	0001883a 	nop
  28353c:	e037883a 	mov	sp,fp
  283540:	dfc00117 	ldw	ra,4(sp)
  283544:	df000017 	ldw	fp,0(sp)
  283548:	dec00204 	addi	sp,sp,8
  28354c:	f800283a 	ret

00283550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283550:	defffe04 	addi	sp,sp,-8
  283554:	dfc00115 	stw	ra,4(sp)
  283558:	df000015 	stw	fp,0(sp)
  28355c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  283560:	d0a00917 	ldw	r2,-32732(gp)
  283564:	10000326 	beq	r2,zero,283574 <alt_get_errno+0x24>
  283568:	d0a00917 	ldw	r2,-32732(gp)
  28356c:	103ee83a 	callr	r2
  283570:	00000106 	br	283578 <alt_get_errno+0x28>
  283574:	d0a6cd04 	addi	r2,gp,-25804
}
  283578:	e037883a 	mov	sp,fp
  28357c:	dfc00117 	ldw	ra,4(sp)
  283580:	df000017 	ldw	fp,0(sp)
  283584:	dec00204 	addi	sp,sp,8
  283588:	f800283a 	ret

0028358c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  28358c:	defff904 	addi	sp,sp,-28
  283590:	dfc00615 	stw	ra,24(sp)
  283594:	df000515 	stw	fp,20(sp)
  283598:	df000504 	addi	fp,sp,20
  28359c:	e13ffd15 	stw	r4,-12(fp)
  2835a0:	e17ffe15 	stw	r5,-8(fp)
  2835a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  2835a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2835ac:	e0bffd17 	ldw	r2,-12(fp)
  2835b0:	10000616 	blt	r2,zero,2835cc <lseek+0x40>
  2835b4:	e0bffd17 	ldw	r2,-12(fp)
  2835b8:	10c00324 	muli	r3,r2,12
  2835bc:	00800a34 	movhi	r2,40
  2835c0:	109c8304 	addi	r2,r2,29196
  2835c4:	1885883a 	add	r2,r3,r2
  2835c8:	00000106 	br	2835d0 <lseek+0x44>
  2835cc:	0005883a 	mov	r2,zero
  2835d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  2835d4:	e0bffc17 	ldw	r2,-16(fp)
  2835d8:	10001026 	beq	r2,zero,28361c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  2835dc:	e0bffc17 	ldw	r2,-16(fp)
  2835e0:	10800017 	ldw	r2,0(r2)
  2835e4:	10800717 	ldw	r2,28(r2)
  2835e8:	10000926 	beq	r2,zero,283610 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  2835ec:	e0bffc17 	ldw	r2,-16(fp)
  2835f0:	10800017 	ldw	r2,0(r2)
  2835f4:	10800717 	ldw	r2,28(r2)
  2835f8:	e1bfff17 	ldw	r6,-4(fp)
  2835fc:	e17ffe17 	ldw	r5,-8(fp)
  283600:	e13ffc17 	ldw	r4,-16(fp)
  283604:	103ee83a 	callr	r2
  283608:	e0bffb15 	stw	r2,-20(fp)
  28360c:	00000506 	br	283624 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  283610:	00bfde84 	movi	r2,-134
  283614:	e0bffb15 	stw	r2,-20(fp)
  283618:	00000206 	br	283624 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  28361c:	00bfebc4 	movi	r2,-81
  283620:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  283624:	e0bffb17 	ldw	r2,-20(fp)
  283628:	1000070e 	bge	r2,zero,283648 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  28362c:	02835500 	call	283550 <alt_get_errno>
  283630:	1007883a 	mov	r3,r2
  283634:	e0bffb17 	ldw	r2,-20(fp)
  283638:	0085c83a 	sub	r2,zero,r2
  28363c:	18800015 	stw	r2,0(r3)
    rc = -1;
  283640:	00bfffc4 	movi	r2,-1
  283644:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  283648:	e0bffb17 	ldw	r2,-20(fp)
}
  28364c:	e037883a 	mov	sp,fp
  283650:	dfc00117 	ldw	ra,4(sp)
  283654:	df000017 	ldw	fp,0(sp)
  283658:	dec00204 	addi	sp,sp,8
  28365c:	f800283a 	ret

00283660 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  283660:	defffd04 	addi	sp,sp,-12
  283664:	dfc00215 	stw	ra,8(sp)
  283668:	df000115 	stw	fp,4(sp)
  28366c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  283670:	0009883a 	mov	r4,zero
  283674:	0283b080 	call	283b08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  283678:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  28367c:	0283b400 	call	283b40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  283680:	01800a34 	movhi	r6,40
  283684:	319a5804 	addi	r6,r6,26976
  283688:	01400a34 	movhi	r5,40
  28368c:	295a5804 	addi	r5,r5,26976
  283690:	01000a34 	movhi	r4,40
  283694:	211a5804 	addi	r4,r4,26976
  283698:	0285c780 	call	285c78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  28369c:	0285a300 	call	285a30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  2836a0:	01000a34 	movhi	r4,40
  2836a4:	2116a404 	addi	r4,r4,23184
  2836a8:	02865680 	call	286568 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  2836ac:	d0a6ce17 	ldw	r2,-25800(gp)
  2836b0:	d0e6cf17 	ldw	r3,-25796(gp)
  2836b4:	d126d017 	ldw	r4,-25792(gp)
  2836b8:	200d883a 	mov	r6,r4
  2836bc:	180b883a 	mov	r5,r3
  2836c0:	1009883a 	mov	r4,r2
  2836c4:	02802940 	call	280294 <main>
  2836c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  2836cc:	01000044 	movi	r4,1
  2836d0:	028319c0 	call	28319c <close>
  exit (result);
  2836d4:	e13fff17 	ldw	r4,-4(fp)
  2836d8:	028657c0 	call	28657c <exit>

002836dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  2836dc:	defffe04 	addi	sp,sp,-8
  2836e0:	df000115 	stw	fp,4(sp)
  2836e4:	df000104 	addi	fp,sp,4
  2836e8:	e13fff15 	stw	r4,-4(fp)
}
  2836ec:	0001883a 	nop
  2836f0:	e037883a 	mov	sp,fp
  2836f4:	df000017 	ldw	fp,0(sp)
  2836f8:	dec00104 	addi	sp,sp,4
  2836fc:	f800283a 	ret

00283700 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  283700:	defffe04 	addi	sp,sp,-8
  283704:	df000115 	stw	fp,4(sp)
  283708:	df000104 	addi	fp,sp,4
  28370c:	e13fff15 	stw	r4,-4(fp)
}
  283710:	0001883a 	nop
  283714:	e037883a 	mov	sp,fp
  283718:	df000017 	ldw	fp,0(sp)
  28371c:	dec00104 	addi	sp,sp,4
  283720:	f800283a 	ret

00283724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283724:	defffe04 	addi	sp,sp,-8
  283728:	dfc00115 	stw	ra,4(sp)
  28372c:	df000015 	stw	fp,0(sp)
  283730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  283734:	d0a00917 	ldw	r2,-32732(gp)
  283738:	10000326 	beq	r2,zero,283748 <alt_get_errno+0x24>
  28373c:	d0a00917 	ldw	r2,-32732(gp)
  283740:	103ee83a 	callr	r2
  283744:	00000106 	br	28374c <alt_get_errno+0x28>
  283748:	d0a6cd04 	addi	r2,gp,-25804
}
  28374c:	e037883a 	mov	sp,fp
  283750:	dfc00117 	ldw	ra,4(sp)
  283754:	df000017 	ldw	fp,0(sp)
  283758:	dec00204 	addi	sp,sp,8
  28375c:	f800283a 	ret

00283760 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  283760:	defff904 	addi	sp,sp,-28
  283764:	dfc00615 	stw	ra,24(sp)
  283768:	df000515 	stw	fp,20(sp)
  28376c:	df000504 	addi	fp,sp,20
  283770:	e13ffd15 	stw	r4,-12(fp)
  283774:	e17ffe15 	stw	r5,-8(fp)
  283778:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  28377c:	e0bffd17 	ldw	r2,-12(fp)
  283780:	10000616 	blt	r2,zero,28379c <read+0x3c>
  283784:	e0bffd17 	ldw	r2,-12(fp)
  283788:	10c00324 	muli	r3,r2,12
  28378c:	00800a34 	movhi	r2,40
  283790:	109c8304 	addi	r2,r2,29196
  283794:	1885883a 	add	r2,r3,r2
  283798:	00000106 	br	2837a0 <read+0x40>
  28379c:	0005883a 	mov	r2,zero
  2837a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  2837a4:	e0bffb17 	ldw	r2,-20(fp)
  2837a8:	10002226 	beq	r2,zero,283834 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  2837ac:	e0bffb17 	ldw	r2,-20(fp)
  2837b0:	10800217 	ldw	r2,8(r2)
  2837b4:	108000cc 	andi	r2,r2,3
  2837b8:	10800060 	cmpeqi	r2,r2,1
  2837bc:	1000181e 	bne	r2,zero,283820 <read+0xc0>
        (fd->dev->read))
  2837c0:	e0bffb17 	ldw	r2,-20(fp)
  2837c4:	10800017 	ldw	r2,0(r2)
  2837c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  2837cc:	10001426 	beq	r2,zero,283820 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  2837d0:	e0bffb17 	ldw	r2,-20(fp)
  2837d4:	10800017 	ldw	r2,0(r2)
  2837d8:	10800517 	ldw	r2,20(r2)
  2837dc:	e0ffff17 	ldw	r3,-4(fp)
  2837e0:	180d883a 	mov	r6,r3
  2837e4:	e17ffe17 	ldw	r5,-8(fp)
  2837e8:	e13ffb17 	ldw	r4,-20(fp)
  2837ec:	103ee83a 	callr	r2
  2837f0:	e0bffc15 	stw	r2,-16(fp)
  2837f4:	e0bffc17 	ldw	r2,-16(fp)
  2837f8:	1000070e 	bge	r2,zero,283818 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  2837fc:	02837240 	call	283724 <alt_get_errno>
  283800:	1007883a 	mov	r3,r2
  283804:	e0bffc17 	ldw	r2,-16(fp)
  283808:	0085c83a 	sub	r2,zero,r2
  28380c:	18800015 	stw	r2,0(r3)
          return -1;
  283810:	00bfffc4 	movi	r2,-1
  283814:	00000c06 	br	283848 <read+0xe8>
        }
        return rval;
  283818:	e0bffc17 	ldw	r2,-16(fp)
  28381c:	00000a06 	br	283848 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  283820:	02837240 	call	283724 <alt_get_errno>
  283824:	1007883a 	mov	r3,r2
  283828:	00800344 	movi	r2,13
  28382c:	18800015 	stw	r2,0(r3)
  283830:	00000406 	br	283844 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  283834:	02837240 	call	283724 <alt_get_errno>
  283838:	1007883a 	mov	r3,r2
  28383c:	00801444 	movi	r2,81
  283840:	18800015 	stw	r2,0(r3)
  }
  return -1;
  283844:	00bfffc4 	movi	r2,-1
}
  283848:	e037883a 	mov	sp,fp
  28384c:	dfc00117 	ldw	ra,4(sp)
  283850:	df000017 	ldw	fp,0(sp)
  283854:	dec00204 	addi	sp,sp,8
  283858:	f800283a 	ret

0028385c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  28385c:	defffe04 	addi	sp,sp,-8
  283860:	df000115 	stw	fp,4(sp)
  283864:	df000104 	addi	fp,sp,4
  283868:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  28386c:	e0bfff17 	ldw	r2,-4(fp)
  283870:	108000d0 	cmplti	r2,r2,3
  283874:	10000d1e 	bne	r2,zero,2838ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  283878:	00800a34 	movhi	r2,40
  28387c:	109c8304 	addi	r2,r2,29196
  283880:	e0ffff17 	ldw	r3,-4(fp)
  283884:	18c00324 	muli	r3,r3,12
  283888:	10c5883a 	add	r2,r2,r3
  28388c:	10800204 	addi	r2,r2,8
  283890:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  283894:	00800a34 	movhi	r2,40
  283898:	109c8304 	addi	r2,r2,29196
  28389c:	e0ffff17 	ldw	r3,-4(fp)
  2838a0:	18c00324 	muli	r3,r3,12
  2838a4:	10c5883a 	add	r2,r2,r3
  2838a8:	10000015 	stw	zero,0(r2)
  }
}
  2838ac:	0001883a 	nop
  2838b0:	e037883a 	mov	sp,fp
  2838b4:	df000017 	ldw	fp,0(sp)
  2838b8:	dec00104 	addi	sp,sp,4
  2838bc:	f800283a 	ret

002838c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  2838c0:	defff904 	addi	sp,sp,-28
  2838c4:	df000615 	stw	fp,24(sp)
  2838c8:	df000604 	addi	fp,sp,24
  2838cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2838d0:	0005303a 	rdctl	r2,status
  2838d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2838d8:	e0fffe17 	ldw	r3,-8(fp)
  2838dc:	00bfff84 	movi	r2,-2
  2838e0:	1884703a 	and	r2,r3,r2
  2838e4:	1001703a 	wrctl	status,r2
  
  return context;
  2838e8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  2838ec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  2838f0:	d0a00a17 	ldw	r2,-32728(gp)
  2838f4:	10c000c4 	addi	r3,r2,3
  2838f8:	00bfff04 	movi	r2,-4
  2838fc:	1884703a 	and	r2,r3,r2
  283900:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  283904:	d0e00a17 	ldw	r3,-32728(gp)
  283908:	e0bfff17 	ldw	r2,-4(fp)
  28390c:	1887883a 	add	r3,r3,r2
  283910:	00800bb4 	movhi	r2,46
  283914:	1086a004 	addi	r2,r2,6784
  283918:	10c0062e 	bgeu	r2,r3,283934 <sbrk+0x74>
  28391c:	e0bffb17 	ldw	r2,-20(fp)
  283920:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  283924:	e0bffa17 	ldw	r2,-24(fp)
  283928:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  28392c:	00bfffc4 	movi	r2,-1
  283930:	00000b06 	br	283960 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  283934:	d0a00a17 	ldw	r2,-32728(gp)
  283938:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  28393c:	d0e00a17 	ldw	r3,-32728(gp)
  283940:	e0bfff17 	ldw	r2,-4(fp)
  283944:	1885883a 	add	r2,r3,r2
  283948:	d0a00a15 	stw	r2,-32728(gp)
  28394c:	e0bffb17 	ldw	r2,-20(fp)
  283950:	e0bffc15 	stw	r2,-16(fp)
  283954:	e0bffc17 	ldw	r2,-16(fp)
  283958:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  28395c:	e0bffd17 	ldw	r2,-12(fp)
} 
  283960:	e037883a 	mov	sp,fp
  283964:	df000017 	ldw	fp,0(sp)
  283968:	dec00104 	addi	sp,sp,4
  28396c:	f800283a 	ret

00283970 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  283970:	defffd04 	addi	sp,sp,-12
  283974:	dfc00215 	stw	ra,8(sp)
  283978:	df000115 	stw	fp,4(sp)
  28397c:	df000104 	addi	fp,sp,4
  283980:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  283984:	e13fff17 	ldw	r4,-4(fp)
  283988:	02857b00 	call	2857b0 <alt_busy_sleep>
}
  28398c:	e037883a 	mov	sp,fp
  283990:	dfc00117 	ldw	ra,4(sp)
  283994:	df000017 	ldw	fp,0(sp)
  283998:	dec00204 	addi	sp,sp,8
  28399c:	f800283a 	ret

002839a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2839a0:	defffe04 	addi	sp,sp,-8
  2839a4:	dfc00115 	stw	ra,4(sp)
  2839a8:	df000015 	stw	fp,0(sp)
  2839ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2839b0:	d0a00917 	ldw	r2,-32732(gp)
  2839b4:	10000326 	beq	r2,zero,2839c4 <alt_get_errno+0x24>
  2839b8:	d0a00917 	ldw	r2,-32732(gp)
  2839bc:	103ee83a 	callr	r2
  2839c0:	00000106 	br	2839c8 <alt_get_errno+0x28>
  2839c4:	d0a6cd04 	addi	r2,gp,-25804
}
  2839c8:	e037883a 	mov	sp,fp
  2839cc:	dfc00117 	ldw	ra,4(sp)
  2839d0:	df000017 	ldw	fp,0(sp)
  2839d4:	dec00204 	addi	sp,sp,8
  2839d8:	f800283a 	ret

002839dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  2839dc:	defff904 	addi	sp,sp,-28
  2839e0:	dfc00615 	stw	ra,24(sp)
  2839e4:	df000515 	stw	fp,20(sp)
  2839e8:	df000504 	addi	fp,sp,20
  2839ec:	e13ffd15 	stw	r4,-12(fp)
  2839f0:	e17ffe15 	stw	r5,-8(fp)
  2839f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2839f8:	e0bffd17 	ldw	r2,-12(fp)
  2839fc:	10000616 	blt	r2,zero,283a18 <write+0x3c>
  283a00:	e0bffd17 	ldw	r2,-12(fp)
  283a04:	10c00324 	muli	r3,r2,12
  283a08:	00800a34 	movhi	r2,40
  283a0c:	109c8304 	addi	r2,r2,29196
  283a10:	1885883a 	add	r2,r3,r2
  283a14:	00000106 	br	283a1c <write+0x40>
  283a18:	0005883a 	mov	r2,zero
  283a1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  283a20:	e0bffb17 	ldw	r2,-20(fp)
  283a24:	10002126 	beq	r2,zero,283aac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  283a28:	e0bffb17 	ldw	r2,-20(fp)
  283a2c:	10800217 	ldw	r2,8(r2)
  283a30:	108000cc 	andi	r2,r2,3
  283a34:	10001826 	beq	r2,zero,283a98 <write+0xbc>
  283a38:	e0bffb17 	ldw	r2,-20(fp)
  283a3c:	10800017 	ldw	r2,0(r2)
  283a40:	10800617 	ldw	r2,24(r2)
  283a44:	10001426 	beq	r2,zero,283a98 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  283a48:	e0bffb17 	ldw	r2,-20(fp)
  283a4c:	10800017 	ldw	r2,0(r2)
  283a50:	10800617 	ldw	r2,24(r2)
  283a54:	e0ffff17 	ldw	r3,-4(fp)
  283a58:	180d883a 	mov	r6,r3
  283a5c:	e17ffe17 	ldw	r5,-8(fp)
  283a60:	e13ffb17 	ldw	r4,-20(fp)
  283a64:	103ee83a 	callr	r2
  283a68:	e0bffc15 	stw	r2,-16(fp)
  283a6c:	e0bffc17 	ldw	r2,-16(fp)
  283a70:	1000070e 	bge	r2,zero,283a90 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  283a74:	02839a00 	call	2839a0 <alt_get_errno>
  283a78:	1007883a 	mov	r3,r2
  283a7c:	e0bffc17 	ldw	r2,-16(fp)
  283a80:	0085c83a 	sub	r2,zero,r2
  283a84:	18800015 	stw	r2,0(r3)
        return -1;
  283a88:	00bfffc4 	movi	r2,-1
  283a8c:	00000c06 	br	283ac0 <write+0xe4>
      }
      return rval;
  283a90:	e0bffc17 	ldw	r2,-16(fp)
  283a94:	00000a06 	br	283ac0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  283a98:	02839a00 	call	2839a0 <alt_get_errno>
  283a9c:	1007883a 	mov	r3,r2
  283aa0:	00800344 	movi	r2,13
  283aa4:	18800015 	stw	r2,0(r3)
  283aa8:	00000406 	br	283abc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  283aac:	02839a00 	call	2839a0 <alt_get_errno>
  283ab0:	1007883a 	mov	r3,r2
  283ab4:	00801444 	movi	r2,81
  283ab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  283abc:	00bfffc4 	movi	r2,-1
}
  283ac0:	e037883a 	mov	sp,fp
  283ac4:	dfc00117 	ldw	ra,4(sp)
  283ac8:	df000017 	ldw	fp,0(sp)
  283acc:	dec00204 	addi	sp,sp,8
  283ad0:	f800283a 	ret

00283ad4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  283ad4:	defffd04 	addi	sp,sp,-12
  283ad8:	dfc00215 	stw	ra,8(sp)
  283adc:	df000115 	stw	fp,4(sp)
  283ae0:	df000104 	addi	fp,sp,4
  283ae4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  283ae8:	d1600604 	addi	r5,gp,-32744
  283aec:	e13fff17 	ldw	r4,-4(fp)
  283af0:	028598c0 	call	28598c <alt_dev_llist_insert>
}
  283af4:	e037883a 	mov	sp,fp
  283af8:	dfc00117 	ldw	ra,4(sp)
  283afc:	df000017 	ldw	fp,0(sp)
  283b00:	dec00204 	addi	sp,sp,8
  283b04:	f800283a 	ret

00283b08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  283b08:	defffd04 	addi	sp,sp,-12
  283b0c:	dfc00215 	stw	ra,8(sp)
  283b10:	df000115 	stw	fp,4(sp)
  283b14:	df000104 	addi	fp,sp,4
  283b18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  283b1c:	028626c0 	call	28626c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  283b20:	00800044 	movi	r2,1
  283b24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  283b28:	0001883a 	nop
  283b2c:	e037883a 	mov	sp,fp
  283b30:	dfc00117 	ldw	ra,4(sp)
  283b34:	df000017 	ldw	fp,0(sp)
  283b38:	dec00204 	addi	sp,sp,8
  283b3c:	f800283a 	ret

00283b40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  283b40:	defffd04 	addi	sp,sp,-12
  283b44:	dfc00215 	stw	ra,8(sp)
  283b48:	df000115 	stw	fp,4(sp)
  283b4c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  283b50:	01800044 	movi	r6,1
  283b54:	000b883a 	mov	r5,zero
  283b58:	01000a34 	movhi	r4,40
  283b5c:	211ced04 	addi	r4,r4,29620
  283b60:	0283ed40 	call	283ed4 <altera_avalon_jtag_uart_init>
  283b64:	01000a34 	movhi	r4,40
  283b68:	211ce304 	addi	r4,r4,29580
  283b6c:	0283ad40 	call	283ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  283b70:	01000a74 	movhi	r4,41
  283b74:	2120fb04 	addi	r4,r4,-31764
  283b78:	0283ad40 	call	283ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  283b7c:	00800a74 	movhi	r2,41
  283b80:	10a10704 	addi	r2,r2,-31716
  283b84:	10800a17 	ldw	r2,40(r2)
  283b88:	10800017 	ldw	r2,0(r2)
  283b8c:	1007883a 	mov	r3,r2
  283b90:	00800a74 	movhi	r2,41
  283b94:	10a10704 	addi	r2,r2,-31716
  283b98:	10c00b15 	stw	r3,44(r2)
  283b9c:	00800a74 	movhi	r2,41
  283ba0:	10a10704 	addi	r2,r2,-31716
  283ba4:	10800a17 	ldw	r2,40(r2)
  283ba8:	10800104 	addi	r2,r2,4
  283bac:	10800017 	ldw	r2,0(r2)
  283bb0:	1007883a 	mov	r3,r2
  283bb4:	00800a74 	movhi	r2,41
  283bb8:	10a10704 	addi	r2,r2,-31716
  283bbc:	10c00c15 	stw	r3,48(r2)
  283bc0:	00800a74 	movhi	r2,41
  283bc4:	10a10704 	addi	r2,r2,-31716
  283bc8:	10800a17 	ldw	r2,40(r2)
  283bcc:	10800204 	addi	r2,r2,8
  283bd0:	10800017 	ldw	r2,0(r2)
  283bd4:	10ffffcc 	andi	r3,r2,65535
  283bd8:	00800a74 	movhi	r2,41
  283bdc:	10a10704 	addi	r2,r2,-31716
  283be0:	10c00f15 	stw	r3,60(r2)
  283be4:	00800a74 	movhi	r2,41
  283be8:	10a10704 	addi	r2,r2,-31716
  283bec:	10800a17 	ldw	r2,40(r2)
  283bf0:	10800204 	addi	r2,r2,8
  283bf4:	10800017 	ldw	r2,0(r2)
  283bf8:	1006d43a 	srli	r3,r2,16
  283bfc:	00800a74 	movhi	r2,41
  283c00:	10a10704 	addi	r2,r2,-31716
  283c04:	10c01015 	stw	r3,64(r2)
  283c08:	00800a74 	movhi	r2,41
  283c0c:	10a10704 	addi	r2,r2,-31716
  283c10:	10800a17 	ldw	r2,40(r2)
  283c14:	10800304 	addi	r2,r2,12
  283c18:	10800017 	ldw	r2,0(r2)
  283c1c:	1005d07a 	srai	r2,r2,1
  283c20:	10c0004c 	andi	r3,r2,1
  283c24:	00800a74 	movhi	r2,41
  283c28:	10a10704 	addi	r2,r2,-31716
  283c2c:	10c00d15 	stw	r3,52(r2)
  283c30:	00800a74 	movhi	r2,41
  283c34:	10a10704 	addi	r2,r2,-31716
  283c38:	10800a17 	ldw	r2,40(r2)
  283c3c:	10800304 	addi	r2,r2,12
  283c40:	10800017 	ldw	r2,0(r2)
  283c44:	1005d13a 	srai	r2,r2,4
  283c48:	10c003cc 	andi	r3,r2,15
  283c4c:	00800a74 	movhi	r2,41
  283c50:	10a10704 	addi	r2,r2,-31716
  283c54:	10c00e15 	stw	r3,56(r2)
  283c58:	00800a74 	movhi	r2,41
  283c5c:	10a10704 	addi	r2,r2,-31716
  283c60:	10800a17 	ldw	r2,40(r2)
  283c64:	10800304 	addi	r2,r2,12
  283c68:	10800017 	ldw	r2,0(r2)
  283c6c:	1005d43a 	srai	r2,r2,16
  283c70:	e0bfff05 	stb	r2,-4(fp)
  283c74:	00800a74 	movhi	r2,41
  283c78:	10a10704 	addi	r2,r2,-31716
  283c7c:	10800a17 	ldw	r2,40(r2)
  283c80:	10800304 	addi	r2,r2,12
  283c84:	10800017 	ldw	r2,0(r2)
  283c88:	1004d63a 	srli	r2,r2,24
  283c8c:	e0bfff45 	stb	r2,-3(fp)
  283c90:	00800a74 	movhi	r2,41
  283c94:	10a10704 	addi	r2,r2,-31716
  283c98:	10800e17 	ldw	r2,56(r2)
  283c9c:	10800058 	cmpnei	r2,r2,1
  283ca0:	1000041e 	bne	r2,zero,283cb4 <alt_sys_init+0x174>
  283ca4:	00800a74 	movhi	r2,41
  283ca8:	10a10704 	addi	r2,r2,-31716
  283cac:	10001115 	stw	zero,68(r2)
  283cb0:	00000e06 	br	283cec <alt_sys_init+0x1ac>
  283cb4:	00800a74 	movhi	r2,41
  283cb8:	10a10704 	addi	r2,r2,-31716
  283cbc:	10800e17 	ldw	r2,56(r2)
  283cc0:	10800098 	cmpnei	r2,r2,2
  283cc4:	1000051e 	bne	r2,zero,283cdc <alt_sys_init+0x19c>
  283cc8:	00800a74 	movhi	r2,41
  283ccc:	10a10704 	addi	r2,r2,-31716
  283cd0:	00c00044 	movi	r3,1
  283cd4:	10c01115 	stw	r3,68(r2)
  283cd8:	00000406 	br	283cec <alt_sys_init+0x1ac>
  283cdc:	00800a74 	movhi	r2,41
  283ce0:	10a10704 	addi	r2,r2,-31716
  283ce4:	00c00084 	movi	r3,2
  283ce8:	10c01115 	stw	r3,68(r2)
  283cec:	e0bfff03 	ldbu	r2,-4(fp)
  283cf0:	00c00804 	movi	r3,32
  283cf4:	1885c83a 	sub	r2,r3,r2
  283cf8:	00ffffc4 	movi	r3,-1
  283cfc:	1886d83a 	srl	r3,r3,r2
  283d00:	00800a74 	movhi	r2,41
  283d04:	10a10704 	addi	r2,r2,-31716
  283d08:	10c01215 	stw	r3,72(r2)
  283d0c:	e0ffff03 	ldbu	r3,-4(fp)
  283d10:	00800a74 	movhi	r2,41
  283d14:	10a10704 	addi	r2,r2,-31716
  283d18:	10801117 	ldw	r2,68(r2)
  283d1c:	1887883a 	add	r3,r3,r2
  283d20:	00800a74 	movhi	r2,41
  283d24:	10a10704 	addi	r2,r2,-31716
  283d28:	10c01315 	stw	r3,76(r2)
  283d2c:	e0bfff43 	ldbu	r2,-3(fp)
  283d30:	00c00804 	movi	r3,32
  283d34:	1885c83a 	sub	r2,r3,r2
  283d38:	00ffffc4 	movi	r3,-1
  283d3c:	1886d83a 	srl	r3,r3,r2
  283d40:	00800a74 	movhi	r2,41
  283d44:	10a10704 	addi	r2,r2,-31716
  283d48:	10c01415 	stw	r3,80(r2)
  283d4c:	01000a74 	movhi	r4,41
  283d50:	21210704 	addi	r4,r4,-31716
  283d54:	0283ad40 	call	283ad4 <alt_dev_reg>
}
  283d58:	0001883a 	nop
  283d5c:	e037883a 	mov	sp,fp
  283d60:	dfc00117 	ldw	ra,4(sp)
  283d64:	df000017 	ldw	fp,0(sp)
  283d68:	dec00204 	addi	sp,sp,8
  283d6c:	f800283a 	ret

00283d70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  283d70:	defffa04 	addi	sp,sp,-24
  283d74:	dfc00515 	stw	ra,20(sp)
  283d78:	df000415 	stw	fp,16(sp)
  283d7c:	df000404 	addi	fp,sp,16
  283d80:	e13ffd15 	stw	r4,-12(fp)
  283d84:	e17ffe15 	stw	r5,-8(fp)
  283d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  283d8c:	e0bffd17 	ldw	r2,-12(fp)
  283d90:	10800017 	ldw	r2,0(r2)
  283d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  283d98:	e0bffc17 	ldw	r2,-16(fp)
  283d9c:	10c00a04 	addi	r3,r2,40
  283da0:	e0bffd17 	ldw	r2,-12(fp)
  283da4:	10800217 	ldw	r2,8(r2)
  283da8:	100f883a 	mov	r7,r2
  283dac:	e1bfff17 	ldw	r6,-4(fp)
  283db0:	e17ffe17 	ldw	r5,-8(fp)
  283db4:	1809883a 	mov	r4,r3
  283db8:	02843900 	call	284390 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  283dbc:	e037883a 	mov	sp,fp
  283dc0:	dfc00117 	ldw	ra,4(sp)
  283dc4:	df000017 	ldw	fp,0(sp)
  283dc8:	dec00204 	addi	sp,sp,8
  283dcc:	f800283a 	ret

00283dd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  283dd0:	defffa04 	addi	sp,sp,-24
  283dd4:	dfc00515 	stw	ra,20(sp)
  283dd8:	df000415 	stw	fp,16(sp)
  283ddc:	df000404 	addi	fp,sp,16
  283de0:	e13ffd15 	stw	r4,-12(fp)
  283de4:	e17ffe15 	stw	r5,-8(fp)
  283de8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  283dec:	e0bffd17 	ldw	r2,-12(fp)
  283df0:	10800017 	ldw	r2,0(r2)
  283df4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  283df8:	e0bffc17 	ldw	r2,-16(fp)
  283dfc:	10c00a04 	addi	r3,r2,40
  283e00:	e0bffd17 	ldw	r2,-12(fp)
  283e04:	10800217 	ldw	r2,8(r2)
  283e08:	100f883a 	mov	r7,r2
  283e0c:	e1bfff17 	ldw	r6,-4(fp)
  283e10:	e17ffe17 	ldw	r5,-8(fp)
  283e14:	1809883a 	mov	r4,r3
  283e18:	02845ac0 	call	2845ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  283e1c:	e037883a 	mov	sp,fp
  283e20:	dfc00117 	ldw	ra,4(sp)
  283e24:	df000017 	ldw	fp,0(sp)
  283e28:	dec00204 	addi	sp,sp,8
  283e2c:	f800283a 	ret

00283e30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  283e30:	defffc04 	addi	sp,sp,-16
  283e34:	dfc00315 	stw	ra,12(sp)
  283e38:	df000215 	stw	fp,8(sp)
  283e3c:	df000204 	addi	fp,sp,8
  283e40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  283e44:	e0bfff17 	ldw	r2,-4(fp)
  283e48:	10800017 	ldw	r2,0(r2)
  283e4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  283e50:	e0bffe17 	ldw	r2,-8(fp)
  283e54:	10c00a04 	addi	r3,r2,40
  283e58:	e0bfff17 	ldw	r2,-4(fp)
  283e5c:	10800217 	ldw	r2,8(r2)
  283e60:	100b883a 	mov	r5,r2
  283e64:	1809883a 	mov	r4,r3
  283e68:	02842380 	call	284238 <altera_avalon_jtag_uart_close>
}
  283e6c:	e037883a 	mov	sp,fp
  283e70:	dfc00117 	ldw	ra,4(sp)
  283e74:	df000017 	ldw	fp,0(sp)
  283e78:	dec00204 	addi	sp,sp,8
  283e7c:	f800283a 	ret

00283e80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  283e80:	defffa04 	addi	sp,sp,-24
  283e84:	dfc00515 	stw	ra,20(sp)
  283e88:	df000415 	stw	fp,16(sp)
  283e8c:	df000404 	addi	fp,sp,16
  283e90:	e13ffd15 	stw	r4,-12(fp)
  283e94:	e17ffe15 	stw	r5,-8(fp)
  283e98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  283e9c:	e0bffd17 	ldw	r2,-12(fp)
  283ea0:	10800017 	ldw	r2,0(r2)
  283ea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  283ea8:	e0bffc17 	ldw	r2,-16(fp)
  283eac:	10800a04 	addi	r2,r2,40
  283eb0:	e1bfff17 	ldw	r6,-4(fp)
  283eb4:	e17ffe17 	ldw	r5,-8(fp)
  283eb8:	1009883a 	mov	r4,r2
  283ebc:	02842a00 	call	2842a0 <altera_avalon_jtag_uart_ioctl>
}
  283ec0:	e037883a 	mov	sp,fp
  283ec4:	dfc00117 	ldw	ra,4(sp)
  283ec8:	df000017 	ldw	fp,0(sp)
  283ecc:	dec00204 	addi	sp,sp,8
  283ed0:	f800283a 	ret

00283ed4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  283ed4:	defffb04 	addi	sp,sp,-20
  283ed8:	dfc00415 	stw	ra,16(sp)
  283edc:	df000315 	stw	fp,12(sp)
  283ee0:	df000304 	addi	fp,sp,12
  283ee4:	e13ffd15 	stw	r4,-12(fp)
  283ee8:	e17ffe15 	stw	r5,-8(fp)
  283eec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  283ef0:	e0bffd17 	ldw	r2,-12(fp)
  283ef4:	00c00044 	movi	r3,1
  283ef8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  283efc:	e0bffd17 	ldw	r2,-12(fp)
  283f00:	10800017 	ldw	r2,0(r2)
  283f04:	10800104 	addi	r2,r2,4
  283f08:	1007883a 	mov	r3,r2
  283f0c:	e0bffd17 	ldw	r2,-12(fp)
  283f10:	10800817 	ldw	r2,32(r2)
  283f14:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  283f18:	e0bfff17 	ldw	r2,-4(fp)
  283f1c:	01800a34 	movhi	r6,40
  283f20:	318fe204 	addi	r6,r6,16264
  283f24:	e17ffd17 	ldw	r5,-12(fp)
  283f28:	1009883a 	mov	r4,r2
  283f2c:	0285cf40 	call	285cf4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  283f30:	e0bffd17 	ldw	r2,-12(fp)
  283f34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  283f38:	e0bffd17 	ldw	r2,-12(fp)
  283f3c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  283f40:	d0e6d217 	ldw	r3,-25784(gp)
  283f44:	e1fffd17 	ldw	r7,-12(fp)
  283f48:	01800a34 	movhi	r6,40
  283f4c:	31906604 	addi	r6,r6,16792
  283f50:	180b883a 	mov	r5,r3
  283f54:	1009883a 	mov	r4,r2
  283f58:	02856840 	call	285684 <alt_alarm_start>
  283f5c:	1000040e 	bge	r2,zero,283f70 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  283f60:	e0fffd17 	ldw	r3,-12(fp)
  283f64:	00a00034 	movhi	r2,32768
  283f68:	10bfffc4 	addi	r2,r2,-1
  283f6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  283f70:	0001883a 	nop
  283f74:	e037883a 	mov	sp,fp
  283f78:	dfc00117 	ldw	ra,4(sp)
  283f7c:	df000017 	ldw	fp,0(sp)
  283f80:	dec00204 	addi	sp,sp,8
  283f84:	f800283a 	ret

00283f88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  283f88:	defff704 	addi	sp,sp,-36
  283f8c:	df000815 	stw	fp,32(sp)
  283f90:	df000804 	addi	fp,sp,32
  283f94:	e13ffe15 	stw	r4,-8(fp)
  283f98:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  283f9c:	e0bffe17 	ldw	r2,-8(fp)
  283fa0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  283fa4:	e0bffa17 	ldw	r2,-24(fp)
  283fa8:	10800017 	ldw	r2,0(r2)
  283fac:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  283fb0:	e0bffb17 	ldw	r2,-20(fp)
  283fb4:	10800104 	addi	r2,r2,4
  283fb8:	10800037 	ldwio	r2,0(r2)
  283fbc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  283fc0:	e0bffc17 	ldw	r2,-16(fp)
  283fc4:	1080c00c 	andi	r2,r2,768
  283fc8:	10006d26 	beq	r2,zero,284180 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  283fcc:	e0bffc17 	ldw	r2,-16(fp)
  283fd0:	1080400c 	andi	r2,r2,256
  283fd4:	10003526 	beq	r2,zero,2840ac <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  283fd8:	00800074 	movhi	r2,1
  283fdc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  283fe0:	e0bffa17 	ldw	r2,-24(fp)
  283fe4:	10800a17 	ldw	r2,40(r2)
  283fe8:	10800044 	addi	r2,r2,1
  283fec:	1081ffcc 	andi	r2,r2,2047
  283ff0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  283ff4:	e0bffa17 	ldw	r2,-24(fp)
  283ff8:	10c00b17 	ldw	r3,44(r2)
  283ffc:	e0bffd17 	ldw	r2,-12(fp)
  284000:	18801526 	beq	r3,r2,284058 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  284004:	e0bffb17 	ldw	r2,-20(fp)
  284008:	10800037 	ldwio	r2,0(r2)
  28400c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  284010:	e0bff817 	ldw	r2,-32(fp)
  284014:	10a0000c 	andi	r2,r2,32768
  284018:	10001126 	beq	r2,zero,284060 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  28401c:	e0bffa17 	ldw	r2,-24(fp)
  284020:	10800a17 	ldw	r2,40(r2)
  284024:	e0fff817 	ldw	r3,-32(fp)
  284028:	1809883a 	mov	r4,r3
  28402c:	e0fffa17 	ldw	r3,-24(fp)
  284030:	1885883a 	add	r2,r3,r2
  284034:	10800e04 	addi	r2,r2,56
  284038:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  28403c:	e0bffa17 	ldw	r2,-24(fp)
  284040:	10800a17 	ldw	r2,40(r2)
  284044:	10800044 	addi	r2,r2,1
  284048:	10c1ffcc 	andi	r3,r2,2047
  28404c:	e0bffa17 	ldw	r2,-24(fp)
  284050:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  284054:	003fe206 	br	283fe0 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  284058:	0001883a 	nop
  28405c:	00000106 	br	284064 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  284060:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  284064:	e0bff817 	ldw	r2,-32(fp)
  284068:	10bfffec 	andhi	r2,r2,65535
  28406c:	10000f26 	beq	r2,zero,2840ac <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  284070:	e0bffa17 	ldw	r2,-24(fp)
  284074:	10c00817 	ldw	r3,32(r2)
  284078:	00bfff84 	movi	r2,-2
  28407c:	1886703a 	and	r3,r3,r2
  284080:	e0bffa17 	ldw	r2,-24(fp)
  284084:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  284088:	e0bffb17 	ldw	r2,-20(fp)
  28408c:	10800104 	addi	r2,r2,4
  284090:	1007883a 	mov	r3,r2
  284094:	e0bffa17 	ldw	r2,-24(fp)
  284098:	10800817 	ldw	r2,32(r2)
  28409c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  2840a0:	e0bffb17 	ldw	r2,-20(fp)
  2840a4:	10800104 	addi	r2,r2,4
  2840a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  2840ac:	e0bffc17 	ldw	r2,-16(fp)
  2840b0:	1080800c 	andi	r2,r2,512
  2840b4:	103fbe26 	beq	r2,zero,283fb0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  2840b8:	e0bffc17 	ldw	r2,-16(fp)
  2840bc:	1004d43a 	srli	r2,r2,16
  2840c0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  2840c4:	00001406 	br	284118 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  2840c8:	e0bffb17 	ldw	r2,-20(fp)
  2840cc:	e0fffa17 	ldw	r3,-24(fp)
  2840d0:	18c00d17 	ldw	r3,52(r3)
  2840d4:	e13ffa17 	ldw	r4,-24(fp)
  2840d8:	20c7883a 	add	r3,r4,r3
  2840dc:	18c20e04 	addi	r3,r3,2104
  2840e0:	18c00003 	ldbu	r3,0(r3)
  2840e4:	18c03fcc 	andi	r3,r3,255
  2840e8:	18c0201c 	xori	r3,r3,128
  2840ec:	18ffe004 	addi	r3,r3,-128
  2840f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2840f4:	e0bffa17 	ldw	r2,-24(fp)
  2840f8:	10800d17 	ldw	r2,52(r2)
  2840fc:	10800044 	addi	r2,r2,1
  284100:	10c1ffcc 	andi	r3,r2,2047
  284104:	e0bffa17 	ldw	r2,-24(fp)
  284108:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  28410c:	e0bff917 	ldw	r2,-28(fp)
  284110:	10bfffc4 	addi	r2,r2,-1
  284114:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  284118:	e0bff917 	ldw	r2,-28(fp)
  28411c:	10000526 	beq	r2,zero,284134 <altera_avalon_jtag_uart_irq+0x1ac>
  284120:	e0bffa17 	ldw	r2,-24(fp)
  284124:	10c00d17 	ldw	r3,52(r2)
  284128:	e0bffa17 	ldw	r2,-24(fp)
  28412c:	10800c17 	ldw	r2,48(r2)
  284130:	18bfe51e 	bne	r3,r2,2840c8 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  284134:	e0bff917 	ldw	r2,-28(fp)
  284138:	103f9d26 	beq	r2,zero,283fb0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  28413c:	e0bffa17 	ldw	r2,-24(fp)
  284140:	10c00817 	ldw	r3,32(r2)
  284144:	00bfff44 	movi	r2,-3
  284148:	1886703a 	and	r3,r3,r2
  28414c:	e0bffa17 	ldw	r2,-24(fp)
  284150:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  284154:	e0bffa17 	ldw	r2,-24(fp)
  284158:	10800017 	ldw	r2,0(r2)
  28415c:	10800104 	addi	r2,r2,4
  284160:	1007883a 	mov	r3,r2
  284164:	e0bffa17 	ldw	r2,-24(fp)
  284168:	10800817 	ldw	r2,32(r2)
  28416c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  284170:	e0bffb17 	ldw	r2,-20(fp)
  284174:	10800104 	addi	r2,r2,4
  284178:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  28417c:	003f8c06 	br	283fb0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  284180:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  284184:	0001883a 	nop
  284188:	e037883a 	mov	sp,fp
  28418c:	df000017 	ldw	fp,0(sp)
  284190:	dec00104 	addi	sp,sp,4
  284194:	f800283a 	ret

00284198 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  284198:	defff804 	addi	sp,sp,-32
  28419c:	df000715 	stw	fp,28(sp)
  2841a0:	df000704 	addi	fp,sp,28
  2841a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  2841a8:	e0bffb17 	ldw	r2,-20(fp)
  2841ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  2841b0:	e0bff917 	ldw	r2,-28(fp)
  2841b4:	10800017 	ldw	r2,0(r2)
  2841b8:	10800104 	addi	r2,r2,4
  2841bc:	10800037 	ldwio	r2,0(r2)
  2841c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  2841c4:	e0bffa17 	ldw	r2,-24(fp)
  2841c8:	1081000c 	andi	r2,r2,1024
  2841cc:	10000b26 	beq	r2,zero,2841fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  2841d0:	e0bff917 	ldw	r2,-28(fp)
  2841d4:	10800017 	ldw	r2,0(r2)
  2841d8:	10800104 	addi	r2,r2,4
  2841dc:	1007883a 	mov	r3,r2
  2841e0:	e0bff917 	ldw	r2,-28(fp)
  2841e4:	10800817 	ldw	r2,32(r2)
  2841e8:	10810014 	ori	r2,r2,1024
  2841ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  2841f0:	e0bff917 	ldw	r2,-28(fp)
  2841f4:	10000915 	stw	zero,36(r2)
  2841f8:	00000a06 	br	284224 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  2841fc:	e0bff917 	ldw	r2,-28(fp)
  284200:	10c00917 	ldw	r3,36(r2)
  284204:	00a00034 	movhi	r2,32768
  284208:	10bfff04 	addi	r2,r2,-4
  28420c:	10c00536 	bltu	r2,r3,284224 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  284210:	e0bff917 	ldw	r2,-28(fp)
  284214:	10800917 	ldw	r2,36(r2)
  284218:	10c00044 	addi	r3,r2,1
  28421c:	e0bff917 	ldw	r2,-28(fp)
  284220:	10c00915 	stw	r3,36(r2)
  284224:	d0a6d217 	ldw	r2,-25784(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  284228:	e037883a 	mov	sp,fp
  28422c:	df000017 	ldw	fp,0(sp)
  284230:	dec00104 	addi	sp,sp,4
  284234:	f800283a 	ret

00284238 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  284238:	defffd04 	addi	sp,sp,-12
  28423c:	df000215 	stw	fp,8(sp)
  284240:	df000204 	addi	fp,sp,8
  284244:	e13ffe15 	stw	r4,-8(fp)
  284248:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  28424c:	00000506 	br	284264 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  284250:	e0bfff17 	ldw	r2,-4(fp)
  284254:	1090000c 	andi	r2,r2,16384
  284258:	10000226 	beq	r2,zero,284264 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  28425c:	00bffd44 	movi	r2,-11
  284260:	00000b06 	br	284290 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  284264:	e0bffe17 	ldw	r2,-8(fp)
  284268:	10c00d17 	ldw	r3,52(r2)
  28426c:	e0bffe17 	ldw	r2,-8(fp)
  284270:	10800c17 	ldw	r2,48(r2)
  284274:	18800526 	beq	r3,r2,28428c <altera_avalon_jtag_uart_close+0x54>
  284278:	e0bffe17 	ldw	r2,-8(fp)
  28427c:	10c00917 	ldw	r3,36(r2)
  284280:	e0bffe17 	ldw	r2,-8(fp)
  284284:	10800117 	ldw	r2,4(r2)
  284288:	18bff136 	bltu	r3,r2,284250 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  28428c:	0005883a 	mov	r2,zero
}
  284290:	e037883a 	mov	sp,fp
  284294:	df000017 	ldw	fp,0(sp)
  284298:	dec00104 	addi	sp,sp,4
  28429c:	f800283a 	ret

002842a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  2842a0:	defffa04 	addi	sp,sp,-24
  2842a4:	df000515 	stw	fp,20(sp)
  2842a8:	df000504 	addi	fp,sp,20
  2842ac:	e13ffd15 	stw	r4,-12(fp)
  2842b0:	e17ffe15 	stw	r5,-8(fp)
  2842b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  2842b8:	00bff9c4 	movi	r2,-25
  2842bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  2842c0:	e0bffe17 	ldw	r2,-8(fp)
  2842c4:	10da8060 	cmpeqi	r3,r2,27137
  2842c8:	1800031e 	bne	r3,zero,2842d8 <altera_avalon_jtag_uart_ioctl+0x38>
  2842cc:	109a80a0 	cmpeqi	r2,r2,27138
  2842d0:	1000181e 	bne	r2,zero,284334 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  2842d4:	00002906 	br	28437c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  2842d8:	e0bffd17 	ldw	r2,-12(fp)
  2842dc:	10c00117 	ldw	r3,4(r2)
  2842e0:	00a00034 	movhi	r2,32768
  2842e4:	10bfffc4 	addi	r2,r2,-1
  2842e8:	18802126 	beq	r3,r2,284370 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  2842ec:	e0bfff17 	ldw	r2,-4(fp)
  2842f0:	10800017 	ldw	r2,0(r2)
  2842f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  2842f8:	e0bffc17 	ldw	r2,-16(fp)
  2842fc:	10800090 	cmplti	r2,r2,2
  284300:	1000061e 	bne	r2,zero,28431c <altera_avalon_jtag_uart_ioctl+0x7c>
  284304:	e0fffc17 	ldw	r3,-16(fp)
  284308:	00a00034 	movhi	r2,32768
  28430c:	10bfffc4 	addi	r2,r2,-1
  284310:	18800226 	beq	r3,r2,28431c <altera_avalon_jtag_uart_ioctl+0x7c>
  284314:	e0bffc17 	ldw	r2,-16(fp)
  284318:	00000206 	br	284324 <altera_avalon_jtag_uart_ioctl+0x84>
  28431c:	00a00034 	movhi	r2,32768
  284320:	10bfff84 	addi	r2,r2,-2
  284324:	e0fffd17 	ldw	r3,-12(fp)
  284328:	18800115 	stw	r2,4(r3)
      rc = 0;
  28432c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  284330:	00000f06 	br	284370 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  284334:	e0bffd17 	ldw	r2,-12(fp)
  284338:	10c00117 	ldw	r3,4(r2)
  28433c:	00a00034 	movhi	r2,32768
  284340:	10bfffc4 	addi	r2,r2,-1
  284344:	18800c26 	beq	r3,r2,284378 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  284348:	e0bffd17 	ldw	r2,-12(fp)
  28434c:	10c00917 	ldw	r3,36(r2)
  284350:	e0bffd17 	ldw	r2,-12(fp)
  284354:	10800117 	ldw	r2,4(r2)
  284358:	1885803a 	cmpltu	r2,r3,r2
  28435c:	10c03fcc 	andi	r3,r2,255
  284360:	e0bfff17 	ldw	r2,-4(fp)
  284364:	10c00015 	stw	r3,0(r2)
      rc = 0;
  284368:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  28436c:	00000206 	br	284378 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  284370:	0001883a 	nop
  284374:	00000106 	br	28437c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  284378:	0001883a 	nop

  default:
    break;
  }

  return rc;
  28437c:	e0bffb17 	ldw	r2,-20(fp)
}
  284380:	e037883a 	mov	sp,fp
  284384:	df000017 	ldw	fp,0(sp)
  284388:	dec00104 	addi	sp,sp,4
  28438c:	f800283a 	ret

00284390 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  284390:	defff304 	addi	sp,sp,-52
  284394:	dfc00c15 	stw	ra,48(sp)
  284398:	df000b15 	stw	fp,44(sp)
  28439c:	df000b04 	addi	fp,sp,44
  2843a0:	e13ffc15 	stw	r4,-16(fp)
  2843a4:	e17ffd15 	stw	r5,-12(fp)
  2843a8:	e1bffe15 	stw	r6,-8(fp)
  2843ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  2843b0:	e0bffd17 	ldw	r2,-12(fp)
  2843b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  2843b8:	00004706 	br	2844d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  2843bc:	e0bffc17 	ldw	r2,-16(fp)
  2843c0:	10800a17 	ldw	r2,40(r2)
  2843c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  2843c8:	e0bffc17 	ldw	r2,-16(fp)
  2843cc:	10800b17 	ldw	r2,44(r2)
  2843d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  2843d4:	e0fff717 	ldw	r3,-36(fp)
  2843d8:	e0bff817 	ldw	r2,-32(fp)
  2843dc:	18800536 	bltu	r3,r2,2843f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  2843e0:	e0fff717 	ldw	r3,-36(fp)
  2843e4:	e0bff817 	ldw	r2,-32(fp)
  2843e8:	1885c83a 	sub	r2,r3,r2
  2843ec:	e0bff615 	stw	r2,-40(fp)
  2843f0:	00000406 	br	284404 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  2843f4:	00c20004 	movi	r3,2048
  2843f8:	e0bff817 	ldw	r2,-32(fp)
  2843fc:	1885c83a 	sub	r2,r3,r2
  284400:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  284404:	e0bff617 	ldw	r2,-40(fp)
  284408:	10001e26 	beq	r2,zero,284484 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  28440c:	e0fffe17 	ldw	r3,-8(fp)
  284410:	e0bff617 	ldw	r2,-40(fp)
  284414:	1880022e 	bgeu	r3,r2,284420 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  284418:	e0bffe17 	ldw	r2,-8(fp)
  28441c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  284420:	e0bffc17 	ldw	r2,-16(fp)
  284424:	10c00e04 	addi	r3,r2,56
  284428:	e0bff817 	ldw	r2,-32(fp)
  28442c:	1885883a 	add	r2,r3,r2
  284430:	e1bff617 	ldw	r6,-40(fp)
  284434:	100b883a 	mov	r5,r2
  284438:	e13ff517 	ldw	r4,-44(fp)
  28443c:	028198c0 	call	28198c <memcpy>
      ptr   += n;
  284440:	e0fff517 	ldw	r3,-44(fp)
  284444:	e0bff617 	ldw	r2,-40(fp)
  284448:	1885883a 	add	r2,r3,r2
  28444c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  284450:	e0fffe17 	ldw	r3,-8(fp)
  284454:	e0bff617 	ldw	r2,-40(fp)
  284458:	1885c83a 	sub	r2,r3,r2
  28445c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  284460:	e0fff817 	ldw	r3,-32(fp)
  284464:	e0bff617 	ldw	r2,-40(fp)
  284468:	1885883a 	add	r2,r3,r2
  28446c:	10c1ffcc 	andi	r3,r2,2047
  284470:	e0bffc17 	ldw	r2,-16(fp)
  284474:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  284478:	e0bffe17 	ldw	r2,-8(fp)
  28447c:	00bfcf16 	blt	zero,r2,2843bc <altera_avalon_jtag_uart_read+0x2c>
  284480:	00000106 	br	284488 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  284484:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  284488:	e0fff517 	ldw	r3,-44(fp)
  28448c:	e0bffd17 	ldw	r2,-12(fp)
  284490:	1880141e 	bne	r3,r2,2844e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  284494:	e0bfff17 	ldw	r2,-4(fp)
  284498:	1090000c 	andi	r2,r2,16384
  28449c:	1000131e 	bne	r2,zero,2844ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  2844a0:	0001883a 	nop
  2844a4:	e0bffc17 	ldw	r2,-16(fp)
  2844a8:	10c00a17 	ldw	r3,40(r2)
  2844ac:	e0bff717 	ldw	r2,-36(fp)
  2844b0:	1880051e 	bne	r3,r2,2844c8 <altera_avalon_jtag_uart_read+0x138>
  2844b4:	e0bffc17 	ldw	r2,-16(fp)
  2844b8:	10c00917 	ldw	r3,36(r2)
  2844bc:	e0bffc17 	ldw	r2,-16(fp)
  2844c0:	10800117 	ldw	r2,4(r2)
  2844c4:	18bff736 	bltu	r3,r2,2844a4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  2844c8:	e0bffc17 	ldw	r2,-16(fp)
  2844cc:	10c00a17 	ldw	r3,40(r2)
  2844d0:	e0bff717 	ldw	r2,-36(fp)
  2844d4:	18800726 	beq	r3,r2,2844f4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  2844d8:	e0bffe17 	ldw	r2,-8(fp)
  2844dc:	00bfb716 	blt	zero,r2,2843bc <altera_avalon_jtag_uart_read+0x2c>
  2844e0:	00000506 	br	2844f8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  2844e4:	0001883a 	nop
  2844e8:	00000306 	br	2844f8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  2844ec:	0001883a 	nop
  2844f0:	00000106 	br	2844f8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  2844f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  2844f8:	e0fff517 	ldw	r3,-44(fp)
  2844fc:	e0bffd17 	ldw	r2,-12(fp)
  284500:	18801826 	beq	r3,r2,284564 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  284504:	0005303a 	rdctl	r2,status
  284508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  28450c:	e0fffb17 	ldw	r3,-20(fp)
  284510:	00bfff84 	movi	r2,-2
  284514:	1884703a 	and	r2,r3,r2
  284518:	1001703a 	wrctl	status,r2
  
  return context;
  28451c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  284520:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  284524:	e0bffc17 	ldw	r2,-16(fp)
  284528:	10800817 	ldw	r2,32(r2)
  28452c:	10c00054 	ori	r3,r2,1
  284530:	e0bffc17 	ldw	r2,-16(fp)
  284534:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  284538:	e0bffc17 	ldw	r2,-16(fp)
  28453c:	10800017 	ldw	r2,0(r2)
  284540:	10800104 	addi	r2,r2,4
  284544:	1007883a 	mov	r3,r2
  284548:	e0bffc17 	ldw	r2,-16(fp)
  28454c:	10800817 	ldw	r2,32(r2)
  284550:	18800035 	stwio	r2,0(r3)
  284554:	e0bffa17 	ldw	r2,-24(fp)
  284558:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  28455c:	e0bff917 	ldw	r2,-28(fp)
  284560:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  284564:	e0fff517 	ldw	r3,-44(fp)
  284568:	e0bffd17 	ldw	r2,-12(fp)
  28456c:	18800426 	beq	r3,r2,284580 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  284570:	e0fff517 	ldw	r3,-44(fp)
  284574:	e0bffd17 	ldw	r2,-12(fp)
  284578:	1885c83a 	sub	r2,r3,r2
  28457c:	00000606 	br	284598 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  284580:	e0bfff17 	ldw	r2,-4(fp)
  284584:	1090000c 	andi	r2,r2,16384
  284588:	10000226 	beq	r2,zero,284594 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  28458c:	00bffd44 	movi	r2,-11
  284590:	00000106 	br	284598 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  284594:	00bffec4 	movi	r2,-5
}
  284598:	e037883a 	mov	sp,fp
  28459c:	dfc00117 	ldw	ra,4(sp)
  2845a0:	df000017 	ldw	fp,0(sp)
  2845a4:	dec00204 	addi	sp,sp,8
  2845a8:	f800283a 	ret

002845ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  2845ac:	defff304 	addi	sp,sp,-52
  2845b0:	dfc00c15 	stw	ra,48(sp)
  2845b4:	df000b15 	stw	fp,44(sp)
  2845b8:	df000b04 	addi	fp,sp,44
  2845bc:	e13ffc15 	stw	r4,-16(fp)
  2845c0:	e17ffd15 	stw	r5,-12(fp)
  2845c4:	e1bffe15 	stw	r6,-8(fp)
  2845c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  2845cc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  2845d0:	e0bffd17 	ldw	r2,-12(fp)
  2845d4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  2845d8:	00003706 	br	2846b8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  2845dc:	e0bffc17 	ldw	r2,-16(fp)
  2845e0:	10800c17 	ldw	r2,48(r2)
  2845e4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  2845e8:	e0bffc17 	ldw	r2,-16(fp)
  2845ec:	10800d17 	ldw	r2,52(r2)
  2845f0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  2845f4:	e0fff917 	ldw	r3,-28(fp)
  2845f8:	e0bff517 	ldw	r2,-44(fp)
  2845fc:	1880062e 	bgeu	r3,r2,284618 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  284600:	e0fff517 	ldw	r3,-44(fp)
  284604:	e0bff917 	ldw	r2,-28(fp)
  284608:	1885c83a 	sub	r2,r3,r2
  28460c:	10bfffc4 	addi	r2,r2,-1
  284610:	e0bff615 	stw	r2,-40(fp)
  284614:	00000b06 	br	284644 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  284618:	e0bff517 	ldw	r2,-44(fp)
  28461c:	10000526 	beq	r2,zero,284634 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  284620:	00c20004 	movi	r3,2048
  284624:	e0bff917 	ldw	r2,-28(fp)
  284628:	1885c83a 	sub	r2,r3,r2
  28462c:	e0bff615 	stw	r2,-40(fp)
  284630:	00000406 	br	284644 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  284634:	00c1ffc4 	movi	r3,2047
  284638:	e0bff917 	ldw	r2,-28(fp)
  28463c:	1885c83a 	sub	r2,r3,r2
  284640:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  284644:	e0bff617 	ldw	r2,-40(fp)
  284648:	10001e26 	beq	r2,zero,2846c4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  28464c:	e0fffe17 	ldw	r3,-8(fp)
  284650:	e0bff617 	ldw	r2,-40(fp)
  284654:	1880022e 	bgeu	r3,r2,284660 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  284658:	e0bffe17 	ldw	r2,-8(fp)
  28465c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  284660:	e0bffc17 	ldw	r2,-16(fp)
  284664:	10c20e04 	addi	r3,r2,2104
  284668:	e0bff917 	ldw	r2,-28(fp)
  28466c:	1885883a 	add	r2,r3,r2
  284670:	e1bff617 	ldw	r6,-40(fp)
  284674:	e17ffd17 	ldw	r5,-12(fp)
  284678:	1009883a 	mov	r4,r2
  28467c:	028198c0 	call	28198c <memcpy>
      ptr   += n;
  284680:	e0fffd17 	ldw	r3,-12(fp)
  284684:	e0bff617 	ldw	r2,-40(fp)
  284688:	1885883a 	add	r2,r3,r2
  28468c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  284690:	e0fffe17 	ldw	r3,-8(fp)
  284694:	e0bff617 	ldw	r2,-40(fp)
  284698:	1885c83a 	sub	r2,r3,r2
  28469c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2846a0:	e0fff917 	ldw	r3,-28(fp)
  2846a4:	e0bff617 	ldw	r2,-40(fp)
  2846a8:	1885883a 	add	r2,r3,r2
  2846ac:	10c1ffcc 	andi	r3,r2,2047
  2846b0:	e0bffc17 	ldw	r2,-16(fp)
  2846b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  2846b8:	e0bffe17 	ldw	r2,-8(fp)
  2846bc:	00bfc716 	blt	zero,r2,2845dc <altera_avalon_jtag_uart_write+0x30>
  2846c0:	00000106 	br	2846c8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  2846c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2846c8:	0005303a 	rdctl	r2,status
  2846cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2846d0:	e0fffb17 	ldw	r3,-20(fp)
  2846d4:	00bfff84 	movi	r2,-2
  2846d8:	1884703a 	and	r2,r3,r2
  2846dc:	1001703a 	wrctl	status,r2
  
  return context;
  2846e0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  2846e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  2846e8:	e0bffc17 	ldw	r2,-16(fp)
  2846ec:	10800817 	ldw	r2,32(r2)
  2846f0:	10c00094 	ori	r3,r2,2
  2846f4:	e0bffc17 	ldw	r2,-16(fp)
  2846f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  2846fc:	e0bffc17 	ldw	r2,-16(fp)
  284700:	10800017 	ldw	r2,0(r2)
  284704:	10800104 	addi	r2,r2,4
  284708:	1007883a 	mov	r3,r2
  28470c:	e0bffc17 	ldw	r2,-16(fp)
  284710:	10800817 	ldw	r2,32(r2)
  284714:	18800035 	stwio	r2,0(r3)
  284718:	e0bffa17 	ldw	r2,-24(fp)
  28471c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  284720:	e0bff817 	ldw	r2,-32(fp)
  284724:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  284728:	e0bffe17 	ldw	r2,-8(fp)
  28472c:	0080100e 	bge	zero,r2,284770 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  284730:	e0bfff17 	ldw	r2,-4(fp)
  284734:	1090000c 	andi	r2,r2,16384
  284738:	1000101e 	bne	r2,zero,28477c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  28473c:	0001883a 	nop
  284740:	e0bffc17 	ldw	r2,-16(fp)
  284744:	10c00d17 	ldw	r3,52(r2)
  284748:	e0bff517 	ldw	r2,-44(fp)
  28474c:	1880051e 	bne	r3,r2,284764 <altera_avalon_jtag_uart_write+0x1b8>
  284750:	e0bffc17 	ldw	r2,-16(fp)
  284754:	10c00917 	ldw	r3,36(r2)
  284758:	e0bffc17 	ldw	r2,-16(fp)
  28475c:	10800117 	ldw	r2,4(r2)
  284760:	18bff736 	bltu	r3,r2,284740 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  284764:	e0bffc17 	ldw	r2,-16(fp)
  284768:	10800917 	ldw	r2,36(r2)
  28476c:	1000051e 	bne	r2,zero,284784 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  284770:	e0bffe17 	ldw	r2,-8(fp)
  284774:	00bfd016 	blt	zero,r2,2846b8 <altera_avalon_jtag_uart_write+0x10c>
  284778:	00000306 	br	284788 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  28477c:	0001883a 	nop
  284780:	00000106 	br	284788 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  284784:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  284788:	e0fffd17 	ldw	r3,-12(fp)
  28478c:	e0bff717 	ldw	r2,-36(fp)
  284790:	18800426 	beq	r3,r2,2847a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  284794:	e0fffd17 	ldw	r3,-12(fp)
  284798:	e0bff717 	ldw	r2,-36(fp)
  28479c:	1885c83a 	sub	r2,r3,r2
  2847a0:	00000606 	br	2847bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  2847a4:	e0bfff17 	ldw	r2,-4(fp)
  2847a8:	1090000c 	andi	r2,r2,16384
  2847ac:	10000226 	beq	r2,zero,2847b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  2847b0:	00bffd44 	movi	r2,-11
  2847b4:	00000106 	br	2847bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  2847b8:	00bffec4 	movi	r2,-5
}
  2847bc:	e037883a 	mov	sp,fp
  2847c0:	dfc00117 	ldw	ra,4(sp)
  2847c4:	df000017 	ldw	fp,0(sp)
  2847c8:	dec00204 	addi	sp,sp,8
  2847cc:	f800283a 	ret

002847d0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  2847d0:	defffc04 	addi	sp,sp,-16
  2847d4:	dfc00315 	stw	ra,12(sp)
  2847d8:	df000215 	stw	fp,8(sp)
  2847dc:	df000204 	addi	fp,sp,8
  2847e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  2847e4:	d1600604 	addi	r5,gp,-32744
  2847e8:	e13fff17 	ldw	r4,-4(fp)
  2847ec:	0285af00 	call	285af0 <alt_find_dev>
  2847f0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  2847f4:	e0bffe17 	ldw	r2,-8(fp)
}
  2847f8:	e037883a 	mov	sp,fp
  2847fc:	dfc00117 	ldw	ra,4(sp)
  284800:	df000017 	ldw	fp,0(sp)
  284804:	dec00204 	addi	sp,sp,8
  284808:	f800283a 	ret

0028480c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  28480c:	defffa04 	addi	sp,sp,-24
  284810:	df000515 	stw	fp,20(sp)
  284814:	df000504 	addi	fp,sp,20
  284818:	e13ffc15 	stw	r4,-16(fp)
  28481c:	e17ffd15 	stw	r5,-12(fp)
  284820:	e1bffe15 	stw	r6,-8(fp)
  284824:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  284828:	e0bffc17 	ldw	r2,-16(fp)
  28482c:	10800f17 	ldw	r2,60(r2)
  284830:	e0fffe17 	ldw	r3,-8(fp)
  284834:	1880042e 	bgeu	r3,r2,284848 <alt_up_pixel_buffer_dma_draw+0x3c>
  284838:	e0bffc17 	ldw	r2,-16(fp)
  28483c:	10801017 	ldw	r2,64(r2)
  284840:	e0ffff17 	ldw	r3,-4(fp)
  284844:	18800236 	bltu	r3,r2,284850 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
  284848:	00bfffc4 	movi	r2,-1
  28484c:	00005006 	br	284990 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
  284850:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  284854:	e0bffc17 	ldw	r2,-16(fp)
  284858:	10800d17 	ldw	r2,52(r2)
  28485c:	1000151e 	bne	r2,zero,2848b4 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  284860:	e0bffc17 	ldw	r2,-16(fp)
  284864:	10c01217 	ldw	r3,72(r2)
  284868:	e0bffe17 	ldw	r2,-8(fp)
  28486c:	1886703a 	and	r3,r3,r2
  284870:	e0bffc17 	ldw	r2,-16(fp)
  284874:	10801117 	ldw	r2,68(r2)
  284878:	1884983a 	sll	r2,r3,r2
  28487c:	e0fffb17 	ldw	r3,-20(fp)
  284880:	1885883a 	add	r2,r3,r2
  284884:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  284888:	e0bffc17 	ldw	r2,-16(fp)
  28488c:	10c01417 	ldw	r3,80(r2)
  284890:	e0bfff17 	ldw	r2,-4(fp)
  284894:	1886703a 	and	r3,r3,r2
  284898:	e0bffc17 	ldw	r2,-16(fp)
  28489c:	10801317 	ldw	r2,76(r2)
  2848a0:	1884983a 	sll	r2,r3,r2
  2848a4:	e0fffb17 	ldw	r3,-20(fp)
  2848a8:	1885883a 	add	r2,r3,r2
  2848ac:	e0bffb15 	stw	r2,-20(fp)
  2848b0:	00001706 	br	284910 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  2848b4:	e0bffc17 	ldw	r2,-16(fp)
  2848b8:	10c01217 	ldw	r3,72(r2)
  2848bc:	e0bffe17 	ldw	r2,-8(fp)
  2848c0:	1886703a 	and	r3,r3,r2
  2848c4:	e0bffc17 	ldw	r2,-16(fp)
  2848c8:	10801117 	ldw	r2,68(r2)
  2848cc:	1884983a 	sll	r2,r3,r2
  2848d0:	e0fffb17 	ldw	r3,-20(fp)
  2848d4:	1885883a 	add	r2,r3,r2
  2848d8:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  2848dc:	e0bffc17 	ldw	r2,-16(fp)
  2848e0:	10c01417 	ldw	r3,80(r2)
  2848e4:	e0bfff17 	ldw	r2,-4(fp)
  2848e8:	1886703a 	and	r3,r3,r2
  2848ec:	e0bffc17 	ldw	r2,-16(fp)
  2848f0:	10800f17 	ldw	r2,60(r2)
  2848f4:	1887383a 	mul	r3,r3,r2
  2848f8:	e0bffc17 	ldw	r2,-16(fp)
  2848fc:	10801117 	ldw	r2,68(r2)
  284900:	1884983a 	sll	r2,r3,r2
  284904:	e0fffb17 	ldw	r3,-20(fp)
  284908:	1885883a 	add	r2,r3,r2
  28490c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  284910:	e0bffc17 	ldw	r2,-16(fp)
  284914:	10800e17 	ldw	r2,56(r2)
  284918:	10800058 	cmpnei	r2,r2,1
  28491c:	1000081e 	bne	r2,zero,284940 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  284920:	e0bffc17 	ldw	r2,-16(fp)
  284924:	10c00c17 	ldw	r3,48(r2)
  284928:	e0bffb17 	ldw	r2,-20(fp)
  28492c:	1885883a 	add	r2,r3,r2
  284930:	1007883a 	mov	r3,r2
  284934:	e0bffd17 	ldw	r2,-12(fp)
  284938:	18800025 	stbio	r2,0(r3)
  28493c:	00001306 	br	28498c <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  284940:	e0bffc17 	ldw	r2,-16(fp)
  284944:	10800e17 	ldw	r2,56(r2)
  284948:	10800098 	cmpnei	r2,r2,2
  28494c:	1000081e 	bne	r2,zero,284970 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  284950:	e0bffc17 	ldw	r2,-16(fp)
  284954:	10c00c17 	ldw	r3,48(r2)
  284958:	e0bffb17 	ldw	r2,-20(fp)
  28495c:	1885883a 	add	r2,r3,r2
  284960:	1007883a 	mov	r3,r2
  284964:	e0bffd17 	ldw	r2,-12(fp)
  284968:	1880002d 	sthio	r2,0(r3)
  28496c:	00000706 	br	28498c <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  284970:	e0bffc17 	ldw	r2,-16(fp)
  284974:	10c00c17 	ldw	r3,48(r2)
  284978:	e0bffb17 	ldw	r2,-20(fp)
  28497c:	1885883a 	add	r2,r3,r2
  284980:	1007883a 	mov	r3,r2
  284984:	e0bffd17 	ldw	r2,-12(fp)
  284988:	18800035 	stwio	r2,0(r3)
	}

	return 0;
  28498c:	0005883a 	mov	r2,zero
}
  284990:	e037883a 	mov	sp,fp
  284994:	df000017 	ldw	fp,0(sp)
  284998:	dec00104 	addi	sp,sp,4
  28499c:	f800283a 	ret

002849a0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  2849a0:	defffd04 	addi	sp,sp,-12
  2849a4:	df000215 	stw	fp,8(sp)
  2849a8:	df000204 	addi	fp,sp,8
  2849ac:	e13ffe15 	stw	r4,-8(fp)
  2849b0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  2849b4:	e0bffe17 	ldw	r2,-8(fp)
  2849b8:	10800a17 	ldw	r2,40(r2)
  2849bc:	10800104 	addi	r2,r2,4
  2849c0:	1007883a 	mov	r3,r2
  2849c4:	e0bfff17 	ldw	r2,-4(fp)
  2849c8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  2849cc:	e0bffe17 	ldw	r2,-8(fp)
  2849d0:	10800a17 	ldw	r2,40(r2)
  2849d4:	10800104 	addi	r2,r2,4
  2849d8:	10800037 	ldwio	r2,0(r2)
  2849dc:	1007883a 	mov	r3,r2
  2849e0:	e0bffe17 	ldw	r2,-8(fp)
  2849e4:	10c00c15 	stw	r3,48(r2)
	return 0;
  2849e8:	0005883a 	mov	r2,zero
}
  2849ec:	e037883a 	mov	sp,fp
  2849f0:	df000017 	ldw	fp,0(sp)
  2849f4:	dec00104 	addi	sp,sp,4
  2849f8:	f800283a 	ret

002849fc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  2849fc:	defffd04 	addi	sp,sp,-12
  284a00:	df000215 	stw	fp,8(sp)
  284a04:	dc000115 	stw	r16,4(sp)
  284a08:	df000204 	addi	fp,sp,8
  284a0c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  284a10:	e0bffe17 	ldw	r2,-8(fp)
  284a14:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  284a18:	e0bffe17 	ldw	r2,-8(fp)
  284a1c:	10800a17 	ldw	r2,40(r2)
  284a20:	1007883a 	mov	r3,r2
  284a24:	00800044 	movi	r2,1
  284a28:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  284a2c:	e0bffe17 	ldw	r2,-8(fp)
  284a30:	10c00b17 	ldw	r3,44(r2)
  284a34:	e0bffe17 	ldw	r2,-8(fp)
  284a38:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  284a3c:	e0bffe17 	ldw	r2,-8(fp)
  284a40:	14000b15 	stw	r16,44(r2)
	return 0;
  284a44:	0005883a 	mov	r2,zero
}
  284a48:	e6ffff04 	addi	sp,fp,-4
  284a4c:	df000117 	ldw	fp,4(sp)
  284a50:	dc000017 	ldw	r16,0(sp)
  284a54:	dec00204 	addi	sp,sp,8
  284a58:	f800283a 	ret

00284a5c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  284a5c:	defffe04 	addi	sp,sp,-8
  284a60:	df000115 	stw	fp,4(sp)
  284a64:	df000104 	addi	fp,sp,4
  284a68:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  284a6c:	e0bfff17 	ldw	r2,-4(fp)
  284a70:	10800a17 	ldw	r2,40(r2)
  284a74:	10800304 	addi	r2,r2,12
  284a78:	10800037 	ldwio	r2,0(r2)
  284a7c:	1080004c 	andi	r2,r2,1
}
  284a80:	e037883a 	mov	sp,fp
  284a84:	df000017 	ldw	fp,0(sp)
  284a88:	dec00104 	addi	sp,sp,4
  284a8c:	f800283a 	ret

00284a90 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  284a90:	defff704 	addi	sp,sp,-36
  284a94:	df000815 	stw	fp,32(sp)
  284a98:	dd400715 	stw	r21,28(sp)
  284a9c:	dd000615 	stw	r20,24(sp)
  284aa0:	dcc00515 	stw	r19,20(sp)
  284aa4:	dc800415 	stw	r18,16(sp)
  284aa8:	dc400315 	stw	r17,12(sp)
  284aac:	dc000215 	stw	r16,8(sp)
  284ab0:	df000804 	addi	fp,sp,32
  284ab4:	e13ff815 	stw	r4,-32(fp)
  284ab8:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  284abc:	e0bff917 	ldw	r2,-28(fp)
  284ac0:	10800058 	cmpnei	r2,r2,1
  284ac4:	1000031e 	bne	r2,zero,284ad4 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
  284ac8:	e0bff817 	ldw	r2,-32(fp)
  284acc:	14400c17 	ldw	r17,48(r2)
  284ad0:	00000206 	br	284adc <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
  284ad4:	e0bff817 	ldw	r2,-32(fp)
  284ad8:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
  284adc:	e0bff817 	ldw	r2,-32(fp)
  284ae0:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  284ae4:	e0bff817 	ldw	r2,-32(fp)
  284ae8:	10800e17 	ldw	r2,56(r2)
  284aec:	10800098 	cmpnei	r2,r2,2
  284af0:	1000031e 	bne	r2,zero,284b00 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
  284af4:	8405883a 	add	r2,r16,r16
  284af8:	1021883a 	mov	r16,r2
  284afc:	00000306 	br	284b0c <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
  284b00:	8405883a 	add	r2,r16,r16
  284b04:	1085883a 	add	r2,r2,r2
  284b08:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
  284b0c:	e0bff817 	ldw	r2,-32(fp)
  284b10:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  284b14:	e0bff817 	ldw	r2,-32(fp)
  284b18:	10800d17 	ldw	r2,52(r2)
  284b1c:	1000111e 	bne	r2,zero,284b64 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  284b20:	e0bff817 	ldw	r2,-32(fp)
  284b24:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
  284b28:	0029883a 	mov	r20,zero
  284b2c:	00000b06 	br	284b5c <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
  284b30:	0027883a 	mov	r19,zero
  284b34:	00000406 	br	284b48 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
  284b38:	9c45883a 	add	r2,r19,r17
  284b3c:	0007883a 	mov	r3,zero
  284b40:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  284b44:	9cc00104 	addi	r19,r19,4
  284b48:	9c3ffb36 	bltu	r19,r16,284b38 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  284b4c:	00800044 	movi	r2,1
  284b50:	1544983a 	sll	r2,r2,r21
  284b54:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  284b58:	a5000044 	addi	r20,r20,1
  284b5c:	a4bff436 	bltu	r20,r18,284b30 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  284b60:	00000a06 	br	284b8c <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  284b64:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
  284b68:	0021883a 	mov	r16,zero
  284b6c:	00000506 	br	284b84 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
  284b70:	8005883a 	mov	r2,r16
  284b74:	1445883a 	add	r2,r2,r17
  284b78:	0007883a 	mov	r3,zero
  284b7c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  284b80:	84000104 	addi	r16,r16,4
  284b84:	8005883a 	mov	r2,r16
  284b88:	14bff936 	bltu	r2,r18,284b70 <alt_up_pixel_buffer_dma_clear_screen+0xe0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  284b8c:	0001883a 	nop
  284b90:	e6fffa04 	addi	sp,fp,-24
  284b94:	df000617 	ldw	fp,24(sp)
  284b98:	dd400517 	ldw	r21,20(sp)
  284b9c:	dd000417 	ldw	r20,16(sp)
  284ba0:	dcc00317 	ldw	r19,12(sp)
  284ba4:	dc800217 	ldw	r18,8(sp)
  284ba8:	dc400117 	ldw	r17,4(sp)
  284bac:	dc000017 	ldw	r16,0(sp)
  284bb0:	dec00704 	addi	sp,sp,28
  284bb4:	f800283a 	ret

00284bb8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  284bb8:	defff304 	addi	sp,sp,-52
  284bbc:	df000c15 	stw	fp,48(sp)
  284bc0:	ddc00b15 	stw	r23,44(sp)
  284bc4:	dd800a15 	stw	r22,40(sp)
  284bc8:	dd400915 	stw	r21,36(sp)
  284bcc:	dd000815 	stw	r20,32(sp)
  284bd0:	dcc00715 	stw	r19,28(sp)
  284bd4:	dc800615 	stw	r18,24(sp)
  284bd8:	dc400515 	stw	r17,20(sp)
  284bdc:	dc000415 	stw	r16,16(sp)
  284be0:	df000c04 	addi	fp,sp,48
  284be4:	e13ff415 	stw	r4,-48(fp)
  284be8:	e17ff515 	stw	r5,-44(fp)
  284bec:	e1bff615 	stw	r6,-40(fp)
  284bf0:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  284bf4:	e0bff417 	ldw	r2,-48(fp)
  284bf8:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  284bfc:	e0bff417 	ldw	r2,-48(fp)
  284c00:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
  284c04:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
  284c08:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
  284c0c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
  284c10:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
  284c14:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  284c18:	a580032e 	bgeu	r20,r22,284c28 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
  284c1c:	b02b883a 	mov	r21,r22
		l_x = r_x;
  284c20:	a02d883a 	mov	r22,r20
		r_x = temp;
  284c24:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
  284c28:	9c40032e 	bgeu	r19,r17,284c38 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
  284c2c:	882b883a 	mov	r21,r17
		t_y = b_y;
  284c30:	9823883a 	mov	r17,r19
		b_y = temp;
  284c34:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  284c38:	b480892e 	bgeu	r22,r18,284e60 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
  284c3c:	8c00882e 	bgeu	r17,r16,284e60 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  284c40:	a4800136 	bltu	r20,r18,284c48 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
  284c44:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  284c48:	9c000136 	bltu	r19,r16,284c50 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
  284c4c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  284c50:	e0800317 	ldw	r2,12(fp)
  284c54:	10800058 	cmpnei	r2,r2,1
  284c58:	1000031e 	bne	r2,zero,284c68 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
  284c5c:	e0bff417 	ldw	r2,-48(fp)
  284c60:	14000c17 	ldw	r16,48(r2)
  284c64:	00000206 	br	284c70 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
  284c68:	e0bff417 	ldw	r2,-48(fp)
  284c6c:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  284c70:	e0bff417 	ldw	r2,-48(fp)
  284c74:	10800d17 	ldw	r2,52(r2)
  284c78:	10003c1e 	bne	r2,zero,284d6c <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  284c7c:	e0bff417 	ldw	r2,-48(fp)
  284c80:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
  284c84:	8d44983a 	sll	r2,r17,r21
  284c88:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  284c8c:	e0bff417 	ldw	r2,-48(fp)
  284c90:	10800e17 	ldw	r2,56(r2)
  284c94:	10800058 	cmpnei	r2,r2,1
  284c98:	10000f1e 	bne	r2,zero,284cd8 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
  284c9c:	8825883a 	mov	r18,r17
  284ca0:	00000b06 	br	284cd0 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
  284ca4:	b023883a 	mov	r17,r22
  284ca8:	00000406 	br	284cbc <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
  284cac:	8c05883a 	add	r2,r17,r16
  284cb0:	b807883a 	mov	r3,r23
  284cb4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  284cb8:	8c400044 	addi	r17,r17,1
  284cbc:	a47ffb2e 	bgeu	r20,r17,284cac <alt_up_pixel_buffer_dma_draw_box+0xf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  284cc0:	00800044 	movi	r2,1
  284cc4:	1544983a 	sll	r2,r2,r21
  284cc8:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  284ccc:	94800044 	addi	r18,r18,1
  284cd0:	9cbff42e 	bgeu	r19,r18,284ca4 <alt_up_pixel_buffer_dma_draw_box+0xec>
  284cd4:	00006306 	br	284e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  284cd8:	e0bff417 	ldw	r2,-48(fp)
  284cdc:	10800e17 	ldw	r2,56(r2)
  284ce0:	10800098 	cmpnei	r2,r2,2
  284ce4:	1000101e 	bne	r2,zero,284d28 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
  284ce8:	8825883a 	mov	r18,r17
  284cec:	00000c06 	br	284d20 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
  284cf0:	b023883a 	mov	r17,r22
  284cf4:	00000506 	br	284d0c <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  284cf8:	8c45883a 	add	r2,r17,r17
  284cfc:	1405883a 	add	r2,r2,r16
  284d00:	b807883a 	mov	r3,r23
  284d04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  284d08:	8c400044 	addi	r17,r17,1
  284d0c:	a47ffa2e 	bgeu	r20,r17,284cf8 <alt_up_pixel_buffer_dma_draw_box+0x140>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  284d10:	00800044 	movi	r2,1
  284d14:	1544983a 	sll	r2,r2,r21
  284d18:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  284d1c:	94800044 	addi	r18,r18,1
  284d20:	9cbff32e 	bgeu	r19,r18,284cf0 <alt_up_pixel_buffer_dma_draw_box+0x138>
  284d24:	00004f06 	br	284e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  284d28:	8825883a 	mov	r18,r17
  284d2c:	00000d06 	br	284d64 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
  284d30:	b023883a 	mov	r17,r22
  284d34:	00000606 	br	284d50 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  284d38:	8c45883a 	add	r2,r17,r17
  284d3c:	1085883a 	add	r2,r2,r2
  284d40:	1405883a 	add	r2,r2,r16
  284d44:	b807883a 	mov	r3,r23
  284d48:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  284d4c:	8c400044 	addi	r17,r17,1
  284d50:	a47ff92e 	bgeu	r20,r17,284d38 <alt_up_pixel_buffer_dma_draw_box+0x180>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  284d54:	00800044 	movi	r2,1
  284d58:	1544983a 	sll	r2,r2,r21
  284d5c:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  284d60:	94800044 	addi	r18,r18,1
  284d64:	9cbff22e 	bgeu	r19,r18,284d30 <alt_up_pixel_buffer_dma_draw_box+0x178>
  284d68:	00003e06 	br	284e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  284d6c:	e0bff417 	ldw	r2,-48(fp)
  284d70:	10800e17 	ldw	r2,56(r2)
  284d74:	10800058 	cmpnei	r2,r2,1
  284d78:	10000f1e 	bne	r2,zero,284db8 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
  284d7c:	8c85383a 	mul	r2,r17,r18
  284d80:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  284d84:	882b883a 	mov	r21,r17
  284d88:	00000906 	br	284db0 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
  284d8c:	b023883a 	mov	r17,r22
  284d90:	00000406 	br	284da4 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
  284d94:	8c05883a 	add	r2,r17,r16
  284d98:	b807883a 	mov	r3,r23
  284d9c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  284da0:	8c400044 	addi	r17,r17,1
  284da4:	a47ffb2e 	bgeu	r20,r17,284d94 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  284da8:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  284dac:	ad400044 	addi	r21,r21,1
  284db0:	9d7ff62e 	bgeu	r19,r21,284d8c <alt_up_pixel_buffer_dma_draw_box+0x1d4>
  284db4:	00002b06 	br	284e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  284db8:	e0bff417 	ldw	r2,-48(fp)
  284dbc:	10800e17 	ldw	r2,56(r2)
  284dc0:	10800098 	cmpnei	r2,r2,2
  284dc4:	1000121e 	bne	r2,zero,284e10 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
  284dc8:	9485883a 	add	r2,r18,r18
  284dcc:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
  284dd0:	8c85383a 	mul	r2,r17,r18
  284dd4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  284dd8:	882b883a 	mov	r21,r17
  284ddc:	00000a06 	br	284e08 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
  284de0:	b023883a 	mov	r17,r22
  284de4:	00000506 	br	284dfc <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  284de8:	8c45883a 	add	r2,r17,r17
  284dec:	1405883a 	add	r2,r2,r16
  284df0:	b807883a 	mov	r3,r23
  284df4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  284df8:	8c400044 	addi	r17,r17,1
  284dfc:	a47ffa2e 	bgeu	r20,r17,284de8 <alt_up_pixel_buffer_dma_draw_box+0x230>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  284e00:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  284e04:	ad400044 	addi	r21,r21,1
  284e08:	9d7ff52e 	bgeu	r19,r21,284de0 <alt_up_pixel_buffer_dma_draw_box+0x228>
  284e0c:	00001506 	br	284e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  284e10:	9485883a 	add	r2,r18,r18
  284e14:	1085883a 	add	r2,r2,r2
  284e18:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
  284e1c:	8c85383a 	mul	r2,r17,r18
  284e20:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  284e24:	882b883a 	mov	r21,r17
  284e28:	00000b06 	br	284e58 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
  284e2c:	b023883a 	mov	r17,r22
  284e30:	00000606 	br	284e4c <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  284e34:	8c45883a 	add	r2,r17,r17
  284e38:	1085883a 	add	r2,r2,r2
  284e3c:	1405883a 	add	r2,r2,r16
  284e40:	b807883a 	mov	r3,r23
  284e44:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  284e48:	8c400044 	addi	r17,r17,1
  284e4c:	a47ff92e 	bgeu	r20,r17,284e34 <alt_up_pixel_buffer_dma_draw_box+0x27c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  284e50:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  284e54:	ad400044 	addi	r21,r21,1
  284e58:	9d7ff42e 	bgeu	r19,r21,284e2c <alt_up_pixel_buffer_dma_draw_box+0x274>
  284e5c:	00000106 	br	284e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  284e60:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
  284e64:	e6fff804 	addi	sp,fp,-32
  284e68:	df000817 	ldw	fp,32(sp)
  284e6c:	ddc00717 	ldw	r23,28(sp)
  284e70:	dd800617 	ldw	r22,24(sp)
  284e74:	dd400517 	ldw	r21,20(sp)
  284e78:	dd000417 	ldw	r20,16(sp)
  284e7c:	dcc00317 	ldw	r19,12(sp)
  284e80:	dc800217 	ldw	r18,8(sp)
  284e84:	dc400117 	ldw	r17,4(sp)
  284e88:	dc000017 	ldw	r16,0(sp)
  284e8c:	dec00904 	addi	sp,sp,36
  284e90:	f800283a 	ret

00284e94 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  284e94:	defff404 	addi	sp,sp,-48
  284e98:	df000b15 	stw	fp,44(sp)
  284e9c:	dd800a15 	stw	r22,40(sp)
  284ea0:	dd400915 	stw	r21,36(sp)
  284ea4:	dd000815 	stw	r20,32(sp)
  284ea8:	dcc00715 	stw	r19,28(sp)
  284eac:	dc800615 	stw	r18,24(sp)
  284eb0:	dc400515 	stw	r17,20(sp)
  284eb4:	dc000415 	stw	r16,16(sp)
  284eb8:	df000b04 	addi	fp,sp,44
  284ebc:	e13ff515 	stw	r4,-44(fp)
  284ec0:	e17ff615 	stw	r5,-40(fp)
  284ec4:	e1bff715 	stw	r6,-36(fp)
  284ec8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  284ecc:	e0bff517 	ldw	r2,-44(fp)
  284ed0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  284ed4:	e0bff517 	ldw	r2,-44(fp)
  284ed8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
  284edc:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
  284ee0:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
  284ee4:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
  284ee8:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  284eec:	9c40032e 	bgeu	r19,r17,284efc <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
  284ef0:	882d883a 	mov	r22,r17
		l_x = r_x;
  284ef4:	9823883a 	mov	r17,r19
		r_x = temp;
  284ef8:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  284efc:	8c805d2e 	bgeu	r17,r18,285074 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
  284f00:	a4005c2e 	bgeu	r20,r16,285074 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  284f04:	9c800136 	bltu	r19,r18,284f0c <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
  284f08:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  284f0c:	e0800217 	ldw	r2,8(fp)
  284f10:	10800058 	cmpnei	r2,r2,1
  284f14:	1000031e 	bne	r2,zero,284f24 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
  284f18:	e0bff517 	ldw	r2,-44(fp)
  284f1c:	14000c17 	ldw	r16,48(r2)
  284f20:	00000206 	br	284f2c <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
  284f24:	e0bff517 	ldw	r2,-44(fp)
  284f28:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  284f2c:	e0bff517 	ldw	r2,-44(fp)
  284f30:	10800d17 	ldw	r2,52(r2)
  284f34:	1000231e 	bne	r2,zero,284fc4 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  284f38:	e0bff517 	ldw	r2,-44(fp)
  284f3c:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
  284f40:	a484983a 	sll	r2,r20,r18
  284f44:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  284f48:	e0bff517 	ldw	r2,-44(fp)
  284f4c:	10800e17 	ldw	r2,56(r2)
  284f50:	10800058 	cmpnei	r2,r2,1
  284f54:	1000071e 	bne	r2,zero,284f74 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
  284f58:	00000406 	br	284f6c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
  284f5c:	8c05883a 	add	r2,r17,r16
  284f60:	a807883a 	mov	r3,r21
  284f64:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  284f68:	8c400044 	addi	r17,r17,1
  284f6c:	9c7ffb2e 	bgeu	r19,r17,284f5c <alt_up_pixel_buffer_dma_draw_hline+0xc8>
  284f70:	00004106 	br	285078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  284f74:	e0bff517 	ldw	r2,-44(fp)
  284f78:	10800e17 	ldw	r2,56(r2)
  284f7c:	10800098 	cmpnei	r2,r2,2
  284f80:	10000e1e 	bne	r2,zero,284fbc <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
  284f84:	00000506 	br	284f9c <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  284f88:	8c45883a 	add	r2,r17,r17
  284f8c:	1405883a 	add	r2,r2,r16
  284f90:	a807883a 	mov	r3,r21
  284f94:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  284f98:	8c400044 	addi	r17,r17,1
  284f9c:	9c7ffa2e 	bgeu	r19,r17,284f88 <alt_up_pixel_buffer_dma_draw_hline+0xf4>
  284fa0:	00003506 	br	285078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  284fa4:	8c45883a 	add	r2,r17,r17
  284fa8:	1085883a 	add	r2,r2,r2
  284fac:	1405883a 	add	r2,r2,r16
  284fb0:	a807883a 	mov	r3,r21
  284fb4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  284fb8:	8c400044 	addi	r17,r17,1
  284fbc:	9c7ff92e 	bgeu	r19,r17,284fa4 <alt_up_pixel_buffer_dma_draw_hline+0x110>
  284fc0:	00002d06 	br	285078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  284fc4:	e0bff517 	ldw	r2,-44(fp)
  284fc8:	10800e17 	ldw	r2,56(r2)
  284fcc:	10800058 	cmpnei	r2,r2,1
  284fd0:	1000091e 	bne	r2,zero,284ff8 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
  284fd4:	a485383a 	mul	r2,r20,r18
  284fd8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
  284fdc:	00000406 	br	284ff0 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  284fe0:	8c05883a 	add	r2,r17,r16
  284fe4:	a807883a 	mov	r3,r21
  284fe8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  284fec:	8c400044 	addi	r17,r17,1
  284ff0:	9c7ffb2e 	bgeu	r19,r17,284fe0 <alt_up_pixel_buffer_dma_draw_hline+0x14c>
  284ff4:	00002006 	br	285078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  284ff8:	e0bff517 	ldw	r2,-44(fp)
  284ffc:	10800e17 	ldw	r2,56(r2)
  285000:	10800098 	cmpnei	r2,r2,2
  285004:	10000c1e 	bne	r2,zero,285038 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
  285008:	9485883a 	add	r2,r18,r18
  28500c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
  285010:	a485383a 	mul	r2,r20,r18
  285014:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
  285018:	00000506 	br	285030 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  28501c:	8c45883a 	add	r2,r17,r17
  285020:	1405883a 	add	r2,r2,r16
  285024:	a807883a 	mov	r3,r21
  285028:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  28502c:	8c400044 	addi	r17,r17,1
  285030:	9c7ffa2e 	bgeu	r19,r17,28501c <alt_up_pixel_buffer_dma_draw_hline+0x188>
  285034:	00001006 	br	285078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  285038:	9485883a 	add	r2,r18,r18
  28503c:	1085883a 	add	r2,r2,r2
  285040:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
  285044:	a485383a 	mul	r2,r20,r18
  285048:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
  28504c:	00000606 	br	285068 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  285050:	8c45883a 	add	r2,r17,r17
  285054:	1085883a 	add	r2,r2,r2
  285058:	1405883a 	add	r2,r2,r16
  28505c:	a807883a 	mov	r3,r21
  285060:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  285064:	8c400044 	addi	r17,r17,1
  285068:	9c7ff92e 	bgeu	r19,r17,285050 <alt_up_pixel_buffer_dma_draw_hline+0x1bc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
  28506c:	84a1883a 	add	r16,r16,r18
  285070:	00000106 	br	285078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  285074:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  285078:	e6fff904 	addi	sp,fp,-28
  28507c:	df000717 	ldw	fp,28(sp)
  285080:	dd800617 	ldw	r22,24(sp)
  285084:	dd400517 	ldw	r21,20(sp)
  285088:	dd000417 	ldw	r20,16(sp)
  28508c:	dcc00317 	ldw	r19,12(sp)
  285090:	dc800217 	ldw	r18,8(sp)
  285094:	dc400117 	ldw	r17,4(sp)
  285098:	dc000017 	ldw	r16,0(sp)
  28509c:	dec00804 	addi	sp,sp,32
  2850a0:	f800283a 	ret

002850a4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  2850a4:	defff404 	addi	sp,sp,-48
  2850a8:	df000b15 	stw	fp,44(sp)
  2850ac:	dd800a15 	stw	r22,40(sp)
  2850b0:	dd400915 	stw	r21,36(sp)
  2850b4:	dd000815 	stw	r20,32(sp)
  2850b8:	dcc00715 	stw	r19,28(sp)
  2850bc:	dc800615 	stw	r18,24(sp)
  2850c0:	dc400515 	stw	r17,20(sp)
  2850c4:	dc000415 	stw	r16,16(sp)
  2850c8:	df000b04 	addi	fp,sp,44
  2850cc:	e13ff515 	stw	r4,-44(fp)
  2850d0:	e17ff615 	stw	r5,-40(fp)
  2850d4:	e1bff715 	stw	r6,-36(fp)
  2850d8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  2850dc:	e0bff517 	ldw	r2,-44(fp)
  2850e0:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  2850e4:	e0bff517 	ldw	r2,-44(fp)
  2850e8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
  2850ec:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
  2850f0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
  2850f4:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
  2850f8:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  2850fc:	9d00032e 	bgeu	r19,r20,28510c <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
  285100:	a02b883a 	mov	r21,r20
		t_y = b_y;
  285104:	9829883a 	mov	r20,r19
		b_y = temp;
  285108:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  28510c:	94406c2e 	bgeu	r18,r17,2852c0 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
  285110:	a4006b2e 	bgeu	r20,r16,2852c0 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  285114:	9c000136 	bltu	r19,r16,28511c <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
  285118:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  28511c:	e0800217 	ldw	r2,8(fp)
  285120:	10800058 	cmpnei	r2,r2,1
  285124:	1000031e 	bne	r2,zero,285134 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
  285128:	e0bff517 	ldw	r2,-44(fp)
  28512c:	14000c17 	ldw	r16,48(r2)
  285130:	00000206 	br	28513c <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
  285134:	e0bff517 	ldw	r2,-44(fp)
  285138:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  28513c:	e0bff517 	ldw	r2,-44(fp)
  285140:	10800d17 	ldw	r2,52(r2)
  285144:	1000301e 	bne	r2,zero,285208 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  285148:	e0bff517 	ldw	r2,-44(fp)
  28514c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
  285150:	a544983a 	sll	r2,r20,r21
  285154:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  285158:	e0bff517 	ldw	r2,-44(fp)
  28515c:	10800e17 	ldw	r2,56(r2)
  285160:	10800058 	cmpnei	r2,r2,1
  285164:	10000b1e 	bne	r2,zero,285194 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
  285168:	a023883a 	mov	r17,r20
  28516c:	00000706 	br	28518c <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  285170:	9405883a 	add	r2,r18,r16
  285174:	b007883a 	mov	r3,r22
  285178:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  28517c:	00800044 	movi	r2,1
  285180:	1544983a 	sll	r2,r2,r21
  285184:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  285188:	8c400044 	addi	r17,r17,1
  28518c:	9c7ff82e 	bgeu	r19,r17,285170 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
  285190:	00004c06 	br	2852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  285194:	e0bff517 	ldw	r2,-44(fp)
  285198:	10800e17 	ldw	r2,56(r2)
  28519c:	10800098 	cmpnei	r2,r2,2
  2851a0:	10000c1e 	bne	r2,zero,2851d4 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
  2851a4:	a023883a 	mov	r17,r20
  2851a8:	00000806 	br	2851cc <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  2851ac:	9485883a 	add	r2,r18,r18
  2851b0:	1405883a 	add	r2,r2,r16
  2851b4:	b007883a 	mov	r3,r22
  2851b8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  2851bc:	00800044 	movi	r2,1
  2851c0:	1544983a 	sll	r2,r2,r21
  2851c4:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  2851c8:	8c400044 	addi	r17,r17,1
  2851cc:	9c7ff72e 	bgeu	r19,r17,2851ac <alt_up_pixel_buffer_dma_draw_vline+0x108>
  2851d0:	00003c06 	br	2852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  2851d4:	a023883a 	mov	r17,r20
  2851d8:	00000906 	br	285200 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  2851dc:	9485883a 	add	r2,r18,r18
  2851e0:	1085883a 	add	r2,r2,r2
  2851e4:	1405883a 	add	r2,r2,r16
  2851e8:	b007883a 	mov	r3,r22
  2851ec:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  2851f0:	00800044 	movi	r2,1
  2851f4:	1544983a 	sll	r2,r2,r21
  2851f8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  2851fc:	8c400044 	addi	r17,r17,1
  285200:	9c7ff62e 	bgeu	r19,r17,2851dc <alt_up_pixel_buffer_dma_draw_vline+0x138>
  285204:	00002f06 	br	2852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  285208:	e0bff517 	ldw	r2,-44(fp)
  28520c:	10800e17 	ldw	r2,56(r2)
  285210:	10800058 	cmpnei	r2,r2,1
  285214:	10000a1e 	bne	r2,zero,285240 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
  285218:	a445383a 	mul	r2,r20,r17
  28521c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  285220:	00000506 	br	285238 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  285224:	9405883a 	add	r2,r18,r16
  285228:	b007883a 	mov	r3,r22
  28522c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  285230:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  285234:	a5000044 	addi	r20,r20,1
  285238:	9d3ffa2e 	bgeu	r19,r20,285224 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  28523c:	00002106 	br	2852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  285240:	e0bff517 	ldw	r2,-44(fp)
  285244:	10800e17 	ldw	r2,56(r2)
  285248:	10800098 	cmpnei	r2,r2,2
  28524c:	10000d1e 	bne	r2,zero,285284 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
  285250:	8c45883a 	add	r2,r17,r17
  285254:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
  285258:	a445383a 	mul	r2,r20,r17
  28525c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  285260:	00000606 	br	28527c <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  285264:	9485883a 	add	r2,r18,r18
  285268:	1405883a 	add	r2,r2,r16
  28526c:	b007883a 	mov	r3,r22
  285270:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  285274:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  285278:	a5000044 	addi	r20,r20,1
  28527c:	9d3ff92e 	bgeu	r19,r20,285264 <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
  285280:	00001006 	br	2852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  285284:	8c45883a 	add	r2,r17,r17
  285288:	1085883a 	add	r2,r2,r2
  28528c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
  285290:	a445383a 	mul	r2,r20,r17
  285294:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  285298:	00000706 	br	2852b8 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  28529c:	9485883a 	add	r2,r18,r18
  2852a0:	1085883a 	add	r2,r2,r2
  2852a4:	1405883a 	add	r2,r2,r16
  2852a8:	b007883a 	mov	r3,r22
  2852ac:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  2852b0:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  2852b4:	a5000044 	addi	r20,r20,1
  2852b8:	9d3ff82e 	bgeu	r19,r20,28529c <alt_up_pixel_buffer_dma_draw_vline+0x1f8>
  2852bc:	00000106 	br	2852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  2852c0:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  2852c4:	e6fff904 	addi	sp,fp,-28
  2852c8:	df000717 	ldw	fp,28(sp)
  2852cc:	dd800617 	ldw	r22,24(sp)
  2852d0:	dd400517 	ldw	r21,20(sp)
  2852d4:	dd000417 	ldw	r20,16(sp)
  2852d8:	dcc00317 	ldw	r19,12(sp)
  2852dc:	dc800217 	ldw	r18,8(sp)
  2852e0:	dc400117 	ldw	r17,4(sp)
  2852e4:	dc000017 	ldw	r16,0(sp)
  2852e8:	dec00804 	addi	sp,sp,32
  2852ec:	f800283a 	ret

002852f0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  2852f0:	defff804 	addi	sp,sp,-32
  2852f4:	dfc00715 	stw	ra,28(sp)
  2852f8:	df000615 	stw	fp,24(sp)
  2852fc:	df000604 	addi	fp,sp,24
  285300:	e13ffc15 	stw	r4,-16(fp)
  285304:	e17ffd15 	stw	r5,-12(fp)
  285308:	e1bffe15 	stw	r6,-8(fp)
  28530c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  285310:	e0800417 	ldw	r2,16(fp)
  285314:	d8800115 	stw	r2,4(sp)
  285318:	e0800317 	ldw	r2,12(fp)
  28531c:	d8800015 	stw	r2,0(sp)
  285320:	e1fffe17 	ldw	r7,-8(fp)
  285324:	e1bfff17 	ldw	r6,-4(fp)
  285328:	e17ffd17 	ldw	r5,-12(fp)
  28532c:	e13ffc17 	ldw	r4,-16(fp)
  285330:	0284e940 	call	284e94 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  285334:	e0800417 	ldw	r2,16(fp)
  285338:	d8800115 	stw	r2,4(sp)
  28533c:	e0800317 	ldw	r2,12(fp)
  285340:	d8800015 	stw	r2,0(sp)
  285344:	e1c00217 	ldw	r7,8(fp)
  285348:	e1bfff17 	ldw	r6,-4(fp)
  28534c:	e17ffd17 	ldw	r5,-12(fp)
  285350:	e13ffc17 	ldw	r4,-16(fp)
  285354:	0284e940 	call	284e94 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  285358:	e0800417 	ldw	r2,16(fp)
  28535c:	d8800115 	stw	r2,4(sp)
  285360:	e0800317 	ldw	r2,12(fp)
  285364:	d8800015 	stw	r2,0(sp)
  285368:	e1c00217 	ldw	r7,8(fp)
  28536c:	e1bffe17 	ldw	r6,-8(fp)
  285370:	e17ffd17 	ldw	r5,-12(fp)
  285374:	e13ffc17 	ldw	r4,-16(fp)
  285378:	02850a40 	call	2850a4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  28537c:	e0800417 	ldw	r2,16(fp)
  285380:	d8800115 	stw	r2,4(sp)
  285384:	e0800317 	ldw	r2,12(fp)
  285388:	d8800015 	stw	r2,0(sp)
  28538c:	e1c00217 	ldw	r7,8(fp)
  285390:	e1bffe17 	ldw	r6,-8(fp)
  285394:	e17fff17 	ldw	r5,-4(fp)
  285398:	e13ffc17 	ldw	r4,-16(fp)
  28539c:	02850a40 	call	2850a4 <alt_up_pixel_buffer_dma_draw_vline>
}
  2853a0:	0001883a 	nop
  2853a4:	e037883a 	mov	sp,fp
  2853a8:	dfc00117 	ldw	ra,4(sp)
  2853ac:	df000017 	ldw	fp,0(sp)
  2853b0:	dec00204 	addi	sp,sp,8
  2853b4:	f800283a 	ret

002853b8 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  2853b8:	deffff04 	addi	sp,sp,-4
  2853bc:	df000015 	stw	fp,0(sp)
  2853c0:	d839883a 	mov	fp,sp
  2853c4:	2005883a 	mov	r2,r4
  2853c8:	3007883a 	mov	r3,r6
  2853cc:	3809883a 	mov	r4,r7
  2853d0:	e1800117 	ldw	r6,4(fp)
  2853d4:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
  2853d8:	3800051e 	bne	r7,zero,2853f0 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  2853dc:	2909383a 	mul	r4,r5,r4
  2853e0:	20c7883a 	add	r3,r4,r3
  2853e4:	1885883a 	add	r2,r3,r2
  2853e8:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
  2853ec:	00000e06 	br	285428 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  2853f0:	39c00058 	cmpnei	r7,r7,1
  2853f4:	3800061e 	bne	r7,zero,285410 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  2853f8:	2909383a 	mul	r4,r5,r4
  2853fc:	20c7883a 	add	r3,r4,r3
  285400:	18c7883a 	add	r3,r3,r3
  285404:	1885883a 	add	r2,r3,r2
  285408:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
  28540c:	00000606 	br	285428 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  285410:	2909383a 	mul	r4,r5,r4
  285414:	20c7883a 	add	r3,r4,r3
  285418:	18c7883a 	add	r3,r3,r3
  28541c:	18c7883a 	add	r3,r3,r3
  285420:	1885883a 	add	r2,r3,r2
  285424:	11800035 	stwio	r6,0(r2)
}
  285428:	0001883a 	nop
  28542c:	e037883a 	mov	sp,fp
  285430:	df000017 	ldw	fp,0(sp)
  285434:	dec00104 	addi	sp,sp,4
  285438:	f800283a 	ret

0028543c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  28543c:	deffeb04 	addi	sp,sp,-84
  285440:	dfc01415 	stw	ra,80(sp)
  285444:	df001315 	stw	fp,76(sp)
  285448:	ddc01215 	stw	r23,72(sp)
  28544c:	dd801115 	stw	r22,68(sp)
  285450:	dd401015 	stw	r21,64(sp)
  285454:	dd000f15 	stw	r20,60(sp)
  285458:	dcc00e15 	stw	r19,56(sp)
  28545c:	dc800d15 	stw	r18,52(sp)
  285460:	dc400c15 	stw	r17,48(sp)
  285464:	dc000b15 	stw	r16,44(sp)
  285468:	df001304 	addi	fp,sp,76
  28546c:	e13fef15 	stw	r4,-68(fp)
  285470:	e17ff015 	stw	r5,-64(fp)
  285474:	e1bff115 	stw	r6,-60(fp)
  285478:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
  28547c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
  285480:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
  285484:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
  285488:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  28548c:	a4c5c83a 	sub	r2,r20,r19
  285490:	1000010e 	bge	r2,zero,285498 <alt_up_pixel_buffer_dma_draw_line+0x5c>
  285494:	0085c83a 	sub	r2,zero,r2
  285498:	1007883a 	mov	r3,r2
  28549c:	9445c83a 	sub	r2,r18,r17
  2854a0:	1000010e 	bge	r2,zero,2854a8 <alt_up_pixel_buffer_dma_draw_line+0x6c>
  2854a4:	0085c83a 	sub	r2,zero,r2
  2854a8:	10c4803a 	cmplt	r2,r2,r3
  2854ac:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
  2854b0:	e0bfef17 	ldw	r2,-68(fp)
  2854b4:	10800e17 	ldw	r2,56(r2)
  2854b8:	10800060 	cmpeqi	r2,r2,1
  2854bc:	1000081e 	bne	r2,zero,2854e0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  2854c0:	e0bfef17 	ldw	r2,-68(fp)
  2854c4:	10800e17 	ldw	r2,56(r2)
  2854c8:	10800098 	cmpnei	r2,r2,2
  2854cc:	1000021e 	bne	r2,zero,2854d8 <alt_up_pixel_buffer_dma_draw_line+0x9c>
  2854d0:	00800044 	movi	r2,1
  2854d4:	00000306 	br	2854e4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
  2854d8:	00800084 	movi	r2,2
  2854dc:	00000106 	br	2854e4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
  2854e0:	0005883a 	mov	r2,zero
  2854e4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
  2854e8:	e0800317 	ldw	r2,12(fp)
  2854ec:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  2854f0:	e0bfef17 	ldw	r2,-68(fp)
  2854f4:	10800d17 	ldw	r2,52(r2)
  2854f8:	1000071e 	bne	r2,zero,285518 <alt_up_pixel_buffer_dma_draw_line+0xdc>
  2854fc:	e0bfef17 	ldw	r2,-68(fp)
  285500:	10801317 	ldw	r2,76(r2)
  285504:	e0fff417 	ldw	r3,-48(fp)
  285508:	10c5c83a 	sub	r2,r2,r3
  28550c:	00c00044 	movi	r3,1
  285510:	1884983a 	sll	r2,r3,r2
  285514:	00000206 	br	285520 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  285518:	e0bfef17 	ldw	r2,-68(fp)
  28551c:	10800f17 	ldw	r2,60(r2)
  285520:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
  285524:	e0800417 	ldw	r2,16(fp)
  285528:	10800058 	cmpnei	r2,r2,1
  28552c:	1000031e 	bne	r2,zero,28553c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
  285530:	e0bfef17 	ldw	r2,-68(fp)
  285534:	15c00c17 	ldw	r23,48(r2)
  285538:	00000206 	br	285544 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  28553c:	e0bfef17 	ldw	r2,-68(fp)
  285540:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
  285544:	e0bff307 	ldb	r2,-52(fp)
  285548:	0080060e 	bge	zero,r2,285564 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
  28554c:	8821883a 	mov	r16,r17
		x_0 = y_0;
  285550:	9823883a 	mov	r17,r19
		y_0 = error;
  285554:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
  285558:	9021883a 	mov	r16,r18
		x_1 = y_1;
  28555c:	a025883a 	mov	r18,r20
		y_1 = error;
  285560:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
  285564:	9440060e 	bge	r18,r17,285580 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
  285568:	8821883a 	mov	r16,r17
		x_0 = x_1;
  28556c:	9023883a 	mov	r17,r18
		x_1 = error;
  285570:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
  285574:	9821883a 	mov	r16,r19
		y_0 = y_1;
  285578:	a027883a 	mov	r19,r20
		y_1 = error;
  28557c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  285580:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
  285584:	a4c5c83a 	sub	r2,r20,r19
  285588:	1000010e 	bge	r2,zero,285590 <alt_up_pixel_buffer_dma_draw_line+0x154>
  28558c:	0085c83a 	sub	r2,zero,r2
  285590:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
  285594:	a804d7fa 	srli	r2,r21,31
  285598:	1545883a 	add	r2,r2,r21
  28559c:	1005d07a 	srai	r2,r2,1
  2855a0:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
  2855a4:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
  2855a8:	9d00020e 	bge	r19,r20,2855b4 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
  2855ac:	04c00044 	movi	r19,1
  2855b0:	00000106 	br	2855b8 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
  2855b4:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  2855b8:	e0bff307 	ldb	r2,-52(fp)
  2855bc:	10800058 	cmpnei	r2,r2,1
  2855c0:	1000211e 	bne	r2,zero,285648 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
  2855c4:	00000f06 	br	285604 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  2855c8:	e0bff417 	ldw	r2,-48(fp)
  2855cc:	d8800115 	stw	r2,4(sp)
  2855d0:	e0bff517 	ldw	r2,-44(fp)
  2855d4:	d8800015 	stw	r2,0(sp)
  2855d8:	880f883a 	mov	r7,r17
  2855dc:	b00d883a 	mov	r6,r22
  2855e0:	e17ff617 	ldw	r5,-40(fp)
  2855e4:	b809883a 	mov	r4,r23
  2855e8:	02853b80 	call	2853b8 <helper_plot_pixel>
			error = error + deltay;
  2855ec:	e0bff717 	ldw	r2,-36(fp)
  2855f0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
  2855f4:	0400020e 	bge	zero,r16,285600 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
  2855f8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
  2855fc:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  285600:	8c400044 	addi	r17,r17,1
  285604:	947ff00e 	bge	r18,r17,2855c8 <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  285608:	00001006 	br	28564c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  28560c:	e0bff417 	ldw	r2,-48(fp)
  285610:	d8800115 	stw	r2,4(sp)
  285614:	e0bff517 	ldw	r2,-44(fp)
  285618:	d8800015 	stw	r2,0(sp)
  28561c:	b00f883a 	mov	r7,r22
  285620:	880d883a 	mov	r6,r17
  285624:	e17ff617 	ldw	r5,-40(fp)
  285628:	b809883a 	mov	r4,r23
  28562c:	02853b80 	call	2853b8 <helper_plot_pixel>
			error = error + deltay;
  285630:	e0bff717 	ldw	r2,-36(fp)
  285634:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
  285638:	0400020e 	bge	zero,r16,285644 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
  28563c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
  285640:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  285644:	8c400044 	addi	r17,r17,1
  285648:	947ff00e 	bge	r18,r17,28560c <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  28564c:	0001883a 	nop
  285650:	e6fff804 	addi	sp,fp,-32
  285654:	dfc00917 	ldw	ra,36(sp)
  285658:	df000817 	ldw	fp,32(sp)
  28565c:	ddc00717 	ldw	r23,28(sp)
  285660:	dd800617 	ldw	r22,24(sp)
  285664:	dd400517 	ldw	r21,20(sp)
  285668:	dd000417 	ldw	r20,16(sp)
  28566c:	dcc00317 	ldw	r19,12(sp)
  285670:	dc800217 	ldw	r18,8(sp)
  285674:	dc400117 	ldw	r17,4(sp)
  285678:	dc000017 	ldw	r16,0(sp)
  28567c:	dec00a04 	addi	sp,sp,40
  285680:	f800283a 	ret

00285684 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  285684:	defff504 	addi	sp,sp,-44
  285688:	df000a15 	stw	fp,40(sp)
  28568c:	df000a04 	addi	fp,sp,40
  285690:	e13ffc15 	stw	r4,-16(fp)
  285694:	e17ffd15 	stw	r5,-12(fp)
  285698:	e1bffe15 	stw	r6,-8(fp)
  28569c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  2856a0:	e03ff615 	stw	zero,-40(fp)
  2856a4:	d0a6d217 	ldw	r2,-25784(gp)
  
  if (alt_ticks_per_second ())
  2856a8:	10003c26 	beq	r2,zero,28579c <alt_alarm_start+0x118>
  {
    if (alarm)
  2856ac:	e0bffc17 	ldw	r2,-16(fp)
  2856b0:	10003826 	beq	r2,zero,285794 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  2856b4:	e0bffc17 	ldw	r2,-16(fp)
  2856b8:	e0fffe17 	ldw	r3,-8(fp)
  2856bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  2856c0:	e0bffc17 	ldw	r2,-16(fp)
  2856c4:	e0ffff17 	ldw	r3,-4(fp)
  2856c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2856cc:	0005303a 	rdctl	r2,status
  2856d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2856d4:	e0fff917 	ldw	r3,-28(fp)
  2856d8:	00bfff84 	movi	r2,-2
  2856dc:	1884703a 	and	r2,r3,r2
  2856e0:	1001703a 	wrctl	status,r2
  
  return context;
  2856e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  2856e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  2856ec:	d0a6d317 	ldw	r2,-25780(gp)
      
      current_nticks = alt_nticks();
  2856f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  2856f4:	e0fffd17 	ldw	r3,-12(fp)
  2856f8:	e0bff617 	ldw	r2,-40(fp)
  2856fc:	1885883a 	add	r2,r3,r2
  285700:	10c00044 	addi	r3,r2,1
  285704:	e0bffc17 	ldw	r2,-16(fp)
  285708:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  28570c:	e0bffc17 	ldw	r2,-16(fp)
  285710:	10c00217 	ldw	r3,8(r2)
  285714:	e0bff617 	ldw	r2,-40(fp)
  285718:	1880042e 	bgeu	r3,r2,28572c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  28571c:	e0bffc17 	ldw	r2,-16(fp)
  285720:	00c00044 	movi	r3,1
  285724:	10c00405 	stb	r3,16(r2)
  285728:	00000206 	br	285734 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  28572c:	e0bffc17 	ldw	r2,-16(fp)
  285730:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  285734:	e0bffc17 	ldw	r2,-16(fp)
  285738:	d0e00c04 	addi	r3,gp,-32720
  28573c:	e0fffa15 	stw	r3,-24(fp)
  285740:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  285744:	e0bffb17 	ldw	r2,-20(fp)
  285748:	e0fffa17 	ldw	r3,-24(fp)
  28574c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  285750:	e0bffa17 	ldw	r2,-24(fp)
  285754:	10c00017 	ldw	r3,0(r2)
  285758:	e0bffb17 	ldw	r2,-20(fp)
  28575c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  285760:	e0bffa17 	ldw	r2,-24(fp)
  285764:	10800017 	ldw	r2,0(r2)
  285768:	e0fffb17 	ldw	r3,-20(fp)
  28576c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  285770:	e0bffa17 	ldw	r2,-24(fp)
  285774:	e0fffb17 	ldw	r3,-20(fp)
  285778:	10c00015 	stw	r3,0(r2)
  28577c:	e0bff817 	ldw	r2,-32(fp)
  285780:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  285784:	e0bff717 	ldw	r2,-36(fp)
  285788:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  28578c:	0005883a 	mov	r2,zero
  285790:	00000306 	br	2857a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  285794:	00bffa84 	movi	r2,-22
  285798:	00000106 	br	2857a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  28579c:	00bfde84 	movi	r2,-134
  }
}
  2857a0:	e037883a 	mov	sp,fp
  2857a4:	df000017 	ldw	fp,0(sp)
  2857a8:	dec00104 	addi	sp,sp,4
  2857ac:	f800283a 	ret

002857b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  2857b0:	defffa04 	addi	sp,sp,-24
  2857b4:	dfc00515 	stw	ra,20(sp)
  2857b8:	df000415 	stw	fp,16(sp)
  2857bc:	df000404 	addi	fp,sp,16
  2857c0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  2857c4:	008000c4 	movi	r2,3
  2857c8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  2857cc:	e0fffd17 	ldw	r3,-12(fp)
  2857d0:	008003f4 	movhi	r2,15
  2857d4:	10909004 	addi	r2,r2,16960
  2857d8:	1885383a 	mul	r2,r3,r2
  2857dc:	100b883a 	mov	r5,r2
  2857e0:	0100bef4 	movhi	r4,763
  2857e4:	213c2004 	addi	r4,r4,-3968
  2857e8:	02804900 	call	280490 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  2857ec:	100b883a 	mov	r5,r2
  2857f0:	01200034 	movhi	r4,32768
  2857f4:	213fffc4 	addi	r4,r4,-1
  2857f8:	02804900 	call	280490 <__udivsi3>
  2857fc:	100b883a 	mov	r5,r2
  285800:	e13fff17 	ldw	r4,-4(fp)
  285804:	02804900 	call	280490 <__udivsi3>
  285808:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  28580c:	e0bffe17 	ldw	r2,-8(fp)
  285810:	10002a26 	beq	r2,zero,2858bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  285814:	e03ffc15 	stw	zero,-16(fp)
  285818:	00001706 	br	285878 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  28581c:	00a00034 	movhi	r2,32768
  285820:	10bfffc4 	addi	r2,r2,-1
  285824:	10bfffc4 	addi	r2,r2,-1
  285828:	103ffe1e 	bne	r2,zero,285824 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  28582c:	e0fffd17 	ldw	r3,-12(fp)
  285830:	008003f4 	movhi	r2,15
  285834:	10909004 	addi	r2,r2,16960
  285838:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  28583c:	100b883a 	mov	r5,r2
  285840:	0100bef4 	movhi	r4,763
  285844:	213c2004 	addi	r4,r4,-3968
  285848:	02804900 	call	280490 <__udivsi3>
  28584c:	100b883a 	mov	r5,r2
  285850:	01200034 	movhi	r4,32768
  285854:	213fffc4 	addi	r4,r4,-1
  285858:	02804900 	call	280490 <__udivsi3>
  28585c:	1007883a 	mov	r3,r2
  285860:	e0bfff17 	ldw	r2,-4(fp)
  285864:	10c5c83a 	sub	r2,r2,r3
  285868:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  28586c:	e0bffc17 	ldw	r2,-16(fp)
  285870:	10800044 	addi	r2,r2,1
  285874:	e0bffc15 	stw	r2,-16(fp)
  285878:	e0fffc17 	ldw	r3,-16(fp)
  28587c:	e0bffe17 	ldw	r2,-8(fp)
  285880:	18bfe616 	blt	r3,r2,28581c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  285884:	e0fffd17 	ldw	r3,-12(fp)
  285888:	008003f4 	movhi	r2,15
  28588c:	10909004 	addi	r2,r2,16960
  285890:	1885383a 	mul	r2,r3,r2
  285894:	100b883a 	mov	r5,r2
  285898:	0100bef4 	movhi	r4,763
  28589c:	213c2004 	addi	r4,r4,-3968
  2858a0:	02804900 	call	280490 <__udivsi3>
  2858a4:	1007883a 	mov	r3,r2
  2858a8:	e0bfff17 	ldw	r2,-4(fp)
  2858ac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  2858b0:	10bfffc4 	addi	r2,r2,-1
  2858b4:	103ffe1e 	bne	r2,zero,2858b0 <alt_busy_sleep+0x100>
  2858b8:	00000d06 	br	2858f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  2858bc:	e0fffd17 	ldw	r3,-12(fp)
  2858c0:	008003f4 	movhi	r2,15
  2858c4:	10909004 	addi	r2,r2,16960
  2858c8:	1885383a 	mul	r2,r3,r2
  2858cc:	100b883a 	mov	r5,r2
  2858d0:	0100bef4 	movhi	r4,763
  2858d4:	213c2004 	addi	r4,r4,-3968
  2858d8:	02804900 	call	280490 <__udivsi3>
  2858dc:	1007883a 	mov	r3,r2
  2858e0:	e0bfff17 	ldw	r2,-4(fp)
  2858e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  2858e8:	10bfffc4 	addi	r2,r2,-1
  2858ec:	00bffe16 	blt	zero,r2,2858e8 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  2858f0:	0005883a 	mov	r2,zero
}
  2858f4:	e037883a 	mov	sp,fp
  2858f8:	dfc00117 	ldw	ra,4(sp)
  2858fc:	df000017 	ldw	fp,0(sp)
  285900:	dec00204 	addi	sp,sp,8
  285904:	f800283a 	ret

00285908 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  285908:	defffe04 	addi	sp,sp,-8
  28590c:	df000115 	stw	fp,4(sp)
  285910:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  285914:	e03fff15 	stw	zero,-4(fp)
  285918:	00000506 	br	285930 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  28591c:	e0bfff17 	ldw	r2,-4(fp)
  285920:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  285924:	e0bfff17 	ldw	r2,-4(fp)
  285928:	10800804 	addi	r2,r2,32
  28592c:	e0bfff15 	stw	r2,-4(fp)
  285930:	e0bfff17 	ldw	r2,-4(fp)
  285934:	10820030 	cmpltui	r2,r2,2048
  285938:	103ff81e 	bne	r2,zero,28591c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  28593c:	0001883a 	nop
  285940:	e037883a 	mov	sp,fp
  285944:	df000017 	ldw	fp,0(sp)
  285948:	dec00104 	addi	sp,sp,4
  28594c:	f800283a 	ret

00285950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  285950:	defffe04 	addi	sp,sp,-8
  285954:	dfc00115 	stw	ra,4(sp)
  285958:	df000015 	stw	fp,0(sp)
  28595c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  285960:	d0a00917 	ldw	r2,-32732(gp)
  285964:	10000326 	beq	r2,zero,285974 <alt_get_errno+0x24>
  285968:	d0a00917 	ldw	r2,-32732(gp)
  28596c:	103ee83a 	callr	r2
  285970:	00000106 	br	285978 <alt_get_errno+0x28>
  285974:	d0a6cd04 	addi	r2,gp,-25804
}
  285978:	e037883a 	mov	sp,fp
  28597c:	dfc00117 	ldw	ra,4(sp)
  285980:	df000017 	ldw	fp,0(sp)
  285984:	dec00204 	addi	sp,sp,8
  285988:	f800283a 	ret

0028598c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  28598c:	defffa04 	addi	sp,sp,-24
  285990:	dfc00515 	stw	ra,20(sp)
  285994:	df000415 	stw	fp,16(sp)
  285998:	df000404 	addi	fp,sp,16
  28599c:	e13ffe15 	stw	r4,-8(fp)
  2859a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  2859a4:	e0bffe17 	ldw	r2,-8(fp)
  2859a8:	10000326 	beq	r2,zero,2859b8 <alt_dev_llist_insert+0x2c>
  2859ac:	e0bffe17 	ldw	r2,-8(fp)
  2859b0:	10800217 	ldw	r2,8(r2)
  2859b4:	1000061e 	bne	r2,zero,2859d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  2859b8:	02859500 	call	285950 <alt_get_errno>
  2859bc:	1007883a 	mov	r3,r2
  2859c0:	00800584 	movi	r2,22
  2859c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  2859c8:	00bffa84 	movi	r2,-22
  2859cc:	00001306 	br	285a1c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  2859d0:	e0bffe17 	ldw	r2,-8(fp)
  2859d4:	e0ffff17 	ldw	r3,-4(fp)
  2859d8:	e0fffc15 	stw	r3,-16(fp)
  2859dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2859e0:	e0bffd17 	ldw	r2,-12(fp)
  2859e4:	e0fffc17 	ldw	r3,-16(fp)
  2859e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  2859ec:	e0bffc17 	ldw	r2,-16(fp)
  2859f0:	10c00017 	ldw	r3,0(r2)
  2859f4:	e0bffd17 	ldw	r2,-12(fp)
  2859f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2859fc:	e0bffc17 	ldw	r2,-16(fp)
  285a00:	10800017 	ldw	r2,0(r2)
  285a04:	e0fffd17 	ldw	r3,-12(fp)
  285a08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  285a0c:	e0bffc17 	ldw	r2,-16(fp)
  285a10:	e0fffd17 	ldw	r3,-12(fp)
  285a14:	10c00015 	stw	r3,0(r2)

  return 0;  
  285a18:	0005883a 	mov	r2,zero
}
  285a1c:	e037883a 	mov	sp,fp
  285a20:	dfc00117 	ldw	ra,4(sp)
  285a24:	df000017 	ldw	fp,0(sp)
  285a28:	dec00204 	addi	sp,sp,8
  285a2c:	f800283a 	ret

00285a30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  285a30:	defffd04 	addi	sp,sp,-12
  285a34:	dfc00215 	stw	ra,8(sp)
  285a38:	df000115 	stw	fp,4(sp)
  285a3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  285a40:	00800a34 	movhi	r2,40
  285a44:	109a3e04 	addi	r2,r2,26872
  285a48:	e0bfff15 	stw	r2,-4(fp)
  285a4c:	00000606 	br	285a68 <_do_ctors+0x38>
        (*ctor) (); 
  285a50:	e0bfff17 	ldw	r2,-4(fp)
  285a54:	10800017 	ldw	r2,0(r2)
  285a58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  285a5c:	e0bfff17 	ldw	r2,-4(fp)
  285a60:	10bfff04 	addi	r2,r2,-4
  285a64:	e0bfff15 	stw	r2,-4(fp)
  285a68:	e0ffff17 	ldw	r3,-4(fp)
  285a6c:	00800a34 	movhi	r2,40
  285a70:	109a3f04 	addi	r2,r2,26876
  285a74:	18bff62e 	bgeu	r3,r2,285a50 <_do_ctors+0x20>
        (*ctor) (); 
}
  285a78:	0001883a 	nop
  285a7c:	e037883a 	mov	sp,fp
  285a80:	dfc00117 	ldw	ra,4(sp)
  285a84:	df000017 	ldw	fp,0(sp)
  285a88:	dec00204 	addi	sp,sp,8
  285a8c:	f800283a 	ret

00285a90 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  285a90:	defffd04 	addi	sp,sp,-12
  285a94:	dfc00215 	stw	ra,8(sp)
  285a98:	df000115 	stw	fp,4(sp)
  285a9c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  285aa0:	00800a34 	movhi	r2,40
  285aa4:	109a3e04 	addi	r2,r2,26872
  285aa8:	e0bfff15 	stw	r2,-4(fp)
  285aac:	00000606 	br	285ac8 <_do_dtors+0x38>
        (*dtor) (); 
  285ab0:	e0bfff17 	ldw	r2,-4(fp)
  285ab4:	10800017 	ldw	r2,0(r2)
  285ab8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  285abc:	e0bfff17 	ldw	r2,-4(fp)
  285ac0:	10bfff04 	addi	r2,r2,-4
  285ac4:	e0bfff15 	stw	r2,-4(fp)
  285ac8:	e0ffff17 	ldw	r3,-4(fp)
  285acc:	00800a34 	movhi	r2,40
  285ad0:	109a3f04 	addi	r2,r2,26876
  285ad4:	18bff62e 	bgeu	r3,r2,285ab0 <_do_dtors+0x20>
        (*dtor) (); 
}
  285ad8:	0001883a 	nop
  285adc:	e037883a 	mov	sp,fp
  285ae0:	dfc00117 	ldw	ra,4(sp)
  285ae4:	df000017 	ldw	fp,0(sp)
  285ae8:	dec00204 	addi	sp,sp,8
  285aec:	f800283a 	ret

00285af0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  285af0:	defffa04 	addi	sp,sp,-24
  285af4:	dfc00515 	stw	ra,20(sp)
  285af8:	df000415 	stw	fp,16(sp)
  285afc:	df000404 	addi	fp,sp,16
  285b00:	e13ffe15 	stw	r4,-8(fp)
  285b04:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  285b08:	e0bfff17 	ldw	r2,-4(fp)
  285b0c:	10800017 	ldw	r2,0(r2)
  285b10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  285b14:	e13ffe17 	ldw	r4,-8(fp)
  285b18:	02806200 	call	280620 <strlen>
  285b1c:	10800044 	addi	r2,r2,1
  285b20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  285b24:	00000d06 	br	285b5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  285b28:	e0bffc17 	ldw	r2,-16(fp)
  285b2c:	10800217 	ldw	r2,8(r2)
  285b30:	e0fffd17 	ldw	r3,-12(fp)
  285b34:	180d883a 	mov	r6,r3
  285b38:	e17ffe17 	ldw	r5,-8(fp)
  285b3c:	1009883a 	mov	r4,r2
  285b40:	02865b40 	call	2865b4 <memcmp>
  285b44:	1000021e 	bne	r2,zero,285b50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  285b48:	e0bffc17 	ldw	r2,-16(fp)
  285b4c:	00000706 	br	285b6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  285b50:	e0bffc17 	ldw	r2,-16(fp)
  285b54:	10800017 	ldw	r2,0(r2)
  285b58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  285b5c:	e0fffc17 	ldw	r3,-16(fp)
  285b60:	e0bfff17 	ldw	r2,-4(fp)
  285b64:	18bff01e 	bne	r3,r2,285b28 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  285b68:	0005883a 	mov	r2,zero
}
  285b6c:	e037883a 	mov	sp,fp
  285b70:	dfc00117 	ldw	ra,4(sp)
  285b74:	df000017 	ldw	fp,0(sp)
  285b78:	dec00204 	addi	sp,sp,8
  285b7c:	f800283a 	ret

00285b80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  285b80:	defffe04 	addi	sp,sp,-8
  285b84:	dfc00115 	stw	ra,4(sp)
  285b88:	df000015 	stw	fp,0(sp)
  285b8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  285b90:	01440004 	movi	r5,4096
  285b94:	0009883a 	mov	r4,zero
  285b98:	028643c0 	call	28643c <alt_icache_flush>
#endif
}
  285b9c:	0001883a 	nop
  285ba0:	e037883a 	mov	sp,fp
  285ba4:	dfc00117 	ldw	ra,4(sp)
  285ba8:	df000017 	ldw	fp,0(sp)
  285bac:	dec00204 	addi	sp,sp,8
  285bb0:	f800283a 	ret

00285bb4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  285bb4:	defff904 	addi	sp,sp,-28
  285bb8:	dfc00615 	stw	ra,24(sp)
  285bbc:	df000515 	stw	fp,20(sp)
  285bc0:	df000504 	addi	fp,sp,20
  285bc4:	e13ffc15 	stw	r4,-16(fp)
  285bc8:	e17ffd15 	stw	r5,-12(fp)
  285bcc:	e1bffe15 	stw	r6,-8(fp)
  285bd0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  285bd4:	e1bfff17 	ldw	r6,-4(fp)
  285bd8:	e17ffe17 	ldw	r5,-8(fp)
  285bdc:	e13ffd17 	ldw	r4,-12(fp)
  285be0:	0285f740 	call	285f74 <open>
  285be4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  285be8:	e0bffb17 	ldw	r2,-20(fp)
  285bec:	10001c16 	blt	r2,zero,285c60 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  285bf0:	00800a34 	movhi	r2,40
  285bf4:	109c8304 	addi	r2,r2,29196
  285bf8:	e0fffb17 	ldw	r3,-20(fp)
  285bfc:	18c00324 	muli	r3,r3,12
  285c00:	10c5883a 	add	r2,r2,r3
  285c04:	10c00017 	ldw	r3,0(r2)
  285c08:	e0bffc17 	ldw	r2,-16(fp)
  285c0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  285c10:	00800a34 	movhi	r2,40
  285c14:	109c8304 	addi	r2,r2,29196
  285c18:	e0fffb17 	ldw	r3,-20(fp)
  285c1c:	18c00324 	muli	r3,r3,12
  285c20:	10c5883a 	add	r2,r2,r3
  285c24:	10800104 	addi	r2,r2,4
  285c28:	10c00017 	ldw	r3,0(r2)
  285c2c:	e0bffc17 	ldw	r2,-16(fp)
  285c30:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  285c34:	00800a34 	movhi	r2,40
  285c38:	109c8304 	addi	r2,r2,29196
  285c3c:	e0fffb17 	ldw	r3,-20(fp)
  285c40:	18c00324 	muli	r3,r3,12
  285c44:	10c5883a 	add	r2,r2,r3
  285c48:	10800204 	addi	r2,r2,8
  285c4c:	10c00017 	ldw	r3,0(r2)
  285c50:	e0bffc17 	ldw	r2,-16(fp)
  285c54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  285c58:	e13ffb17 	ldw	r4,-20(fp)
  285c5c:	028385c0 	call	28385c <alt_release_fd>
  }
} 
  285c60:	0001883a 	nop
  285c64:	e037883a 	mov	sp,fp
  285c68:	dfc00117 	ldw	ra,4(sp)
  285c6c:	df000017 	ldw	fp,0(sp)
  285c70:	dec00204 	addi	sp,sp,8
  285c74:	f800283a 	ret

00285c78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  285c78:	defffb04 	addi	sp,sp,-20
  285c7c:	dfc00415 	stw	ra,16(sp)
  285c80:	df000315 	stw	fp,12(sp)
  285c84:	df000304 	addi	fp,sp,12
  285c88:	e13ffd15 	stw	r4,-12(fp)
  285c8c:	e17ffe15 	stw	r5,-8(fp)
  285c90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  285c94:	01c07fc4 	movi	r7,511
  285c98:	01800044 	movi	r6,1
  285c9c:	e17ffd17 	ldw	r5,-12(fp)
  285ca0:	01000a34 	movhi	r4,40
  285ca4:	211c8604 	addi	r4,r4,29208
  285ca8:	0285bb40 	call	285bb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  285cac:	01c07fc4 	movi	r7,511
  285cb0:	000d883a 	mov	r6,zero
  285cb4:	e17ffe17 	ldw	r5,-8(fp)
  285cb8:	01000a34 	movhi	r4,40
  285cbc:	211c8304 	addi	r4,r4,29196
  285cc0:	0285bb40 	call	285bb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  285cc4:	01c07fc4 	movi	r7,511
  285cc8:	01800044 	movi	r6,1
  285ccc:	e17fff17 	ldw	r5,-4(fp)
  285cd0:	01000a34 	movhi	r4,40
  285cd4:	211c8904 	addi	r4,r4,29220
  285cd8:	0285bb40 	call	285bb4 <alt_open_fd>
}  
  285cdc:	0001883a 	nop
  285ce0:	e037883a 	mov	sp,fp
  285ce4:	dfc00117 	ldw	ra,4(sp)
  285ce8:	df000017 	ldw	fp,0(sp)
  285cec:	dec00204 	addi	sp,sp,8
  285cf0:	f800283a 	ret

00285cf4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  285cf4:	defff004 	addi	sp,sp,-64
  285cf8:	df000f15 	stw	fp,60(sp)
  285cfc:	df000f04 	addi	fp,sp,60
  285d00:	e13ffd15 	stw	r4,-12(fp)
  285d04:	e17ffe15 	stw	r5,-8(fp)
  285d08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  285d0c:	00bffa84 	movi	r2,-22
  285d10:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  285d14:	e0bffd17 	ldw	r2,-12(fp)
  285d18:	10800828 	cmpgeui	r2,r2,32
  285d1c:	1000501e 	bne	r2,zero,285e60 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  285d20:	0005303a 	rdctl	r2,status
  285d24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  285d28:	e0fff617 	ldw	r3,-40(fp)
  285d2c:	00bfff84 	movi	r2,-2
  285d30:	1884703a 	and	r2,r3,r2
  285d34:	1001703a 	wrctl	status,r2
  
  return context;
  285d38:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  285d3c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  285d40:	00800a74 	movhi	r2,41
  285d44:	10a7fb04 	addi	r2,r2,-24596
  285d48:	e0fffd17 	ldw	r3,-12(fp)
  285d4c:	180690fa 	slli	r3,r3,3
  285d50:	10c5883a 	add	r2,r2,r3
  285d54:	e0ffff17 	ldw	r3,-4(fp)
  285d58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  285d5c:	00800a74 	movhi	r2,41
  285d60:	10a7fb04 	addi	r2,r2,-24596
  285d64:	e0fffd17 	ldw	r3,-12(fp)
  285d68:	180690fa 	slli	r3,r3,3
  285d6c:	10c5883a 	add	r2,r2,r3
  285d70:	10800104 	addi	r2,r2,4
  285d74:	e0fffe17 	ldw	r3,-8(fp)
  285d78:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  285d7c:	e0bfff17 	ldw	r2,-4(fp)
  285d80:	10001926 	beq	r2,zero,285de8 <alt_irq_register+0xf4>
  285d84:	e0bffd17 	ldw	r2,-12(fp)
  285d88:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  285d8c:	0005303a 	rdctl	r2,status
  285d90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  285d94:	e0fff717 	ldw	r3,-36(fp)
  285d98:	00bfff84 	movi	r2,-2
  285d9c:	1884703a 	and	r2,r3,r2
  285da0:	1001703a 	wrctl	status,r2
  
  return context;
  285da4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  285da8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  285dac:	00c00044 	movi	r3,1
  285db0:	e0bff217 	ldw	r2,-56(fp)
  285db4:	1884983a 	sll	r2,r3,r2
  285db8:	1007883a 	mov	r3,r2
  285dbc:	d0a6d117 	ldw	r2,-25788(gp)
  285dc0:	1884b03a 	or	r2,r3,r2
  285dc4:	d0a6d115 	stw	r2,-25788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  285dc8:	d0a6d117 	ldw	r2,-25788(gp)
  285dcc:	100170fa 	wrctl	ienable,r2
  285dd0:	e0bff817 	ldw	r2,-32(fp)
  285dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  285dd8:	e0bff917 	ldw	r2,-28(fp)
  285ddc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  285de0:	0005883a 	mov	r2,zero
  285de4:	00001906 	br	285e4c <alt_irq_register+0x158>
  285de8:	e0bffd17 	ldw	r2,-12(fp)
  285dec:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  285df0:	0005303a 	rdctl	r2,status
  285df4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  285df8:	e0fffa17 	ldw	r3,-24(fp)
  285dfc:	00bfff84 	movi	r2,-2
  285e00:	1884703a 	and	r2,r3,r2
  285e04:	1001703a 	wrctl	status,r2
  
  return context;
  285e08:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  285e0c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  285e10:	00c00044 	movi	r3,1
  285e14:	e0bff417 	ldw	r2,-48(fp)
  285e18:	1884983a 	sll	r2,r3,r2
  285e1c:	0084303a 	nor	r2,zero,r2
  285e20:	1007883a 	mov	r3,r2
  285e24:	d0a6d117 	ldw	r2,-25788(gp)
  285e28:	1884703a 	and	r2,r3,r2
  285e2c:	d0a6d115 	stw	r2,-25788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  285e30:	d0a6d117 	ldw	r2,-25788(gp)
  285e34:	100170fa 	wrctl	ienable,r2
  285e38:	e0bffb17 	ldw	r2,-20(fp)
  285e3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  285e40:	e0bffc17 	ldw	r2,-16(fp)
  285e44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  285e48:	0005883a 	mov	r2,zero
  285e4c:	e0bff115 	stw	r2,-60(fp)
  285e50:	e0bff317 	ldw	r2,-52(fp)
  285e54:	e0bff515 	stw	r2,-44(fp)
  285e58:	e0bff517 	ldw	r2,-44(fp)
  285e5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  285e60:	e0bff117 	ldw	r2,-60(fp)
}
  285e64:	e037883a 	mov	sp,fp
  285e68:	df000017 	ldw	fp,0(sp)
  285e6c:	dec00104 	addi	sp,sp,4
  285e70:	f800283a 	ret

00285e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  285e74:	defffe04 	addi	sp,sp,-8
  285e78:	dfc00115 	stw	ra,4(sp)
  285e7c:	df000015 	stw	fp,0(sp)
  285e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  285e84:	d0a00917 	ldw	r2,-32732(gp)
  285e88:	10000326 	beq	r2,zero,285e98 <alt_get_errno+0x24>
  285e8c:	d0a00917 	ldw	r2,-32732(gp)
  285e90:	103ee83a 	callr	r2
  285e94:	00000106 	br	285e9c <alt_get_errno+0x28>
  285e98:	d0a6cd04 	addi	r2,gp,-25804
}
  285e9c:	e037883a 	mov	sp,fp
  285ea0:	dfc00117 	ldw	ra,4(sp)
  285ea4:	df000017 	ldw	fp,0(sp)
  285ea8:	dec00204 	addi	sp,sp,8
  285eac:	f800283a 	ret

00285eb0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  285eb0:	defffd04 	addi	sp,sp,-12
  285eb4:	df000215 	stw	fp,8(sp)
  285eb8:	df000204 	addi	fp,sp,8
  285ebc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  285ec0:	e0bfff17 	ldw	r2,-4(fp)
  285ec4:	10800217 	ldw	r2,8(r2)
  285ec8:	10d00034 	orhi	r3,r2,16384
  285ecc:	e0bfff17 	ldw	r2,-4(fp)
  285ed0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  285ed4:	e03ffe15 	stw	zero,-8(fp)
  285ed8:	00001d06 	br	285f50 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  285edc:	00800a34 	movhi	r2,40
  285ee0:	109c8304 	addi	r2,r2,29196
  285ee4:	e0fffe17 	ldw	r3,-8(fp)
  285ee8:	18c00324 	muli	r3,r3,12
  285eec:	10c5883a 	add	r2,r2,r3
  285ef0:	10c00017 	ldw	r3,0(r2)
  285ef4:	e0bfff17 	ldw	r2,-4(fp)
  285ef8:	10800017 	ldw	r2,0(r2)
  285efc:	1880111e 	bne	r3,r2,285f44 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  285f00:	00800a34 	movhi	r2,40
  285f04:	109c8304 	addi	r2,r2,29196
  285f08:	e0fffe17 	ldw	r3,-8(fp)
  285f0c:	18c00324 	muli	r3,r3,12
  285f10:	10c5883a 	add	r2,r2,r3
  285f14:	10800204 	addi	r2,r2,8
  285f18:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  285f1c:	1000090e 	bge	r2,zero,285f44 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  285f20:	e0bffe17 	ldw	r2,-8(fp)
  285f24:	10c00324 	muli	r3,r2,12
  285f28:	00800a34 	movhi	r2,40
  285f2c:	109c8304 	addi	r2,r2,29196
  285f30:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  285f34:	e0bfff17 	ldw	r2,-4(fp)
  285f38:	18800226 	beq	r3,r2,285f44 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  285f3c:	00bffcc4 	movi	r2,-13
  285f40:	00000806 	br	285f64 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  285f44:	e0bffe17 	ldw	r2,-8(fp)
  285f48:	10800044 	addi	r2,r2,1
  285f4c:	e0bffe15 	stw	r2,-8(fp)
  285f50:	d0a00817 	ldw	r2,-32736(gp)
  285f54:	1007883a 	mov	r3,r2
  285f58:	e0bffe17 	ldw	r2,-8(fp)
  285f5c:	18bfdf2e 	bgeu	r3,r2,285edc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  285f60:	0005883a 	mov	r2,zero
}
  285f64:	e037883a 	mov	sp,fp
  285f68:	df000017 	ldw	fp,0(sp)
  285f6c:	dec00104 	addi	sp,sp,4
  285f70:	f800283a 	ret

00285f74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  285f74:	defff604 	addi	sp,sp,-40
  285f78:	dfc00915 	stw	ra,36(sp)
  285f7c:	df000815 	stw	fp,32(sp)
  285f80:	df000804 	addi	fp,sp,32
  285f84:	e13ffd15 	stw	r4,-12(fp)
  285f88:	e17ffe15 	stw	r5,-8(fp)
  285f8c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  285f90:	00bfffc4 	movi	r2,-1
  285f94:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  285f98:	00bffb44 	movi	r2,-19
  285f9c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  285fa0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  285fa4:	d1600604 	addi	r5,gp,-32744
  285fa8:	e13ffd17 	ldw	r4,-12(fp)
  285fac:	0285af00 	call	285af0 <alt_find_dev>
  285fb0:	e0bff815 	stw	r2,-32(fp)
  285fb4:	e0bff817 	ldw	r2,-32(fp)
  285fb8:	1000051e 	bne	r2,zero,285fd0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  285fbc:	e13ffd17 	ldw	r4,-12(fp)
  285fc0:	02862900 	call	286290 <alt_find_file>
  285fc4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  285fc8:	00800044 	movi	r2,1
  285fcc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  285fd0:	e0bff817 	ldw	r2,-32(fp)
  285fd4:	10002926 	beq	r2,zero,28607c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  285fd8:	e13ff817 	ldw	r4,-32(fp)
  285fdc:	02863980 	call	286398 <alt_get_fd>
  285fe0:	e0bff915 	stw	r2,-28(fp)
  285fe4:	e0bff917 	ldw	r2,-28(fp)
  285fe8:	1000030e 	bge	r2,zero,285ff8 <open+0x84>
    {
      status = index;
  285fec:	e0bff917 	ldw	r2,-28(fp)
  285ff0:	e0bffa15 	stw	r2,-24(fp)
  285ff4:	00002306 	br	286084 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  285ff8:	e0bff917 	ldw	r2,-28(fp)
  285ffc:	10c00324 	muli	r3,r2,12
  286000:	00800a34 	movhi	r2,40
  286004:	109c8304 	addi	r2,r2,29196
  286008:	1885883a 	add	r2,r3,r2
  28600c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  286010:	e0fffe17 	ldw	r3,-8(fp)
  286014:	00900034 	movhi	r2,16384
  286018:	10bfffc4 	addi	r2,r2,-1
  28601c:	1886703a 	and	r3,r3,r2
  286020:	e0bffc17 	ldw	r2,-16(fp)
  286024:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  286028:	e0bffb17 	ldw	r2,-20(fp)
  28602c:	1000051e 	bne	r2,zero,286044 <open+0xd0>
  286030:	e13ffc17 	ldw	r4,-16(fp)
  286034:	0285eb00 	call	285eb0 <alt_file_locked>
  286038:	e0bffa15 	stw	r2,-24(fp)
  28603c:	e0bffa17 	ldw	r2,-24(fp)
  286040:	10001016 	blt	r2,zero,286084 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  286044:	e0bff817 	ldw	r2,-32(fp)
  286048:	10800317 	ldw	r2,12(r2)
  28604c:	10000826 	beq	r2,zero,286070 <open+0xfc>
  286050:	e0bff817 	ldw	r2,-32(fp)
  286054:	10800317 	ldw	r2,12(r2)
  286058:	e1ffff17 	ldw	r7,-4(fp)
  28605c:	e1bffe17 	ldw	r6,-8(fp)
  286060:	e17ffd17 	ldw	r5,-12(fp)
  286064:	e13ffc17 	ldw	r4,-16(fp)
  286068:	103ee83a 	callr	r2
  28606c:	00000106 	br	286074 <open+0x100>
  286070:	0005883a 	mov	r2,zero
  286074:	e0bffa15 	stw	r2,-24(fp)
  286078:	00000206 	br	286084 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  28607c:	00bffb44 	movi	r2,-19
  286080:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  286084:	e0bffa17 	ldw	r2,-24(fp)
  286088:	1000090e 	bge	r2,zero,2860b0 <open+0x13c>
  {
    alt_release_fd (index);  
  28608c:	e13ff917 	ldw	r4,-28(fp)
  286090:	028385c0 	call	28385c <alt_release_fd>
    ALT_ERRNO = -status;
  286094:	0285e740 	call	285e74 <alt_get_errno>
  286098:	1007883a 	mov	r3,r2
  28609c:	e0bffa17 	ldw	r2,-24(fp)
  2860a0:	0085c83a 	sub	r2,zero,r2
  2860a4:	18800015 	stw	r2,0(r3)
    return -1;
  2860a8:	00bfffc4 	movi	r2,-1
  2860ac:	00000106 	br	2860b4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  2860b0:	e0bff917 	ldw	r2,-28(fp)
}
  2860b4:	e037883a 	mov	sp,fp
  2860b8:	dfc00117 	ldw	ra,4(sp)
  2860bc:	df000017 	ldw	fp,0(sp)
  2860c0:	dec00204 	addi	sp,sp,8
  2860c4:	f800283a 	ret

002860c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  2860c8:	defffa04 	addi	sp,sp,-24
  2860cc:	df000515 	stw	fp,20(sp)
  2860d0:	df000504 	addi	fp,sp,20
  2860d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2860d8:	0005303a 	rdctl	r2,status
  2860dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2860e0:	e0fffc17 	ldw	r3,-16(fp)
  2860e4:	00bfff84 	movi	r2,-2
  2860e8:	1884703a 	and	r2,r3,r2
  2860ec:	1001703a 	wrctl	status,r2
  
  return context;
  2860f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  2860f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  2860f8:	e0bfff17 	ldw	r2,-4(fp)
  2860fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  286100:	e0bffd17 	ldw	r2,-12(fp)
  286104:	10800017 	ldw	r2,0(r2)
  286108:	e0fffd17 	ldw	r3,-12(fp)
  28610c:	18c00117 	ldw	r3,4(r3)
  286110:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  286114:	e0bffd17 	ldw	r2,-12(fp)
  286118:	10800117 	ldw	r2,4(r2)
  28611c:	e0fffd17 	ldw	r3,-12(fp)
  286120:	18c00017 	ldw	r3,0(r3)
  286124:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  286128:	e0bffd17 	ldw	r2,-12(fp)
  28612c:	e0fffd17 	ldw	r3,-12(fp)
  286130:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  286134:	e0bffd17 	ldw	r2,-12(fp)
  286138:	e0fffd17 	ldw	r3,-12(fp)
  28613c:	10c00015 	stw	r3,0(r2)
  286140:	e0bffb17 	ldw	r2,-20(fp)
  286144:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  286148:	e0bffe17 	ldw	r2,-8(fp)
  28614c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  286150:	0001883a 	nop
  286154:	e037883a 	mov	sp,fp
  286158:	df000017 	ldw	fp,0(sp)
  28615c:	dec00104 	addi	sp,sp,4
  286160:	f800283a 	ret

00286164 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  286164:	defffb04 	addi	sp,sp,-20
  286168:	dfc00415 	stw	ra,16(sp)
  28616c:	df000315 	stw	fp,12(sp)
  286170:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  286174:	d0a00c17 	ldw	r2,-32720(gp)
  286178:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  28617c:	d0a6d317 	ldw	r2,-25780(gp)
  286180:	10800044 	addi	r2,r2,1
  286184:	d0a6d315 	stw	r2,-25780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  286188:	00002e06 	br	286244 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  28618c:	e0bffd17 	ldw	r2,-12(fp)
  286190:	10800017 	ldw	r2,0(r2)
  286194:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  286198:	e0bffd17 	ldw	r2,-12(fp)
  28619c:	10800403 	ldbu	r2,16(r2)
  2861a0:	10803fcc 	andi	r2,r2,255
  2861a4:	10000426 	beq	r2,zero,2861b8 <alt_tick+0x54>
  2861a8:	d0a6d317 	ldw	r2,-25780(gp)
  2861ac:	1000021e 	bne	r2,zero,2861b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  2861b0:	e0bffd17 	ldw	r2,-12(fp)
  2861b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  2861b8:	e0bffd17 	ldw	r2,-12(fp)
  2861bc:	10800217 	ldw	r2,8(r2)
  2861c0:	d0e6d317 	ldw	r3,-25780(gp)
  2861c4:	18801d36 	bltu	r3,r2,28623c <alt_tick+0xd8>
  2861c8:	e0bffd17 	ldw	r2,-12(fp)
  2861cc:	10800403 	ldbu	r2,16(r2)
  2861d0:	10803fcc 	andi	r2,r2,255
  2861d4:	1000191e 	bne	r2,zero,28623c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  2861d8:	e0bffd17 	ldw	r2,-12(fp)
  2861dc:	10800317 	ldw	r2,12(r2)
  2861e0:	e0fffd17 	ldw	r3,-12(fp)
  2861e4:	18c00517 	ldw	r3,20(r3)
  2861e8:	1809883a 	mov	r4,r3
  2861ec:	103ee83a 	callr	r2
  2861f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  2861f4:	e0bfff17 	ldw	r2,-4(fp)
  2861f8:	1000031e 	bne	r2,zero,286208 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  2861fc:	e13ffd17 	ldw	r4,-12(fp)
  286200:	02860c80 	call	2860c8 <alt_alarm_stop>
  286204:	00000d06 	br	28623c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  286208:	e0bffd17 	ldw	r2,-12(fp)
  28620c:	10c00217 	ldw	r3,8(r2)
  286210:	e0bfff17 	ldw	r2,-4(fp)
  286214:	1887883a 	add	r3,r3,r2
  286218:	e0bffd17 	ldw	r2,-12(fp)
  28621c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  286220:	e0bffd17 	ldw	r2,-12(fp)
  286224:	10c00217 	ldw	r3,8(r2)
  286228:	d0a6d317 	ldw	r2,-25780(gp)
  28622c:	1880032e 	bgeu	r3,r2,28623c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  286230:	e0bffd17 	ldw	r2,-12(fp)
  286234:	00c00044 	movi	r3,1
  286238:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  28623c:	e0bffe17 	ldw	r2,-8(fp)
  286240:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  286244:	e0fffd17 	ldw	r3,-12(fp)
  286248:	d0a00c04 	addi	r2,gp,-32720
  28624c:	18bfcf1e 	bne	r3,r2,28618c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  286250:	0001883a 	nop
}
  286254:	0001883a 	nop
  286258:	e037883a 	mov	sp,fp
  28625c:	dfc00117 	ldw	ra,4(sp)
  286260:	df000017 	ldw	fp,0(sp)
  286264:	dec00204 	addi	sp,sp,8
  286268:	f800283a 	ret

0028626c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  28626c:	deffff04 	addi	sp,sp,-4
  286270:	df000015 	stw	fp,0(sp)
  286274:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  286278:	000170fa 	wrctl	ienable,zero
}
  28627c:	0001883a 	nop
  286280:	e037883a 	mov	sp,fp
  286284:	df000017 	ldw	fp,0(sp)
  286288:	dec00104 	addi	sp,sp,4
  28628c:	f800283a 	ret

00286290 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  286290:	defffb04 	addi	sp,sp,-20
  286294:	dfc00415 	stw	ra,16(sp)
  286298:	df000315 	stw	fp,12(sp)
  28629c:	df000304 	addi	fp,sp,12
  2862a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  2862a4:	d0a00417 	ldw	r2,-32752(gp)
  2862a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2862ac:	00003106 	br	286374 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  2862b0:	e0bffd17 	ldw	r2,-12(fp)
  2862b4:	10800217 	ldw	r2,8(r2)
  2862b8:	1009883a 	mov	r4,r2
  2862bc:	02806200 	call	280620 <strlen>
  2862c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  2862c4:	e0bffd17 	ldw	r2,-12(fp)
  2862c8:	10c00217 	ldw	r3,8(r2)
  2862cc:	e0bffe17 	ldw	r2,-8(fp)
  2862d0:	10bfffc4 	addi	r2,r2,-1
  2862d4:	1885883a 	add	r2,r3,r2
  2862d8:	10800003 	ldbu	r2,0(r2)
  2862dc:	10803fcc 	andi	r2,r2,255
  2862e0:	1080201c 	xori	r2,r2,128
  2862e4:	10bfe004 	addi	r2,r2,-128
  2862e8:	10800bd8 	cmpnei	r2,r2,47
  2862ec:	1000031e 	bne	r2,zero,2862fc <alt_find_file+0x6c>
    {
      len -= 1;
  2862f0:	e0bffe17 	ldw	r2,-8(fp)
  2862f4:	10bfffc4 	addi	r2,r2,-1
  2862f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  2862fc:	e0bffe17 	ldw	r2,-8(fp)
  286300:	e0ffff17 	ldw	r3,-4(fp)
  286304:	1885883a 	add	r2,r3,r2
  286308:	10800003 	ldbu	r2,0(r2)
  28630c:	10803fcc 	andi	r2,r2,255
  286310:	1080201c 	xori	r2,r2,128
  286314:	10bfe004 	addi	r2,r2,-128
  286318:	10800be0 	cmpeqi	r2,r2,47
  28631c:	1000081e 	bne	r2,zero,286340 <alt_find_file+0xb0>
  286320:	e0bffe17 	ldw	r2,-8(fp)
  286324:	e0ffff17 	ldw	r3,-4(fp)
  286328:	1885883a 	add	r2,r3,r2
  28632c:	10800003 	ldbu	r2,0(r2)
  286330:	10803fcc 	andi	r2,r2,255
  286334:	1080201c 	xori	r2,r2,128
  286338:	10bfe004 	addi	r2,r2,-128
  28633c:	10000a1e 	bne	r2,zero,286368 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  286340:	e0bffd17 	ldw	r2,-12(fp)
  286344:	10800217 	ldw	r2,8(r2)
  286348:	e0fffe17 	ldw	r3,-8(fp)
  28634c:	180d883a 	mov	r6,r3
  286350:	e17fff17 	ldw	r5,-4(fp)
  286354:	1009883a 	mov	r4,r2
  286358:	02865b40 	call	2865b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  28635c:	1000021e 	bne	r2,zero,286368 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  286360:	e0bffd17 	ldw	r2,-12(fp)
  286364:	00000706 	br	286384 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  286368:	e0bffd17 	ldw	r2,-12(fp)
  28636c:	10800017 	ldw	r2,0(r2)
  286370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  286374:	e0fffd17 	ldw	r3,-12(fp)
  286378:	d0a00404 	addi	r2,gp,-32752
  28637c:	18bfcc1e 	bne	r3,r2,2862b0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  286380:	0005883a 	mov	r2,zero
}
  286384:	e037883a 	mov	sp,fp
  286388:	dfc00117 	ldw	ra,4(sp)
  28638c:	df000017 	ldw	fp,0(sp)
  286390:	dec00204 	addi	sp,sp,8
  286394:	f800283a 	ret

00286398 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  286398:	defffc04 	addi	sp,sp,-16
  28639c:	df000315 	stw	fp,12(sp)
  2863a0:	df000304 	addi	fp,sp,12
  2863a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  2863a8:	00bffa04 	movi	r2,-24
  2863ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2863b0:	e03ffd15 	stw	zero,-12(fp)
  2863b4:	00001906 	br	28641c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  2863b8:	00800a34 	movhi	r2,40
  2863bc:	109c8304 	addi	r2,r2,29196
  2863c0:	e0fffd17 	ldw	r3,-12(fp)
  2863c4:	18c00324 	muli	r3,r3,12
  2863c8:	10c5883a 	add	r2,r2,r3
  2863cc:	10800017 	ldw	r2,0(r2)
  2863d0:	10000f1e 	bne	r2,zero,286410 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  2863d4:	00800a34 	movhi	r2,40
  2863d8:	109c8304 	addi	r2,r2,29196
  2863dc:	e0fffd17 	ldw	r3,-12(fp)
  2863e0:	18c00324 	muli	r3,r3,12
  2863e4:	10c5883a 	add	r2,r2,r3
  2863e8:	e0ffff17 	ldw	r3,-4(fp)
  2863ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  2863f0:	d0e00817 	ldw	r3,-32736(gp)
  2863f4:	e0bffd17 	ldw	r2,-12(fp)
  2863f8:	1880020e 	bge	r3,r2,286404 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  2863fc:	e0bffd17 	ldw	r2,-12(fp)
  286400:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  286404:	e0bffd17 	ldw	r2,-12(fp)
  286408:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  28640c:	00000606 	br	286428 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  286410:	e0bffd17 	ldw	r2,-12(fp)
  286414:	10800044 	addi	r2,r2,1
  286418:	e0bffd15 	stw	r2,-12(fp)
  28641c:	e0bffd17 	ldw	r2,-12(fp)
  286420:	10800810 	cmplti	r2,r2,32
  286424:	103fe41e 	bne	r2,zero,2863b8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  286428:	e0bffe17 	ldw	r2,-8(fp)
}
  28642c:	e037883a 	mov	sp,fp
  286430:	df000017 	ldw	fp,0(sp)
  286434:	dec00104 	addi	sp,sp,4
  286438:	f800283a 	ret

0028643c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  28643c:	defffb04 	addi	sp,sp,-20
  286440:	df000415 	stw	fp,16(sp)
  286444:	df000404 	addi	fp,sp,16
  286448:	e13ffe15 	stw	r4,-8(fp)
  28644c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  286450:	e0bfff17 	ldw	r2,-4(fp)
  286454:	10840070 	cmpltui	r2,r2,4097
  286458:	1000021e 	bne	r2,zero,286464 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  28645c:	00840004 	movi	r2,4096
  286460:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  286464:	e0fffe17 	ldw	r3,-8(fp)
  286468:	e0bfff17 	ldw	r2,-4(fp)
  28646c:	1885883a 	add	r2,r3,r2
  286470:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  286474:	e0bffe17 	ldw	r2,-8(fp)
  286478:	e0bffc15 	stw	r2,-16(fp)
  28647c:	00000506 	br	286494 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  286480:	e0bffc17 	ldw	r2,-16(fp)
  286484:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  286488:	e0bffc17 	ldw	r2,-16(fp)
  28648c:	10800804 	addi	r2,r2,32
  286490:	e0bffc15 	stw	r2,-16(fp)
  286494:	e0fffc17 	ldw	r3,-16(fp)
  286498:	e0bffd17 	ldw	r2,-12(fp)
  28649c:	18bff836 	bltu	r3,r2,286480 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  2864a0:	e0bffe17 	ldw	r2,-8(fp)
  2864a4:	108007cc 	andi	r2,r2,31
  2864a8:	10000226 	beq	r2,zero,2864b4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  2864ac:	e0bffc17 	ldw	r2,-16(fp)
  2864b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  2864b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  2864b8:	0001883a 	nop
  2864bc:	e037883a 	mov	sp,fp
  2864c0:	df000017 	ldw	fp,0(sp)
  2864c4:	dec00104 	addi	sp,sp,4
  2864c8:	f800283a 	ret

002864cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  2864cc:	defffe04 	addi	sp,sp,-8
  2864d0:	df000115 	stw	fp,4(sp)
  2864d4:	df000104 	addi	fp,sp,4
  2864d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  2864dc:	e0bfff17 	ldw	r2,-4(fp)
  2864e0:	10bffe84 	addi	r2,r2,-6
  2864e4:	10c00428 	cmpgeui	r3,r2,16
  2864e8:	18001a1e 	bne	r3,zero,286554 <alt_exception_cause_generated_bad_addr+0x88>
  2864ec:	100690ba 	slli	r3,r2,2
  2864f0:	00800a34 	movhi	r2,40
  2864f4:	10994104 	addi	r2,r2,25860
  2864f8:	1885883a 	add	r2,r3,r2
  2864fc:	10800017 	ldw	r2,0(r2)
  286500:	1000683a 	jmp	r2
  286504:	00286544 	movi	zero,-24171
  286508:	00286544 	movi	zero,-24171
  28650c:	00286554 	movui	zero,41365
  286510:	00286554 	movui	zero,41365
  286514:	00286554 	movui	zero,41365
  286518:	00286544 	movi	zero,-24171
  28651c:	0028654c 	andi	zero,zero,41365
  286520:	00286554 	movui	zero,41365
  286524:	00286544 	movi	zero,-24171
  286528:	00286544 	movi	zero,-24171
  28652c:	00286554 	movui	zero,41365
  286530:	00286544 	movi	zero,-24171
  286534:	0028654c 	andi	zero,zero,41365
  286538:	00286554 	movui	zero,41365
  28653c:	00286554 	movui	zero,41365
  286540:	00286544 	movi	zero,-24171
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  286544:	00800044 	movi	r2,1
  286548:	00000306 	br	286558 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  28654c:	0005883a 	mov	r2,zero
  286550:	00000106 	br	286558 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  286554:	0005883a 	mov	r2,zero
  }
}
  286558:	e037883a 	mov	sp,fp
  28655c:	df000017 	ldw	fp,0(sp)
  286560:	dec00104 	addi	sp,sp,4
  286564:	f800283a 	ret

00286568 <atexit>:
  286568:	200b883a 	mov	r5,r4
  28656c:	000f883a 	mov	r7,zero
  286570:	000d883a 	mov	r6,zero
  286574:	0009883a 	mov	r4,zero
  286578:	02866301 	jmpi	286630 <__register_exitproc>

0028657c <exit>:
  28657c:	defffe04 	addi	sp,sp,-8
  286580:	000b883a 	mov	r5,zero
  286584:	dc000015 	stw	r16,0(sp)
  286588:	dfc00115 	stw	ra,4(sp)
  28658c:	2021883a 	mov	r16,r4
  286590:	02867480 	call	286748 <__call_exitprocs>
  286594:	00800a74 	movhi	r2,41
  286598:	10a11c04 	addi	r2,r2,-31632
  28659c:	11000017 	ldw	r4,0(r2)
  2865a0:	20800f17 	ldw	r2,60(r4)
  2865a4:	10000126 	beq	r2,zero,2865ac <exit+0x30>
  2865a8:	103ee83a 	callr	r2
  2865ac:	8009883a 	mov	r4,r16
  2865b0:	02868c80 	call	2868c8 <_exit>

002865b4 <memcmp>:
  2865b4:	01c000c4 	movi	r7,3
  2865b8:	3980192e 	bgeu	r7,r6,286620 <memcmp+0x6c>
  2865bc:	2144b03a 	or	r2,r4,r5
  2865c0:	11c4703a 	and	r2,r2,r7
  2865c4:	10000f26 	beq	r2,zero,286604 <memcmp+0x50>
  2865c8:	20800003 	ldbu	r2,0(r4)
  2865cc:	28c00003 	ldbu	r3,0(r5)
  2865d0:	10c0151e 	bne	r2,r3,286628 <memcmp+0x74>
  2865d4:	31bfff84 	addi	r6,r6,-2
  2865d8:	01ffffc4 	movi	r7,-1
  2865dc:	00000406 	br	2865f0 <memcmp+0x3c>
  2865e0:	20800003 	ldbu	r2,0(r4)
  2865e4:	28c00003 	ldbu	r3,0(r5)
  2865e8:	31bfffc4 	addi	r6,r6,-1
  2865ec:	10c00e1e 	bne	r2,r3,286628 <memcmp+0x74>
  2865f0:	21000044 	addi	r4,r4,1
  2865f4:	29400044 	addi	r5,r5,1
  2865f8:	31fff91e 	bne	r6,r7,2865e0 <memcmp+0x2c>
  2865fc:	0005883a 	mov	r2,zero
  286600:	f800283a 	ret
  286604:	20c00017 	ldw	r3,0(r4)
  286608:	28800017 	ldw	r2,0(r5)
  28660c:	18bfee1e 	bne	r3,r2,2865c8 <memcmp+0x14>
  286610:	31bfff04 	addi	r6,r6,-4
  286614:	21000104 	addi	r4,r4,4
  286618:	29400104 	addi	r5,r5,4
  28661c:	39bff936 	bltu	r7,r6,286604 <memcmp+0x50>
  286620:	303fe91e 	bne	r6,zero,2865c8 <memcmp+0x14>
  286624:	003ff506 	br	2865fc <memcmp+0x48>
  286628:	10c5c83a 	sub	r2,r2,r3
  28662c:	f800283a 	ret

00286630 <__register_exitproc>:
  286630:	defffa04 	addi	sp,sp,-24
  286634:	dc000315 	stw	r16,12(sp)
  286638:	04000a74 	movhi	r16,41
  28663c:	84211c04 	addi	r16,r16,-31632
  286640:	80c00017 	ldw	r3,0(r16)
  286644:	dc400415 	stw	r17,16(sp)
  286648:	dfc00515 	stw	ra,20(sp)
  28664c:	18805217 	ldw	r2,328(r3)
  286650:	2023883a 	mov	r17,r4
  286654:	10003726 	beq	r2,zero,286734 <__register_exitproc+0x104>
  286658:	10c00117 	ldw	r3,4(r2)
  28665c:	010007c4 	movi	r4,31
  286660:	20c00e16 	blt	r4,r3,28669c <__register_exitproc+0x6c>
  286664:	1a000044 	addi	r8,r3,1
  286668:	8800221e 	bne	r17,zero,2866f4 <__register_exitproc+0xc4>
  28666c:	18c00084 	addi	r3,r3,2
  286670:	18c7883a 	add	r3,r3,r3
  286674:	18c7883a 	add	r3,r3,r3
  286678:	12000115 	stw	r8,4(r2)
  28667c:	10c7883a 	add	r3,r2,r3
  286680:	19400015 	stw	r5,0(r3)
  286684:	0005883a 	mov	r2,zero
  286688:	dfc00517 	ldw	ra,20(sp)
  28668c:	dc400417 	ldw	r17,16(sp)
  286690:	dc000317 	ldw	r16,12(sp)
  286694:	dec00604 	addi	sp,sp,24
  286698:	f800283a 	ret
  28669c:	00800034 	movhi	r2,0
  2866a0:	10800004 	addi	r2,r2,0
  2866a4:	10002626 	beq	r2,zero,286740 <__register_exitproc+0x110>
  2866a8:	01006404 	movi	r4,400
  2866ac:	d9400015 	stw	r5,0(sp)
  2866b0:	d9800115 	stw	r6,4(sp)
  2866b4:	d9c00215 	stw	r7,8(sp)
  2866b8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x280000>
  2866bc:	d9400017 	ldw	r5,0(sp)
  2866c0:	d9800117 	ldw	r6,4(sp)
  2866c4:	d9c00217 	ldw	r7,8(sp)
  2866c8:	10001d26 	beq	r2,zero,286740 <__register_exitproc+0x110>
  2866cc:	81000017 	ldw	r4,0(r16)
  2866d0:	10000115 	stw	zero,4(r2)
  2866d4:	02000044 	movi	r8,1
  2866d8:	22405217 	ldw	r9,328(r4)
  2866dc:	0007883a 	mov	r3,zero
  2866e0:	12400015 	stw	r9,0(r2)
  2866e4:	20805215 	stw	r2,328(r4)
  2866e8:	10006215 	stw	zero,392(r2)
  2866ec:	10006315 	stw	zero,396(r2)
  2866f0:	883fde26 	beq	r17,zero,28666c <__register_exitproc+0x3c>
  2866f4:	18c9883a 	add	r4,r3,r3
  2866f8:	2109883a 	add	r4,r4,r4
  2866fc:	1109883a 	add	r4,r2,r4
  286700:	21802215 	stw	r6,136(r4)
  286704:	01800044 	movi	r6,1
  286708:	12406217 	ldw	r9,392(r2)
  28670c:	30cc983a 	sll	r6,r6,r3
  286710:	4992b03a 	or	r9,r9,r6
  286714:	12406215 	stw	r9,392(r2)
  286718:	21c04215 	stw	r7,264(r4)
  28671c:	01000084 	movi	r4,2
  286720:	893fd21e 	bne	r17,r4,28666c <__register_exitproc+0x3c>
  286724:	11006317 	ldw	r4,396(r2)
  286728:	218cb03a 	or	r6,r4,r6
  28672c:	11806315 	stw	r6,396(r2)
  286730:	003fce06 	br	28666c <__register_exitproc+0x3c>
  286734:	18805304 	addi	r2,r3,332
  286738:	18805215 	stw	r2,328(r3)
  28673c:	003fc606 	br	286658 <__register_exitproc+0x28>
  286740:	00bfffc4 	movi	r2,-1
  286744:	003fd006 	br	286688 <__register_exitproc+0x58>

00286748 <__call_exitprocs>:
  286748:	defff504 	addi	sp,sp,-44
  28674c:	df000915 	stw	fp,36(sp)
  286750:	dd400615 	stw	r21,24(sp)
  286754:	dc800315 	stw	r18,12(sp)
  286758:	dfc00a15 	stw	ra,40(sp)
  28675c:	ddc00815 	stw	r23,32(sp)
  286760:	dd800715 	stw	r22,28(sp)
  286764:	dd000515 	stw	r20,20(sp)
  286768:	dcc00415 	stw	r19,16(sp)
  28676c:	dc400215 	stw	r17,8(sp)
  286770:	dc000115 	stw	r16,4(sp)
  286774:	d9000015 	stw	r4,0(sp)
  286778:	2839883a 	mov	fp,r5
  28677c:	04800044 	movi	r18,1
  286780:	057fffc4 	movi	r21,-1
  286784:	00800a74 	movhi	r2,41
  286788:	10a11c04 	addi	r2,r2,-31632
  28678c:	12000017 	ldw	r8,0(r2)
  286790:	45005217 	ldw	r20,328(r8)
  286794:	44c05204 	addi	r19,r8,328
  286798:	a0001c26 	beq	r20,zero,28680c <__call_exitprocs+0xc4>
  28679c:	a0800117 	ldw	r2,4(r20)
  2867a0:	15ffffc4 	addi	r23,r2,-1
  2867a4:	b8000d16 	blt	r23,zero,2867dc <__call_exitprocs+0x94>
  2867a8:	14000044 	addi	r16,r2,1
  2867ac:	8421883a 	add	r16,r16,r16
  2867b0:	8421883a 	add	r16,r16,r16
  2867b4:	84402004 	addi	r17,r16,128
  2867b8:	a463883a 	add	r17,r20,r17
  2867bc:	a421883a 	add	r16,r20,r16
  2867c0:	e0001e26 	beq	fp,zero,28683c <__call_exitprocs+0xf4>
  2867c4:	80804017 	ldw	r2,256(r16)
  2867c8:	e0801c26 	beq	fp,r2,28683c <__call_exitprocs+0xf4>
  2867cc:	bdffffc4 	addi	r23,r23,-1
  2867d0:	843fff04 	addi	r16,r16,-4
  2867d4:	8c7fff04 	addi	r17,r17,-4
  2867d8:	bd7ff91e 	bne	r23,r21,2867c0 <__call_exitprocs+0x78>
  2867dc:	00800034 	movhi	r2,0
  2867e0:	10800004 	addi	r2,r2,0
  2867e4:	10000926 	beq	r2,zero,28680c <__call_exitprocs+0xc4>
  2867e8:	a0800117 	ldw	r2,4(r20)
  2867ec:	1000301e 	bne	r2,zero,2868b0 <__call_exitprocs+0x168>
  2867f0:	a0800017 	ldw	r2,0(r20)
  2867f4:	10003226 	beq	r2,zero,2868c0 <__call_exitprocs+0x178>
  2867f8:	a009883a 	mov	r4,r20
  2867fc:	98800015 	stw	r2,0(r19)
  286800:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x280000>
  286804:	9d000017 	ldw	r20,0(r19)
  286808:	a03fe41e 	bne	r20,zero,28679c <__call_exitprocs+0x54>
  28680c:	dfc00a17 	ldw	ra,40(sp)
  286810:	df000917 	ldw	fp,36(sp)
  286814:	ddc00817 	ldw	r23,32(sp)
  286818:	dd800717 	ldw	r22,28(sp)
  28681c:	dd400617 	ldw	r21,24(sp)
  286820:	dd000517 	ldw	r20,20(sp)
  286824:	dcc00417 	ldw	r19,16(sp)
  286828:	dc800317 	ldw	r18,12(sp)
  28682c:	dc400217 	ldw	r17,8(sp)
  286830:	dc000117 	ldw	r16,4(sp)
  286834:	dec00b04 	addi	sp,sp,44
  286838:	f800283a 	ret
  28683c:	a0800117 	ldw	r2,4(r20)
  286840:	80c00017 	ldw	r3,0(r16)
  286844:	10bfffc4 	addi	r2,r2,-1
  286848:	15c01426 	beq	r2,r23,28689c <__call_exitprocs+0x154>
  28684c:	80000015 	stw	zero,0(r16)
  286850:	183fde26 	beq	r3,zero,2867cc <__call_exitprocs+0x84>
  286854:	95c8983a 	sll	r4,r18,r23
  286858:	a0806217 	ldw	r2,392(r20)
  28685c:	a5800117 	ldw	r22,4(r20)
  286860:	2084703a 	and	r2,r4,r2
  286864:	10000b26 	beq	r2,zero,286894 <__call_exitprocs+0x14c>
  286868:	a0806317 	ldw	r2,396(r20)
  28686c:	2088703a 	and	r4,r4,r2
  286870:	20000c1e 	bne	r4,zero,2868a4 <__call_exitprocs+0x15c>
  286874:	89400017 	ldw	r5,0(r17)
  286878:	d9000017 	ldw	r4,0(sp)
  28687c:	183ee83a 	callr	r3
  286880:	a0800117 	ldw	r2,4(r20)
  286884:	15bfbf1e 	bne	r2,r22,286784 <__call_exitprocs+0x3c>
  286888:	98800017 	ldw	r2,0(r19)
  28688c:	153fcf26 	beq	r2,r20,2867cc <__call_exitprocs+0x84>
  286890:	003fbc06 	br	286784 <__call_exitprocs+0x3c>
  286894:	183ee83a 	callr	r3
  286898:	003ff906 	br	286880 <__call_exitprocs+0x138>
  28689c:	a5c00115 	stw	r23,4(r20)
  2868a0:	003feb06 	br	286850 <__call_exitprocs+0x108>
  2868a4:	89000017 	ldw	r4,0(r17)
  2868a8:	183ee83a 	callr	r3
  2868ac:	003ff406 	br	286880 <__call_exitprocs+0x138>
  2868b0:	a0800017 	ldw	r2,0(r20)
  2868b4:	a027883a 	mov	r19,r20
  2868b8:	1029883a 	mov	r20,r2
  2868bc:	003fb606 	br	286798 <__call_exitprocs+0x50>
  2868c0:	0005883a 	mov	r2,zero
  2868c4:	003ffb06 	br	2868b4 <__call_exitprocs+0x16c>

002868c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  2868c8:	defffd04 	addi	sp,sp,-12
  2868cc:	df000215 	stw	fp,8(sp)
  2868d0:	df000204 	addi	fp,sp,8
  2868d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  2868d8:	0001883a 	nop
  2868dc:	e0bfff17 	ldw	r2,-4(fp)
  2868e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  2868e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  2868e8:	10000226 	beq	r2,zero,2868f4 <_exit+0x2c>
    ALT_SIM_FAIL();
  2868ec:	002af070 	cmpltui	zero,zero,43969
  2868f0:	00000106 	br	2868f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  2868f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  2868f8:	003fff06 	br	2868f8 <_exit+0x30>
