
gameconsole.elf:     file format elf32-littlenios2
gameconsole.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01080248

Program Header:
    LOAD off    0x00001000 vaddr 0x01080000 paddr 0x01080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01080020 paddr 0x01080020 align 2**12
         filesz 0x00006840 memsz 0x00006840 flags r-x
    LOAD off    0x00007860 vaddr 0x01086860 paddr 0x01088350 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00009e40 vaddr 0x01089e40 paddr 0x01089e40 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  01080020  01080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000655c  01080248  01080248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  010867a4  010867a4  000077a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  01086860  01088350  00007860  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  01089e40  01089e40  00009e40  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00800000  00800000  00009350  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01089f94  01089f94  00009350  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00009350  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a10  00000000  00000000  00009378  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017125  00000000  00000000  00009d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000060b6  00000000  00000000  00020ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007017  00000000  00000000  00026f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001740  00000000  00000000  0002df7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000298f  00000000  00000000  0002f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0003204b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00036a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00036ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000398ba  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000398bd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000398c9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000398ca  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000398cb  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000398d6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000398e1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  000398ec  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  000398f7  2**0
                  CONTENTS, READONLY
 27 .jdi          00005da1  00000000  00000000  0003992b  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005ed44  00000000  00000000  0003f6cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 .entry
01080020 l    d  .exceptions	00000000 .exceptions
01080248 l    d  .text	00000000 .text
010867a4 l    d  .rodata	00000000 .rodata
01086860 l    d  .rwdata	00000000 .rwdata
01089e40 l    d  .bss	00000000 .bss
00800000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
01089f94 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gameconsole_bsp//obj/HAL/src/crt0.o
01080290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
01080534 l     F .text	00000008 __fp_unlock
01080548 l     F .text	0000019c __sinit.part.1
010806e4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01086860 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
01083190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0108329c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010832c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010833b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01083494 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01083580 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01083754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01088340 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010839a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01083ad4 l     F .text	00000034 alt_dev_reg
01087234 l     O .rwdata	00001060 jtag_uart_0
01088294 l     O .rwdata	00000030 audio_0
010882c4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01083f88 l     F .text	00000210 altera_avalon_jtag_uart_irq
01084198 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010857f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01085a5c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01085d1c l     F .text	0000003c alt_get_errno
01085d58 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01089e68 g     O .bss	00000004 alt_instruction_exception_handler
01082f88 g     F .text	00000054 _isatty_r
01083690 g     F .text	0000007c alt_main
010850a4 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
010803c8 g     F .text	000000c0 _puts_r
01089e94 g     O .bss	00000100 alt_irq
01082cb0 g     F .text	00000060 _lseek_r
01088350 g       *ABS*	00000000 __flash_rwdata_start
01089f94 g       *ABS*	00000000 __alt_heap_start
01082264 g     F .text	0000005c __sseek
01080884 g     F .text	00000010 __sinit
010806ec g     F .text	00000068 __sfmoreglue
01083730 g     F .text	00000024 __malloc_unlock
01081950 g     F .text	0000015c memmove
0108086c g     F .text	00000018 _cleanup
0108480c g     F .text	00000194 alt_up_pixel_buffer_dma_draw
01086114 g     F .text	00000024 altera_nios2_gen2_irq_init
010847d0 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
01080000 g     F .entry	0000001c __reset
01080020 g       *ABS*	00000000 __flash_exceptions_start
01082f2c g     F .text	0000005c _fstat_r
01089e4c g     O .bss	00000004 errno
010821e0 g     F .text	00000008 __seofread
01089e54 g     O .bss	00000004 alt_argv
01090318 g       *ABS*	00000000 _gp
010849a0 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
010870b4 g     O .rwdata	00000180 alt_fd_list
01085998 g     F .text	00000090 alt_find_dev
01081808 g     F .text	00000148 memcpy
0108053c g     F .text	0000000c _cleanup_r
01085b20 g     F .text	0000007c alt_io_redirect
010867a4 g       *ABS*	00000000 __DTOR_END__
01080488 g     F .text	00000014 puts
01086374 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01084a5c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
01084390 g     F .text	0000021c altera_avalon_jtag_uart_read
01080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010830d4 g     F .text	00000064 .hidden __udivsi3
010833f0 g     F .text	000000a4 isatty
01084e94 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
010862e4 g     F .text	00000090 alt_icache_flush
01089e48 g     O .bss	00000004 __malloc_top_pad
010808d4 g     F .text	000004bc __sfvwrite_r
01082138 g     F .text	00000054 _sbrk_r
010853b8 g     F .text	00000084 helper_plot_pixel
01082ecc g     F .text	00000060 _read_r
01088338 g     O .rwdata	00000004 alt_max_fd
010824d0 g     F .text	000000f0 _fclose_r
0108284c g     F .text	00000030 fflush
01089e44 g     O .bss	00000004 __malloc_max_sbrked_mem
01085b9c g     F .text	00000180 alt_irq_register
01084a90 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
010835bc g     F .text	000000d4 lseek
01088318 g     O .rwdata	00000004 _global_impure_ptr
01081bd4 g     F .text	00000564 _realloc_r
01089f94 g       *ABS*	00000000 __bss_end
01084bb8 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
0108600c g     F .text	00000108 alt_tick
010808a4 g     F .text	00000018 __fp_lock_all
01085f70 g     F .text	0000009c alt_alarm_stop
010802e4 g     F .text	00000040 update_screen
01089e5c g     O .bss	00000004 alt_irq_active
010800fc g     F .exceptions	000000d8 alt_irq_handler
0108708c g     O .rwdata	00000028 alt_dev_null
01080294 g     F .text	00000050 set_pixel_color
010857b0 g     F .text	00000048 alt_dcache_flush_all
010852f0 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
01088350 g       *ABS*	00000000 __ram_rwdata_end
01088330 g     O .rwdata	00000008 alt_dev_list
010839dc g     F .text	000000f8 write
0108543c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
01086860 g       *ABS*	00000000 __ram_rodata_end
01083304 g     F .text	000000b0 fstat
01083138 g     F .text	00000058 .hidden __umodsi3
01089f94 g       *ABS*	00000000 end
01083ed4 g     F .text	000000b4 altera_avalon_jtag_uart_init
010801d4 g     F .exceptions	00000074 alt_instruction_exception_entry
010867a4 g       *ABS*	00000000 __CTOR_LIST__
010e1a80 g       *ABS*	00000000 __alt_stack_pointer
010845ac g     F .text	00000224 altera_avalon_jtag_uart_write
01080894 g     F .text	00000004 __sfp_lock_acquire
01081724 g     F .text	000000e4 memchr
010829a0 g     F .text	00000310 _free_r
010865f0 g     F .text	00000180 __call_exitprocs
01088320 g     O .rwdata	00000004 __malloc_sbrk_base
01080248 g     F .text	0000004c _start
01089e60 g     O .bss	00000004 _alt_tick_rate
01089e64 g     O .bss	00000004 _alt_nticks
01083790 g     F .text	000000fc read
01083b40 g     F .text	00000230 alt_sys_init
010864d8 g     F .text	00000118 __register_exitproc
01084238 g     F .text	00000068 altera_avalon_jtag_uart_close
01086860 g       *ABS*	00000000 __ram_rwdata_start
010867a4 g       *ABS*	00000000 __ram_rodata_start
01089e6c g     O .bss	00000028 __malloc_current_mallinfo
01083d70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01086240 g     F .text	000000a4 alt_get_fd
0108247c g     F .text	00000054 _close_r
0108645c g     F .text	0000007c memcmp
01083e30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01089f94 g       *ABS*	00000000 __alt_stack_base
01083e80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01082328 g     F .text	00000154 __swsetup_r
01080754 g     F .text	00000118 __sfp
01086c84 g     O .rwdata	00000408 __malloc_av_
010808a0 g     F .text	00000004 __sinit_lock_release
0108218c g     F .text	00000054 __sread
01086138 g     F .text	00000108 alt_find_file
01085834 g     F .text	000000a4 alt_dev_llist_insert
0108370c g     F .text	00000024 __malloc_lock
010838f0 g     F .text	000000b0 sbrk
010827f0 g     F .text	0000005c _fflush_r
01089e40 g       *ABS*	00000000 __bss_start
01081aac g     F .text	00000128 memset
01080324 g     F .text	000000a4 main
01089e58 g     O .bss	00000004 alt_envp
01089e40 g     O .bss	00000004 __malloc_max_total_mem
010849fc g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
01083dd0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
010822c0 g     F .text	00000008 __sclose
010e1a80 g       *ABS*	00000000 __alt_heap_limit
010825c0 g     F .text	00000014 fclose
01080f18 g     F .text	0000080c _malloc_r
0108833c g     O .rwdata	00000004 alt_errno
01080d90 g     F .text	000000c4 _fwalk
01082fdc g     F .text	00000084 .hidden __divsi3
0108287c g     F .text	00000124 _malloc_trim_r
010867a4 g       *ABS*	00000000 __CTOR_END__
010867a4 g       *ABS*	00000000 __flash_rodata_start
010867a4 g       *ABS*	00000000 __DTOR_LIST__
01083b08 g     F .text	00000038 alt_irq_init
0108388c g     F .text	00000064 alt_release_fd
01086410 g     F .text	00000014 atexit
010822c8 g     F .text	00000060 _write_r
0108831c g     O .rwdata	00000004 _impure_ptr
01089e50 g     O .bss	00000004 alt_argc
010825d4 g     F .text	0000021c __sflush_r
01085938 g     F .text	00000060 _do_dtors
01080020 g       .exceptions	00000000 alt_irq_entry
010808bc g     F .text	00000018 __fp_unlock_all
01088328 g     O .rwdata	00000008 alt_fs_list
01080020 g       *ABS*	00000000 __ram_exceptions_start
00800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
01088350 g       *ABS*	00000000 _edata
01089f94 g       *ABS*	00000000 _end
01080248 g       *ABS*	00000000 __ram_exceptions_end
010842a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
010821e8 g     F .text	0000007c __swrite
01088324 g     O .rwdata	00000004 __malloc_trim_threshold
01086424 g     F .text	00000038 exit
01080e54 g     F .text	000000c4 _fwalk_reent
01083060 g     F .text	00000074 .hidden __modsi3
010e1a80 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
01080898 g     F .text	00000004 __sfp_lock_release
01086770 g     F .text	00000034 _exit
01085684 g     F .text	0000012c alt_alarm_start
01082d10 g     F .text	000001bc __smakebuf_r
0108049c g     F .text	00000098 strlen
01085e1c g     F .text	00000154 open
01085a28 g     F .text	00000034 alt_icache_flush_all
01088344 g     O .rwdata	00000004 alt_priority_mask
01088348 g     O .rwdata	00000008 alt_alarm_list
010858d8 g     F .text	00000060 _do_ctors
010831cc g     F .text	000000d0 close
010834fc g     F .text	00000084 alt_load
0108089c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 108000c:	00bffd16 	blt	zero,r2,1080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080010:	00404234 	movhi	at,264
    ori r1, r1, %lo(_start)
 1080014:	08409214 	ori	at,at,584
    jmp r1
 1080018:	0800683a 	jmp	at
 108001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>

Disassembly of section .exceptions:

01080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800fc0 	call	10800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000706 	br	10800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 108008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1080098:	10801d40 	call	10801d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 108009c:	1000021e 	bne	r2,zero,10800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800f8:	ef80083a 	eret

010800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800fc:	defff904 	addi	sp,sp,-28
 1080100:	dfc00615 	stw	ra,24(sp)
 1080104:	df000515 	stw	fp,20(sp)
 1080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 108010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080110:	0005313a 	rdctl	r2,ipending
 1080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080124:	00800044 	movi	r2,1
 1080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 108012c:	e0fffb17 	ldw	r3,-20(fp)
 1080130:	e0bffc17 	ldw	r2,-16(fp)
 1080134:	1884703a 	and	r2,r3,r2
 1080138:	10001526 	beq	r2,zero,1080190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 108013c:	00804274 	movhi	r2,265
 1080140:	10a7a504 	addi	r2,r2,-24940
 1080144:	e0fffd17 	ldw	r3,-12(fp)
 1080148:	180690fa 	slli	r3,r3,3
 108014c:	10c5883a 	add	r2,r2,r3
 1080150:	10c00017 	ldw	r3,0(r2)
 1080154:	00804274 	movhi	r2,265
 1080158:	10a7a504 	addi	r2,r2,-24940
 108015c:	e13ffd17 	ldw	r4,-12(fp)
 1080160:	200890fa 	slli	r4,r4,3
 1080164:	1105883a 	add	r2,r2,r4
 1080168:	10800104 	addi	r2,r2,4
 108016c:	10800017 	ldw	r2,0(r2)
 1080170:	e17ffd17 	ldw	r5,-12(fp)
 1080174:	1009883a 	mov	r4,r2
 1080178:	183ee83a 	callr	r3
#endif
        break;
 108017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080180:	0005313a 	rdctl	r2,ipending
 1080184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1080188:	e0bfff17 	ldw	r2,-4(fp)
 108018c:	00000706 	br	10801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 1080190:	e0bffc17 	ldw	r2,-16(fp)
 1080194:	1085883a 	add	r2,r2,r2
 1080198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 108019c:	e0bffd17 	ldw	r2,-12(fp)
 10801a0:	10800044 	addi	r2,r2,1
 10801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10801a8:	003fe006 	br	108012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 10801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10801b0:	e0bffb17 	ldw	r2,-20(fp)
 10801b4:	103fda1e 	bne	r2,zero,1080120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10801b8:	0001883a 	nop
}
 10801bc:	0001883a 	nop
 10801c0:	e037883a 	mov	sp,fp
 10801c4:	dfc00117 	ldw	ra,4(sp)
 10801c8:	df000017 	ldw	fp,0(sp)
 10801cc:	dec00204 	addi	sp,sp,8
 10801d0:	f800283a 	ret

010801d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10801d4:	defffb04 	addi	sp,sp,-20
 10801d8:	dfc00415 	stw	ra,16(sp)
 10801dc:	df000315 	stw	fp,12(sp)
 10801e0:	df000304 	addi	fp,sp,12
 10801e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10801e8:	000531fa 	rdctl	r2,exception
 10801ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10801f0:	e0bffd17 	ldw	r2,-12(fp)
 10801f4:	10801f0c 	andi	r2,r2,124
 10801f8:	1004d0ba 	srli	r2,r2,2
 10801fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1080200:	0005333a 	rdctl	r2,badaddr
 1080204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1080208:	d0a6d417 	ldw	r2,-25776(gp)
 108020c:	10000726 	beq	r2,zero,108022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1080210:	d0a6d417 	ldw	r2,-25776(gp)
 1080214:	e0fffd17 	ldw	r3,-12(fp)
 1080218:	e1bffe17 	ldw	r6,-8(fp)
 108021c:	e17fff17 	ldw	r5,-4(fp)
 1080220:	1809883a 	mov	r4,r3
 1080224:	103ee83a 	callr	r2
 1080228:	00000206 	br	1080234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 108022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1080230:	0005883a 	mov	r2,zero
}
 1080234:	e037883a 	mov	sp,fp
 1080238:	dfc00117 	ldw	ra,4(sp)
 108023c:	df000017 	ldw	fp,0(sp)
 1080240:	dec00204 	addi	sp,sp,8
 1080244:	f800283a 	ret

Disassembly of section .text:

01080248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1080248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 108024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1080250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1080254:	00bffd16 	blt	zero,r2,108024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1080258:	06c043b4 	movhi	sp,270
    ori sp, sp, %lo(__alt_stack_pointer)
 108025c:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
 1080260:	06804274 	movhi	gp,265
    ori gp, gp, %lo(_gp)
 1080264:	d680c614 	ori	gp,gp,792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1080268:	00804234 	movhi	r2,264
    ori r2, r2, %lo(__bss_start)
 108026c:	10a79014 	ori	r2,r2,40512

    movhi r3, %hi(__bss_end)
 1080270:	00c04234 	movhi	r3,264
    ori r3, r3, %lo(__bss_end)
 1080274:	18e7e514 	ori	r3,r3,40852

    beq r2, r3, 1f
 1080278:	10c00326 	beq	r2,r3,1080288 <_start+0x40>

0:
    stw zero, (r2)
 108027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1080280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1080284:	10fffd36 	bltu	r2,r3,108027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1080288:	10834fc0 	call	10834fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 108028c:	10836900 	call	1083690 <alt_main>

01080290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1080290:	003fff06 	br	1080290 <alt_after_alt_main>

01080294 <set_pixel_color>:
#define RGB(r, g, b) ((r << 20) | (g << 10) | b)

void update_screen();
void set_pixel_color(int x, int y, int color);

inline void set_pixel_color(int x, int y, int color) {
 1080294:	defffc04 	addi	sp,sp,-16
 1080298:	df000315 	stw	fp,12(sp)
 108029c:	df000304 	addi	fp,sp,12
 10802a0:	e13ffd15 	stw	r4,-12(fp)
 10802a4:	e17ffe15 	stw	r5,-8(fp)
 10802a8:	e1bfff15 	stw	r6,-4(fp)
	WRITE_SDRAM(y * VGA_HEIGHT + x, color);
 10802ac:	e0bffe17 	ldw	r2,-8(fp)
 10802b0:	10c07824 	muli	r3,r2,480
 10802b4:	00802034 	movhi	r2,128
 10802b8:	1887883a 	add	r3,r3,r2
 10802bc:	e0bffd17 	ldw	r2,-12(fp)
 10802c0:	1885883a 	add	r2,r3,r2
 10802c4:	1007883a 	mov	r3,r2
 10802c8:	e0bfff17 	ldw	r2,-4(fp)
 10802cc:	18800015 	stw	r2,0(r3)
}
 10802d0:	0001883a 	nop
 10802d4:	e037883a 	mov	sp,fp
 10802d8:	df000017 	ldw	fp,0(sp)
 10802dc:	dec00104 	addi	sp,sp,4
 10802e0:	f800283a 	ret

010802e4 <update_screen>:

inline void update_screen() {
 10802e4:	defffe04 	addi	sp,sp,-8
 10802e8:	df000115 	stw	fp,4(sp)
 10802ec:	df000104 	addi	fp,sp,4
	int position = IORD(PIO_PIXEL_POSITION_BASE, 0);
 10802f0:	00804434 	movhi	r2,272
 10802f4:	10840c04 	addi	r2,r2,4144
 10802f8:	10800037 	ldwio	r2,0(r2)
 10802fc:	e0bfff15 	stw	r2,-4(fp)
//	int x = (position >> 16);
//	int y = position & 0xffff;

	IOWR(PIO_PIXEL_COLOR_BASE, 0, position);
 1080300:	00804434 	movhi	r2,272
 1080304:	10840404 	addi	r2,r2,4112
 1080308:	e0ffff17 	ldw	r3,-4(fp)
 108030c:	10c00035 	stwio	r3,0(r2)
//	IOWR(PIO_PIXEL_COLOR_BASE, 0, RGB(x, 0, 0));

//	IOWR(PIO_PIXEL_COLOR_BASE, 0, READ_SDRAM(y * VGA_HEIGHT + x));
}
 1080310:	0001883a 	nop
 1080314:	e037883a 	mov	sp,fp
 1080318:	df000017 	ldw	fp,0(sp)
 108031c:	dec00104 	addi	sp,sp,4
 1080320:	f800283a 	ret

01080324 <main>:

int main() {
 1080324:	defffa04 	addi	sp,sp,-24
 1080328:	dfc00515 	stw	ra,20(sp)
 108032c:	df000415 	stw	fp,16(sp)
 1080330:	df000404 	addi	fp,sp,16
	alt_up_pixel_buffer_dma_dev* pixel_buffer = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
 1080334:	01004234 	movhi	r4,264
 1080338:	2119e904 	addi	r4,r4,26532
 108033c:	10847d00 	call	10847d0 <alt_up_pixel_buffer_dma_open_dev>
 1080340:	e0bfff15 	stw	r2,-4(fp)
	if (pixel_buffer == NULL) {
 1080344:	e0bfff17 	ldw	r2,-4(fp)
 1080348:	1000041e 	bne	r2,zero,108035c <main+0x38>
		printf("Failed to open device\n");
 108034c:	01004234 	movhi	r4,264
 1080350:	2119f104 	addi	r4,r4,26564
 1080354:	10804880 	call	1080488 <puts>
 1080358:	00000306 	br	1080368 <main+0x44>
	} else {
		printf("I am a god amongst men\n");
 108035c:	01004234 	movhi	r4,264
 1080360:	2119f704 	addi	r4,r4,26588
 1080364:	10804880 	call	1080488 <puts>
	}

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1080368:	000b883a 	mov	r5,zero
 108036c:	e13fff17 	ldw	r4,-4(fp)
 1080370:	1084a900 	call	1084a90 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_draw(pixel_buffer, 0xffffffff, 5, 5);
 1080374:	01c00144 	movi	r7,5
 1080378:	01800144 	movi	r6,5
 108037c:	017fffc4 	movi	r5,-1
 1080380:	e13fff17 	ldw	r4,-4(fp)
 1080384:	108480c0 	call	108480c <alt_up_pixel_buffer_dma_draw>
	alt_up_pixel_buffer_dma_draw(pixel_buffer, 0xffffffff, 15, 5);
 1080388:	01c00144 	movi	r7,5
 108038c:	018003c4 	movi	r6,15
 1080390:	017fffc4 	movi	r5,-1
 1080394:	e13fff17 	ldw	r4,-4(fp)
 1080398:	108480c0 	call	108480c <alt_up_pixel_buffer_dma_draw>

	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 0xffffffff, 200, 200, 250, 250, 0);
 108039c:	d8000215 	stw	zero,8(sp)
 10803a0:	00803e84 	movi	r2,250
 10803a4:	d8800115 	stw	r2,4(sp)
 10803a8:	00803e84 	movi	r2,250
 10803ac:	d8800015 	stw	r2,0(sp)
 10803b0:	01c03204 	movi	r7,200
 10803b4:	01803204 	movi	r6,200
 10803b8:	017fffc4 	movi	r5,-1
 10803bc:	e13fff17 	ldw	r4,-4(fp)
 10803c0:	1084bb80 	call	1084bb8 <alt_up_pixel_buffer_dma_draw_box>

	while (1) {
//		IOWR(PIO_PIXEL_COLOR_BASE, 0, IORD(PIO_PIXEL_POSITION_BASE, 0));
//		update_screen();
	}
 10803c4:	003fff06 	br	10803c4 <main+0xa0>

010803c8 <_puts_r>:
 10803c8:	defff604 	addi	sp,sp,-40
 10803cc:	dc000715 	stw	r16,28(sp)
 10803d0:	2021883a 	mov	r16,r4
 10803d4:	2809883a 	mov	r4,r5
 10803d8:	dc400815 	stw	r17,32(sp)
 10803dc:	dfc00915 	stw	ra,36(sp)
 10803e0:	2823883a 	mov	r17,r5
 10803e4:	108049c0 	call	108049c <strlen>
 10803e8:	10c00044 	addi	r3,r2,1
 10803ec:	d8800115 	stw	r2,4(sp)
 10803f0:	00804234 	movhi	r2,264
 10803f4:	1099fd04 	addi	r2,r2,26612
 10803f8:	d8800215 	stw	r2,8(sp)
 10803fc:	00800044 	movi	r2,1
 1080400:	d8800315 	stw	r2,12(sp)
 1080404:	00800084 	movi	r2,2
 1080408:	dc400015 	stw	r17,0(sp)
 108040c:	d8c00615 	stw	r3,24(sp)
 1080410:	dec00415 	stw	sp,16(sp)
 1080414:	d8800515 	stw	r2,20(sp)
 1080418:	80000226 	beq	r16,zero,1080424 <_puts_r+0x5c>
 108041c:	80800e17 	ldw	r2,56(r16)
 1080420:	10001426 	beq	r2,zero,1080474 <_puts_r+0xac>
 1080424:	81400217 	ldw	r5,8(r16)
 1080428:	2880030b 	ldhu	r2,12(r5)
 108042c:	10c8000c 	andi	r3,r2,8192
 1080430:	1800061e 	bne	r3,zero,108044c <_puts_r+0x84>
 1080434:	29001917 	ldw	r4,100(r5)
 1080438:	00f7ffc4 	movi	r3,-8193
 108043c:	10880014 	ori	r2,r2,8192
 1080440:	20c6703a 	and	r3,r4,r3
 1080444:	2880030d 	sth	r2,12(r5)
 1080448:	28c01915 	stw	r3,100(r5)
 108044c:	d9800404 	addi	r6,sp,16
 1080450:	8009883a 	mov	r4,r16
 1080454:	10808d40 	call	10808d4 <__sfvwrite_r>
 1080458:	1000091e 	bne	r2,zero,1080480 <_puts_r+0xb8>
 108045c:	00800284 	movi	r2,10
 1080460:	dfc00917 	ldw	ra,36(sp)
 1080464:	dc400817 	ldw	r17,32(sp)
 1080468:	dc000717 	ldw	r16,28(sp)
 108046c:	dec00a04 	addi	sp,sp,40
 1080470:	f800283a 	ret
 1080474:	8009883a 	mov	r4,r16
 1080478:	10808840 	call	1080884 <__sinit>
 108047c:	003fe906 	br	1080424 <_puts_r+0x5c>
 1080480:	00bfffc4 	movi	r2,-1
 1080484:	003ff606 	br	1080460 <_puts_r+0x98>

01080488 <puts>:
 1080488:	00804274 	movhi	r2,265
 108048c:	10a0c704 	addi	r2,r2,-31972
 1080490:	200b883a 	mov	r5,r4
 1080494:	11000017 	ldw	r4,0(r2)
 1080498:	10803c81 	jmpi	10803c8 <_puts_r>

0108049c <strlen>:
 108049c:	208000cc 	andi	r2,r4,3
 10804a0:	10002026 	beq	r2,zero,1080524 <strlen+0x88>
 10804a4:	20800007 	ldb	r2,0(r4)
 10804a8:	10002026 	beq	r2,zero,108052c <strlen+0x90>
 10804ac:	2005883a 	mov	r2,r4
 10804b0:	00000206 	br	10804bc <strlen+0x20>
 10804b4:	10c00007 	ldb	r3,0(r2)
 10804b8:	18001826 	beq	r3,zero,108051c <strlen+0x80>
 10804bc:	10800044 	addi	r2,r2,1
 10804c0:	10c000cc 	andi	r3,r2,3
 10804c4:	183ffb1e 	bne	r3,zero,10804b4 <strlen+0x18>
 10804c8:	10c00017 	ldw	r3,0(r2)
 10804cc:	01ffbff4 	movhi	r7,65279
 10804d0:	39ffbfc4 	addi	r7,r7,-257
 10804d4:	00ca303a 	nor	r5,zero,r3
 10804d8:	01a02074 	movhi	r6,32897
 10804dc:	19c7883a 	add	r3,r3,r7
 10804e0:	31a02004 	addi	r6,r6,-32640
 10804e4:	1946703a 	and	r3,r3,r5
 10804e8:	1986703a 	and	r3,r3,r6
 10804ec:	1800091e 	bne	r3,zero,1080514 <strlen+0x78>
 10804f0:	10800104 	addi	r2,r2,4
 10804f4:	10c00017 	ldw	r3,0(r2)
 10804f8:	19cb883a 	add	r5,r3,r7
 10804fc:	00c6303a 	nor	r3,zero,r3
 1080500:	28c6703a 	and	r3,r5,r3
 1080504:	1986703a 	and	r3,r3,r6
 1080508:	183ff926 	beq	r3,zero,10804f0 <strlen+0x54>
 108050c:	00000106 	br	1080514 <strlen+0x78>
 1080510:	10800044 	addi	r2,r2,1
 1080514:	10c00007 	ldb	r3,0(r2)
 1080518:	183ffd1e 	bne	r3,zero,1080510 <strlen+0x74>
 108051c:	1105c83a 	sub	r2,r2,r4
 1080520:	f800283a 	ret
 1080524:	2005883a 	mov	r2,r4
 1080528:	003fe706 	br	10804c8 <strlen+0x2c>
 108052c:	0005883a 	mov	r2,zero
 1080530:	f800283a 	ret

01080534 <__fp_unlock>:
 1080534:	0005883a 	mov	r2,zero
 1080538:	f800283a 	ret

0108053c <_cleanup_r>:
 108053c:	01404234 	movhi	r5,264
 1080540:	29493404 	addi	r5,r5,9424
 1080544:	1080e541 	jmpi	1080e54 <_fwalk_reent>

01080548 <__sinit.part.1>:
 1080548:	defff704 	addi	sp,sp,-36
 108054c:	00c04234 	movhi	r3,264
 1080550:	dfc00815 	stw	ra,32(sp)
 1080554:	ddc00715 	stw	r23,28(sp)
 1080558:	dd800615 	stw	r22,24(sp)
 108055c:	dd400515 	stw	r21,20(sp)
 1080560:	dd000415 	stw	r20,16(sp)
 1080564:	dcc00315 	stw	r19,12(sp)
 1080568:	dc800215 	stw	r18,8(sp)
 108056c:	dc400115 	stw	r17,4(sp)
 1080570:	dc000015 	stw	r16,0(sp)
 1080574:	18c14f04 	addi	r3,r3,1340
 1080578:	24000117 	ldw	r16,4(r4)
 108057c:	20c00f15 	stw	r3,60(r4)
 1080580:	2080bb04 	addi	r2,r4,748
 1080584:	00c000c4 	movi	r3,3
 1080588:	20c0b915 	stw	r3,740(r4)
 108058c:	2080ba15 	stw	r2,744(r4)
 1080590:	2000b815 	stw	zero,736(r4)
 1080594:	05c00204 	movi	r23,8
 1080598:	00800104 	movi	r2,4
 108059c:	2025883a 	mov	r18,r4
 10805a0:	b80d883a 	mov	r6,r23
 10805a4:	81001704 	addi	r4,r16,92
 10805a8:	000b883a 	mov	r5,zero
 10805ac:	80000015 	stw	zero,0(r16)
 10805b0:	80000115 	stw	zero,4(r16)
 10805b4:	80000215 	stw	zero,8(r16)
 10805b8:	8080030d 	sth	r2,12(r16)
 10805bc:	80001915 	stw	zero,100(r16)
 10805c0:	8000038d 	sth	zero,14(r16)
 10805c4:	80000415 	stw	zero,16(r16)
 10805c8:	80000515 	stw	zero,20(r16)
 10805cc:	80000615 	stw	zero,24(r16)
 10805d0:	1081aac0 	call	1081aac <memset>
 10805d4:	05804234 	movhi	r22,264
 10805d8:	94400217 	ldw	r17,8(r18)
 10805dc:	05404234 	movhi	r21,264
 10805e0:	05004234 	movhi	r20,264
 10805e4:	04c04234 	movhi	r19,264
 10805e8:	b5886304 	addi	r22,r22,8588
 10805ec:	ad487a04 	addi	r21,r21,8680
 10805f0:	a5089904 	addi	r20,r20,8804
 10805f4:	9cc8b004 	addi	r19,r19,8896
 10805f8:	85800815 	stw	r22,32(r16)
 10805fc:	85400915 	stw	r21,36(r16)
 1080600:	85000a15 	stw	r20,40(r16)
 1080604:	84c00b15 	stw	r19,44(r16)
 1080608:	84000715 	stw	r16,28(r16)
 108060c:	00800284 	movi	r2,10
 1080610:	8880030d 	sth	r2,12(r17)
 1080614:	00800044 	movi	r2,1
 1080618:	b80d883a 	mov	r6,r23
 108061c:	89001704 	addi	r4,r17,92
 1080620:	000b883a 	mov	r5,zero
 1080624:	88000015 	stw	zero,0(r17)
 1080628:	88000115 	stw	zero,4(r17)
 108062c:	88000215 	stw	zero,8(r17)
 1080630:	88001915 	stw	zero,100(r17)
 1080634:	8880038d 	sth	r2,14(r17)
 1080638:	88000415 	stw	zero,16(r17)
 108063c:	88000515 	stw	zero,20(r17)
 1080640:	88000615 	stw	zero,24(r17)
 1080644:	1081aac0 	call	1081aac <memset>
 1080648:	94000317 	ldw	r16,12(r18)
 108064c:	00800484 	movi	r2,18
 1080650:	8c400715 	stw	r17,28(r17)
 1080654:	8d800815 	stw	r22,32(r17)
 1080658:	8d400915 	stw	r21,36(r17)
 108065c:	8d000a15 	stw	r20,40(r17)
 1080660:	8cc00b15 	stw	r19,44(r17)
 1080664:	8080030d 	sth	r2,12(r16)
 1080668:	00800084 	movi	r2,2
 108066c:	80000015 	stw	zero,0(r16)
 1080670:	80000115 	stw	zero,4(r16)
 1080674:	80000215 	stw	zero,8(r16)
 1080678:	80001915 	stw	zero,100(r16)
 108067c:	8080038d 	sth	r2,14(r16)
 1080680:	80000415 	stw	zero,16(r16)
 1080684:	80000515 	stw	zero,20(r16)
 1080688:	80000615 	stw	zero,24(r16)
 108068c:	b80d883a 	mov	r6,r23
 1080690:	000b883a 	mov	r5,zero
 1080694:	81001704 	addi	r4,r16,92
 1080698:	1081aac0 	call	1081aac <memset>
 108069c:	00800044 	movi	r2,1
 10806a0:	84000715 	stw	r16,28(r16)
 10806a4:	85800815 	stw	r22,32(r16)
 10806a8:	85400915 	stw	r21,36(r16)
 10806ac:	85000a15 	stw	r20,40(r16)
 10806b0:	84c00b15 	stw	r19,44(r16)
 10806b4:	90800e15 	stw	r2,56(r18)
 10806b8:	dfc00817 	ldw	ra,32(sp)
 10806bc:	ddc00717 	ldw	r23,28(sp)
 10806c0:	dd800617 	ldw	r22,24(sp)
 10806c4:	dd400517 	ldw	r21,20(sp)
 10806c8:	dd000417 	ldw	r20,16(sp)
 10806cc:	dcc00317 	ldw	r19,12(sp)
 10806d0:	dc800217 	ldw	r18,8(sp)
 10806d4:	dc400117 	ldw	r17,4(sp)
 10806d8:	dc000017 	ldw	r16,0(sp)
 10806dc:	dec00904 	addi	sp,sp,36
 10806e0:	f800283a 	ret

010806e4 <__fp_lock>:
 10806e4:	0005883a 	mov	r2,zero
 10806e8:	f800283a 	ret

010806ec <__sfmoreglue>:
 10806ec:	defffc04 	addi	sp,sp,-16
 10806f0:	dc400115 	stw	r17,4(sp)
 10806f4:	2c7fffc4 	addi	r17,r5,-1
 10806f8:	8c401a24 	muli	r17,r17,104
 10806fc:	dc800215 	stw	r18,8(sp)
 1080700:	2825883a 	mov	r18,r5
 1080704:	89401d04 	addi	r5,r17,116
 1080708:	dc000015 	stw	r16,0(sp)
 108070c:	dfc00315 	stw	ra,12(sp)
 1080710:	1080f180 	call	1080f18 <_malloc_r>
 1080714:	1021883a 	mov	r16,r2
 1080718:	10000726 	beq	r2,zero,1080738 <__sfmoreglue+0x4c>
 108071c:	11000304 	addi	r4,r2,12
 1080720:	10000015 	stw	zero,0(r2)
 1080724:	14800115 	stw	r18,4(r2)
 1080728:	11000215 	stw	r4,8(r2)
 108072c:	89801a04 	addi	r6,r17,104
 1080730:	000b883a 	mov	r5,zero
 1080734:	1081aac0 	call	1081aac <memset>
 1080738:	8005883a 	mov	r2,r16
 108073c:	dfc00317 	ldw	ra,12(sp)
 1080740:	dc800217 	ldw	r18,8(sp)
 1080744:	dc400117 	ldw	r17,4(sp)
 1080748:	dc000017 	ldw	r16,0(sp)
 108074c:	dec00404 	addi	sp,sp,16
 1080750:	f800283a 	ret

01080754 <__sfp>:
 1080754:	defffb04 	addi	sp,sp,-20
 1080758:	dc000015 	stw	r16,0(sp)
 108075c:	04004274 	movhi	r16,265
 1080760:	8420c604 	addi	r16,r16,-31976
 1080764:	dcc00315 	stw	r19,12(sp)
 1080768:	2027883a 	mov	r19,r4
 108076c:	81000017 	ldw	r4,0(r16)
 1080770:	dfc00415 	stw	ra,16(sp)
 1080774:	dc800215 	stw	r18,8(sp)
 1080778:	20800e17 	ldw	r2,56(r4)
 108077c:	dc400115 	stw	r17,4(sp)
 1080780:	1000021e 	bne	r2,zero,108078c <__sfp+0x38>
 1080784:	10805480 	call	1080548 <__sinit.part.1>
 1080788:	81000017 	ldw	r4,0(r16)
 108078c:	2480b804 	addi	r18,r4,736
 1080790:	047fffc4 	movi	r17,-1
 1080794:	91000117 	ldw	r4,4(r18)
 1080798:	94000217 	ldw	r16,8(r18)
 108079c:	213fffc4 	addi	r4,r4,-1
 10807a0:	20000a16 	blt	r4,zero,10807cc <__sfp+0x78>
 10807a4:	8080030f 	ldh	r2,12(r16)
 10807a8:	10000c26 	beq	r2,zero,10807dc <__sfp+0x88>
 10807ac:	80c01d04 	addi	r3,r16,116
 10807b0:	00000206 	br	10807bc <__sfp+0x68>
 10807b4:	18bfe60f 	ldh	r2,-104(r3)
 10807b8:	10000826 	beq	r2,zero,10807dc <__sfp+0x88>
 10807bc:	213fffc4 	addi	r4,r4,-1
 10807c0:	1c3ffd04 	addi	r16,r3,-12
 10807c4:	18c01a04 	addi	r3,r3,104
 10807c8:	247ffa1e 	bne	r4,r17,10807b4 <__sfp+0x60>
 10807cc:	90800017 	ldw	r2,0(r18)
 10807d0:	10001d26 	beq	r2,zero,1080848 <__sfp+0xf4>
 10807d4:	1025883a 	mov	r18,r2
 10807d8:	003fee06 	br	1080794 <__sfp+0x40>
 10807dc:	00bfffc4 	movi	r2,-1
 10807e0:	8080038d 	sth	r2,14(r16)
 10807e4:	00800044 	movi	r2,1
 10807e8:	8080030d 	sth	r2,12(r16)
 10807ec:	80001915 	stw	zero,100(r16)
 10807f0:	80000015 	stw	zero,0(r16)
 10807f4:	80000215 	stw	zero,8(r16)
 10807f8:	80000115 	stw	zero,4(r16)
 10807fc:	80000415 	stw	zero,16(r16)
 1080800:	80000515 	stw	zero,20(r16)
 1080804:	80000615 	stw	zero,24(r16)
 1080808:	01800204 	movi	r6,8
 108080c:	000b883a 	mov	r5,zero
 1080810:	81001704 	addi	r4,r16,92
 1080814:	1081aac0 	call	1081aac <memset>
 1080818:	8005883a 	mov	r2,r16
 108081c:	80000c15 	stw	zero,48(r16)
 1080820:	80000d15 	stw	zero,52(r16)
 1080824:	80001115 	stw	zero,68(r16)
 1080828:	80001215 	stw	zero,72(r16)
 108082c:	dfc00417 	ldw	ra,16(sp)
 1080830:	dcc00317 	ldw	r19,12(sp)
 1080834:	dc800217 	ldw	r18,8(sp)
 1080838:	dc400117 	ldw	r17,4(sp)
 108083c:	dc000017 	ldw	r16,0(sp)
 1080840:	dec00504 	addi	sp,sp,20
 1080844:	f800283a 	ret
 1080848:	01400104 	movi	r5,4
 108084c:	9809883a 	mov	r4,r19
 1080850:	10806ec0 	call	10806ec <__sfmoreglue>
 1080854:	90800015 	stw	r2,0(r18)
 1080858:	103fde1e 	bne	r2,zero,10807d4 <__sfp+0x80>
 108085c:	00800304 	movi	r2,12
 1080860:	98800015 	stw	r2,0(r19)
 1080864:	0005883a 	mov	r2,zero
 1080868:	003ff006 	br	108082c <__sfp+0xd8>

0108086c <_cleanup>:
 108086c:	00804274 	movhi	r2,265
 1080870:	10a0c604 	addi	r2,r2,-31976
 1080874:	11000017 	ldw	r4,0(r2)
 1080878:	01404234 	movhi	r5,264
 108087c:	29493404 	addi	r5,r5,9424
 1080880:	1080e541 	jmpi	1080e54 <_fwalk_reent>

01080884 <__sinit>:
 1080884:	20800e17 	ldw	r2,56(r4)
 1080888:	10000126 	beq	r2,zero,1080890 <__sinit+0xc>
 108088c:	f800283a 	ret
 1080890:	10805481 	jmpi	1080548 <__sinit.part.1>

01080894 <__sfp_lock_acquire>:
 1080894:	f800283a 	ret

01080898 <__sfp_lock_release>:
 1080898:	f800283a 	ret

0108089c <__sinit_lock_acquire>:
 108089c:	f800283a 	ret

010808a0 <__sinit_lock_release>:
 10808a0:	f800283a 	ret

010808a4 <__fp_lock_all>:
 10808a4:	00804274 	movhi	r2,265
 10808a8:	10a0c704 	addi	r2,r2,-31972
 10808ac:	11000017 	ldw	r4,0(r2)
 10808b0:	01404234 	movhi	r5,264
 10808b4:	2941b904 	addi	r5,r5,1764
 10808b8:	1080d901 	jmpi	1080d90 <_fwalk>

010808bc <__fp_unlock_all>:
 10808bc:	00804274 	movhi	r2,265
 10808c0:	10a0c704 	addi	r2,r2,-31972
 10808c4:	11000017 	ldw	r4,0(r2)
 10808c8:	01404234 	movhi	r5,264
 10808cc:	29414d04 	addi	r5,r5,1332
 10808d0:	1080d901 	jmpi	1080d90 <_fwalk>

010808d4 <__sfvwrite_r>:
 10808d4:	30800217 	ldw	r2,8(r6)
 10808d8:	10006726 	beq	r2,zero,1080a78 <__sfvwrite_r+0x1a4>
 10808dc:	28c0030b 	ldhu	r3,12(r5)
 10808e0:	defff404 	addi	sp,sp,-48
 10808e4:	dd400715 	stw	r21,28(sp)
 10808e8:	dd000615 	stw	r20,24(sp)
 10808ec:	dc000215 	stw	r16,8(sp)
 10808f0:	dfc00b15 	stw	ra,44(sp)
 10808f4:	df000a15 	stw	fp,40(sp)
 10808f8:	ddc00915 	stw	r23,36(sp)
 10808fc:	dd800815 	stw	r22,32(sp)
 1080900:	dcc00515 	stw	r19,20(sp)
 1080904:	dc800415 	stw	r18,16(sp)
 1080908:	dc400315 	stw	r17,12(sp)
 108090c:	1880020c 	andi	r2,r3,8
 1080910:	2821883a 	mov	r16,r5
 1080914:	202b883a 	mov	r21,r4
 1080918:	3029883a 	mov	r20,r6
 108091c:	10002726 	beq	r2,zero,10809bc <__sfvwrite_r+0xe8>
 1080920:	28800417 	ldw	r2,16(r5)
 1080924:	10002526 	beq	r2,zero,10809bc <__sfvwrite_r+0xe8>
 1080928:	1880008c 	andi	r2,r3,2
 108092c:	a4400017 	ldw	r17,0(r20)
 1080930:	10002a26 	beq	r2,zero,10809dc <__sfvwrite_r+0x108>
 1080934:	05a00034 	movhi	r22,32768
 1080938:	0027883a 	mov	r19,zero
 108093c:	0025883a 	mov	r18,zero
 1080940:	b5bf0004 	addi	r22,r22,-1024
 1080944:	980d883a 	mov	r6,r19
 1080948:	a809883a 	mov	r4,r21
 108094c:	90004626 	beq	r18,zero,1080a68 <__sfvwrite_r+0x194>
 1080950:	900f883a 	mov	r7,r18
 1080954:	b480022e 	bgeu	r22,r18,1080960 <__sfvwrite_r+0x8c>
 1080958:	01e00034 	movhi	r7,32768
 108095c:	39ff0004 	addi	r7,r7,-1024
 1080960:	80800917 	ldw	r2,36(r16)
 1080964:	81400717 	ldw	r5,28(r16)
 1080968:	103ee83a 	callr	r2
 108096c:	0080570e 	bge	zero,r2,1080acc <__sfvwrite_r+0x1f8>
 1080970:	a0c00217 	ldw	r3,8(r20)
 1080974:	98a7883a 	add	r19,r19,r2
 1080978:	90a5c83a 	sub	r18,r18,r2
 108097c:	1885c83a 	sub	r2,r3,r2
 1080980:	a0800215 	stw	r2,8(r20)
 1080984:	103fef1e 	bne	r2,zero,1080944 <__sfvwrite_r+0x70>
 1080988:	0005883a 	mov	r2,zero
 108098c:	dfc00b17 	ldw	ra,44(sp)
 1080990:	df000a17 	ldw	fp,40(sp)
 1080994:	ddc00917 	ldw	r23,36(sp)
 1080998:	dd800817 	ldw	r22,32(sp)
 108099c:	dd400717 	ldw	r21,28(sp)
 10809a0:	dd000617 	ldw	r20,24(sp)
 10809a4:	dcc00517 	ldw	r19,20(sp)
 10809a8:	dc800417 	ldw	r18,16(sp)
 10809ac:	dc400317 	ldw	r17,12(sp)
 10809b0:	dc000217 	ldw	r16,8(sp)
 10809b4:	dec00c04 	addi	sp,sp,48
 10809b8:	f800283a 	ret
 10809bc:	800b883a 	mov	r5,r16
 10809c0:	a809883a 	mov	r4,r21
 10809c4:	10823280 	call	1082328 <__swsetup_r>
 10809c8:	1000eb1e 	bne	r2,zero,1080d78 <__sfvwrite_r+0x4a4>
 10809cc:	80c0030b 	ldhu	r3,12(r16)
 10809d0:	a4400017 	ldw	r17,0(r20)
 10809d4:	1880008c 	andi	r2,r3,2
 10809d8:	103fd61e 	bne	r2,zero,1080934 <__sfvwrite_r+0x60>
 10809dc:	1880004c 	andi	r2,r3,1
 10809e0:	10003f1e 	bne	r2,zero,1080ae0 <__sfvwrite_r+0x20c>
 10809e4:	0039883a 	mov	fp,zero
 10809e8:	0025883a 	mov	r18,zero
 10809ec:	90001a26 	beq	r18,zero,1080a58 <__sfvwrite_r+0x184>
 10809f0:	1880800c 	andi	r2,r3,512
 10809f4:	84c00217 	ldw	r19,8(r16)
 10809f8:	10002126 	beq	r2,zero,1080a80 <__sfvwrite_r+0x1ac>
 10809fc:	982f883a 	mov	r23,r19
 1080a00:	94c09336 	bltu	r18,r19,1080c50 <__sfvwrite_r+0x37c>
 1080a04:	1881200c 	andi	r2,r3,1152
 1080a08:	10009e1e 	bne	r2,zero,1080c84 <__sfvwrite_r+0x3b0>
 1080a0c:	81000017 	ldw	r4,0(r16)
 1080a10:	b80d883a 	mov	r6,r23
 1080a14:	e00b883a 	mov	r5,fp
 1080a18:	10819500 	call	1081950 <memmove>
 1080a1c:	80c00217 	ldw	r3,8(r16)
 1080a20:	81000017 	ldw	r4,0(r16)
 1080a24:	9005883a 	mov	r2,r18
 1080a28:	1ce7c83a 	sub	r19,r3,r19
 1080a2c:	25cf883a 	add	r7,r4,r23
 1080a30:	84c00215 	stw	r19,8(r16)
 1080a34:	81c00015 	stw	r7,0(r16)
 1080a38:	a0c00217 	ldw	r3,8(r20)
 1080a3c:	e0b9883a 	add	fp,fp,r2
 1080a40:	90a5c83a 	sub	r18,r18,r2
 1080a44:	18a7c83a 	sub	r19,r3,r2
 1080a48:	a4c00215 	stw	r19,8(r20)
 1080a4c:	983fce26 	beq	r19,zero,1080988 <__sfvwrite_r+0xb4>
 1080a50:	80c0030b 	ldhu	r3,12(r16)
 1080a54:	903fe61e 	bne	r18,zero,10809f0 <__sfvwrite_r+0x11c>
 1080a58:	8f000017 	ldw	fp,0(r17)
 1080a5c:	8c800117 	ldw	r18,4(r17)
 1080a60:	8c400204 	addi	r17,r17,8
 1080a64:	003fe106 	br	10809ec <__sfvwrite_r+0x118>
 1080a68:	8cc00017 	ldw	r19,0(r17)
 1080a6c:	8c800117 	ldw	r18,4(r17)
 1080a70:	8c400204 	addi	r17,r17,8
 1080a74:	003fb306 	br	1080944 <__sfvwrite_r+0x70>
 1080a78:	0005883a 	mov	r2,zero
 1080a7c:	f800283a 	ret
 1080a80:	81000017 	ldw	r4,0(r16)
 1080a84:	80800417 	ldw	r2,16(r16)
 1080a88:	11005736 	bltu	r2,r4,1080be8 <__sfvwrite_r+0x314>
 1080a8c:	85c00517 	ldw	r23,20(r16)
 1080a90:	95c05536 	bltu	r18,r23,1080be8 <__sfvwrite_r+0x314>
 1080a94:	00a00034 	movhi	r2,32768
 1080a98:	10bfffc4 	addi	r2,r2,-1
 1080a9c:	9009883a 	mov	r4,r18
 1080aa0:	1480012e 	bgeu	r2,r18,1080aa8 <__sfvwrite_r+0x1d4>
 1080aa4:	1009883a 	mov	r4,r2
 1080aa8:	b80b883a 	mov	r5,r23
 1080aac:	1082fdc0 	call	1082fdc <__divsi3>
 1080ab0:	15cf383a 	mul	r7,r2,r23
 1080ab4:	81400717 	ldw	r5,28(r16)
 1080ab8:	80800917 	ldw	r2,36(r16)
 1080abc:	e00d883a 	mov	r6,fp
 1080ac0:	a809883a 	mov	r4,r21
 1080ac4:	103ee83a 	callr	r2
 1080ac8:	00bfdb16 	blt	zero,r2,1080a38 <__sfvwrite_r+0x164>
 1080acc:	8080030b 	ldhu	r2,12(r16)
 1080ad0:	10801014 	ori	r2,r2,64
 1080ad4:	8080030d 	sth	r2,12(r16)
 1080ad8:	00bfffc4 	movi	r2,-1
 1080adc:	003fab06 	br	108098c <__sfvwrite_r+0xb8>
 1080ae0:	0027883a 	mov	r19,zero
 1080ae4:	0011883a 	mov	r8,zero
 1080ae8:	0039883a 	mov	fp,zero
 1080aec:	0025883a 	mov	r18,zero
 1080af0:	90001f26 	beq	r18,zero,1080b70 <__sfvwrite_r+0x29c>
 1080af4:	40005a26 	beq	r8,zero,1080c60 <__sfvwrite_r+0x38c>
 1080af8:	982d883a 	mov	r22,r19
 1080afc:	94c0012e 	bgeu	r18,r19,1080b04 <__sfvwrite_r+0x230>
 1080b00:	902d883a 	mov	r22,r18
 1080b04:	81000017 	ldw	r4,0(r16)
 1080b08:	80800417 	ldw	r2,16(r16)
 1080b0c:	b02f883a 	mov	r23,r22
 1080b10:	81c00517 	ldw	r7,20(r16)
 1080b14:	1100032e 	bgeu	r2,r4,1080b24 <__sfvwrite_r+0x250>
 1080b18:	80c00217 	ldw	r3,8(r16)
 1080b1c:	38c7883a 	add	r3,r7,r3
 1080b20:	1d801816 	blt	r3,r22,1080b84 <__sfvwrite_r+0x2b0>
 1080b24:	b1c03e16 	blt	r22,r7,1080c20 <__sfvwrite_r+0x34c>
 1080b28:	80800917 	ldw	r2,36(r16)
 1080b2c:	81400717 	ldw	r5,28(r16)
 1080b30:	e00d883a 	mov	r6,fp
 1080b34:	da000115 	stw	r8,4(sp)
 1080b38:	a809883a 	mov	r4,r21
 1080b3c:	103ee83a 	callr	r2
 1080b40:	102f883a 	mov	r23,r2
 1080b44:	da000117 	ldw	r8,4(sp)
 1080b48:	00bfe00e 	bge	zero,r2,1080acc <__sfvwrite_r+0x1f8>
 1080b4c:	9de7c83a 	sub	r19,r19,r23
 1080b50:	98001f26 	beq	r19,zero,1080bd0 <__sfvwrite_r+0x2fc>
 1080b54:	a0800217 	ldw	r2,8(r20)
 1080b58:	e5f9883a 	add	fp,fp,r23
 1080b5c:	95e5c83a 	sub	r18,r18,r23
 1080b60:	15efc83a 	sub	r23,r2,r23
 1080b64:	a5c00215 	stw	r23,8(r20)
 1080b68:	b83f8726 	beq	r23,zero,1080988 <__sfvwrite_r+0xb4>
 1080b6c:	903fe11e 	bne	r18,zero,1080af4 <__sfvwrite_r+0x220>
 1080b70:	8f000017 	ldw	fp,0(r17)
 1080b74:	8c800117 	ldw	r18,4(r17)
 1080b78:	0011883a 	mov	r8,zero
 1080b7c:	8c400204 	addi	r17,r17,8
 1080b80:	003fdb06 	br	1080af0 <__sfvwrite_r+0x21c>
 1080b84:	180d883a 	mov	r6,r3
 1080b88:	e00b883a 	mov	r5,fp
 1080b8c:	da000115 	stw	r8,4(sp)
 1080b90:	d8c00015 	stw	r3,0(sp)
 1080b94:	10819500 	call	1081950 <memmove>
 1080b98:	d8c00017 	ldw	r3,0(sp)
 1080b9c:	80800017 	ldw	r2,0(r16)
 1080ba0:	800b883a 	mov	r5,r16
 1080ba4:	a809883a 	mov	r4,r21
 1080ba8:	10c5883a 	add	r2,r2,r3
 1080bac:	80800015 	stw	r2,0(r16)
 1080bb0:	d8c00015 	stw	r3,0(sp)
 1080bb4:	10827f00 	call	10827f0 <_fflush_r>
 1080bb8:	d8c00017 	ldw	r3,0(sp)
 1080bbc:	da000117 	ldw	r8,4(sp)
 1080bc0:	103fc21e 	bne	r2,zero,1080acc <__sfvwrite_r+0x1f8>
 1080bc4:	182f883a 	mov	r23,r3
 1080bc8:	9de7c83a 	sub	r19,r19,r23
 1080bcc:	983fe11e 	bne	r19,zero,1080b54 <__sfvwrite_r+0x280>
 1080bd0:	800b883a 	mov	r5,r16
 1080bd4:	a809883a 	mov	r4,r21
 1080bd8:	10827f00 	call	10827f0 <_fflush_r>
 1080bdc:	103fbb1e 	bne	r2,zero,1080acc <__sfvwrite_r+0x1f8>
 1080be0:	0011883a 	mov	r8,zero
 1080be4:	003fdb06 	br	1080b54 <__sfvwrite_r+0x280>
 1080be8:	94c0012e 	bgeu	r18,r19,1080bf0 <__sfvwrite_r+0x31c>
 1080bec:	9027883a 	mov	r19,r18
 1080bf0:	980d883a 	mov	r6,r19
 1080bf4:	e00b883a 	mov	r5,fp
 1080bf8:	10819500 	call	1081950 <memmove>
 1080bfc:	80800217 	ldw	r2,8(r16)
 1080c00:	80c00017 	ldw	r3,0(r16)
 1080c04:	14c5c83a 	sub	r2,r2,r19
 1080c08:	1cc7883a 	add	r3,r3,r19
 1080c0c:	80800215 	stw	r2,8(r16)
 1080c10:	80c00015 	stw	r3,0(r16)
 1080c14:	10004326 	beq	r2,zero,1080d24 <__sfvwrite_r+0x450>
 1080c18:	9805883a 	mov	r2,r19
 1080c1c:	003f8606 	br	1080a38 <__sfvwrite_r+0x164>
 1080c20:	b00d883a 	mov	r6,r22
 1080c24:	e00b883a 	mov	r5,fp
 1080c28:	da000115 	stw	r8,4(sp)
 1080c2c:	10819500 	call	1081950 <memmove>
 1080c30:	80800217 	ldw	r2,8(r16)
 1080c34:	80c00017 	ldw	r3,0(r16)
 1080c38:	da000117 	ldw	r8,4(sp)
 1080c3c:	1585c83a 	sub	r2,r2,r22
 1080c40:	1dad883a 	add	r22,r3,r22
 1080c44:	80800215 	stw	r2,8(r16)
 1080c48:	85800015 	stw	r22,0(r16)
 1080c4c:	003fbf06 	br	1080b4c <__sfvwrite_r+0x278>
 1080c50:	81000017 	ldw	r4,0(r16)
 1080c54:	9027883a 	mov	r19,r18
 1080c58:	902f883a 	mov	r23,r18
 1080c5c:	003f6c06 	br	1080a10 <__sfvwrite_r+0x13c>
 1080c60:	900d883a 	mov	r6,r18
 1080c64:	01400284 	movi	r5,10
 1080c68:	e009883a 	mov	r4,fp
 1080c6c:	10817240 	call	1081724 <memchr>
 1080c70:	10003e26 	beq	r2,zero,1080d6c <__sfvwrite_r+0x498>
 1080c74:	10800044 	addi	r2,r2,1
 1080c78:	1727c83a 	sub	r19,r2,fp
 1080c7c:	02000044 	movi	r8,1
 1080c80:	003f9d06 	br	1080af8 <__sfvwrite_r+0x224>
 1080c84:	80800517 	ldw	r2,20(r16)
 1080c88:	81400417 	ldw	r5,16(r16)
 1080c8c:	81c00017 	ldw	r7,0(r16)
 1080c90:	10a7883a 	add	r19,r2,r2
 1080c94:	9885883a 	add	r2,r19,r2
 1080c98:	1026d7fa 	srli	r19,r2,31
 1080c9c:	396dc83a 	sub	r22,r7,r5
 1080ca0:	b1000044 	addi	r4,r22,1
 1080ca4:	9885883a 	add	r2,r19,r2
 1080ca8:	1027d07a 	srai	r19,r2,1
 1080cac:	2485883a 	add	r2,r4,r18
 1080cb0:	980d883a 	mov	r6,r19
 1080cb4:	9880022e 	bgeu	r19,r2,1080cc0 <__sfvwrite_r+0x3ec>
 1080cb8:	1027883a 	mov	r19,r2
 1080cbc:	100d883a 	mov	r6,r2
 1080cc0:	18c1000c 	andi	r3,r3,1024
 1080cc4:	18001c26 	beq	r3,zero,1080d38 <__sfvwrite_r+0x464>
 1080cc8:	300b883a 	mov	r5,r6
 1080ccc:	a809883a 	mov	r4,r21
 1080cd0:	1080f180 	call	1080f18 <_malloc_r>
 1080cd4:	102f883a 	mov	r23,r2
 1080cd8:	10002926 	beq	r2,zero,1080d80 <__sfvwrite_r+0x4ac>
 1080cdc:	81400417 	ldw	r5,16(r16)
 1080ce0:	b00d883a 	mov	r6,r22
 1080ce4:	1009883a 	mov	r4,r2
 1080ce8:	10818080 	call	1081808 <memcpy>
 1080cec:	8080030b 	ldhu	r2,12(r16)
 1080cf0:	00fedfc4 	movi	r3,-1153
 1080cf4:	10c4703a 	and	r2,r2,r3
 1080cf8:	10802014 	ori	r2,r2,128
 1080cfc:	8080030d 	sth	r2,12(r16)
 1080d00:	bd89883a 	add	r4,r23,r22
 1080d04:	9d8fc83a 	sub	r7,r19,r22
 1080d08:	85c00415 	stw	r23,16(r16)
 1080d0c:	84c00515 	stw	r19,20(r16)
 1080d10:	81000015 	stw	r4,0(r16)
 1080d14:	9027883a 	mov	r19,r18
 1080d18:	81c00215 	stw	r7,8(r16)
 1080d1c:	902f883a 	mov	r23,r18
 1080d20:	003f3b06 	br	1080a10 <__sfvwrite_r+0x13c>
 1080d24:	800b883a 	mov	r5,r16
 1080d28:	a809883a 	mov	r4,r21
 1080d2c:	10827f00 	call	10827f0 <_fflush_r>
 1080d30:	103fb926 	beq	r2,zero,1080c18 <__sfvwrite_r+0x344>
 1080d34:	003f6506 	br	1080acc <__sfvwrite_r+0x1f8>
 1080d38:	a809883a 	mov	r4,r21
 1080d3c:	1081bd40 	call	1081bd4 <_realloc_r>
 1080d40:	102f883a 	mov	r23,r2
 1080d44:	103fee1e 	bne	r2,zero,1080d00 <__sfvwrite_r+0x42c>
 1080d48:	81400417 	ldw	r5,16(r16)
 1080d4c:	a809883a 	mov	r4,r21
 1080d50:	10829a00 	call	10829a0 <_free_r>
 1080d54:	8080030b 	ldhu	r2,12(r16)
 1080d58:	00ffdfc4 	movi	r3,-129
 1080d5c:	1884703a 	and	r2,r3,r2
 1080d60:	00c00304 	movi	r3,12
 1080d64:	a8c00015 	stw	r3,0(r21)
 1080d68:	003f5906 	br	1080ad0 <__sfvwrite_r+0x1fc>
 1080d6c:	94c00044 	addi	r19,r18,1
 1080d70:	02000044 	movi	r8,1
 1080d74:	003f6006 	br	1080af8 <__sfvwrite_r+0x224>
 1080d78:	00bfffc4 	movi	r2,-1
 1080d7c:	003f0306 	br	108098c <__sfvwrite_r+0xb8>
 1080d80:	00800304 	movi	r2,12
 1080d84:	a8800015 	stw	r2,0(r21)
 1080d88:	8080030b 	ldhu	r2,12(r16)
 1080d8c:	003f5006 	br	1080ad0 <__sfvwrite_r+0x1fc>

01080d90 <_fwalk>:
 1080d90:	defff704 	addi	sp,sp,-36
 1080d94:	dd000415 	stw	r20,16(sp)
 1080d98:	dfc00815 	stw	ra,32(sp)
 1080d9c:	ddc00715 	stw	r23,28(sp)
 1080da0:	dd800615 	stw	r22,24(sp)
 1080da4:	dd400515 	stw	r21,20(sp)
 1080da8:	dcc00315 	stw	r19,12(sp)
 1080dac:	dc800215 	stw	r18,8(sp)
 1080db0:	dc400115 	stw	r17,4(sp)
 1080db4:	dc000015 	stw	r16,0(sp)
 1080db8:	2500b804 	addi	r20,r4,736
 1080dbc:	a0002326 	beq	r20,zero,1080e4c <_fwalk+0xbc>
 1080dc0:	282b883a 	mov	r21,r5
 1080dc4:	002f883a 	mov	r23,zero
 1080dc8:	05800044 	movi	r22,1
 1080dcc:	04ffffc4 	movi	r19,-1
 1080dd0:	a4400117 	ldw	r17,4(r20)
 1080dd4:	a4800217 	ldw	r18,8(r20)
 1080dd8:	8c7fffc4 	addi	r17,r17,-1
 1080ddc:	88000d16 	blt	r17,zero,1080e14 <_fwalk+0x84>
 1080de0:	94000304 	addi	r16,r18,12
 1080de4:	94800384 	addi	r18,r18,14
 1080de8:	8080000b 	ldhu	r2,0(r16)
 1080dec:	8c7fffc4 	addi	r17,r17,-1
 1080df0:	813ffd04 	addi	r4,r16,-12
 1080df4:	b080042e 	bgeu	r22,r2,1080e08 <_fwalk+0x78>
 1080df8:	9080000f 	ldh	r2,0(r18)
 1080dfc:	14c00226 	beq	r2,r19,1080e08 <_fwalk+0x78>
 1080e00:	a83ee83a 	callr	r21
 1080e04:	b8aeb03a 	or	r23,r23,r2
 1080e08:	84001a04 	addi	r16,r16,104
 1080e0c:	94801a04 	addi	r18,r18,104
 1080e10:	8cfff51e 	bne	r17,r19,1080de8 <_fwalk+0x58>
 1080e14:	a5000017 	ldw	r20,0(r20)
 1080e18:	a03fed1e 	bne	r20,zero,1080dd0 <_fwalk+0x40>
 1080e1c:	b805883a 	mov	r2,r23
 1080e20:	dfc00817 	ldw	ra,32(sp)
 1080e24:	ddc00717 	ldw	r23,28(sp)
 1080e28:	dd800617 	ldw	r22,24(sp)
 1080e2c:	dd400517 	ldw	r21,20(sp)
 1080e30:	dd000417 	ldw	r20,16(sp)
 1080e34:	dcc00317 	ldw	r19,12(sp)
 1080e38:	dc800217 	ldw	r18,8(sp)
 1080e3c:	dc400117 	ldw	r17,4(sp)
 1080e40:	dc000017 	ldw	r16,0(sp)
 1080e44:	dec00904 	addi	sp,sp,36
 1080e48:	f800283a 	ret
 1080e4c:	002f883a 	mov	r23,zero
 1080e50:	003ff206 	br	1080e1c <_fwalk+0x8c>

01080e54 <_fwalk_reent>:
 1080e54:	defff704 	addi	sp,sp,-36
 1080e58:	dd000415 	stw	r20,16(sp)
 1080e5c:	dfc00815 	stw	ra,32(sp)
 1080e60:	ddc00715 	stw	r23,28(sp)
 1080e64:	dd800615 	stw	r22,24(sp)
 1080e68:	dd400515 	stw	r21,20(sp)
 1080e6c:	dcc00315 	stw	r19,12(sp)
 1080e70:	dc800215 	stw	r18,8(sp)
 1080e74:	dc400115 	stw	r17,4(sp)
 1080e78:	dc000015 	stw	r16,0(sp)
 1080e7c:	2500b804 	addi	r20,r4,736
 1080e80:	a0002326 	beq	r20,zero,1080f10 <_fwalk_reent+0xbc>
 1080e84:	282b883a 	mov	r21,r5
 1080e88:	2027883a 	mov	r19,r4
 1080e8c:	002f883a 	mov	r23,zero
 1080e90:	05800044 	movi	r22,1
 1080e94:	04bfffc4 	movi	r18,-1
 1080e98:	a4400117 	ldw	r17,4(r20)
 1080e9c:	a4000217 	ldw	r16,8(r20)
 1080ea0:	8c7fffc4 	addi	r17,r17,-1
 1080ea4:	88000c16 	blt	r17,zero,1080ed8 <_fwalk_reent+0x84>
 1080ea8:	84000304 	addi	r16,r16,12
 1080eac:	8080000b 	ldhu	r2,0(r16)
 1080eb0:	8c7fffc4 	addi	r17,r17,-1
 1080eb4:	817ffd04 	addi	r5,r16,-12
 1080eb8:	b080052e 	bgeu	r22,r2,1080ed0 <_fwalk_reent+0x7c>
 1080ebc:	8080008f 	ldh	r2,2(r16)
 1080ec0:	9809883a 	mov	r4,r19
 1080ec4:	14800226 	beq	r2,r18,1080ed0 <_fwalk_reent+0x7c>
 1080ec8:	a83ee83a 	callr	r21
 1080ecc:	b8aeb03a 	or	r23,r23,r2
 1080ed0:	84001a04 	addi	r16,r16,104
 1080ed4:	8cbff51e 	bne	r17,r18,1080eac <_fwalk_reent+0x58>
 1080ed8:	a5000017 	ldw	r20,0(r20)
 1080edc:	a03fee1e 	bne	r20,zero,1080e98 <_fwalk_reent+0x44>
 1080ee0:	b805883a 	mov	r2,r23
 1080ee4:	dfc00817 	ldw	ra,32(sp)
 1080ee8:	ddc00717 	ldw	r23,28(sp)
 1080eec:	dd800617 	ldw	r22,24(sp)
 1080ef0:	dd400517 	ldw	r21,20(sp)
 1080ef4:	dd000417 	ldw	r20,16(sp)
 1080ef8:	dcc00317 	ldw	r19,12(sp)
 1080efc:	dc800217 	ldw	r18,8(sp)
 1080f00:	dc400117 	ldw	r17,4(sp)
 1080f04:	dc000017 	ldw	r16,0(sp)
 1080f08:	dec00904 	addi	sp,sp,36
 1080f0c:	f800283a 	ret
 1080f10:	002f883a 	mov	r23,zero
 1080f14:	003ff206 	br	1080ee0 <_fwalk_reent+0x8c>

01080f18 <_malloc_r>:
 1080f18:	defff504 	addi	sp,sp,-44
 1080f1c:	dc800315 	stw	r18,12(sp)
 1080f20:	dfc00a15 	stw	ra,40(sp)
 1080f24:	df000915 	stw	fp,36(sp)
 1080f28:	ddc00815 	stw	r23,32(sp)
 1080f2c:	dd800715 	stw	r22,28(sp)
 1080f30:	dd400615 	stw	r21,24(sp)
 1080f34:	dd000515 	stw	r20,20(sp)
 1080f38:	dcc00415 	stw	r19,16(sp)
 1080f3c:	dc400215 	stw	r17,8(sp)
 1080f40:	dc000115 	stw	r16,4(sp)
 1080f44:	288002c4 	addi	r2,r5,11
 1080f48:	00c00584 	movi	r3,22
 1080f4c:	2025883a 	mov	r18,r4
 1080f50:	18807f2e 	bgeu	r3,r2,1081150 <_malloc_r+0x238>
 1080f54:	047ffe04 	movi	r17,-8
 1080f58:	1462703a 	and	r17,r2,r17
 1080f5c:	8800a316 	blt	r17,zero,10811ec <_malloc_r+0x2d4>
 1080f60:	8940a236 	bltu	r17,r5,10811ec <_malloc_r+0x2d4>
 1080f64:	108370c0 	call	108370c <__malloc_lock>
 1080f68:	00807dc4 	movi	r2,503
 1080f6c:	1441e92e 	bgeu	r2,r17,1081714 <_malloc_r+0x7fc>
 1080f70:	8804d27a 	srli	r2,r17,9
 1080f74:	1000a126 	beq	r2,zero,10811fc <_malloc_r+0x2e4>
 1080f78:	00c00104 	movi	r3,4
 1080f7c:	18811e36 	bltu	r3,r2,10813f8 <_malloc_r+0x4e0>
 1080f80:	8804d1ba 	srli	r2,r17,6
 1080f84:	12000e44 	addi	r8,r2,57
 1080f88:	11c00e04 	addi	r7,r2,56
 1080f8c:	4209883a 	add	r4,r8,r8
 1080f90:	04c04234 	movhi	r19,264
 1080f94:	2109883a 	add	r4,r4,r4
 1080f98:	9cdb2104 	addi	r19,r19,27780
 1080f9c:	2109883a 	add	r4,r4,r4
 1080fa0:	9909883a 	add	r4,r19,r4
 1080fa4:	24000117 	ldw	r16,4(r4)
 1080fa8:	213ffe04 	addi	r4,r4,-8
 1080fac:	24009726 	beq	r4,r16,108120c <_malloc_r+0x2f4>
 1080fb0:	80800117 	ldw	r2,4(r16)
 1080fb4:	01bfff04 	movi	r6,-4
 1080fb8:	014003c4 	movi	r5,15
 1080fbc:	1184703a 	and	r2,r2,r6
 1080fc0:	1447c83a 	sub	r3,r2,r17
 1080fc4:	28c00716 	blt	r5,r3,1080fe4 <_malloc_r+0xcc>
 1080fc8:	1800920e 	bge	r3,zero,1081214 <_malloc_r+0x2fc>
 1080fcc:	84000317 	ldw	r16,12(r16)
 1080fd0:	24008e26 	beq	r4,r16,108120c <_malloc_r+0x2f4>
 1080fd4:	80800117 	ldw	r2,4(r16)
 1080fd8:	1184703a 	and	r2,r2,r6
 1080fdc:	1447c83a 	sub	r3,r2,r17
 1080fe0:	28fff90e 	bge	r5,r3,1080fc8 <_malloc_r+0xb0>
 1080fe4:	3809883a 	mov	r4,r7
 1080fe8:	01804234 	movhi	r6,264
 1080fec:	9c000417 	ldw	r16,16(r19)
 1080ff0:	319b2104 	addi	r6,r6,27780
 1080ff4:	32000204 	addi	r8,r6,8
 1080ff8:	82013426 	beq	r16,r8,10814cc <_malloc_r+0x5b4>
 1080ffc:	80c00117 	ldw	r3,4(r16)
 1081000:	00bfff04 	movi	r2,-4
 1081004:	188e703a 	and	r7,r3,r2
 1081008:	3c45c83a 	sub	r2,r7,r17
 108100c:	00c003c4 	movi	r3,15
 1081010:	18811f16 	blt	r3,r2,1081490 <_malloc_r+0x578>
 1081014:	32000515 	stw	r8,20(r6)
 1081018:	32000415 	stw	r8,16(r6)
 108101c:	10007f0e 	bge	r2,zero,108121c <_malloc_r+0x304>
 1081020:	00807fc4 	movi	r2,511
 1081024:	11c0fd36 	bltu	r2,r7,108141c <_malloc_r+0x504>
 1081028:	3806d0fa 	srli	r3,r7,3
 108102c:	01c00044 	movi	r7,1
 1081030:	30800117 	ldw	r2,4(r6)
 1081034:	19400044 	addi	r5,r3,1
 1081038:	294b883a 	add	r5,r5,r5
 108103c:	1807d0ba 	srai	r3,r3,2
 1081040:	294b883a 	add	r5,r5,r5
 1081044:	294b883a 	add	r5,r5,r5
 1081048:	298b883a 	add	r5,r5,r6
 108104c:	38c6983a 	sll	r3,r7,r3
 1081050:	29c00017 	ldw	r7,0(r5)
 1081054:	2a7ffe04 	addi	r9,r5,-8
 1081058:	1886b03a 	or	r3,r3,r2
 108105c:	82400315 	stw	r9,12(r16)
 1081060:	81c00215 	stw	r7,8(r16)
 1081064:	30c00115 	stw	r3,4(r6)
 1081068:	2c000015 	stw	r16,0(r5)
 108106c:	3c000315 	stw	r16,12(r7)
 1081070:	2005d0ba 	srai	r2,r4,2
 1081074:	01400044 	movi	r5,1
 1081078:	288a983a 	sll	r5,r5,r2
 108107c:	19406f36 	bltu	r3,r5,108123c <_malloc_r+0x324>
 1081080:	28c4703a 	and	r2,r5,r3
 1081084:	10000a1e 	bne	r2,zero,10810b0 <_malloc_r+0x198>
 1081088:	00bfff04 	movi	r2,-4
 108108c:	294b883a 	add	r5,r5,r5
 1081090:	2088703a 	and	r4,r4,r2
 1081094:	28c4703a 	and	r2,r5,r3
 1081098:	21000104 	addi	r4,r4,4
 108109c:	1000041e 	bne	r2,zero,10810b0 <_malloc_r+0x198>
 10810a0:	294b883a 	add	r5,r5,r5
 10810a4:	28c4703a 	and	r2,r5,r3
 10810a8:	21000104 	addi	r4,r4,4
 10810ac:	103ffc26 	beq	r2,zero,10810a0 <_malloc_r+0x188>
 10810b0:	02bfff04 	movi	r10,-4
 10810b4:	024003c4 	movi	r9,15
 10810b8:	21800044 	addi	r6,r4,1
 10810bc:	318d883a 	add	r6,r6,r6
 10810c0:	318d883a 	add	r6,r6,r6
 10810c4:	318d883a 	add	r6,r6,r6
 10810c8:	998d883a 	add	r6,r19,r6
 10810cc:	333ffe04 	addi	r12,r6,-8
 10810d0:	2017883a 	mov	r11,r4
 10810d4:	31800104 	addi	r6,r6,4
 10810d8:	34000017 	ldw	r16,0(r6)
 10810dc:	31fffd04 	addi	r7,r6,-12
 10810e0:	81c0041e 	bne	r16,r7,10810f4 <_malloc_r+0x1dc>
 10810e4:	0000fb06 	br	10814d4 <_malloc_r+0x5bc>
 10810e8:	1801030e 	bge	r3,zero,10814f8 <_malloc_r+0x5e0>
 10810ec:	84000317 	ldw	r16,12(r16)
 10810f0:	81c0f826 	beq	r16,r7,10814d4 <_malloc_r+0x5bc>
 10810f4:	80800117 	ldw	r2,4(r16)
 10810f8:	1284703a 	and	r2,r2,r10
 10810fc:	1447c83a 	sub	r3,r2,r17
 1081100:	48fff90e 	bge	r9,r3,10810e8 <_malloc_r+0x1d0>
 1081104:	80800317 	ldw	r2,12(r16)
 1081108:	81000217 	ldw	r4,8(r16)
 108110c:	89400054 	ori	r5,r17,1
 1081110:	81400115 	stw	r5,4(r16)
 1081114:	20800315 	stw	r2,12(r4)
 1081118:	11000215 	stw	r4,8(r2)
 108111c:	8463883a 	add	r17,r16,r17
 1081120:	9c400515 	stw	r17,20(r19)
 1081124:	9c400415 	stw	r17,16(r19)
 1081128:	18800054 	ori	r2,r3,1
 108112c:	88800115 	stw	r2,4(r17)
 1081130:	8a000315 	stw	r8,12(r17)
 1081134:	8a000215 	stw	r8,8(r17)
 1081138:	88e3883a 	add	r17,r17,r3
 108113c:	88c00015 	stw	r3,0(r17)
 1081140:	9009883a 	mov	r4,r18
 1081144:	10837300 	call	1083730 <__malloc_unlock>
 1081148:	80800204 	addi	r2,r16,8
 108114c:	00001b06 	br	10811bc <_malloc_r+0x2a4>
 1081150:	04400404 	movi	r17,16
 1081154:	89402536 	bltu	r17,r5,10811ec <_malloc_r+0x2d4>
 1081158:	108370c0 	call	108370c <__malloc_lock>
 108115c:	00800184 	movi	r2,6
 1081160:	01000084 	movi	r4,2
 1081164:	04c04234 	movhi	r19,264
 1081168:	1085883a 	add	r2,r2,r2
 108116c:	9cdb2104 	addi	r19,r19,27780
 1081170:	1085883a 	add	r2,r2,r2
 1081174:	9885883a 	add	r2,r19,r2
 1081178:	14000117 	ldw	r16,4(r2)
 108117c:	10fffe04 	addi	r3,r2,-8
 1081180:	80c0d926 	beq	r16,r3,10814e8 <_malloc_r+0x5d0>
 1081184:	80c00117 	ldw	r3,4(r16)
 1081188:	81000317 	ldw	r4,12(r16)
 108118c:	00bfff04 	movi	r2,-4
 1081190:	1884703a 	and	r2,r3,r2
 1081194:	81400217 	ldw	r5,8(r16)
 1081198:	8085883a 	add	r2,r16,r2
 108119c:	10c00117 	ldw	r3,4(r2)
 10811a0:	29000315 	stw	r4,12(r5)
 10811a4:	21400215 	stw	r5,8(r4)
 10811a8:	18c00054 	ori	r3,r3,1
 10811ac:	10c00115 	stw	r3,4(r2)
 10811b0:	9009883a 	mov	r4,r18
 10811b4:	10837300 	call	1083730 <__malloc_unlock>
 10811b8:	80800204 	addi	r2,r16,8
 10811bc:	dfc00a17 	ldw	ra,40(sp)
 10811c0:	df000917 	ldw	fp,36(sp)
 10811c4:	ddc00817 	ldw	r23,32(sp)
 10811c8:	dd800717 	ldw	r22,28(sp)
 10811cc:	dd400617 	ldw	r21,24(sp)
 10811d0:	dd000517 	ldw	r20,20(sp)
 10811d4:	dcc00417 	ldw	r19,16(sp)
 10811d8:	dc800317 	ldw	r18,12(sp)
 10811dc:	dc400217 	ldw	r17,8(sp)
 10811e0:	dc000117 	ldw	r16,4(sp)
 10811e4:	dec00b04 	addi	sp,sp,44
 10811e8:	f800283a 	ret
 10811ec:	00800304 	movi	r2,12
 10811f0:	90800015 	stw	r2,0(r18)
 10811f4:	0005883a 	mov	r2,zero
 10811f8:	003ff006 	br	10811bc <_malloc_r+0x2a4>
 10811fc:	01002004 	movi	r4,128
 1081200:	02001004 	movi	r8,64
 1081204:	01c00fc4 	movi	r7,63
 1081208:	003f6106 	br	1080f90 <_malloc_r+0x78>
 108120c:	4009883a 	mov	r4,r8
 1081210:	003f7506 	br	1080fe8 <_malloc_r+0xd0>
 1081214:	81000317 	ldw	r4,12(r16)
 1081218:	003fde06 	br	1081194 <_malloc_r+0x27c>
 108121c:	81c5883a 	add	r2,r16,r7
 1081220:	11400117 	ldw	r5,4(r2)
 1081224:	9009883a 	mov	r4,r18
 1081228:	29400054 	ori	r5,r5,1
 108122c:	11400115 	stw	r5,4(r2)
 1081230:	10837300 	call	1083730 <__malloc_unlock>
 1081234:	80800204 	addi	r2,r16,8
 1081238:	003fe006 	br	10811bc <_malloc_r+0x2a4>
 108123c:	9c000217 	ldw	r16,8(r19)
 1081240:	00bfff04 	movi	r2,-4
 1081244:	85800117 	ldw	r22,4(r16)
 1081248:	b0ac703a 	and	r22,r22,r2
 108124c:	b4400336 	bltu	r22,r17,108125c <_malloc_r+0x344>
 1081250:	b445c83a 	sub	r2,r22,r17
 1081254:	00c003c4 	movi	r3,15
 1081258:	18805d16 	blt	r3,r2,10813d0 <_malloc_r+0x4b8>
 108125c:	05c04274 	movhi	r23,265
 1081260:	00804274 	movhi	r2,265
 1081264:	10a79204 	addi	r2,r2,-25016
 1081268:	bde0c804 	addi	r23,r23,-31968
 108126c:	15400017 	ldw	r21,0(r2)
 1081270:	b8c00017 	ldw	r3,0(r23)
 1081274:	00bfffc4 	movi	r2,-1
 1081278:	858d883a 	add	r6,r16,r22
 108127c:	8d6b883a 	add	r21,r17,r21
 1081280:	1880ea26 	beq	r3,r2,108162c <_malloc_r+0x714>
 1081284:	ad4403c4 	addi	r21,r21,4111
 1081288:	00bc0004 	movi	r2,-4096
 108128c:	a8aa703a 	and	r21,r21,r2
 1081290:	a80b883a 	mov	r5,r21
 1081294:	9009883a 	mov	r4,r18
 1081298:	d9800015 	stw	r6,0(sp)
 108129c:	10821380 	call	1082138 <_sbrk_r>
 10812a0:	1029883a 	mov	r20,r2
 10812a4:	00bfffc4 	movi	r2,-1
 10812a8:	d9800017 	ldw	r6,0(sp)
 10812ac:	a080e826 	beq	r20,r2,1081650 <_malloc_r+0x738>
 10812b0:	a180a636 	bltu	r20,r6,108154c <_malloc_r+0x634>
 10812b4:	07004274 	movhi	fp,265
 10812b8:	e7279b04 	addi	fp,fp,-24980
 10812bc:	e0800017 	ldw	r2,0(fp)
 10812c0:	a887883a 	add	r3,r21,r2
 10812c4:	e0c00015 	stw	r3,0(fp)
 10812c8:	3500e626 	beq	r6,r20,1081664 <_malloc_r+0x74c>
 10812cc:	b9000017 	ldw	r4,0(r23)
 10812d0:	00bfffc4 	movi	r2,-1
 10812d4:	2080ee26 	beq	r4,r2,1081690 <_malloc_r+0x778>
 10812d8:	a185c83a 	sub	r2,r20,r6
 10812dc:	10c5883a 	add	r2,r2,r3
 10812e0:	e0800015 	stw	r2,0(fp)
 10812e4:	a0c001cc 	andi	r3,r20,7
 10812e8:	1800bc26 	beq	r3,zero,10815dc <_malloc_r+0x6c4>
 10812ec:	a0e9c83a 	sub	r20,r20,r3
 10812f0:	00840204 	movi	r2,4104
 10812f4:	a5000204 	addi	r20,r20,8
 10812f8:	10c7c83a 	sub	r3,r2,r3
 10812fc:	a545883a 	add	r2,r20,r21
 1081300:	1083ffcc 	andi	r2,r2,4095
 1081304:	18abc83a 	sub	r21,r3,r2
 1081308:	a80b883a 	mov	r5,r21
 108130c:	9009883a 	mov	r4,r18
 1081310:	10821380 	call	1082138 <_sbrk_r>
 1081314:	00ffffc4 	movi	r3,-1
 1081318:	10c0e126 	beq	r2,r3,10816a0 <_malloc_r+0x788>
 108131c:	1505c83a 	sub	r2,r2,r20
 1081320:	1545883a 	add	r2,r2,r21
 1081324:	10800054 	ori	r2,r2,1
 1081328:	e0c00017 	ldw	r3,0(fp)
 108132c:	9d000215 	stw	r20,8(r19)
 1081330:	a0800115 	stw	r2,4(r20)
 1081334:	a8c7883a 	add	r3,r21,r3
 1081338:	e0c00015 	stw	r3,0(fp)
 108133c:	84c00e26 	beq	r16,r19,1081378 <_malloc_r+0x460>
 1081340:	018003c4 	movi	r6,15
 1081344:	3580a72e 	bgeu	r6,r22,10815e4 <_malloc_r+0x6cc>
 1081348:	81400117 	ldw	r5,4(r16)
 108134c:	013ffe04 	movi	r4,-8
 1081350:	b0bffd04 	addi	r2,r22,-12
 1081354:	1104703a 	and	r2,r2,r4
 1081358:	2900004c 	andi	r4,r5,1
 108135c:	2088b03a 	or	r4,r4,r2
 1081360:	81000115 	stw	r4,4(r16)
 1081364:	01400144 	movi	r5,5
 1081368:	8089883a 	add	r4,r16,r2
 108136c:	21400115 	stw	r5,4(r4)
 1081370:	21400215 	stw	r5,8(r4)
 1081374:	3080cd36 	bltu	r6,r2,10816ac <_malloc_r+0x794>
 1081378:	00804274 	movhi	r2,265
 108137c:	10a79104 	addi	r2,r2,-25020
 1081380:	11000017 	ldw	r4,0(r2)
 1081384:	20c0012e 	bgeu	r4,r3,108138c <_malloc_r+0x474>
 1081388:	10c00015 	stw	r3,0(r2)
 108138c:	00804274 	movhi	r2,265
 1081390:	10a79004 	addi	r2,r2,-25024
 1081394:	11000017 	ldw	r4,0(r2)
 1081398:	9c000217 	ldw	r16,8(r19)
 108139c:	20c0012e 	bgeu	r4,r3,10813a4 <_malloc_r+0x48c>
 10813a0:	10c00015 	stw	r3,0(r2)
 10813a4:	80c00117 	ldw	r3,4(r16)
 10813a8:	00bfff04 	movi	r2,-4
 10813ac:	1886703a 	and	r3,r3,r2
 10813b0:	1c45c83a 	sub	r2,r3,r17
 10813b4:	1c400236 	bltu	r3,r17,10813c0 <_malloc_r+0x4a8>
 10813b8:	00c003c4 	movi	r3,15
 10813bc:	18800416 	blt	r3,r2,10813d0 <_malloc_r+0x4b8>
 10813c0:	9009883a 	mov	r4,r18
 10813c4:	10837300 	call	1083730 <__malloc_unlock>
 10813c8:	0005883a 	mov	r2,zero
 10813cc:	003f7b06 	br	10811bc <_malloc_r+0x2a4>
 10813d0:	88c00054 	ori	r3,r17,1
 10813d4:	80c00115 	stw	r3,4(r16)
 10813d8:	8463883a 	add	r17,r16,r17
 10813dc:	10800054 	ori	r2,r2,1
 10813e0:	9c400215 	stw	r17,8(r19)
 10813e4:	88800115 	stw	r2,4(r17)
 10813e8:	9009883a 	mov	r4,r18
 10813ec:	10837300 	call	1083730 <__malloc_unlock>
 10813f0:	80800204 	addi	r2,r16,8
 10813f4:	003f7106 	br	10811bc <_malloc_r+0x2a4>
 10813f8:	00c00504 	movi	r3,20
 10813fc:	18804a2e 	bgeu	r3,r2,1081528 <_malloc_r+0x610>
 1081400:	00c01504 	movi	r3,84
 1081404:	18806e36 	bltu	r3,r2,10815c0 <_malloc_r+0x6a8>
 1081408:	8804d33a 	srli	r2,r17,12
 108140c:	12001bc4 	addi	r8,r2,111
 1081410:	11c01b84 	addi	r7,r2,110
 1081414:	4209883a 	add	r4,r8,r8
 1081418:	003edd06 	br	1080f90 <_malloc_r+0x78>
 108141c:	3804d27a 	srli	r2,r7,9
 1081420:	00c00104 	movi	r3,4
 1081424:	1880442e 	bgeu	r3,r2,1081538 <_malloc_r+0x620>
 1081428:	00c00504 	movi	r3,20
 108142c:	18808136 	bltu	r3,r2,1081634 <_malloc_r+0x71c>
 1081430:	11401704 	addi	r5,r2,92
 1081434:	10c016c4 	addi	r3,r2,91
 1081438:	294b883a 	add	r5,r5,r5
 108143c:	294b883a 	add	r5,r5,r5
 1081440:	294b883a 	add	r5,r5,r5
 1081444:	994b883a 	add	r5,r19,r5
 1081448:	28800017 	ldw	r2,0(r5)
 108144c:	01804234 	movhi	r6,264
 1081450:	297ffe04 	addi	r5,r5,-8
 1081454:	319b2104 	addi	r6,r6,27780
 1081458:	28806526 	beq	r5,r2,10815f0 <_malloc_r+0x6d8>
 108145c:	01bfff04 	movi	r6,-4
 1081460:	10c00117 	ldw	r3,4(r2)
 1081464:	1986703a 	and	r3,r3,r6
 1081468:	38c0022e 	bgeu	r7,r3,1081474 <_malloc_r+0x55c>
 108146c:	10800217 	ldw	r2,8(r2)
 1081470:	28bffb1e 	bne	r5,r2,1081460 <_malloc_r+0x548>
 1081474:	11400317 	ldw	r5,12(r2)
 1081478:	98c00117 	ldw	r3,4(r19)
 108147c:	81400315 	stw	r5,12(r16)
 1081480:	80800215 	stw	r2,8(r16)
 1081484:	2c000215 	stw	r16,8(r5)
 1081488:	14000315 	stw	r16,12(r2)
 108148c:	003ef806 	br	1081070 <_malloc_r+0x158>
 1081490:	88c00054 	ori	r3,r17,1
 1081494:	80c00115 	stw	r3,4(r16)
 1081498:	8463883a 	add	r17,r16,r17
 108149c:	34400515 	stw	r17,20(r6)
 10814a0:	34400415 	stw	r17,16(r6)
 10814a4:	10c00054 	ori	r3,r2,1
 10814a8:	8a000315 	stw	r8,12(r17)
 10814ac:	8a000215 	stw	r8,8(r17)
 10814b0:	88c00115 	stw	r3,4(r17)
 10814b4:	88a3883a 	add	r17,r17,r2
 10814b8:	88800015 	stw	r2,0(r17)
 10814bc:	9009883a 	mov	r4,r18
 10814c0:	10837300 	call	1083730 <__malloc_unlock>
 10814c4:	80800204 	addi	r2,r16,8
 10814c8:	003f3c06 	br	10811bc <_malloc_r+0x2a4>
 10814cc:	30c00117 	ldw	r3,4(r6)
 10814d0:	003ee706 	br	1081070 <_malloc_r+0x158>
 10814d4:	5ac00044 	addi	r11,r11,1
 10814d8:	588000cc 	andi	r2,r11,3
 10814dc:	31800204 	addi	r6,r6,8
 10814e0:	103efd1e 	bne	r2,zero,10810d8 <_malloc_r+0x1c0>
 10814e4:	00002406 	br	1081578 <_malloc_r+0x660>
 10814e8:	14000317 	ldw	r16,12(r2)
 10814ec:	143f251e 	bne	r2,r16,1081184 <_malloc_r+0x26c>
 10814f0:	21000084 	addi	r4,r4,2
 10814f4:	003ebc06 	br	1080fe8 <_malloc_r+0xd0>
 10814f8:	8085883a 	add	r2,r16,r2
 10814fc:	10c00117 	ldw	r3,4(r2)
 1081500:	81000317 	ldw	r4,12(r16)
 1081504:	81400217 	ldw	r5,8(r16)
 1081508:	18c00054 	ori	r3,r3,1
 108150c:	10c00115 	stw	r3,4(r2)
 1081510:	29000315 	stw	r4,12(r5)
 1081514:	21400215 	stw	r5,8(r4)
 1081518:	9009883a 	mov	r4,r18
 108151c:	10837300 	call	1083730 <__malloc_unlock>
 1081520:	80800204 	addi	r2,r16,8
 1081524:	003f2506 	br	10811bc <_malloc_r+0x2a4>
 1081528:	12001704 	addi	r8,r2,92
 108152c:	11c016c4 	addi	r7,r2,91
 1081530:	4209883a 	add	r4,r8,r8
 1081534:	003e9606 	br	1080f90 <_malloc_r+0x78>
 1081538:	3804d1ba 	srli	r2,r7,6
 108153c:	11400e44 	addi	r5,r2,57
 1081540:	10c00e04 	addi	r3,r2,56
 1081544:	294b883a 	add	r5,r5,r5
 1081548:	003fbc06 	br	108143c <_malloc_r+0x524>
 108154c:	84ff5926 	beq	r16,r19,10812b4 <_malloc_r+0x39c>
 1081550:	00804234 	movhi	r2,264
 1081554:	109b2104 	addi	r2,r2,27780
 1081558:	14000217 	ldw	r16,8(r2)
 108155c:	00bfff04 	movi	r2,-4
 1081560:	80c00117 	ldw	r3,4(r16)
 1081564:	1886703a 	and	r3,r3,r2
 1081568:	003f9106 	br	10813b0 <_malloc_r+0x498>
 108156c:	60800217 	ldw	r2,8(r12)
 1081570:	213fffc4 	addi	r4,r4,-1
 1081574:	1300651e 	bne	r2,r12,108170c <_malloc_r+0x7f4>
 1081578:	208000cc 	andi	r2,r4,3
 108157c:	633ffe04 	addi	r12,r12,-8
 1081580:	103ffa1e 	bne	r2,zero,108156c <_malloc_r+0x654>
 1081584:	98800117 	ldw	r2,4(r19)
 1081588:	0146303a 	nor	r3,zero,r5
 108158c:	1884703a 	and	r2,r3,r2
 1081590:	98800115 	stw	r2,4(r19)
 1081594:	294b883a 	add	r5,r5,r5
 1081598:	117f2836 	bltu	r2,r5,108123c <_malloc_r+0x324>
 108159c:	283f2726 	beq	r5,zero,108123c <_malloc_r+0x324>
 10815a0:	2886703a 	and	r3,r5,r2
 10815a4:	5809883a 	mov	r4,r11
 10815a8:	183ec31e 	bne	r3,zero,10810b8 <_malloc_r+0x1a0>
 10815ac:	294b883a 	add	r5,r5,r5
 10815b0:	2886703a 	and	r3,r5,r2
 10815b4:	21000104 	addi	r4,r4,4
 10815b8:	183ffc26 	beq	r3,zero,10815ac <_malloc_r+0x694>
 10815bc:	003ebe06 	br	10810b8 <_malloc_r+0x1a0>
 10815c0:	00c05504 	movi	r3,340
 10815c4:	18801236 	bltu	r3,r2,1081610 <_malloc_r+0x6f8>
 10815c8:	8804d3fa 	srli	r2,r17,15
 10815cc:	12001e04 	addi	r8,r2,120
 10815d0:	11c01dc4 	addi	r7,r2,119
 10815d4:	4209883a 	add	r4,r8,r8
 10815d8:	003e6d06 	br	1080f90 <_malloc_r+0x78>
 10815dc:	00c40004 	movi	r3,4096
 10815e0:	003f4606 	br	10812fc <_malloc_r+0x3e4>
 10815e4:	00800044 	movi	r2,1
 10815e8:	a0800115 	stw	r2,4(r20)
 10815ec:	003f7406 	br	10813c0 <_malloc_r+0x4a8>
 10815f0:	1805d0ba 	srai	r2,r3,2
 10815f4:	01c00044 	movi	r7,1
 10815f8:	30c00117 	ldw	r3,4(r6)
 10815fc:	388e983a 	sll	r7,r7,r2
 1081600:	2805883a 	mov	r2,r5
 1081604:	38c6b03a 	or	r3,r7,r3
 1081608:	30c00115 	stw	r3,4(r6)
 108160c:	003f9b06 	br	108147c <_malloc_r+0x564>
 1081610:	00c15504 	movi	r3,1364
 1081614:	18801a36 	bltu	r3,r2,1081680 <_malloc_r+0x768>
 1081618:	8804d4ba 	srli	r2,r17,18
 108161c:	12001f44 	addi	r8,r2,125
 1081620:	11c01f04 	addi	r7,r2,124
 1081624:	4209883a 	add	r4,r8,r8
 1081628:	003e5906 	br	1080f90 <_malloc_r+0x78>
 108162c:	ad400404 	addi	r21,r21,16
 1081630:	003f1706 	br	1081290 <_malloc_r+0x378>
 1081634:	00c01504 	movi	r3,84
 1081638:	18802336 	bltu	r3,r2,10816c8 <_malloc_r+0x7b0>
 108163c:	3804d33a 	srli	r2,r7,12
 1081640:	11401bc4 	addi	r5,r2,111
 1081644:	10c01b84 	addi	r3,r2,110
 1081648:	294b883a 	add	r5,r5,r5
 108164c:	003f7b06 	br	108143c <_malloc_r+0x524>
 1081650:	9c000217 	ldw	r16,8(r19)
 1081654:	00bfff04 	movi	r2,-4
 1081658:	80c00117 	ldw	r3,4(r16)
 108165c:	1886703a 	and	r3,r3,r2
 1081660:	003f5306 	br	10813b0 <_malloc_r+0x498>
 1081664:	3083ffcc 	andi	r2,r6,4095
 1081668:	103f181e 	bne	r2,zero,10812cc <_malloc_r+0x3b4>
 108166c:	99000217 	ldw	r4,8(r19)
 1081670:	b545883a 	add	r2,r22,r21
 1081674:	10800054 	ori	r2,r2,1
 1081678:	20800115 	stw	r2,4(r4)
 108167c:	003f3e06 	br	1081378 <_malloc_r+0x460>
 1081680:	01003f84 	movi	r4,254
 1081684:	02001fc4 	movi	r8,127
 1081688:	01c01f84 	movi	r7,126
 108168c:	003e4006 	br	1080f90 <_malloc_r+0x78>
 1081690:	00804274 	movhi	r2,265
 1081694:	10a0c804 	addi	r2,r2,-31968
 1081698:	15000015 	stw	r20,0(r2)
 108169c:	003f1106 	br	10812e4 <_malloc_r+0x3cc>
 10816a0:	00800044 	movi	r2,1
 10816a4:	002b883a 	mov	r21,zero
 10816a8:	003f1f06 	br	1081328 <_malloc_r+0x410>
 10816ac:	81400204 	addi	r5,r16,8
 10816b0:	9009883a 	mov	r4,r18
 10816b4:	10829a00 	call	10829a0 <_free_r>
 10816b8:	00804274 	movhi	r2,265
 10816bc:	10a79b04 	addi	r2,r2,-24980
 10816c0:	10c00017 	ldw	r3,0(r2)
 10816c4:	003f2c06 	br	1081378 <_malloc_r+0x460>
 10816c8:	00c05504 	movi	r3,340
 10816cc:	18800536 	bltu	r3,r2,10816e4 <_malloc_r+0x7cc>
 10816d0:	3804d3fa 	srli	r2,r7,15
 10816d4:	11401e04 	addi	r5,r2,120
 10816d8:	10c01dc4 	addi	r3,r2,119
 10816dc:	294b883a 	add	r5,r5,r5
 10816e0:	003f5606 	br	108143c <_malloc_r+0x524>
 10816e4:	00c15504 	movi	r3,1364
 10816e8:	18800536 	bltu	r3,r2,1081700 <_malloc_r+0x7e8>
 10816ec:	3804d4ba 	srli	r2,r7,18
 10816f0:	11401f44 	addi	r5,r2,125
 10816f4:	10c01f04 	addi	r3,r2,124
 10816f8:	294b883a 	add	r5,r5,r5
 10816fc:	003f4f06 	br	108143c <_malloc_r+0x524>
 1081700:	01403f84 	movi	r5,254
 1081704:	00c01f84 	movi	r3,126
 1081708:	003f4c06 	br	108143c <_malloc_r+0x524>
 108170c:	98800117 	ldw	r2,4(r19)
 1081710:	003fa006 	br	1081594 <_malloc_r+0x67c>
 1081714:	8808d0fa 	srli	r4,r17,3
 1081718:	20800044 	addi	r2,r4,1
 108171c:	1085883a 	add	r2,r2,r2
 1081720:	003e9006 	br	1081164 <_malloc_r+0x24c>

01081724 <memchr>:
 1081724:	208000cc 	andi	r2,r4,3
 1081728:	280f883a 	mov	r7,r5
 108172c:	10003426 	beq	r2,zero,1081800 <memchr+0xdc>
 1081730:	30bfffc4 	addi	r2,r6,-1
 1081734:	30001a26 	beq	r6,zero,10817a0 <memchr+0x7c>
 1081738:	20c00003 	ldbu	r3,0(r4)
 108173c:	29803fcc 	andi	r6,r5,255
 1081740:	30c0051e 	bne	r6,r3,1081758 <memchr+0x34>
 1081744:	00001806 	br	10817a8 <memchr+0x84>
 1081748:	10001526 	beq	r2,zero,10817a0 <memchr+0x7c>
 108174c:	20c00003 	ldbu	r3,0(r4)
 1081750:	10bfffc4 	addi	r2,r2,-1
 1081754:	30c01426 	beq	r6,r3,10817a8 <memchr+0x84>
 1081758:	21000044 	addi	r4,r4,1
 108175c:	20c000cc 	andi	r3,r4,3
 1081760:	183ff91e 	bne	r3,zero,1081748 <memchr+0x24>
 1081764:	020000c4 	movi	r8,3
 1081768:	40801136 	bltu	r8,r2,10817b0 <memchr+0x8c>
 108176c:	10000c26 	beq	r2,zero,10817a0 <memchr+0x7c>
 1081770:	20c00003 	ldbu	r3,0(r4)
 1081774:	29403fcc 	andi	r5,r5,255
 1081778:	28c00b26 	beq	r5,r3,10817a8 <memchr+0x84>
 108177c:	20c00044 	addi	r3,r4,1
 1081780:	39803fcc 	andi	r6,r7,255
 1081784:	2089883a 	add	r4,r4,r2
 1081788:	00000306 	br	1081798 <memchr+0x74>
 108178c:	18c00044 	addi	r3,r3,1
 1081790:	197fffc3 	ldbu	r5,-1(r3)
 1081794:	31400526 	beq	r6,r5,10817ac <memchr+0x88>
 1081798:	1805883a 	mov	r2,r3
 108179c:	20fffb1e 	bne	r4,r3,108178c <memchr+0x68>
 10817a0:	0005883a 	mov	r2,zero
 10817a4:	f800283a 	ret
 10817a8:	2005883a 	mov	r2,r4
 10817ac:	f800283a 	ret
 10817b0:	28c03fcc 	andi	r3,r5,255
 10817b4:	1812923a 	slli	r9,r3,8
 10817b8:	02ffbff4 	movhi	r11,65279
 10817bc:	02a02074 	movhi	r10,32897
 10817c0:	48d2b03a 	or	r9,r9,r3
 10817c4:	4806943a 	slli	r3,r9,16
 10817c8:	5affbfc4 	addi	r11,r11,-257
 10817cc:	52a02004 	addi	r10,r10,-32640
 10817d0:	48d2b03a 	or	r9,r9,r3
 10817d4:	20c00017 	ldw	r3,0(r4)
 10817d8:	48c6f03a 	xor	r3,r9,r3
 10817dc:	1acd883a 	add	r6,r3,r11
 10817e0:	00c6303a 	nor	r3,zero,r3
 10817e4:	30c6703a 	and	r3,r6,r3
 10817e8:	1a86703a 	and	r3,r3,r10
 10817ec:	183fe01e 	bne	r3,zero,1081770 <memchr+0x4c>
 10817f0:	10bfff04 	addi	r2,r2,-4
 10817f4:	21000104 	addi	r4,r4,4
 10817f8:	40bff636 	bltu	r8,r2,10817d4 <memchr+0xb0>
 10817fc:	003fdb06 	br	108176c <memchr+0x48>
 1081800:	3005883a 	mov	r2,r6
 1081804:	003fd706 	br	1081764 <memchr+0x40>

01081808 <memcpy>:
 1081808:	defffd04 	addi	sp,sp,-12
 108180c:	dfc00215 	stw	ra,8(sp)
 1081810:	dc400115 	stw	r17,4(sp)
 1081814:	dc000015 	stw	r16,0(sp)
 1081818:	00c003c4 	movi	r3,15
 108181c:	2005883a 	mov	r2,r4
 1081820:	1980452e 	bgeu	r3,r6,1081938 <memcpy+0x130>
 1081824:	2906b03a 	or	r3,r5,r4
 1081828:	18c000cc 	andi	r3,r3,3
 108182c:	1800441e 	bne	r3,zero,1081940 <memcpy+0x138>
 1081830:	347ffc04 	addi	r17,r6,-16
 1081834:	8822d13a 	srli	r17,r17,4
 1081838:	28c00104 	addi	r3,r5,4
 108183c:	23400104 	addi	r13,r4,4
 1081840:	8820913a 	slli	r16,r17,4
 1081844:	2b000204 	addi	r12,r5,8
 1081848:	22c00204 	addi	r11,r4,8
 108184c:	84000504 	addi	r16,r16,20
 1081850:	2a800304 	addi	r10,r5,12
 1081854:	22400304 	addi	r9,r4,12
 1081858:	2c21883a 	add	r16,r5,r16
 108185c:	2811883a 	mov	r8,r5
 1081860:	200f883a 	mov	r7,r4
 1081864:	41000017 	ldw	r4,0(r8)
 1081868:	1fc00017 	ldw	ra,0(r3)
 108186c:	63c00017 	ldw	r15,0(r12)
 1081870:	39000015 	stw	r4,0(r7)
 1081874:	53800017 	ldw	r14,0(r10)
 1081878:	6fc00015 	stw	ra,0(r13)
 108187c:	5bc00015 	stw	r15,0(r11)
 1081880:	4b800015 	stw	r14,0(r9)
 1081884:	18c00404 	addi	r3,r3,16
 1081888:	39c00404 	addi	r7,r7,16
 108188c:	42000404 	addi	r8,r8,16
 1081890:	6b400404 	addi	r13,r13,16
 1081894:	63000404 	addi	r12,r12,16
 1081898:	5ac00404 	addi	r11,r11,16
 108189c:	52800404 	addi	r10,r10,16
 10818a0:	4a400404 	addi	r9,r9,16
 10818a4:	1c3fef1e 	bne	r3,r16,1081864 <memcpy+0x5c>
 10818a8:	89c00044 	addi	r7,r17,1
 10818ac:	380e913a 	slli	r7,r7,4
 10818b0:	310003cc 	andi	r4,r6,15
 10818b4:	02c000c4 	movi	r11,3
 10818b8:	11c7883a 	add	r3,r2,r7
 10818bc:	29cb883a 	add	r5,r5,r7
 10818c0:	5900212e 	bgeu	r11,r4,1081948 <memcpy+0x140>
 10818c4:	1813883a 	mov	r9,r3
 10818c8:	2811883a 	mov	r8,r5
 10818cc:	200f883a 	mov	r7,r4
 10818d0:	42800017 	ldw	r10,0(r8)
 10818d4:	4a400104 	addi	r9,r9,4
 10818d8:	39ffff04 	addi	r7,r7,-4
 10818dc:	4abfff15 	stw	r10,-4(r9)
 10818e0:	42000104 	addi	r8,r8,4
 10818e4:	59fffa36 	bltu	r11,r7,10818d0 <memcpy+0xc8>
 10818e8:	213fff04 	addi	r4,r4,-4
 10818ec:	2008d0ba 	srli	r4,r4,2
 10818f0:	318000cc 	andi	r6,r6,3
 10818f4:	21000044 	addi	r4,r4,1
 10818f8:	2109883a 	add	r4,r4,r4
 10818fc:	2109883a 	add	r4,r4,r4
 1081900:	1907883a 	add	r3,r3,r4
 1081904:	290b883a 	add	r5,r5,r4
 1081908:	30000626 	beq	r6,zero,1081924 <memcpy+0x11c>
 108190c:	198d883a 	add	r6,r3,r6
 1081910:	29c00003 	ldbu	r7,0(r5)
 1081914:	18c00044 	addi	r3,r3,1
 1081918:	29400044 	addi	r5,r5,1
 108191c:	19ffffc5 	stb	r7,-1(r3)
 1081920:	19bffb1e 	bne	r3,r6,1081910 <memcpy+0x108>
 1081924:	dfc00217 	ldw	ra,8(sp)
 1081928:	dc400117 	ldw	r17,4(sp)
 108192c:	dc000017 	ldw	r16,0(sp)
 1081930:	dec00304 	addi	sp,sp,12
 1081934:	f800283a 	ret
 1081938:	2007883a 	mov	r3,r4
 108193c:	003ff206 	br	1081908 <memcpy+0x100>
 1081940:	2007883a 	mov	r3,r4
 1081944:	003ff106 	br	108190c <memcpy+0x104>
 1081948:	200d883a 	mov	r6,r4
 108194c:	003fee06 	br	1081908 <memcpy+0x100>

01081950 <memmove>:
 1081950:	2005883a 	mov	r2,r4
 1081954:	29000b2e 	bgeu	r5,r4,1081984 <memmove+0x34>
 1081958:	298f883a 	add	r7,r5,r6
 108195c:	21c0092e 	bgeu	r4,r7,1081984 <memmove+0x34>
 1081960:	2187883a 	add	r3,r4,r6
 1081964:	198bc83a 	sub	r5,r3,r6
 1081968:	30004826 	beq	r6,zero,1081a8c <memmove+0x13c>
 108196c:	39ffffc4 	addi	r7,r7,-1
 1081970:	39000003 	ldbu	r4,0(r7)
 1081974:	18ffffc4 	addi	r3,r3,-1
 1081978:	19000005 	stb	r4,0(r3)
 108197c:	28fffb1e 	bne	r5,r3,108196c <memmove+0x1c>
 1081980:	f800283a 	ret
 1081984:	00c003c4 	movi	r3,15
 1081988:	1980412e 	bgeu	r3,r6,1081a90 <memmove+0x140>
 108198c:	2886b03a 	or	r3,r5,r2
 1081990:	18c000cc 	andi	r3,r3,3
 1081994:	1800401e 	bne	r3,zero,1081a98 <memmove+0x148>
 1081998:	33fffc04 	addi	r15,r6,-16
 108199c:	781ed13a 	srli	r15,r15,4
 10819a0:	28c00104 	addi	r3,r5,4
 10819a4:	13400104 	addi	r13,r2,4
 10819a8:	781c913a 	slli	r14,r15,4
 10819ac:	2b000204 	addi	r12,r5,8
 10819b0:	12c00204 	addi	r11,r2,8
 10819b4:	73800504 	addi	r14,r14,20
 10819b8:	2a800304 	addi	r10,r5,12
 10819bc:	12400304 	addi	r9,r2,12
 10819c0:	2b9d883a 	add	r14,r5,r14
 10819c4:	2811883a 	mov	r8,r5
 10819c8:	100f883a 	mov	r7,r2
 10819cc:	41000017 	ldw	r4,0(r8)
 10819d0:	39c00404 	addi	r7,r7,16
 10819d4:	18c00404 	addi	r3,r3,16
 10819d8:	393ffc15 	stw	r4,-16(r7)
 10819dc:	193ffc17 	ldw	r4,-16(r3)
 10819e0:	6b400404 	addi	r13,r13,16
 10819e4:	5ac00404 	addi	r11,r11,16
 10819e8:	693ffc15 	stw	r4,-16(r13)
 10819ec:	61000017 	ldw	r4,0(r12)
 10819f0:	4a400404 	addi	r9,r9,16
 10819f4:	42000404 	addi	r8,r8,16
 10819f8:	593ffc15 	stw	r4,-16(r11)
 10819fc:	51000017 	ldw	r4,0(r10)
 1081a00:	63000404 	addi	r12,r12,16
 1081a04:	52800404 	addi	r10,r10,16
 1081a08:	493ffc15 	stw	r4,-16(r9)
 1081a0c:	1bbfef1e 	bne	r3,r14,10819cc <memmove+0x7c>
 1081a10:	79000044 	addi	r4,r15,1
 1081a14:	2008913a 	slli	r4,r4,4
 1081a18:	328003cc 	andi	r10,r6,15
 1081a1c:	02c000c4 	movi	r11,3
 1081a20:	1107883a 	add	r3,r2,r4
 1081a24:	290b883a 	add	r5,r5,r4
 1081a28:	5a801e2e 	bgeu	r11,r10,1081aa4 <memmove+0x154>
 1081a2c:	1813883a 	mov	r9,r3
 1081a30:	2811883a 	mov	r8,r5
 1081a34:	500f883a 	mov	r7,r10
 1081a38:	41000017 	ldw	r4,0(r8)
 1081a3c:	4a400104 	addi	r9,r9,4
 1081a40:	39ffff04 	addi	r7,r7,-4
 1081a44:	493fff15 	stw	r4,-4(r9)
 1081a48:	42000104 	addi	r8,r8,4
 1081a4c:	59fffa36 	bltu	r11,r7,1081a38 <memmove+0xe8>
 1081a50:	513fff04 	addi	r4,r10,-4
 1081a54:	2008d0ba 	srli	r4,r4,2
 1081a58:	318000cc 	andi	r6,r6,3
 1081a5c:	21000044 	addi	r4,r4,1
 1081a60:	2109883a 	add	r4,r4,r4
 1081a64:	2109883a 	add	r4,r4,r4
 1081a68:	1907883a 	add	r3,r3,r4
 1081a6c:	290b883a 	add	r5,r5,r4
 1081a70:	30000b26 	beq	r6,zero,1081aa0 <memmove+0x150>
 1081a74:	198d883a 	add	r6,r3,r6
 1081a78:	29c00003 	ldbu	r7,0(r5)
 1081a7c:	18c00044 	addi	r3,r3,1
 1081a80:	29400044 	addi	r5,r5,1
 1081a84:	19ffffc5 	stb	r7,-1(r3)
 1081a88:	19bffb1e 	bne	r3,r6,1081a78 <memmove+0x128>
 1081a8c:	f800283a 	ret
 1081a90:	1007883a 	mov	r3,r2
 1081a94:	003ff606 	br	1081a70 <memmove+0x120>
 1081a98:	1007883a 	mov	r3,r2
 1081a9c:	003ff506 	br	1081a74 <memmove+0x124>
 1081aa0:	f800283a 	ret
 1081aa4:	500d883a 	mov	r6,r10
 1081aa8:	003ff106 	br	1081a70 <memmove+0x120>

01081aac <memset>:
 1081aac:	20c000cc 	andi	r3,r4,3
 1081ab0:	2005883a 	mov	r2,r4
 1081ab4:	18004426 	beq	r3,zero,1081bc8 <memset+0x11c>
 1081ab8:	31ffffc4 	addi	r7,r6,-1
 1081abc:	30004026 	beq	r6,zero,1081bc0 <memset+0x114>
 1081ac0:	2813883a 	mov	r9,r5
 1081ac4:	200d883a 	mov	r6,r4
 1081ac8:	2007883a 	mov	r3,r4
 1081acc:	00000406 	br	1081ae0 <memset+0x34>
 1081ad0:	3a3fffc4 	addi	r8,r7,-1
 1081ad4:	31800044 	addi	r6,r6,1
 1081ad8:	38003926 	beq	r7,zero,1081bc0 <memset+0x114>
 1081adc:	400f883a 	mov	r7,r8
 1081ae0:	18c00044 	addi	r3,r3,1
 1081ae4:	32400005 	stb	r9,0(r6)
 1081ae8:	1a0000cc 	andi	r8,r3,3
 1081aec:	403ff81e 	bne	r8,zero,1081ad0 <memset+0x24>
 1081af0:	010000c4 	movi	r4,3
 1081af4:	21c02d2e 	bgeu	r4,r7,1081bac <memset+0x100>
 1081af8:	29003fcc 	andi	r4,r5,255
 1081afc:	200c923a 	slli	r6,r4,8
 1081b00:	3108b03a 	or	r4,r6,r4
 1081b04:	200c943a 	slli	r6,r4,16
 1081b08:	218cb03a 	or	r6,r4,r6
 1081b0c:	010003c4 	movi	r4,15
 1081b10:	21c0182e 	bgeu	r4,r7,1081b74 <memset+0xc8>
 1081b14:	3b3ffc04 	addi	r12,r7,-16
 1081b18:	6018d13a 	srli	r12,r12,4
 1081b1c:	1a000104 	addi	r8,r3,4
 1081b20:	1ac00204 	addi	r11,r3,8
 1081b24:	6008913a 	slli	r4,r12,4
 1081b28:	1a800304 	addi	r10,r3,12
 1081b2c:	1813883a 	mov	r9,r3
 1081b30:	21000504 	addi	r4,r4,20
 1081b34:	1909883a 	add	r4,r3,r4
 1081b38:	49800015 	stw	r6,0(r9)
 1081b3c:	41800015 	stw	r6,0(r8)
 1081b40:	59800015 	stw	r6,0(r11)
 1081b44:	51800015 	stw	r6,0(r10)
 1081b48:	42000404 	addi	r8,r8,16
 1081b4c:	4a400404 	addi	r9,r9,16
 1081b50:	5ac00404 	addi	r11,r11,16
 1081b54:	52800404 	addi	r10,r10,16
 1081b58:	413ff71e 	bne	r8,r4,1081b38 <memset+0x8c>
 1081b5c:	63000044 	addi	r12,r12,1
 1081b60:	6018913a 	slli	r12,r12,4
 1081b64:	39c003cc 	andi	r7,r7,15
 1081b68:	010000c4 	movi	r4,3
 1081b6c:	1b07883a 	add	r3,r3,r12
 1081b70:	21c00e2e 	bgeu	r4,r7,1081bac <memset+0x100>
 1081b74:	1813883a 	mov	r9,r3
 1081b78:	3811883a 	mov	r8,r7
 1081b7c:	010000c4 	movi	r4,3
 1081b80:	49800015 	stw	r6,0(r9)
 1081b84:	423fff04 	addi	r8,r8,-4
 1081b88:	4a400104 	addi	r9,r9,4
 1081b8c:	223ffc36 	bltu	r4,r8,1081b80 <memset+0xd4>
 1081b90:	393fff04 	addi	r4,r7,-4
 1081b94:	2008d0ba 	srli	r4,r4,2
 1081b98:	39c000cc 	andi	r7,r7,3
 1081b9c:	21000044 	addi	r4,r4,1
 1081ba0:	2109883a 	add	r4,r4,r4
 1081ba4:	2109883a 	add	r4,r4,r4
 1081ba8:	1907883a 	add	r3,r3,r4
 1081bac:	38000526 	beq	r7,zero,1081bc4 <memset+0x118>
 1081bb0:	19cf883a 	add	r7,r3,r7
 1081bb4:	19400005 	stb	r5,0(r3)
 1081bb8:	18c00044 	addi	r3,r3,1
 1081bbc:	38fffd1e 	bne	r7,r3,1081bb4 <memset+0x108>
 1081bc0:	f800283a 	ret
 1081bc4:	f800283a 	ret
 1081bc8:	2007883a 	mov	r3,r4
 1081bcc:	300f883a 	mov	r7,r6
 1081bd0:	003fc706 	br	1081af0 <memset+0x44>

01081bd4 <_realloc_r>:
 1081bd4:	defff604 	addi	sp,sp,-40
 1081bd8:	dc800215 	stw	r18,8(sp)
 1081bdc:	dfc00915 	stw	ra,36(sp)
 1081be0:	df000815 	stw	fp,32(sp)
 1081be4:	ddc00715 	stw	r23,28(sp)
 1081be8:	dd800615 	stw	r22,24(sp)
 1081bec:	dd400515 	stw	r21,20(sp)
 1081bf0:	dd000415 	stw	r20,16(sp)
 1081bf4:	dcc00315 	stw	r19,12(sp)
 1081bf8:	dc400115 	stw	r17,4(sp)
 1081bfc:	dc000015 	stw	r16,0(sp)
 1081c00:	3025883a 	mov	r18,r6
 1081c04:	2800b726 	beq	r5,zero,1081ee4 <_realloc_r+0x310>
 1081c08:	282b883a 	mov	r21,r5
 1081c0c:	2029883a 	mov	r20,r4
 1081c10:	108370c0 	call	108370c <__malloc_lock>
 1081c14:	a8bfff17 	ldw	r2,-4(r21)
 1081c18:	043fff04 	movi	r16,-4
 1081c1c:	90c002c4 	addi	r3,r18,11
 1081c20:	01000584 	movi	r4,22
 1081c24:	acfffe04 	addi	r19,r21,-8
 1081c28:	1420703a 	and	r16,r2,r16
 1081c2c:	20c0332e 	bgeu	r4,r3,1081cfc <_realloc_r+0x128>
 1081c30:	047ffe04 	movi	r17,-8
 1081c34:	1c62703a 	and	r17,r3,r17
 1081c38:	8807883a 	mov	r3,r17
 1081c3c:	88005816 	blt	r17,zero,1081da0 <_realloc_r+0x1cc>
 1081c40:	8c805736 	bltu	r17,r18,1081da0 <_realloc_r+0x1cc>
 1081c44:	80c0300e 	bge	r16,r3,1081d08 <_realloc_r+0x134>
 1081c48:	07004234 	movhi	fp,264
 1081c4c:	e71b2104 	addi	fp,fp,27780
 1081c50:	e1c00217 	ldw	r7,8(fp)
 1081c54:	9c09883a 	add	r4,r19,r16
 1081c58:	22000117 	ldw	r8,4(r4)
 1081c5c:	21c06326 	beq	r4,r7,1081dec <_realloc_r+0x218>
 1081c60:	017fff84 	movi	r5,-2
 1081c64:	414a703a 	and	r5,r8,r5
 1081c68:	214b883a 	add	r5,r4,r5
 1081c6c:	29800117 	ldw	r6,4(r5)
 1081c70:	3180004c 	andi	r6,r6,1
 1081c74:	30003f26 	beq	r6,zero,1081d74 <_realloc_r+0x1a0>
 1081c78:	1080004c 	andi	r2,r2,1
 1081c7c:	10008326 	beq	r2,zero,1081e8c <_realloc_r+0x2b8>
 1081c80:	900b883a 	mov	r5,r18
 1081c84:	a009883a 	mov	r4,r20
 1081c88:	1080f180 	call	1080f18 <_malloc_r>
 1081c8c:	1025883a 	mov	r18,r2
 1081c90:	10011e26 	beq	r2,zero,108210c <_realloc_r+0x538>
 1081c94:	a93fff17 	ldw	r4,-4(r21)
 1081c98:	10fffe04 	addi	r3,r2,-8
 1081c9c:	00bfff84 	movi	r2,-2
 1081ca0:	2084703a 	and	r2,r4,r2
 1081ca4:	9885883a 	add	r2,r19,r2
 1081ca8:	1880ee26 	beq	r3,r2,1082064 <_realloc_r+0x490>
 1081cac:	81bfff04 	addi	r6,r16,-4
 1081cb0:	00800904 	movi	r2,36
 1081cb4:	1180b836 	bltu	r2,r6,1081f98 <_realloc_r+0x3c4>
 1081cb8:	00c004c4 	movi	r3,19
 1081cbc:	19809636 	bltu	r3,r6,1081f18 <_realloc_r+0x344>
 1081cc0:	9005883a 	mov	r2,r18
 1081cc4:	a807883a 	mov	r3,r21
 1081cc8:	19000017 	ldw	r4,0(r3)
 1081ccc:	11000015 	stw	r4,0(r2)
 1081cd0:	19000117 	ldw	r4,4(r3)
 1081cd4:	11000115 	stw	r4,4(r2)
 1081cd8:	18c00217 	ldw	r3,8(r3)
 1081cdc:	10c00215 	stw	r3,8(r2)
 1081ce0:	a80b883a 	mov	r5,r21
 1081ce4:	a009883a 	mov	r4,r20
 1081ce8:	10829a00 	call	10829a0 <_free_r>
 1081cec:	a009883a 	mov	r4,r20
 1081cf0:	10837300 	call	1083730 <__malloc_unlock>
 1081cf4:	9005883a 	mov	r2,r18
 1081cf8:	00001206 	br	1081d44 <_realloc_r+0x170>
 1081cfc:	00c00404 	movi	r3,16
 1081d00:	1823883a 	mov	r17,r3
 1081d04:	003fce06 	br	1081c40 <_realloc_r+0x6c>
 1081d08:	a825883a 	mov	r18,r21
 1081d0c:	8445c83a 	sub	r2,r16,r17
 1081d10:	00c003c4 	movi	r3,15
 1081d14:	18802636 	bltu	r3,r2,1081db0 <_realloc_r+0x1dc>
 1081d18:	99800117 	ldw	r6,4(r19)
 1081d1c:	9c07883a 	add	r3,r19,r16
 1081d20:	3180004c 	andi	r6,r6,1
 1081d24:	3420b03a 	or	r16,r6,r16
 1081d28:	9c000115 	stw	r16,4(r19)
 1081d2c:	18800117 	ldw	r2,4(r3)
 1081d30:	10800054 	ori	r2,r2,1
 1081d34:	18800115 	stw	r2,4(r3)
 1081d38:	a009883a 	mov	r4,r20
 1081d3c:	10837300 	call	1083730 <__malloc_unlock>
 1081d40:	9005883a 	mov	r2,r18
 1081d44:	dfc00917 	ldw	ra,36(sp)
 1081d48:	df000817 	ldw	fp,32(sp)
 1081d4c:	ddc00717 	ldw	r23,28(sp)
 1081d50:	dd800617 	ldw	r22,24(sp)
 1081d54:	dd400517 	ldw	r21,20(sp)
 1081d58:	dd000417 	ldw	r20,16(sp)
 1081d5c:	dcc00317 	ldw	r19,12(sp)
 1081d60:	dc800217 	ldw	r18,8(sp)
 1081d64:	dc400117 	ldw	r17,4(sp)
 1081d68:	dc000017 	ldw	r16,0(sp)
 1081d6c:	dec00a04 	addi	sp,sp,40
 1081d70:	f800283a 	ret
 1081d74:	017fff04 	movi	r5,-4
 1081d78:	414a703a 	and	r5,r8,r5
 1081d7c:	814d883a 	add	r6,r16,r5
 1081d80:	30c01f16 	blt	r6,r3,1081e00 <_realloc_r+0x22c>
 1081d84:	20800317 	ldw	r2,12(r4)
 1081d88:	20c00217 	ldw	r3,8(r4)
 1081d8c:	a825883a 	mov	r18,r21
 1081d90:	3021883a 	mov	r16,r6
 1081d94:	18800315 	stw	r2,12(r3)
 1081d98:	10c00215 	stw	r3,8(r2)
 1081d9c:	003fdb06 	br	1081d0c <_realloc_r+0x138>
 1081da0:	00800304 	movi	r2,12
 1081da4:	a0800015 	stw	r2,0(r20)
 1081da8:	0005883a 	mov	r2,zero
 1081dac:	003fe506 	br	1081d44 <_realloc_r+0x170>
 1081db0:	98c00117 	ldw	r3,4(r19)
 1081db4:	9c4b883a 	add	r5,r19,r17
 1081db8:	11000054 	ori	r4,r2,1
 1081dbc:	18c0004c 	andi	r3,r3,1
 1081dc0:	1c62b03a 	or	r17,r3,r17
 1081dc4:	9c400115 	stw	r17,4(r19)
 1081dc8:	29000115 	stw	r4,4(r5)
 1081dcc:	2885883a 	add	r2,r5,r2
 1081dd0:	10c00117 	ldw	r3,4(r2)
 1081dd4:	29400204 	addi	r5,r5,8
 1081dd8:	a009883a 	mov	r4,r20
 1081ddc:	18c00054 	ori	r3,r3,1
 1081de0:	10c00115 	stw	r3,4(r2)
 1081de4:	10829a00 	call	10829a0 <_free_r>
 1081de8:	003fd306 	br	1081d38 <_realloc_r+0x164>
 1081dec:	017fff04 	movi	r5,-4
 1081df0:	414a703a 	and	r5,r8,r5
 1081df4:	89800404 	addi	r6,r17,16
 1081df8:	8151883a 	add	r8,r16,r5
 1081dfc:	4180590e 	bge	r8,r6,1081f64 <_realloc_r+0x390>
 1081e00:	1080004c 	andi	r2,r2,1
 1081e04:	103f9e1e 	bne	r2,zero,1081c80 <_realloc_r+0xac>
 1081e08:	adbffe17 	ldw	r22,-8(r21)
 1081e0c:	00bfff04 	movi	r2,-4
 1081e10:	9dadc83a 	sub	r22,r19,r22
 1081e14:	b1800117 	ldw	r6,4(r22)
 1081e18:	3084703a 	and	r2,r6,r2
 1081e1c:	20002026 	beq	r4,zero,1081ea0 <_realloc_r+0x2cc>
 1081e20:	80af883a 	add	r23,r16,r2
 1081e24:	b96f883a 	add	r23,r23,r5
 1081e28:	21c05f26 	beq	r4,r7,1081fa8 <_realloc_r+0x3d4>
 1081e2c:	b8c01c16 	blt	r23,r3,1081ea0 <_realloc_r+0x2cc>
 1081e30:	20800317 	ldw	r2,12(r4)
 1081e34:	20c00217 	ldw	r3,8(r4)
 1081e38:	81bfff04 	addi	r6,r16,-4
 1081e3c:	01000904 	movi	r4,36
 1081e40:	18800315 	stw	r2,12(r3)
 1081e44:	10c00215 	stw	r3,8(r2)
 1081e48:	b0c00217 	ldw	r3,8(r22)
 1081e4c:	b0800317 	ldw	r2,12(r22)
 1081e50:	b4800204 	addi	r18,r22,8
 1081e54:	18800315 	stw	r2,12(r3)
 1081e58:	10c00215 	stw	r3,8(r2)
 1081e5c:	21801b36 	bltu	r4,r6,1081ecc <_realloc_r+0x2f8>
 1081e60:	008004c4 	movi	r2,19
 1081e64:	1180352e 	bgeu	r2,r6,1081f3c <_realloc_r+0x368>
 1081e68:	a8800017 	ldw	r2,0(r21)
 1081e6c:	b0800215 	stw	r2,8(r22)
 1081e70:	a8800117 	ldw	r2,4(r21)
 1081e74:	b0800315 	stw	r2,12(r22)
 1081e78:	008006c4 	movi	r2,27
 1081e7c:	11807f36 	bltu	r2,r6,108207c <_realloc_r+0x4a8>
 1081e80:	b0800404 	addi	r2,r22,16
 1081e84:	ad400204 	addi	r21,r21,8
 1081e88:	00002d06 	br	1081f40 <_realloc_r+0x36c>
 1081e8c:	adbffe17 	ldw	r22,-8(r21)
 1081e90:	00bfff04 	movi	r2,-4
 1081e94:	9dadc83a 	sub	r22,r19,r22
 1081e98:	b1000117 	ldw	r4,4(r22)
 1081e9c:	2084703a 	and	r2,r4,r2
 1081ea0:	b03f7726 	beq	r22,zero,1081c80 <_realloc_r+0xac>
 1081ea4:	80af883a 	add	r23,r16,r2
 1081ea8:	b8ff7516 	blt	r23,r3,1081c80 <_realloc_r+0xac>
 1081eac:	b0800317 	ldw	r2,12(r22)
 1081eb0:	b0c00217 	ldw	r3,8(r22)
 1081eb4:	81bfff04 	addi	r6,r16,-4
 1081eb8:	01000904 	movi	r4,36
 1081ebc:	18800315 	stw	r2,12(r3)
 1081ec0:	10c00215 	stw	r3,8(r2)
 1081ec4:	b4800204 	addi	r18,r22,8
 1081ec8:	21bfe52e 	bgeu	r4,r6,1081e60 <_realloc_r+0x28c>
 1081ecc:	a80b883a 	mov	r5,r21
 1081ed0:	9009883a 	mov	r4,r18
 1081ed4:	10819500 	call	1081950 <memmove>
 1081ed8:	b821883a 	mov	r16,r23
 1081edc:	b027883a 	mov	r19,r22
 1081ee0:	003f8a06 	br	1081d0c <_realloc_r+0x138>
 1081ee4:	300b883a 	mov	r5,r6
 1081ee8:	dfc00917 	ldw	ra,36(sp)
 1081eec:	df000817 	ldw	fp,32(sp)
 1081ef0:	ddc00717 	ldw	r23,28(sp)
 1081ef4:	dd800617 	ldw	r22,24(sp)
 1081ef8:	dd400517 	ldw	r21,20(sp)
 1081efc:	dd000417 	ldw	r20,16(sp)
 1081f00:	dcc00317 	ldw	r19,12(sp)
 1081f04:	dc800217 	ldw	r18,8(sp)
 1081f08:	dc400117 	ldw	r17,4(sp)
 1081f0c:	dc000017 	ldw	r16,0(sp)
 1081f10:	dec00a04 	addi	sp,sp,40
 1081f14:	1080f181 	jmpi	1080f18 <_malloc_r>
 1081f18:	a8c00017 	ldw	r3,0(r21)
 1081f1c:	90c00015 	stw	r3,0(r18)
 1081f20:	a8c00117 	ldw	r3,4(r21)
 1081f24:	90c00115 	stw	r3,4(r18)
 1081f28:	00c006c4 	movi	r3,27
 1081f2c:	19804536 	bltu	r3,r6,1082044 <_realloc_r+0x470>
 1081f30:	90800204 	addi	r2,r18,8
 1081f34:	a8c00204 	addi	r3,r21,8
 1081f38:	003f6306 	br	1081cc8 <_realloc_r+0xf4>
 1081f3c:	9005883a 	mov	r2,r18
 1081f40:	a8c00017 	ldw	r3,0(r21)
 1081f44:	b821883a 	mov	r16,r23
 1081f48:	b027883a 	mov	r19,r22
 1081f4c:	10c00015 	stw	r3,0(r2)
 1081f50:	a8c00117 	ldw	r3,4(r21)
 1081f54:	10c00115 	stw	r3,4(r2)
 1081f58:	a8c00217 	ldw	r3,8(r21)
 1081f5c:	10c00215 	stw	r3,8(r2)
 1081f60:	003f6a06 	br	1081d0c <_realloc_r+0x138>
 1081f64:	9c67883a 	add	r19,r19,r17
 1081f68:	4445c83a 	sub	r2,r8,r17
 1081f6c:	e4c00215 	stw	r19,8(fp)
 1081f70:	10800054 	ori	r2,r2,1
 1081f74:	98800115 	stw	r2,4(r19)
 1081f78:	a8bfff17 	ldw	r2,-4(r21)
 1081f7c:	a009883a 	mov	r4,r20
 1081f80:	1080004c 	andi	r2,r2,1
 1081f84:	1462b03a 	or	r17,r2,r17
 1081f88:	ac7fff15 	stw	r17,-4(r21)
 1081f8c:	10837300 	call	1083730 <__malloc_unlock>
 1081f90:	a805883a 	mov	r2,r21
 1081f94:	003f6b06 	br	1081d44 <_realloc_r+0x170>
 1081f98:	a80b883a 	mov	r5,r21
 1081f9c:	9009883a 	mov	r4,r18
 1081fa0:	10819500 	call	1081950 <memmove>
 1081fa4:	003f4e06 	br	1081ce0 <_realloc_r+0x10c>
 1081fa8:	89000404 	addi	r4,r17,16
 1081fac:	b93fbc16 	blt	r23,r4,1081ea0 <_realloc_r+0x2cc>
 1081fb0:	b0800317 	ldw	r2,12(r22)
 1081fb4:	b0c00217 	ldw	r3,8(r22)
 1081fb8:	81bfff04 	addi	r6,r16,-4
 1081fbc:	01000904 	movi	r4,36
 1081fc0:	18800315 	stw	r2,12(r3)
 1081fc4:	10c00215 	stw	r3,8(r2)
 1081fc8:	b4800204 	addi	r18,r22,8
 1081fcc:	21804336 	bltu	r4,r6,10820dc <_realloc_r+0x508>
 1081fd0:	008004c4 	movi	r2,19
 1081fd4:	11803f2e 	bgeu	r2,r6,10820d4 <_realloc_r+0x500>
 1081fd8:	a8800017 	ldw	r2,0(r21)
 1081fdc:	b0800215 	stw	r2,8(r22)
 1081fe0:	a8800117 	ldw	r2,4(r21)
 1081fe4:	b0800315 	stw	r2,12(r22)
 1081fe8:	008006c4 	movi	r2,27
 1081fec:	11803f36 	bltu	r2,r6,10820ec <_realloc_r+0x518>
 1081ff0:	b0800404 	addi	r2,r22,16
 1081ff4:	ad400204 	addi	r21,r21,8
 1081ff8:	a8c00017 	ldw	r3,0(r21)
 1081ffc:	10c00015 	stw	r3,0(r2)
 1082000:	a8c00117 	ldw	r3,4(r21)
 1082004:	10c00115 	stw	r3,4(r2)
 1082008:	a8c00217 	ldw	r3,8(r21)
 108200c:	10c00215 	stw	r3,8(r2)
 1082010:	b447883a 	add	r3,r22,r17
 1082014:	bc45c83a 	sub	r2,r23,r17
 1082018:	e0c00215 	stw	r3,8(fp)
 108201c:	10800054 	ori	r2,r2,1
 1082020:	18800115 	stw	r2,4(r3)
 1082024:	b0800117 	ldw	r2,4(r22)
 1082028:	a009883a 	mov	r4,r20
 108202c:	1080004c 	andi	r2,r2,1
 1082030:	1462b03a 	or	r17,r2,r17
 1082034:	b4400115 	stw	r17,4(r22)
 1082038:	10837300 	call	1083730 <__malloc_unlock>
 108203c:	9005883a 	mov	r2,r18
 1082040:	003f4006 	br	1081d44 <_realloc_r+0x170>
 1082044:	a8c00217 	ldw	r3,8(r21)
 1082048:	90c00215 	stw	r3,8(r18)
 108204c:	a8c00317 	ldw	r3,12(r21)
 1082050:	90c00315 	stw	r3,12(r18)
 1082054:	30801126 	beq	r6,r2,108209c <_realloc_r+0x4c8>
 1082058:	90800404 	addi	r2,r18,16
 108205c:	a8c00404 	addi	r3,r21,16
 1082060:	003f1906 	br	1081cc8 <_realloc_r+0xf4>
 1082064:	90ffff17 	ldw	r3,-4(r18)
 1082068:	00bfff04 	movi	r2,-4
 108206c:	a825883a 	mov	r18,r21
 1082070:	1884703a 	and	r2,r3,r2
 1082074:	80a1883a 	add	r16,r16,r2
 1082078:	003f2406 	br	1081d0c <_realloc_r+0x138>
 108207c:	a8800217 	ldw	r2,8(r21)
 1082080:	b0800415 	stw	r2,16(r22)
 1082084:	a8800317 	ldw	r2,12(r21)
 1082088:	b0800515 	stw	r2,20(r22)
 108208c:	31000a26 	beq	r6,r4,10820b8 <_realloc_r+0x4e4>
 1082090:	b0800604 	addi	r2,r22,24
 1082094:	ad400404 	addi	r21,r21,16
 1082098:	003fa906 	br	1081f40 <_realloc_r+0x36c>
 108209c:	a9000417 	ldw	r4,16(r21)
 10820a0:	90800604 	addi	r2,r18,24
 10820a4:	a8c00604 	addi	r3,r21,24
 10820a8:	91000415 	stw	r4,16(r18)
 10820ac:	a9000517 	ldw	r4,20(r21)
 10820b0:	91000515 	stw	r4,20(r18)
 10820b4:	003f0406 	br	1081cc8 <_realloc_r+0xf4>
 10820b8:	a8c00417 	ldw	r3,16(r21)
 10820bc:	ad400604 	addi	r21,r21,24
 10820c0:	b0800804 	addi	r2,r22,32
 10820c4:	b0c00615 	stw	r3,24(r22)
 10820c8:	a8ffff17 	ldw	r3,-4(r21)
 10820cc:	b0c00715 	stw	r3,28(r22)
 10820d0:	003f9b06 	br	1081f40 <_realloc_r+0x36c>
 10820d4:	9005883a 	mov	r2,r18
 10820d8:	003fc706 	br	1081ff8 <_realloc_r+0x424>
 10820dc:	a80b883a 	mov	r5,r21
 10820e0:	9009883a 	mov	r4,r18
 10820e4:	10819500 	call	1081950 <memmove>
 10820e8:	003fc906 	br	1082010 <_realloc_r+0x43c>
 10820ec:	a8800217 	ldw	r2,8(r21)
 10820f0:	b0800415 	stw	r2,16(r22)
 10820f4:	a8800317 	ldw	r2,12(r21)
 10820f8:	b0800515 	stw	r2,20(r22)
 10820fc:	31000726 	beq	r6,r4,108211c <_realloc_r+0x548>
 1082100:	b0800604 	addi	r2,r22,24
 1082104:	ad400404 	addi	r21,r21,16
 1082108:	003fbb06 	br	1081ff8 <_realloc_r+0x424>
 108210c:	a009883a 	mov	r4,r20
 1082110:	10837300 	call	1083730 <__malloc_unlock>
 1082114:	0005883a 	mov	r2,zero
 1082118:	003f0a06 	br	1081d44 <_realloc_r+0x170>
 108211c:	a8c00417 	ldw	r3,16(r21)
 1082120:	ad400604 	addi	r21,r21,24
 1082124:	b0800804 	addi	r2,r22,32
 1082128:	b0c00615 	stw	r3,24(r22)
 108212c:	a8ffff17 	ldw	r3,-4(r21)
 1082130:	b0c00715 	stw	r3,28(r22)
 1082134:	003fb006 	br	1081ff8 <_realloc_r+0x424>

01082138 <_sbrk_r>:
 1082138:	defffd04 	addi	sp,sp,-12
 108213c:	dc000015 	stw	r16,0(sp)
 1082140:	04004274 	movhi	r16,265
 1082144:	dc400115 	stw	r17,4(sp)
 1082148:	84279304 	addi	r16,r16,-25012
 108214c:	2023883a 	mov	r17,r4
 1082150:	2809883a 	mov	r4,r5
 1082154:	dfc00215 	stw	ra,8(sp)
 1082158:	80000015 	stw	zero,0(r16)
 108215c:	10838f00 	call	10838f0 <sbrk>
 1082160:	00ffffc4 	movi	r3,-1
 1082164:	10c00526 	beq	r2,r3,108217c <_sbrk_r+0x44>
 1082168:	dfc00217 	ldw	ra,8(sp)
 108216c:	dc400117 	ldw	r17,4(sp)
 1082170:	dc000017 	ldw	r16,0(sp)
 1082174:	dec00304 	addi	sp,sp,12
 1082178:	f800283a 	ret
 108217c:	80c00017 	ldw	r3,0(r16)
 1082180:	183ff926 	beq	r3,zero,1082168 <_sbrk_r+0x30>
 1082184:	88c00015 	stw	r3,0(r17)
 1082188:	003ff706 	br	1082168 <_sbrk_r+0x30>

0108218c <__sread>:
 108218c:	defffe04 	addi	sp,sp,-8
 1082190:	dc000015 	stw	r16,0(sp)
 1082194:	2821883a 	mov	r16,r5
 1082198:	2940038f 	ldh	r5,14(r5)
 108219c:	dfc00115 	stw	ra,4(sp)
 10821a0:	1082ecc0 	call	1082ecc <_read_r>
 10821a4:	10000716 	blt	r2,zero,10821c4 <__sread+0x38>
 10821a8:	80c01417 	ldw	r3,80(r16)
 10821ac:	1887883a 	add	r3,r3,r2
 10821b0:	80c01415 	stw	r3,80(r16)
 10821b4:	dfc00117 	ldw	ra,4(sp)
 10821b8:	dc000017 	ldw	r16,0(sp)
 10821bc:	dec00204 	addi	sp,sp,8
 10821c0:	f800283a 	ret
 10821c4:	80c0030b 	ldhu	r3,12(r16)
 10821c8:	18fbffcc 	andi	r3,r3,61439
 10821cc:	80c0030d 	sth	r3,12(r16)
 10821d0:	dfc00117 	ldw	ra,4(sp)
 10821d4:	dc000017 	ldw	r16,0(sp)
 10821d8:	dec00204 	addi	sp,sp,8
 10821dc:	f800283a 	ret

010821e0 <__seofread>:
 10821e0:	0005883a 	mov	r2,zero
 10821e4:	f800283a 	ret

010821e8 <__swrite>:
 10821e8:	2880030b 	ldhu	r2,12(r5)
 10821ec:	defffb04 	addi	sp,sp,-20
 10821f0:	dcc00315 	stw	r19,12(sp)
 10821f4:	dc800215 	stw	r18,8(sp)
 10821f8:	dc400115 	stw	r17,4(sp)
 10821fc:	dc000015 	stw	r16,0(sp)
 1082200:	dfc00415 	stw	ra,16(sp)
 1082204:	10c0400c 	andi	r3,r2,256
 1082208:	2821883a 	mov	r16,r5
 108220c:	2023883a 	mov	r17,r4
 1082210:	3025883a 	mov	r18,r6
 1082214:	3827883a 	mov	r19,r7
 1082218:	18000526 	beq	r3,zero,1082230 <__swrite+0x48>
 108221c:	2940038f 	ldh	r5,14(r5)
 1082220:	01c00084 	movi	r7,2
 1082224:	000d883a 	mov	r6,zero
 1082228:	1082cb00 	call	1082cb0 <_lseek_r>
 108222c:	8080030b 	ldhu	r2,12(r16)
 1082230:	8140038f 	ldh	r5,14(r16)
 1082234:	10bbffcc 	andi	r2,r2,61439
 1082238:	980f883a 	mov	r7,r19
 108223c:	900d883a 	mov	r6,r18
 1082240:	8809883a 	mov	r4,r17
 1082244:	8080030d 	sth	r2,12(r16)
 1082248:	dfc00417 	ldw	ra,16(sp)
 108224c:	dcc00317 	ldw	r19,12(sp)
 1082250:	dc800217 	ldw	r18,8(sp)
 1082254:	dc400117 	ldw	r17,4(sp)
 1082258:	dc000017 	ldw	r16,0(sp)
 108225c:	dec00504 	addi	sp,sp,20
 1082260:	10822c81 	jmpi	10822c8 <_write_r>

01082264 <__sseek>:
 1082264:	defffe04 	addi	sp,sp,-8
 1082268:	dc000015 	stw	r16,0(sp)
 108226c:	2821883a 	mov	r16,r5
 1082270:	2940038f 	ldh	r5,14(r5)
 1082274:	dfc00115 	stw	ra,4(sp)
 1082278:	1082cb00 	call	1082cb0 <_lseek_r>
 108227c:	00ffffc4 	movi	r3,-1
 1082280:	10c00826 	beq	r2,r3,10822a4 <__sseek+0x40>
 1082284:	80c0030b 	ldhu	r3,12(r16)
 1082288:	80801415 	stw	r2,80(r16)
 108228c:	18c40014 	ori	r3,r3,4096
 1082290:	80c0030d 	sth	r3,12(r16)
 1082294:	dfc00117 	ldw	ra,4(sp)
 1082298:	dc000017 	ldw	r16,0(sp)
 108229c:	dec00204 	addi	sp,sp,8
 10822a0:	f800283a 	ret
 10822a4:	80c0030b 	ldhu	r3,12(r16)
 10822a8:	18fbffcc 	andi	r3,r3,61439
 10822ac:	80c0030d 	sth	r3,12(r16)
 10822b0:	dfc00117 	ldw	ra,4(sp)
 10822b4:	dc000017 	ldw	r16,0(sp)
 10822b8:	dec00204 	addi	sp,sp,8
 10822bc:	f800283a 	ret

010822c0 <__sclose>:
 10822c0:	2940038f 	ldh	r5,14(r5)
 10822c4:	108247c1 	jmpi	108247c <_close_r>

010822c8 <_write_r>:
 10822c8:	defffd04 	addi	sp,sp,-12
 10822cc:	2805883a 	mov	r2,r5
 10822d0:	dc000015 	stw	r16,0(sp)
 10822d4:	04004274 	movhi	r16,265
 10822d8:	dc400115 	stw	r17,4(sp)
 10822dc:	300b883a 	mov	r5,r6
 10822e0:	84279304 	addi	r16,r16,-25012
 10822e4:	2023883a 	mov	r17,r4
 10822e8:	380d883a 	mov	r6,r7
 10822ec:	1009883a 	mov	r4,r2
 10822f0:	dfc00215 	stw	ra,8(sp)
 10822f4:	80000015 	stw	zero,0(r16)
 10822f8:	10839dc0 	call	10839dc <write>
 10822fc:	00ffffc4 	movi	r3,-1
 1082300:	10c00526 	beq	r2,r3,1082318 <_write_r+0x50>
 1082304:	dfc00217 	ldw	ra,8(sp)
 1082308:	dc400117 	ldw	r17,4(sp)
 108230c:	dc000017 	ldw	r16,0(sp)
 1082310:	dec00304 	addi	sp,sp,12
 1082314:	f800283a 	ret
 1082318:	80c00017 	ldw	r3,0(r16)
 108231c:	183ff926 	beq	r3,zero,1082304 <_write_r+0x3c>
 1082320:	88c00015 	stw	r3,0(r17)
 1082324:	003ff706 	br	1082304 <_write_r+0x3c>

01082328 <__swsetup_r>:
 1082328:	00804274 	movhi	r2,265
 108232c:	defffd04 	addi	sp,sp,-12
 1082330:	10a0c704 	addi	r2,r2,-31972
 1082334:	dc400115 	stw	r17,4(sp)
 1082338:	2023883a 	mov	r17,r4
 108233c:	11000017 	ldw	r4,0(r2)
 1082340:	dc000015 	stw	r16,0(sp)
 1082344:	dfc00215 	stw	ra,8(sp)
 1082348:	2821883a 	mov	r16,r5
 108234c:	20000226 	beq	r4,zero,1082358 <__swsetup_r+0x30>
 1082350:	20800e17 	ldw	r2,56(r4)
 1082354:	10003126 	beq	r2,zero,108241c <__swsetup_r+0xf4>
 1082358:	8080030b 	ldhu	r2,12(r16)
 108235c:	10c0020c 	andi	r3,r2,8
 1082360:	1009883a 	mov	r4,r2
 1082364:	18000f26 	beq	r3,zero,10823a4 <__swsetup_r+0x7c>
 1082368:	80c00417 	ldw	r3,16(r16)
 108236c:	18001526 	beq	r3,zero,10823c4 <__swsetup_r+0x9c>
 1082370:	1100004c 	andi	r4,r2,1
 1082374:	20001c1e 	bne	r4,zero,10823e8 <__swsetup_r+0xc0>
 1082378:	1080008c 	andi	r2,r2,2
 108237c:	1000291e 	bne	r2,zero,1082424 <__swsetup_r+0xfc>
 1082380:	80800517 	ldw	r2,20(r16)
 1082384:	80800215 	stw	r2,8(r16)
 1082388:	18001c26 	beq	r3,zero,10823fc <__swsetup_r+0xd4>
 108238c:	0005883a 	mov	r2,zero
 1082390:	dfc00217 	ldw	ra,8(sp)
 1082394:	dc400117 	ldw	r17,4(sp)
 1082398:	dc000017 	ldw	r16,0(sp)
 108239c:	dec00304 	addi	sp,sp,12
 10823a0:	f800283a 	ret
 10823a4:	2080040c 	andi	r2,r4,16
 10823a8:	10002e26 	beq	r2,zero,1082464 <__swsetup_r+0x13c>
 10823ac:	2080010c 	andi	r2,r4,4
 10823b0:	10001e1e 	bne	r2,zero,108242c <__swsetup_r+0x104>
 10823b4:	80c00417 	ldw	r3,16(r16)
 10823b8:	20800214 	ori	r2,r4,8
 10823bc:	8080030d 	sth	r2,12(r16)
 10823c0:	183feb1e 	bne	r3,zero,1082370 <__swsetup_r+0x48>
 10823c4:	1100a00c 	andi	r4,r2,640
 10823c8:	01408004 	movi	r5,512
 10823cc:	217fe826 	beq	r4,r5,1082370 <__swsetup_r+0x48>
 10823d0:	800b883a 	mov	r5,r16
 10823d4:	8809883a 	mov	r4,r17
 10823d8:	1082d100 	call	1082d10 <__smakebuf_r>
 10823dc:	8080030b 	ldhu	r2,12(r16)
 10823e0:	80c00417 	ldw	r3,16(r16)
 10823e4:	003fe206 	br	1082370 <__swsetup_r+0x48>
 10823e8:	80800517 	ldw	r2,20(r16)
 10823ec:	80000215 	stw	zero,8(r16)
 10823f0:	0085c83a 	sub	r2,zero,r2
 10823f4:	80800615 	stw	r2,24(r16)
 10823f8:	183fe41e 	bne	r3,zero,108238c <__swsetup_r+0x64>
 10823fc:	80c0030b 	ldhu	r3,12(r16)
 1082400:	0005883a 	mov	r2,zero
 1082404:	1900200c 	andi	r4,r3,128
 1082408:	203fe126 	beq	r4,zero,1082390 <__swsetup_r+0x68>
 108240c:	18c01014 	ori	r3,r3,64
 1082410:	80c0030d 	sth	r3,12(r16)
 1082414:	00bfffc4 	movi	r2,-1
 1082418:	003fdd06 	br	1082390 <__swsetup_r+0x68>
 108241c:	10808840 	call	1080884 <__sinit>
 1082420:	003fcd06 	br	1082358 <__swsetup_r+0x30>
 1082424:	0005883a 	mov	r2,zero
 1082428:	003fd606 	br	1082384 <__swsetup_r+0x5c>
 108242c:	81400c17 	ldw	r5,48(r16)
 1082430:	28000626 	beq	r5,zero,108244c <__swsetup_r+0x124>
 1082434:	80801004 	addi	r2,r16,64
 1082438:	28800326 	beq	r5,r2,1082448 <__swsetup_r+0x120>
 108243c:	8809883a 	mov	r4,r17
 1082440:	10829a00 	call	10829a0 <_free_r>
 1082444:	8100030b 	ldhu	r4,12(r16)
 1082448:	80000c15 	stw	zero,48(r16)
 108244c:	80c00417 	ldw	r3,16(r16)
 1082450:	00bff6c4 	movi	r2,-37
 1082454:	1108703a 	and	r4,r2,r4
 1082458:	80000115 	stw	zero,4(r16)
 108245c:	80c00015 	stw	r3,0(r16)
 1082460:	003fd506 	br	10823b8 <__swsetup_r+0x90>
 1082464:	00800244 	movi	r2,9
 1082468:	88800015 	stw	r2,0(r17)
 108246c:	20801014 	ori	r2,r4,64
 1082470:	8080030d 	sth	r2,12(r16)
 1082474:	00bfffc4 	movi	r2,-1
 1082478:	003fc506 	br	1082390 <__swsetup_r+0x68>

0108247c <_close_r>:
 108247c:	defffd04 	addi	sp,sp,-12
 1082480:	dc000015 	stw	r16,0(sp)
 1082484:	04004274 	movhi	r16,265
 1082488:	dc400115 	stw	r17,4(sp)
 108248c:	84279304 	addi	r16,r16,-25012
 1082490:	2023883a 	mov	r17,r4
 1082494:	2809883a 	mov	r4,r5
 1082498:	dfc00215 	stw	ra,8(sp)
 108249c:	80000015 	stw	zero,0(r16)
 10824a0:	10831cc0 	call	10831cc <close>
 10824a4:	00ffffc4 	movi	r3,-1
 10824a8:	10c00526 	beq	r2,r3,10824c0 <_close_r+0x44>
 10824ac:	dfc00217 	ldw	ra,8(sp)
 10824b0:	dc400117 	ldw	r17,4(sp)
 10824b4:	dc000017 	ldw	r16,0(sp)
 10824b8:	dec00304 	addi	sp,sp,12
 10824bc:	f800283a 	ret
 10824c0:	80c00017 	ldw	r3,0(r16)
 10824c4:	183ff926 	beq	r3,zero,10824ac <_close_r+0x30>
 10824c8:	88c00015 	stw	r3,0(r17)
 10824cc:	003ff706 	br	10824ac <_close_r+0x30>

010824d0 <_fclose_r>:
 10824d0:	28003926 	beq	r5,zero,10825b8 <_fclose_r+0xe8>
 10824d4:	defffc04 	addi	sp,sp,-16
 10824d8:	dc400115 	stw	r17,4(sp)
 10824dc:	dc000015 	stw	r16,0(sp)
 10824e0:	dfc00315 	stw	ra,12(sp)
 10824e4:	dc800215 	stw	r18,8(sp)
 10824e8:	2023883a 	mov	r17,r4
 10824ec:	2821883a 	mov	r16,r5
 10824f0:	20000226 	beq	r4,zero,10824fc <_fclose_r+0x2c>
 10824f4:	20800e17 	ldw	r2,56(r4)
 10824f8:	10002726 	beq	r2,zero,1082598 <_fclose_r+0xc8>
 10824fc:	8080030f 	ldh	r2,12(r16)
 1082500:	1000071e 	bne	r2,zero,1082520 <_fclose_r+0x50>
 1082504:	0005883a 	mov	r2,zero
 1082508:	dfc00317 	ldw	ra,12(sp)
 108250c:	dc800217 	ldw	r18,8(sp)
 1082510:	dc400117 	ldw	r17,4(sp)
 1082514:	dc000017 	ldw	r16,0(sp)
 1082518:	dec00404 	addi	sp,sp,16
 108251c:	f800283a 	ret
 1082520:	800b883a 	mov	r5,r16
 1082524:	8809883a 	mov	r4,r17
 1082528:	10825d40 	call	10825d4 <__sflush_r>
 108252c:	1025883a 	mov	r18,r2
 1082530:	80800b17 	ldw	r2,44(r16)
 1082534:	10000426 	beq	r2,zero,1082548 <_fclose_r+0x78>
 1082538:	81400717 	ldw	r5,28(r16)
 108253c:	8809883a 	mov	r4,r17
 1082540:	103ee83a 	callr	r2
 1082544:	10001616 	blt	r2,zero,10825a0 <_fclose_r+0xd0>
 1082548:	8080030b 	ldhu	r2,12(r16)
 108254c:	1080200c 	andi	r2,r2,128
 1082550:	1000151e 	bne	r2,zero,10825a8 <_fclose_r+0xd8>
 1082554:	81400c17 	ldw	r5,48(r16)
 1082558:	28000526 	beq	r5,zero,1082570 <_fclose_r+0xa0>
 108255c:	80801004 	addi	r2,r16,64
 1082560:	28800226 	beq	r5,r2,108256c <_fclose_r+0x9c>
 1082564:	8809883a 	mov	r4,r17
 1082568:	10829a00 	call	10829a0 <_free_r>
 108256c:	80000c15 	stw	zero,48(r16)
 1082570:	81401117 	ldw	r5,68(r16)
 1082574:	28000326 	beq	r5,zero,1082584 <_fclose_r+0xb4>
 1082578:	8809883a 	mov	r4,r17
 108257c:	10829a00 	call	10829a0 <_free_r>
 1082580:	80001115 	stw	zero,68(r16)
 1082584:	10808940 	call	1080894 <__sfp_lock_acquire>
 1082588:	8000030d 	sth	zero,12(r16)
 108258c:	10808980 	call	1080898 <__sfp_lock_release>
 1082590:	9005883a 	mov	r2,r18
 1082594:	003fdc06 	br	1082508 <_fclose_r+0x38>
 1082598:	10808840 	call	1080884 <__sinit>
 108259c:	003fd706 	br	10824fc <_fclose_r+0x2c>
 10825a0:	04bfffc4 	movi	r18,-1
 10825a4:	003fe806 	br	1082548 <_fclose_r+0x78>
 10825a8:	81400417 	ldw	r5,16(r16)
 10825ac:	8809883a 	mov	r4,r17
 10825b0:	10829a00 	call	10829a0 <_free_r>
 10825b4:	003fe706 	br	1082554 <_fclose_r+0x84>
 10825b8:	0005883a 	mov	r2,zero
 10825bc:	f800283a 	ret

010825c0 <fclose>:
 10825c0:	00804274 	movhi	r2,265
 10825c4:	10a0c704 	addi	r2,r2,-31972
 10825c8:	200b883a 	mov	r5,r4
 10825cc:	11000017 	ldw	r4,0(r2)
 10825d0:	10824d01 	jmpi	10824d0 <_fclose_r>

010825d4 <__sflush_r>:
 10825d4:	2880030b 	ldhu	r2,12(r5)
 10825d8:	defffb04 	addi	sp,sp,-20
 10825dc:	dcc00315 	stw	r19,12(sp)
 10825e0:	dc400115 	stw	r17,4(sp)
 10825e4:	dfc00415 	stw	ra,16(sp)
 10825e8:	dc800215 	stw	r18,8(sp)
 10825ec:	dc000015 	stw	r16,0(sp)
 10825f0:	10c0020c 	andi	r3,r2,8
 10825f4:	2823883a 	mov	r17,r5
 10825f8:	2027883a 	mov	r19,r4
 10825fc:	1800311e 	bne	r3,zero,10826c4 <__sflush_r+0xf0>
 1082600:	28c00117 	ldw	r3,4(r5)
 1082604:	10820014 	ori	r2,r2,2048
 1082608:	2880030d 	sth	r2,12(r5)
 108260c:	00c04b0e 	bge	zero,r3,108273c <__sflush_r+0x168>
 1082610:	8a000a17 	ldw	r8,40(r17)
 1082614:	40002326 	beq	r8,zero,10826a4 <__sflush_r+0xd0>
 1082618:	9c000017 	ldw	r16,0(r19)
 108261c:	10c4000c 	andi	r3,r2,4096
 1082620:	98000015 	stw	zero,0(r19)
 1082624:	18004826 	beq	r3,zero,1082748 <__sflush_r+0x174>
 1082628:	89801417 	ldw	r6,80(r17)
 108262c:	10c0010c 	andi	r3,r2,4
 1082630:	18000626 	beq	r3,zero,108264c <__sflush_r+0x78>
 1082634:	88c00117 	ldw	r3,4(r17)
 1082638:	88800c17 	ldw	r2,48(r17)
 108263c:	30cdc83a 	sub	r6,r6,r3
 1082640:	10000226 	beq	r2,zero,108264c <__sflush_r+0x78>
 1082644:	88800f17 	ldw	r2,60(r17)
 1082648:	308dc83a 	sub	r6,r6,r2
 108264c:	89400717 	ldw	r5,28(r17)
 1082650:	000f883a 	mov	r7,zero
 1082654:	9809883a 	mov	r4,r19
 1082658:	403ee83a 	callr	r8
 108265c:	00ffffc4 	movi	r3,-1
 1082660:	10c04426 	beq	r2,r3,1082774 <__sflush_r+0x1a0>
 1082664:	88c0030b 	ldhu	r3,12(r17)
 1082668:	89000417 	ldw	r4,16(r17)
 108266c:	88000115 	stw	zero,4(r17)
 1082670:	197dffcc 	andi	r5,r3,63487
 1082674:	8940030d 	sth	r5,12(r17)
 1082678:	89000015 	stw	r4,0(r17)
 108267c:	18c4000c 	andi	r3,r3,4096
 1082680:	18002c1e 	bne	r3,zero,1082734 <__sflush_r+0x160>
 1082684:	89400c17 	ldw	r5,48(r17)
 1082688:	9c000015 	stw	r16,0(r19)
 108268c:	28000526 	beq	r5,zero,10826a4 <__sflush_r+0xd0>
 1082690:	88801004 	addi	r2,r17,64
 1082694:	28800226 	beq	r5,r2,10826a0 <__sflush_r+0xcc>
 1082698:	9809883a 	mov	r4,r19
 108269c:	10829a00 	call	10829a0 <_free_r>
 10826a0:	88000c15 	stw	zero,48(r17)
 10826a4:	0005883a 	mov	r2,zero
 10826a8:	dfc00417 	ldw	ra,16(sp)
 10826ac:	dcc00317 	ldw	r19,12(sp)
 10826b0:	dc800217 	ldw	r18,8(sp)
 10826b4:	dc400117 	ldw	r17,4(sp)
 10826b8:	dc000017 	ldw	r16,0(sp)
 10826bc:	dec00504 	addi	sp,sp,20
 10826c0:	f800283a 	ret
 10826c4:	2c800417 	ldw	r18,16(r5)
 10826c8:	903ff626 	beq	r18,zero,10826a4 <__sflush_r+0xd0>
 10826cc:	2c000017 	ldw	r16,0(r5)
 10826d0:	108000cc 	andi	r2,r2,3
 10826d4:	2c800015 	stw	r18,0(r5)
 10826d8:	84a1c83a 	sub	r16,r16,r18
 10826dc:	1000131e 	bne	r2,zero,108272c <__sflush_r+0x158>
 10826e0:	28800517 	ldw	r2,20(r5)
 10826e4:	88800215 	stw	r2,8(r17)
 10826e8:	04000316 	blt	zero,r16,10826f8 <__sflush_r+0x124>
 10826ec:	003fed06 	br	10826a4 <__sflush_r+0xd0>
 10826f0:	90a5883a 	add	r18,r18,r2
 10826f4:	043feb0e 	bge	zero,r16,10826a4 <__sflush_r+0xd0>
 10826f8:	88800917 	ldw	r2,36(r17)
 10826fc:	89400717 	ldw	r5,28(r17)
 1082700:	800f883a 	mov	r7,r16
 1082704:	900d883a 	mov	r6,r18
 1082708:	9809883a 	mov	r4,r19
 108270c:	103ee83a 	callr	r2
 1082710:	80a1c83a 	sub	r16,r16,r2
 1082714:	00bff616 	blt	zero,r2,10826f0 <__sflush_r+0x11c>
 1082718:	88c0030b 	ldhu	r3,12(r17)
 108271c:	00bfffc4 	movi	r2,-1
 1082720:	18c01014 	ori	r3,r3,64
 1082724:	88c0030d 	sth	r3,12(r17)
 1082728:	003fdf06 	br	10826a8 <__sflush_r+0xd4>
 108272c:	0005883a 	mov	r2,zero
 1082730:	003fec06 	br	10826e4 <__sflush_r+0x110>
 1082734:	88801415 	stw	r2,80(r17)
 1082738:	003fd206 	br	1082684 <__sflush_r+0xb0>
 108273c:	28c00f17 	ldw	r3,60(r5)
 1082740:	00ffb316 	blt	zero,r3,1082610 <__sflush_r+0x3c>
 1082744:	003fd706 	br	10826a4 <__sflush_r+0xd0>
 1082748:	89400717 	ldw	r5,28(r17)
 108274c:	000d883a 	mov	r6,zero
 1082750:	01c00044 	movi	r7,1
 1082754:	9809883a 	mov	r4,r19
 1082758:	403ee83a 	callr	r8
 108275c:	100d883a 	mov	r6,r2
 1082760:	00bfffc4 	movi	r2,-1
 1082764:	30801426 	beq	r6,r2,10827b8 <__sflush_r+0x1e4>
 1082768:	8880030b 	ldhu	r2,12(r17)
 108276c:	8a000a17 	ldw	r8,40(r17)
 1082770:	003fae06 	br	108262c <__sflush_r+0x58>
 1082774:	98c00017 	ldw	r3,0(r19)
 1082778:	183fba26 	beq	r3,zero,1082664 <__sflush_r+0x90>
 108277c:	01000744 	movi	r4,29
 1082780:	19000626 	beq	r3,r4,108279c <__sflush_r+0x1c8>
 1082784:	01000584 	movi	r4,22
 1082788:	19000426 	beq	r3,r4,108279c <__sflush_r+0x1c8>
 108278c:	88c0030b 	ldhu	r3,12(r17)
 1082790:	18c01014 	ori	r3,r3,64
 1082794:	88c0030d 	sth	r3,12(r17)
 1082798:	003fc306 	br	10826a8 <__sflush_r+0xd4>
 108279c:	8880030b 	ldhu	r2,12(r17)
 10827a0:	88c00417 	ldw	r3,16(r17)
 10827a4:	88000115 	stw	zero,4(r17)
 10827a8:	10bdffcc 	andi	r2,r2,63487
 10827ac:	8880030d 	sth	r2,12(r17)
 10827b0:	88c00015 	stw	r3,0(r17)
 10827b4:	003fb306 	br	1082684 <__sflush_r+0xb0>
 10827b8:	98800017 	ldw	r2,0(r19)
 10827bc:	103fea26 	beq	r2,zero,1082768 <__sflush_r+0x194>
 10827c0:	00c00744 	movi	r3,29
 10827c4:	10c00226 	beq	r2,r3,10827d0 <__sflush_r+0x1fc>
 10827c8:	00c00584 	movi	r3,22
 10827cc:	10c0031e 	bne	r2,r3,10827dc <__sflush_r+0x208>
 10827d0:	9c000015 	stw	r16,0(r19)
 10827d4:	0005883a 	mov	r2,zero
 10827d8:	003fb306 	br	10826a8 <__sflush_r+0xd4>
 10827dc:	88c0030b 	ldhu	r3,12(r17)
 10827e0:	3005883a 	mov	r2,r6
 10827e4:	18c01014 	ori	r3,r3,64
 10827e8:	88c0030d 	sth	r3,12(r17)
 10827ec:	003fae06 	br	10826a8 <__sflush_r+0xd4>

010827f0 <_fflush_r>:
 10827f0:	defffd04 	addi	sp,sp,-12
 10827f4:	dc000115 	stw	r16,4(sp)
 10827f8:	dfc00215 	stw	ra,8(sp)
 10827fc:	2021883a 	mov	r16,r4
 1082800:	20000226 	beq	r4,zero,108280c <_fflush_r+0x1c>
 1082804:	20800e17 	ldw	r2,56(r4)
 1082808:	10000c26 	beq	r2,zero,108283c <_fflush_r+0x4c>
 108280c:	2880030f 	ldh	r2,12(r5)
 1082810:	1000051e 	bne	r2,zero,1082828 <_fflush_r+0x38>
 1082814:	0005883a 	mov	r2,zero
 1082818:	dfc00217 	ldw	ra,8(sp)
 108281c:	dc000117 	ldw	r16,4(sp)
 1082820:	dec00304 	addi	sp,sp,12
 1082824:	f800283a 	ret
 1082828:	8009883a 	mov	r4,r16
 108282c:	dfc00217 	ldw	ra,8(sp)
 1082830:	dc000117 	ldw	r16,4(sp)
 1082834:	dec00304 	addi	sp,sp,12
 1082838:	10825d41 	jmpi	10825d4 <__sflush_r>
 108283c:	d9400015 	stw	r5,0(sp)
 1082840:	10808840 	call	1080884 <__sinit>
 1082844:	d9400017 	ldw	r5,0(sp)
 1082848:	003ff006 	br	108280c <_fflush_r+0x1c>

0108284c <fflush>:
 108284c:	20000526 	beq	r4,zero,1082864 <fflush+0x18>
 1082850:	00804274 	movhi	r2,265
 1082854:	10a0c704 	addi	r2,r2,-31972
 1082858:	200b883a 	mov	r5,r4
 108285c:	11000017 	ldw	r4,0(r2)
 1082860:	10827f01 	jmpi	10827f0 <_fflush_r>
 1082864:	00804274 	movhi	r2,265
 1082868:	10a0c604 	addi	r2,r2,-31976
 108286c:	11000017 	ldw	r4,0(r2)
 1082870:	01404234 	movhi	r5,264
 1082874:	2949fc04 	addi	r5,r5,10224
 1082878:	1080e541 	jmpi	1080e54 <_fwalk_reent>

0108287c <_malloc_trim_r>:
 108287c:	defffb04 	addi	sp,sp,-20
 1082880:	dcc00315 	stw	r19,12(sp)
 1082884:	04c04234 	movhi	r19,264
 1082888:	dc800215 	stw	r18,8(sp)
 108288c:	dc400115 	stw	r17,4(sp)
 1082890:	dc000015 	stw	r16,0(sp)
 1082894:	dfc00415 	stw	ra,16(sp)
 1082898:	2821883a 	mov	r16,r5
 108289c:	9cdb2104 	addi	r19,r19,27780
 10828a0:	2025883a 	mov	r18,r4
 10828a4:	108370c0 	call	108370c <__malloc_lock>
 10828a8:	98800217 	ldw	r2,8(r19)
 10828ac:	14400117 	ldw	r17,4(r2)
 10828b0:	00bfff04 	movi	r2,-4
 10828b4:	88a2703a 	and	r17,r17,r2
 10828b8:	8c21c83a 	sub	r16,r17,r16
 10828bc:	8403fbc4 	addi	r16,r16,4079
 10828c0:	8020d33a 	srli	r16,r16,12
 10828c4:	0083ffc4 	movi	r2,4095
 10828c8:	843fffc4 	addi	r16,r16,-1
 10828cc:	8020933a 	slli	r16,r16,12
 10828d0:	1400060e 	bge	r2,r16,10828ec <_malloc_trim_r+0x70>
 10828d4:	000b883a 	mov	r5,zero
 10828d8:	9009883a 	mov	r4,r18
 10828dc:	10821380 	call	1082138 <_sbrk_r>
 10828e0:	98c00217 	ldw	r3,8(r19)
 10828e4:	1c47883a 	add	r3,r3,r17
 10828e8:	10c00a26 	beq	r2,r3,1082914 <_malloc_trim_r+0x98>
 10828ec:	9009883a 	mov	r4,r18
 10828f0:	10837300 	call	1083730 <__malloc_unlock>
 10828f4:	0005883a 	mov	r2,zero
 10828f8:	dfc00417 	ldw	ra,16(sp)
 10828fc:	dcc00317 	ldw	r19,12(sp)
 1082900:	dc800217 	ldw	r18,8(sp)
 1082904:	dc400117 	ldw	r17,4(sp)
 1082908:	dc000017 	ldw	r16,0(sp)
 108290c:	dec00504 	addi	sp,sp,20
 1082910:	f800283a 	ret
 1082914:	040bc83a 	sub	r5,zero,r16
 1082918:	9009883a 	mov	r4,r18
 108291c:	10821380 	call	1082138 <_sbrk_r>
 1082920:	00ffffc4 	movi	r3,-1
 1082924:	10c00d26 	beq	r2,r3,108295c <_malloc_trim_r+0xe0>
 1082928:	00c04274 	movhi	r3,265
 108292c:	18e79b04 	addi	r3,r3,-24980
 1082930:	18800017 	ldw	r2,0(r3)
 1082934:	99000217 	ldw	r4,8(r19)
 1082938:	8c23c83a 	sub	r17,r17,r16
 108293c:	8c400054 	ori	r17,r17,1
 1082940:	1421c83a 	sub	r16,r2,r16
 1082944:	24400115 	stw	r17,4(r4)
 1082948:	9009883a 	mov	r4,r18
 108294c:	1c000015 	stw	r16,0(r3)
 1082950:	10837300 	call	1083730 <__malloc_unlock>
 1082954:	00800044 	movi	r2,1
 1082958:	003fe706 	br	10828f8 <_malloc_trim_r+0x7c>
 108295c:	000b883a 	mov	r5,zero
 1082960:	9009883a 	mov	r4,r18
 1082964:	10821380 	call	1082138 <_sbrk_r>
 1082968:	99000217 	ldw	r4,8(r19)
 108296c:	014003c4 	movi	r5,15
 1082970:	1107c83a 	sub	r3,r2,r4
 1082974:	28ffdd0e 	bge	r5,r3,10828ec <_malloc_trim_r+0x70>
 1082978:	01404274 	movhi	r5,265
 108297c:	2960c804 	addi	r5,r5,-31968
 1082980:	29400017 	ldw	r5,0(r5)
 1082984:	18c00054 	ori	r3,r3,1
 1082988:	20c00115 	stw	r3,4(r4)
 108298c:	00c04274 	movhi	r3,265
 1082990:	1145c83a 	sub	r2,r2,r5
 1082994:	18e79b04 	addi	r3,r3,-24980
 1082998:	18800015 	stw	r2,0(r3)
 108299c:	003fd306 	br	10828ec <_malloc_trim_r+0x70>

010829a0 <_free_r>:
 10829a0:	28004126 	beq	r5,zero,1082aa8 <_free_r+0x108>
 10829a4:	defffd04 	addi	sp,sp,-12
 10829a8:	dc400115 	stw	r17,4(sp)
 10829ac:	dc000015 	stw	r16,0(sp)
 10829b0:	2023883a 	mov	r17,r4
 10829b4:	2821883a 	mov	r16,r5
 10829b8:	dfc00215 	stw	ra,8(sp)
 10829bc:	108370c0 	call	108370c <__malloc_lock>
 10829c0:	81ffff17 	ldw	r7,-4(r16)
 10829c4:	00bfff84 	movi	r2,-2
 10829c8:	01004234 	movhi	r4,264
 10829cc:	81bffe04 	addi	r6,r16,-8
 10829d0:	3884703a 	and	r2,r7,r2
 10829d4:	211b2104 	addi	r4,r4,27780
 10829d8:	308b883a 	add	r5,r6,r2
 10829dc:	2a400117 	ldw	r9,4(r5)
 10829e0:	22000217 	ldw	r8,8(r4)
 10829e4:	00ffff04 	movi	r3,-4
 10829e8:	48c6703a 	and	r3,r9,r3
 10829ec:	2a005726 	beq	r5,r8,1082b4c <_free_r+0x1ac>
 10829f0:	28c00115 	stw	r3,4(r5)
 10829f4:	39c0004c 	andi	r7,r7,1
 10829f8:	3800091e 	bne	r7,zero,1082a20 <_free_r+0x80>
 10829fc:	823ffe17 	ldw	r8,-8(r16)
 1082a00:	22400204 	addi	r9,r4,8
 1082a04:	320dc83a 	sub	r6,r6,r8
 1082a08:	31c00217 	ldw	r7,8(r6)
 1082a0c:	1205883a 	add	r2,r2,r8
 1082a10:	3a406526 	beq	r7,r9,1082ba8 <_free_r+0x208>
 1082a14:	32000317 	ldw	r8,12(r6)
 1082a18:	3a000315 	stw	r8,12(r7)
 1082a1c:	41c00215 	stw	r7,8(r8)
 1082a20:	28cf883a 	add	r7,r5,r3
 1082a24:	39c00117 	ldw	r7,4(r7)
 1082a28:	39c0004c 	andi	r7,r7,1
 1082a2c:	38003a26 	beq	r7,zero,1082b18 <_free_r+0x178>
 1082a30:	10c00054 	ori	r3,r2,1
 1082a34:	30c00115 	stw	r3,4(r6)
 1082a38:	3087883a 	add	r3,r6,r2
 1082a3c:	18800015 	stw	r2,0(r3)
 1082a40:	00c07fc4 	movi	r3,511
 1082a44:	18801936 	bltu	r3,r2,1082aac <_free_r+0x10c>
 1082a48:	1004d0fa 	srli	r2,r2,3
 1082a4c:	01c00044 	movi	r7,1
 1082a50:	21400117 	ldw	r5,4(r4)
 1082a54:	10c00044 	addi	r3,r2,1
 1082a58:	18c7883a 	add	r3,r3,r3
 1082a5c:	1005d0ba 	srai	r2,r2,2
 1082a60:	18c7883a 	add	r3,r3,r3
 1082a64:	18c7883a 	add	r3,r3,r3
 1082a68:	1907883a 	add	r3,r3,r4
 1082a6c:	3884983a 	sll	r2,r7,r2
 1082a70:	19c00017 	ldw	r7,0(r3)
 1082a74:	1a3ffe04 	addi	r8,r3,-8
 1082a78:	1144b03a 	or	r2,r2,r5
 1082a7c:	32000315 	stw	r8,12(r6)
 1082a80:	31c00215 	stw	r7,8(r6)
 1082a84:	20800115 	stw	r2,4(r4)
 1082a88:	19800015 	stw	r6,0(r3)
 1082a8c:	39800315 	stw	r6,12(r7)
 1082a90:	8809883a 	mov	r4,r17
 1082a94:	dfc00217 	ldw	ra,8(sp)
 1082a98:	dc400117 	ldw	r17,4(sp)
 1082a9c:	dc000017 	ldw	r16,0(sp)
 1082aa0:	dec00304 	addi	sp,sp,12
 1082aa4:	10837301 	jmpi	1083730 <__malloc_unlock>
 1082aa8:	f800283a 	ret
 1082aac:	100ad27a 	srli	r5,r2,9
 1082ab0:	00c00104 	movi	r3,4
 1082ab4:	19404a36 	bltu	r3,r5,1082be0 <_free_r+0x240>
 1082ab8:	100ad1ba 	srli	r5,r2,6
 1082abc:	28c00e44 	addi	r3,r5,57
 1082ac0:	18c7883a 	add	r3,r3,r3
 1082ac4:	29400e04 	addi	r5,r5,56
 1082ac8:	18c7883a 	add	r3,r3,r3
 1082acc:	18c7883a 	add	r3,r3,r3
 1082ad0:	1909883a 	add	r4,r3,r4
 1082ad4:	20c00017 	ldw	r3,0(r4)
 1082ad8:	01c04234 	movhi	r7,264
 1082adc:	213ffe04 	addi	r4,r4,-8
 1082ae0:	39db2104 	addi	r7,r7,27780
 1082ae4:	20c04426 	beq	r4,r3,1082bf8 <_free_r+0x258>
 1082ae8:	01ffff04 	movi	r7,-4
 1082aec:	19400117 	ldw	r5,4(r3)
 1082af0:	29ca703a 	and	r5,r5,r7
 1082af4:	1140022e 	bgeu	r2,r5,1082b00 <_free_r+0x160>
 1082af8:	18c00217 	ldw	r3,8(r3)
 1082afc:	20fffb1e 	bne	r4,r3,1082aec <_free_r+0x14c>
 1082b00:	19000317 	ldw	r4,12(r3)
 1082b04:	31000315 	stw	r4,12(r6)
 1082b08:	30c00215 	stw	r3,8(r6)
 1082b0c:	21800215 	stw	r6,8(r4)
 1082b10:	19800315 	stw	r6,12(r3)
 1082b14:	003fde06 	br	1082a90 <_free_r+0xf0>
 1082b18:	29c00217 	ldw	r7,8(r5)
 1082b1c:	10c5883a 	add	r2,r2,r3
 1082b20:	00c04234 	movhi	r3,264
 1082b24:	18db2304 	addi	r3,r3,27788
 1082b28:	38c03b26 	beq	r7,r3,1082c18 <_free_r+0x278>
 1082b2c:	2a000317 	ldw	r8,12(r5)
 1082b30:	11400054 	ori	r5,r2,1
 1082b34:	3087883a 	add	r3,r6,r2
 1082b38:	3a000315 	stw	r8,12(r7)
 1082b3c:	41c00215 	stw	r7,8(r8)
 1082b40:	31400115 	stw	r5,4(r6)
 1082b44:	18800015 	stw	r2,0(r3)
 1082b48:	003fbd06 	br	1082a40 <_free_r+0xa0>
 1082b4c:	39c0004c 	andi	r7,r7,1
 1082b50:	10c5883a 	add	r2,r2,r3
 1082b54:	3800071e 	bne	r7,zero,1082b74 <_free_r+0x1d4>
 1082b58:	81fffe17 	ldw	r7,-8(r16)
 1082b5c:	31cdc83a 	sub	r6,r6,r7
 1082b60:	30c00317 	ldw	r3,12(r6)
 1082b64:	31400217 	ldw	r5,8(r6)
 1082b68:	11c5883a 	add	r2,r2,r7
 1082b6c:	28c00315 	stw	r3,12(r5)
 1082b70:	19400215 	stw	r5,8(r3)
 1082b74:	10c00054 	ori	r3,r2,1
 1082b78:	30c00115 	stw	r3,4(r6)
 1082b7c:	00c04274 	movhi	r3,265
 1082b80:	18e0c904 	addi	r3,r3,-31964
 1082b84:	18c00017 	ldw	r3,0(r3)
 1082b88:	21800215 	stw	r6,8(r4)
 1082b8c:	10ffc036 	bltu	r2,r3,1082a90 <_free_r+0xf0>
 1082b90:	00804274 	movhi	r2,265
 1082b94:	10a79204 	addi	r2,r2,-25016
 1082b98:	11400017 	ldw	r5,0(r2)
 1082b9c:	8809883a 	mov	r4,r17
 1082ba0:	108287c0 	call	108287c <_malloc_trim_r>
 1082ba4:	003fba06 	br	1082a90 <_free_r+0xf0>
 1082ba8:	28c9883a 	add	r4,r5,r3
 1082bac:	21000117 	ldw	r4,4(r4)
 1082bb0:	2100004c 	andi	r4,r4,1
 1082bb4:	2000391e 	bne	r4,zero,1082c9c <_free_r+0x2fc>
 1082bb8:	29c00217 	ldw	r7,8(r5)
 1082bbc:	29000317 	ldw	r4,12(r5)
 1082bc0:	1885883a 	add	r2,r3,r2
 1082bc4:	10c00054 	ori	r3,r2,1
 1082bc8:	39000315 	stw	r4,12(r7)
 1082bcc:	21c00215 	stw	r7,8(r4)
 1082bd0:	30c00115 	stw	r3,4(r6)
 1082bd4:	308d883a 	add	r6,r6,r2
 1082bd8:	30800015 	stw	r2,0(r6)
 1082bdc:	003fac06 	br	1082a90 <_free_r+0xf0>
 1082be0:	00c00504 	movi	r3,20
 1082be4:	19401536 	bltu	r3,r5,1082c3c <_free_r+0x29c>
 1082be8:	28c01704 	addi	r3,r5,92
 1082bec:	18c7883a 	add	r3,r3,r3
 1082bf0:	294016c4 	addi	r5,r5,91
 1082bf4:	003fb406 	br	1082ac8 <_free_r+0x128>
 1082bf8:	280bd0ba 	srai	r5,r5,2
 1082bfc:	00c00044 	movi	r3,1
 1082c00:	38800117 	ldw	r2,4(r7)
 1082c04:	194a983a 	sll	r5,r3,r5
 1082c08:	2007883a 	mov	r3,r4
 1082c0c:	2884b03a 	or	r2,r5,r2
 1082c10:	38800115 	stw	r2,4(r7)
 1082c14:	003fbb06 	br	1082b04 <_free_r+0x164>
 1082c18:	21800515 	stw	r6,20(r4)
 1082c1c:	21800415 	stw	r6,16(r4)
 1082c20:	10c00054 	ori	r3,r2,1
 1082c24:	31c00315 	stw	r7,12(r6)
 1082c28:	31c00215 	stw	r7,8(r6)
 1082c2c:	30c00115 	stw	r3,4(r6)
 1082c30:	308d883a 	add	r6,r6,r2
 1082c34:	30800015 	stw	r2,0(r6)
 1082c38:	003f9506 	br	1082a90 <_free_r+0xf0>
 1082c3c:	00c01504 	movi	r3,84
 1082c40:	19400536 	bltu	r3,r5,1082c58 <_free_r+0x2b8>
 1082c44:	100ad33a 	srli	r5,r2,12
 1082c48:	28c01bc4 	addi	r3,r5,111
 1082c4c:	18c7883a 	add	r3,r3,r3
 1082c50:	29401b84 	addi	r5,r5,110
 1082c54:	003f9c06 	br	1082ac8 <_free_r+0x128>
 1082c58:	00c05504 	movi	r3,340
 1082c5c:	19400536 	bltu	r3,r5,1082c74 <_free_r+0x2d4>
 1082c60:	100ad3fa 	srli	r5,r2,15
 1082c64:	28c01e04 	addi	r3,r5,120
 1082c68:	18c7883a 	add	r3,r3,r3
 1082c6c:	29401dc4 	addi	r5,r5,119
 1082c70:	003f9506 	br	1082ac8 <_free_r+0x128>
 1082c74:	00c15504 	movi	r3,1364
 1082c78:	19400536 	bltu	r3,r5,1082c90 <_free_r+0x2f0>
 1082c7c:	100ad4ba 	srli	r5,r2,18
 1082c80:	28c01f44 	addi	r3,r5,125
 1082c84:	18c7883a 	add	r3,r3,r3
 1082c88:	29401f04 	addi	r5,r5,124
 1082c8c:	003f8e06 	br	1082ac8 <_free_r+0x128>
 1082c90:	00c03f84 	movi	r3,254
 1082c94:	01401f84 	movi	r5,126
 1082c98:	003f8b06 	br	1082ac8 <_free_r+0x128>
 1082c9c:	10c00054 	ori	r3,r2,1
 1082ca0:	30c00115 	stw	r3,4(r6)
 1082ca4:	308d883a 	add	r6,r6,r2
 1082ca8:	30800015 	stw	r2,0(r6)
 1082cac:	003f7806 	br	1082a90 <_free_r+0xf0>

01082cb0 <_lseek_r>:
 1082cb0:	defffd04 	addi	sp,sp,-12
 1082cb4:	2805883a 	mov	r2,r5
 1082cb8:	dc000015 	stw	r16,0(sp)
 1082cbc:	04004274 	movhi	r16,265
 1082cc0:	dc400115 	stw	r17,4(sp)
 1082cc4:	300b883a 	mov	r5,r6
 1082cc8:	84279304 	addi	r16,r16,-25012
 1082ccc:	2023883a 	mov	r17,r4
 1082cd0:	380d883a 	mov	r6,r7
 1082cd4:	1009883a 	mov	r4,r2
 1082cd8:	dfc00215 	stw	ra,8(sp)
 1082cdc:	80000015 	stw	zero,0(r16)
 1082ce0:	10835bc0 	call	10835bc <lseek>
 1082ce4:	00ffffc4 	movi	r3,-1
 1082ce8:	10c00526 	beq	r2,r3,1082d00 <_lseek_r+0x50>
 1082cec:	dfc00217 	ldw	ra,8(sp)
 1082cf0:	dc400117 	ldw	r17,4(sp)
 1082cf4:	dc000017 	ldw	r16,0(sp)
 1082cf8:	dec00304 	addi	sp,sp,12
 1082cfc:	f800283a 	ret
 1082d00:	80c00017 	ldw	r3,0(r16)
 1082d04:	183ff926 	beq	r3,zero,1082cec <_lseek_r+0x3c>
 1082d08:	88c00015 	stw	r3,0(r17)
 1082d0c:	003ff706 	br	1082cec <_lseek_r+0x3c>

01082d10 <__smakebuf_r>:
 1082d10:	2880030b 	ldhu	r2,12(r5)
 1082d14:	10c0008c 	andi	r3,r2,2
 1082d18:	1800411e 	bne	r3,zero,1082e20 <__smakebuf_r+0x110>
 1082d1c:	deffec04 	addi	sp,sp,-80
 1082d20:	dc000f15 	stw	r16,60(sp)
 1082d24:	2821883a 	mov	r16,r5
 1082d28:	2940038f 	ldh	r5,14(r5)
 1082d2c:	dc401015 	stw	r17,64(sp)
 1082d30:	dfc01315 	stw	ra,76(sp)
 1082d34:	dcc01215 	stw	r19,72(sp)
 1082d38:	dc801115 	stw	r18,68(sp)
 1082d3c:	2023883a 	mov	r17,r4
 1082d40:	28001c16 	blt	r5,zero,1082db4 <__smakebuf_r+0xa4>
 1082d44:	d80d883a 	mov	r6,sp
 1082d48:	1082f2c0 	call	1082f2c <_fstat_r>
 1082d4c:	10001816 	blt	r2,zero,1082db0 <__smakebuf_r+0xa0>
 1082d50:	d8800117 	ldw	r2,4(sp)
 1082d54:	00e00014 	movui	r3,32768
 1082d58:	10bc000c 	andi	r2,r2,61440
 1082d5c:	14c80020 	cmpeqi	r19,r2,8192
 1082d60:	10c03726 	beq	r2,r3,1082e40 <__smakebuf_r+0x130>
 1082d64:	80c0030b 	ldhu	r3,12(r16)
 1082d68:	18c20014 	ori	r3,r3,2048
 1082d6c:	80c0030d 	sth	r3,12(r16)
 1082d70:	00c80004 	movi	r3,8192
 1082d74:	10c0521e 	bne	r2,r3,1082ec0 <__smakebuf_r+0x1b0>
 1082d78:	8140038f 	ldh	r5,14(r16)
 1082d7c:	8809883a 	mov	r4,r17
 1082d80:	1082f880 	call	1082f88 <_isatty_r>
 1082d84:	10004c26 	beq	r2,zero,1082eb8 <__smakebuf_r+0x1a8>
 1082d88:	8080030b 	ldhu	r2,12(r16)
 1082d8c:	80c010c4 	addi	r3,r16,67
 1082d90:	80c00015 	stw	r3,0(r16)
 1082d94:	10800054 	ori	r2,r2,1
 1082d98:	8080030d 	sth	r2,12(r16)
 1082d9c:	00800044 	movi	r2,1
 1082da0:	80c00415 	stw	r3,16(r16)
 1082da4:	80800515 	stw	r2,20(r16)
 1082da8:	04810004 	movi	r18,1024
 1082dac:	00000706 	br	1082dcc <__smakebuf_r+0xbc>
 1082db0:	8080030b 	ldhu	r2,12(r16)
 1082db4:	10c0200c 	andi	r3,r2,128
 1082db8:	18001f1e 	bne	r3,zero,1082e38 <__smakebuf_r+0x128>
 1082dbc:	04810004 	movi	r18,1024
 1082dc0:	10820014 	ori	r2,r2,2048
 1082dc4:	8080030d 	sth	r2,12(r16)
 1082dc8:	0027883a 	mov	r19,zero
 1082dcc:	900b883a 	mov	r5,r18
 1082dd0:	8809883a 	mov	r4,r17
 1082dd4:	1080f180 	call	1080f18 <_malloc_r>
 1082dd8:	10002c26 	beq	r2,zero,1082e8c <__smakebuf_r+0x17c>
 1082ddc:	80c0030b 	ldhu	r3,12(r16)
 1082de0:	01004234 	movhi	r4,264
 1082de4:	21014f04 	addi	r4,r4,1340
 1082de8:	89000f15 	stw	r4,60(r17)
 1082dec:	18c02014 	ori	r3,r3,128
 1082df0:	80c0030d 	sth	r3,12(r16)
 1082df4:	80800015 	stw	r2,0(r16)
 1082df8:	80800415 	stw	r2,16(r16)
 1082dfc:	84800515 	stw	r18,20(r16)
 1082e00:	98001a1e 	bne	r19,zero,1082e6c <__smakebuf_r+0x15c>
 1082e04:	dfc01317 	ldw	ra,76(sp)
 1082e08:	dcc01217 	ldw	r19,72(sp)
 1082e0c:	dc801117 	ldw	r18,68(sp)
 1082e10:	dc401017 	ldw	r17,64(sp)
 1082e14:	dc000f17 	ldw	r16,60(sp)
 1082e18:	dec01404 	addi	sp,sp,80
 1082e1c:	f800283a 	ret
 1082e20:	288010c4 	addi	r2,r5,67
 1082e24:	28800015 	stw	r2,0(r5)
 1082e28:	28800415 	stw	r2,16(r5)
 1082e2c:	00800044 	movi	r2,1
 1082e30:	28800515 	stw	r2,20(r5)
 1082e34:	f800283a 	ret
 1082e38:	04801004 	movi	r18,64
 1082e3c:	003fe006 	br	1082dc0 <__smakebuf_r+0xb0>
 1082e40:	81000a17 	ldw	r4,40(r16)
 1082e44:	00c04234 	movhi	r3,264
 1082e48:	18c89904 	addi	r3,r3,8804
 1082e4c:	20ffc51e 	bne	r4,r3,1082d64 <__smakebuf_r+0x54>
 1082e50:	8080030b 	ldhu	r2,12(r16)
 1082e54:	04810004 	movi	r18,1024
 1082e58:	84801315 	stw	r18,76(r16)
 1082e5c:	1484b03a 	or	r2,r2,r18
 1082e60:	8080030d 	sth	r2,12(r16)
 1082e64:	0027883a 	mov	r19,zero
 1082e68:	003fd806 	br	1082dcc <__smakebuf_r+0xbc>
 1082e6c:	8140038f 	ldh	r5,14(r16)
 1082e70:	8809883a 	mov	r4,r17
 1082e74:	1082f880 	call	1082f88 <_isatty_r>
 1082e78:	103fe226 	beq	r2,zero,1082e04 <__smakebuf_r+0xf4>
 1082e7c:	8080030b 	ldhu	r2,12(r16)
 1082e80:	10800054 	ori	r2,r2,1
 1082e84:	8080030d 	sth	r2,12(r16)
 1082e88:	003fde06 	br	1082e04 <__smakebuf_r+0xf4>
 1082e8c:	8080030b 	ldhu	r2,12(r16)
 1082e90:	10c0800c 	andi	r3,r2,512
 1082e94:	183fdb1e 	bne	r3,zero,1082e04 <__smakebuf_r+0xf4>
 1082e98:	10800094 	ori	r2,r2,2
 1082e9c:	80c010c4 	addi	r3,r16,67
 1082ea0:	8080030d 	sth	r2,12(r16)
 1082ea4:	00800044 	movi	r2,1
 1082ea8:	80c00015 	stw	r3,0(r16)
 1082eac:	80c00415 	stw	r3,16(r16)
 1082eb0:	80800515 	stw	r2,20(r16)
 1082eb4:	003fd306 	br	1082e04 <__smakebuf_r+0xf4>
 1082eb8:	04810004 	movi	r18,1024
 1082ebc:	003fc306 	br	1082dcc <__smakebuf_r+0xbc>
 1082ec0:	0027883a 	mov	r19,zero
 1082ec4:	04810004 	movi	r18,1024
 1082ec8:	003fc006 	br	1082dcc <__smakebuf_r+0xbc>

01082ecc <_read_r>:
 1082ecc:	defffd04 	addi	sp,sp,-12
 1082ed0:	2805883a 	mov	r2,r5
 1082ed4:	dc000015 	stw	r16,0(sp)
 1082ed8:	04004274 	movhi	r16,265
 1082edc:	dc400115 	stw	r17,4(sp)
 1082ee0:	300b883a 	mov	r5,r6
 1082ee4:	84279304 	addi	r16,r16,-25012
 1082ee8:	2023883a 	mov	r17,r4
 1082eec:	380d883a 	mov	r6,r7
 1082ef0:	1009883a 	mov	r4,r2
 1082ef4:	dfc00215 	stw	ra,8(sp)
 1082ef8:	80000015 	stw	zero,0(r16)
 1082efc:	10837900 	call	1083790 <read>
 1082f00:	00ffffc4 	movi	r3,-1
 1082f04:	10c00526 	beq	r2,r3,1082f1c <_read_r+0x50>
 1082f08:	dfc00217 	ldw	ra,8(sp)
 1082f0c:	dc400117 	ldw	r17,4(sp)
 1082f10:	dc000017 	ldw	r16,0(sp)
 1082f14:	dec00304 	addi	sp,sp,12
 1082f18:	f800283a 	ret
 1082f1c:	80c00017 	ldw	r3,0(r16)
 1082f20:	183ff926 	beq	r3,zero,1082f08 <_read_r+0x3c>
 1082f24:	88c00015 	stw	r3,0(r17)
 1082f28:	003ff706 	br	1082f08 <_read_r+0x3c>

01082f2c <_fstat_r>:
 1082f2c:	defffd04 	addi	sp,sp,-12
 1082f30:	2805883a 	mov	r2,r5
 1082f34:	dc000015 	stw	r16,0(sp)
 1082f38:	04004274 	movhi	r16,265
 1082f3c:	dc400115 	stw	r17,4(sp)
 1082f40:	84279304 	addi	r16,r16,-25012
 1082f44:	2023883a 	mov	r17,r4
 1082f48:	300b883a 	mov	r5,r6
 1082f4c:	1009883a 	mov	r4,r2
 1082f50:	dfc00215 	stw	ra,8(sp)
 1082f54:	80000015 	stw	zero,0(r16)
 1082f58:	10833040 	call	1083304 <fstat>
 1082f5c:	00ffffc4 	movi	r3,-1
 1082f60:	10c00526 	beq	r2,r3,1082f78 <_fstat_r+0x4c>
 1082f64:	dfc00217 	ldw	ra,8(sp)
 1082f68:	dc400117 	ldw	r17,4(sp)
 1082f6c:	dc000017 	ldw	r16,0(sp)
 1082f70:	dec00304 	addi	sp,sp,12
 1082f74:	f800283a 	ret
 1082f78:	80c00017 	ldw	r3,0(r16)
 1082f7c:	183ff926 	beq	r3,zero,1082f64 <_fstat_r+0x38>
 1082f80:	88c00015 	stw	r3,0(r17)
 1082f84:	003ff706 	br	1082f64 <_fstat_r+0x38>

01082f88 <_isatty_r>:
 1082f88:	defffd04 	addi	sp,sp,-12
 1082f8c:	dc000015 	stw	r16,0(sp)
 1082f90:	04004274 	movhi	r16,265
 1082f94:	dc400115 	stw	r17,4(sp)
 1082f98:	84279304 	addi	r16,r16,-25012
 1082f9c:	2023883a 	mov	r17,r4
 1082fa0:	2809883a 	mov	r4,r5
 1082fa4:	dfc00215 	stw	ra,8(sp)
 1082fa8:	80000015 	stw	zero,0(r16)
 1082fac:	10833f00 	call	10833f0 <isatty>
 1082fb0:	00ffffc4 	movi	r3,-1
 1082fb4:	10c00526 	beq	r2,r3,1082fcc <_isatty_r+0x44>
 1082fb8:	dfc00217 	ldw	ra,8(sp)
 1082fbc:	dc400117 	ldw	r17,4(sp)
 1082fc0:	dc000017 	ldw	r16,0(sp)
 1082fc4:	dec00304 	addi	sp,sp,12
 1082fc8:	f800283a 	ret
 1082fcc:	80c00017 	ldw	r3,0(r16)
 1082fd0:	183ff926 	beq	r3,zero,1082fb8 <_isatty_r+0x30>
 1082fd4:	88c00015 	stw	r3,0(r17)
 1082fd8:	003ff706 	br	1082fb8 <_isatty_r+0x30>

01082fdc <__divsi3>:
 1082fdc:	20001b16 	blt	r4,zero,108304c <__divsi3+0x70>
 1082fe0:	000f883a 	mov	r7,zero
 1082fe4:	28001616 	blt	r5,zero,1083040 <__divsi3+0x64>
 1082fe8:	200d883a 	mov	r6,r4
 1082fec:	29001a2e 	bgeu	r5,r4,1083058 <__divsi3+0x7c>
 1082ff0:	00800804 	movi	r2,32
 1082ff4:	00c00044 	movi	r3,1
 1082ff8:	00000106 	br	1083000 <__divsi3+0x24>
 1082ffc:	10000d26 	beq	r2,zero,1083034 <__divsi3+0x58>
 1083000:	294b883a 	add	r5,r5,r5
 1083004:	10bfffc4 	addi	r2,r2,-1
 1083008:	18c7883a 	add	r3,r3,r3
 108300c:	293ffb36 	bltu	r5,r4,1082ffc <__divsi3+0x20>
 1083010:	0005883a 	mov	r2,zero
 1083014:	18000726 	beq	r3,zero,1083034 <__divsi3+0x58>
 1083018:	0005883a 	mov	r2,zero
 108301c:	31400236 	bltu	r6,r5,1083028 <__divsi3+0x4c>
 1083020:	314dc83a 	sub	r6,r6,r5
 1083024:	10c4b03a 	or	r2,r2,r3
 1083028:	1806d07a 	srli	r3,r3,1
 108302c:	280ad07a 	srli	r5,r5,1
 1083030:	183ffa1e 	bne	r3,zero,108301c <__divsi3+0x40>
 1083034:	38000126 	beq	r7,zero,108303c <__divsi3+0x60>
 1083038:	0085c83a 	sub	r2,zero,r2
 108303c:	f800283a 	ret
 1083040:	014bc83a 	sub	r5,zero,r5
 1083044:	39c0005c 	xori	r7,r7,1
 1083048:	003fe706 	br	1082fe8 <__divsi3+0xc>
 108304c:	0109c83a 	sub	r4,zero,r4
 1083050:	01c00044 	movi	r7,1
 1083054:	003fe306 	br	1082fe4 <__divsi3+0x8>
 1083058:	00c00044 	movi	r3,1
 108305c:	003fee06 	br	1083018 <__divsi3+0x3c>

01083060 <__modsi3>:
 1083060:	20001716 	blt	r4,zero,10830c0 <__modsi3+0x60>
 1083064:	000f883a 	mov	r7,zero
 1083068:	2005883a 	mov	r2,r4
 108306c:	28001216 	blt	r5,zero,10830b8 <__modsi3+0x58>
 1083070:	2900162e 	bgeu	r5,r4,10830cc <__modsi3+0x6c>
 1083074:	01800804 	movi	r6,32
 1083078:	00c00044 	movi	r3,1
 108307c:	00000106 	br	1083084 <__modsi3+0x24>
 1083080:	30000a26 	beq	r6,zero,10830ac <__modsi3+0x4c>
 1083084:	294b883a 	add	r5,r5,r5
 1083088:	31bfffc4 	addi	r6,r6,-1
 108308c:	18c7883a 	add	r3,r3,r3
 1083090:	293ffb36 	bltu	r5,r4,1083080 <__modsi3+0x20>
 1083094:	18000526 	beq	r3,zero,10830ac <__modsi3+0x4c>
 1083098:	1806d07a 	srli	r3,r3,1
 108309c:	11400136 	bltu	r2,r5,10830a4 <__modsi3+0x44>
 10830a0:	1145c83a 	sub	r2,r2,r5
 10830a4:	280ad07a 	srli	r5,r5,1
 10830a8:	183ffb1e 	bne	r3,zero,1083098 <__modsi3+0x38>
 10830ac:	38000126 	beq	r7,zero,10830b4 <__modsi3+0x54>
 10830b0:	0085c83a 	sub	r2,zero,r2
 10830b4:	f800283a 	ret
 10830b8:	014bc83a 	sub	r5,zero,r5
 10830bc:	003fec06 	br	1083070 <__modsi3+0x10>
 10830c0:	0109c83a 	sub	r4,zero,r4
 10830c4:	01c00044 	movi	r7,1
 10830c8:	003fe706 	br	1083068 <__modsi3+0x8>
 10830cc:	00c00044 	movi	r3,1
 10830d0:	003ff106 	br	1083098 <__modsi3+0x38>

010830d4 <__udivsi3>:
 10830d4:	200d883a 	mov	r6,r4
 10830d8:	2900152e 	bgeu	r5,r4,1083130 <__udivsi3+0x5c>
 10830dc:	28001416 	blt	r5,zero,1083130 <__udivsi3+0x5c>
 10830e0:	00800804 	movi	r2,32
 10830e4:	00c00044 	movi	r3,1
 10830e8:	00000206 	br	10830f4 <__udivsi3+0x20>
 10830ec:	10000e26 	beq	r2,zero,1083128 <__udivsi3+0x54>
 10830f0:	28000516 	blt	r5,zero,1083108 <__udivsi3+0x34>
 10830f4:	294b883a 	add	r5,r5,r5
 10830f8:	10bfffc4 	addi	r2,r2,-1
 10830fc:	18c7883a 	add	r3,r3,r3
 1083100:	293ffa36 	bltu	r5,r4,10830ec <__udivsi3+0x18>
 1083104:	18000826 	beq	r3,zero,1083128 <__udivsi3+0x54>
 1083108:	0005883a 	mov	r2,zero
 108310c:	31400236 	bltu	r6,r5,1083118 <__udivsi3+0x44>
 1083110:	314dc83a 	sub	r6,r6,r5
 1083114:	10c4b03a 	or	r2,r2,r3
 1083118:	1806d07a 	srli	r3,r3,1
 108311c:	280ad07a 	srli	r5,r5,1
 1083120:	183ffa1e 	bne	r3,zero,108310c <__udivsi3+0x38>
 1083124:	f800283a 	ret
 1083128:	0005883a 	mov	r2,zero
 108312c:	f800283a 	ret
 1083130:	00c00044 	movi	r3,1
 1083134:	003ff406 	br	1083108 <__udivsi3+0x34>

01083138 <__umodsi3>:
 1083138:	2005883a 	mov	r2,r4
 108313c:	2900122e 	bgeu	r5,r4,1083188 <__umodsi3+0x50>
 1083140:	28001116 	blt	r5,zero,1083188 <__umodsi3+0x50>
 1083144:	01800804 	movi	r6,32
 1083148:	00c00044 	movi	r3,1
 108314c:	00000206 	br	1083158 <__umodsi3+0x20>
 1083150:	30000c26 	beq	r6,zero,1083184 <__umodsi3+0x4c>
 1083154:	28000516 	blt	r5,zero,108316c <__umodsi3+0x34>
 1083158:	294b883a 	add	r5,r5,r5
 108315c:	31bfffc4 	addi	r6,r6,-1
 1083160:	18c7883a 	add	r3,r3,r3
 1083164:	293ffa36 	bltu	r5,r4,1083150 <__umodsi3+0x18>
 1083168:	18000626 	beq	r3,zero,1083184 <__umodsi3+0x4c>
 108316c:	1806d07a 	srli	r3,r3,1
 1083170:	11400136 	bltu	r2,r5,1083178 <__umodsi3+0x40>
 1083174:	1145c83a 	sub	r2,r2,r5
 1083178:	280ad07a 	srli	r5,r5,1
 108317c:	183ffb1e 	bne	r3,zero,108316c <__umodsi3+0x34>
 1083180:	f800283a 	ret
 1083184:	f800283a 	ret
 1083188:	00c00044 	movi	r3,1
 108318c:	003ff706 	br	108316c <__umodsi3+0x34>

01083190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1083190:	defffe04 	addi	sp,sp,-8
 1083194:	dfc00115 	stw	ra,4(sp)
 1083198:	df000015 	stw	fp,0(sp)
 108319c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10831a0:	d0a00917 	ldw	r2,-32732(gp)
 10831a4:	10000326 	beq	r2,zero,10831b4 <alt_get_errno+0x24>
 10831a8:	d0a00917 	ldw	r2,-32732(gp)
 10831ac:	103ee83a 	callr	r2
 10831b0:	00000106 	br	10831b8 <alt_get_errno+0x28>
 10831b4:	d0a6cd04 	addi	r2,gp,-25804
}
 10831b8:	e037883a 	mov	sp,fp
 10831bc:	dfc00117 	ldw	ra,4(sp)
 10831c0:	df000017 	ldw	fp,0(sp)
 10831c4:	dec00204 	addi	sp,sp,8
 10831c8:	f800283a 	ret

010831cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10831cc:	defffb04 	addi	sp,sp,-20
 10831d0:	dfc00415 	stw	ra,16(sp)
 10831d4:	df000315 	stw	fp,12(sp)
 10831d8:	df000304 	addi	fp,sp,12
 10831dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10831e0:	e0bfff17 	ldw	r2,-4(fp)
 10831e4:	10000616 	blt	r2,zero,1083200 <close+0x34>
 10831e8:	e0bfff17 	ldw	r2,-4(fp)
 10831ec:	10c00324 	muli	r3,r2,12
 10831f0:	00804234 	movhi	r2,264
 10831f4:	109c2d04 	addi	r2,r2,28852
 10831f8:	1885883a 	add	r2,r3,r2
 10831fc:	00000106 	br	1083204 <close+0x38>
 1083200:	0005883a 	mov	r2,zero
 1083204:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1083208:	e0bffd17 	ldw	r2,-12(fp)
 108320c:	10001926 	beq	r2,zero,1083274 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1083210:	e0bffd17 	ldw	r2,-12(fp)
 1083214:	10800017 	ldw	r2,0(r2)
 1083218:	10800417 	ldw	r2,16(r2)
 108321c:	10000626 	beq	r2,zero,1083238 <close+0x6c>
 1083220:	e0bffd17 	ldw	r2,-12(fp)
 1083224:	10800017 	ldw	r2,0(r2)
 1083228:	10800417 	ldw	r2,16(r2)
 108322c:	e13ffd17 	ldw	r4,-12(fp)
 1083230:	103ee83a 	callr	r2
 1083234:	00000106 	br	108323c <close+0x70>
 1083238:	0005883a 	mov	r2,zero
 108323c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1083240:	e13fff17 	ldw	r4,-4(fp)
 1083244:	108388c0 	call	108388c <alt_release_fd>
    if (rval < 0)
 1083248:	e0bffe17 	ldw	r2,-8(fp)
 108324c:	1000070e 	bge	r2,zero,108326c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1083250:	10831900 	call	1083190 <alt_get_errno>
 1083254:	1007883a 	mov	r3,r2
 1083258:	e0bffe17 	ldw	r2,-8(fp)
 108325c:	0085c83a 	sub	r2,zero,r2
 1083260:	18800015 	stw	r2,0(r3)
      return -1;
 1083264:	00bfffc4 	movi	r2,-1
 1083268:	00000706 	br	1083288 <close+0xbc>
    }
    return 0;
 108326c:	0005883a 	mov	r2,zero
 1083270:	00000506 	br	1083288 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1083274:	10831900 	call	1083190 <alt_get_errno>
 1083278:	1007883a 	mov	r3,r2
 108327c:	00801444 	movi	r2,81
 1083280:	18800015 	stw	r2,0(r3)
    return -1;
 1083284:	00bfffc4 	movi	r2,-1
  }
}
 1083288:	e037883a 	mov	sp,fp
 108328c:	dfc00117 	ldw	ra,4(sp)
 1083290:	df000017 	ldw	fp,0(sp)
 1083294:	dec00204 	addi	sp,sp,8
 1083298:	f800283a 	ret

0108329c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 108329c:	defffc04 	addi	sp,sp,-16
 10832a0:	df000315 	stw	fp,12(sp)
 10832a4:	df000304 	addi	fp,sp,12
 10832a8:	e13ffd15 	stw	r4,-12(fp)
 10832ac:	e17ffe15 	stw	r5,-8(fp)
 10832b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10832b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10832b8:	e037883a 	mov	sp,fp
 10832bc:	df000017 	ldw	fp,0(sp)
 10832c0:	dec00104 	addi	sp,sp,4
 10832c4:	f800283a 	ret

010832c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10832c8:	defffe04 	addi	sp,sp,-8
 10832cc:	dfc00115 	stw	ra,4(sp)
 10832d0:	df000015 	stw	fp,0(sp)
 10832d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10832d8:	d0a00917 	ldw	r2,-32732(gp)
 10832dc:	10000326 	beq	r2,zero,10832ec <alt_get_errno+0x24>
 10832e0:	d0a00917 	ldw	r2,-32732(gp)
 10832e4:	103ee83a 	callr	r2
 10832e8:	00000106 	br	10832f0 <alt_get_errno+0x28>
 10832ec:	d0a6cd04 	addi	r2,gp,-25804
}
 10832f0:	e037883a 	mov	sp,fp
 10832f4:	dfc00117 	ldw	ra,4(sp)
 10832f8:	df000017 	ldw	fp,0(sp)
 10832fc:	dec00204 	addi	sp,sp,8
 1083300:	f800283a 	ret

01083304 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1083304:	defffb04 	addi	sp,sp,-20
 1083308:	dfc00415 	stw	ra,16(sp)
 108330c:	df000315 	stw	fp,12(sp)
 1083310:	df000304 	addi	fp,sp,12
 1083314:	e13ffe15 	stw	r4,-8(fp)
 1083318:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 108331c:	e0bffe17 	ldw	r2,-8(fp)
 1083320:	10000616 	blt	r2,zero,108333c <fstat+0x38>
 1083324:	e0bffe17 	ldw	r2,-8(fp)
 1083328:	10c00324 	muli	r3,r2,12
 108332c:	00804234 	movhi	r2,264
 1083330:	109c2d04 	addi	r2,r2,28852
 1083334:	1885883a 	add	r2,r3,r2
 1083338:	00000106 	br	1083340 <fstat+0x3c>
 108333c:	0005883a 	mov	r2,zero
 1083340:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1083344:	e0bffd17 	ldw	r2,-12(fp)
 1083348:	10001026 	beq	r2,zero,108338c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 108334c:	e0bffd17 	ldw	r2,-12(fp)
 1083350:	10800017 	ldw	r2,0(r2)
 1083354:	10800817 	ldw	r2,32(r2)
 1083358:	10000726 	beq	r2,zero,1083378 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 108335c:	e0bffd17 	ldw	r2,-12(fp)
 1083360:	10800017 	ldw	r2,0(r2)
 1083364:	10800817 	ldw	r2,32(r2)
 1083368:	e17fff17 	ldw	r5,-4(fp)
 108336c:	e13ffd17 	ldw	r4,-12(fp)
 1083370:	103ee83a 	callr	r2
 1083374:	00000a06 	br	10833a0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1083378:	e0bfff17 	ldw	r2,-4(fp)
 108337c:	00c80004 	movi	r3,8192
 1083380:	10c00115 	stw	r3,4(r2)
      return 0;
 1083384:	0005883a 	mov	r2,zero
 1083388:	00000506 	br	10833a0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 108338c:	10832c80 	call	10832c8 <alt_get_errno>
 1083390:	1007883a 	mov	r3,r2
 1083394:	00801444 	movi	r2,81
 1083398:	18800015 	stw	r2,0(r3)
    return -1;
 108339c:	00bfffc4 	movi	r2,-1
  }
}
 10833a0:	e037883a 	mov	sp,fp
 10833a4:	dfc00117 	ldw	ra,4(sp)
 10833a8:	df000017 	ldw	fp,0(sp)
 10833ac:	dec00204 	addi	sp,sp,8
 10833b0:	f800283a 	ret

010833b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10833b4:	defffe04 	addi	sp,sp,-8
 10833b8:	dfc00115 	stw	ra,4(sp)
 10833bc:	df000015 	stw	fp,0(sp)
 10833c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10833c4:	d0a00917 	ldw	r2,-32732(gp)
 10833c8:	10000326 	beq	r2,zero,10833d8 <alt_get_errno+0x24>
 10833cc:	d0a00917 	ldw	r2,-32732(gp)
 10833d0:	103ee83a 	callr	r2
 10833d4:	00000106 	br	10833dc <alt_get_errno+0x28>
 10833d8:	d0a6cd04 	addi	r2,gp,-25804
}
 10833dc:	e037883a 	mov	sp,fp
 10833e0:	dfc00117 	ldw	ra,4(sp)
 10833e4:	df000017 	ldw	fp,0(sp)
 10833e8:	dec00204 	addi	sp,sp,8
 10833ec:	f800283a 	ret

010833f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10833f0:	deffed04 	addi	sp,sp,-76
 10833f4:	dfc01215 	stw	ra,72(sp)
 10833f8:	df001115 	stw	fp,68(sp)
 10833fc:	df001104 	addi	fp,sp,68
 1083400:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1083404:	e0bfff17 	ldw	r2,-4(fp)
 1083408:	10000616 	blt	r2,zero,1083424 <isatty+0x34>
 108340c:	e0bfff17 	ldw	r2,-4(fp)
 1083410:	10c00324 	muli	r3,r2,12
 1083414:	00804234 	movhi	r2,264
 1083418:	109c2d04 	addi	r2,r2,28852
 108341c:	1885883a 	add	r2,r3,r2
 1083420:	00000106 	br	1083428 <isatty+0x38>
 1083424:	0005883a 	mov	r2,zero
 1083428:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 108342c:	e0bfef17 	ldw	r2,-68(fp)
 1083430:	10000e26 	beq	r2,zero,108346c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1083434:	e0bfef17 	ldw	r2,-68(fp)
 1083438:	10800017 	ldw	r2,0(r2)
 108343c:	10800817 	ldw	r2,32(r2)
 1083440:	1000021e 	bne	r2,zero,108344c <isatty+0x5c>
    {
      return 1;
 1083444:	00800044 	movi	r2,1
 1083448:	00000d06 	br	1083480 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 108344c:	e0bff004 	addi	r2,fp,-64
 1083450:	100b883a 	mov	r5,r2
 1083454:	e13fff17 	ldw	r4,-4(fp)
 1083458:	10833040 	call	1083304 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 108345c:	e0bff117 	ldw	r2,-60(fp)
 1083460:	10880020 	cmpeqi	r2,r2,8192
 1083464:	10803fcc 	andi	r2,r2,255
 1083468:	00000506 	br	1083480 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 108346c:	10833b40 	call	10833b4 <alt_get_errno>
 1083470:	1007883a 	mov	r3,r2
 1083474:	00801444 	movi	r2,81
 1083478:	18800015 	stw	r2,0(r3)
    return 0;
 108347c:	0005883a 	mov	r2,zero
  }
}
 1083480:	e037883a 	mov	sp,fp
 1083484:	dfc00117 	ldw	ra,4(sp)
 1083488:	df000017 	ldw	fp,0(sp)
 108348c:	dec00204 	addi	sp,sp,8
 1083490:	f800283a 	ret

01083494 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1083494:	defffc04 	addi	sp,sp,-16
 1083498:	df000315 	stw	fp,12(sp)
 108349c:	df000304 	addi	fp,sp,12
 10834a0:	e13ffd15 	stw	r4,-12(fp)
 10834a4:	e17ffe15 	stw	r5,-8(fp)
 10834a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10834ac:	e0fffe17 	ldw	r3,-8(fp)
 10834b0:	e0bffd17 	ldw	r2,-12(fp)
 10834b4:	18800c26 	beq	r3,r2,10834e8 <alt_load_section+0x54>
  {
    while( to != end )
 10834b8:	00000806 	br	10834dc <alt_load_section+0x48>
    {
      *to++ = *from++;
 10834bc:	e0bffe17 	ldw	r2,-8(fp)
 10834c0:	10c00104 	addi	r3,r2,4
 10834c4:	e0fffe15 	stw	r3,-8(fp)
 10834c8:	e0fffd17 	ldw	r3,-12(fp)
 10834cc:	19000104 	addi	r4,r3,4
 10834d0:	e13ffd15 	stw	r4,-12(fp)
 10834d4:	18c00017 	ldw	r3,0(r3)
 10834d8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10834dc:	e0fffe17 	ldw	r3,-8(fp)
 10834e0:	e0bfff17 	ldw	r2,-4(fp)
 10834e4:	18bff51e 	bne	r3,r2,10834bc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10834e8:	0001883a 	nop
 10834ec:	e037883a 	mov	sp,fp
 10834f0:	df000017 	ldw	fp,0(sp)
 10834f4:	dec00104 	addi	sp,sp,4
 10834f8:	f800283a 	ret

010834fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10834fc:	defffe04 	addi	sp,sp,-8
 1083500:	dfc00115 	stw	ra,4(sp)
 1083504:	df000015 	stw	fp,0(sp)
 1083508:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 108350c:	01804274 	movhi	r6,265
 1083510:	31a0d404 	addi	r6,r6,-31920
 1083514:	01404234 	movhi	r5,264
 1083518:	295a1804 	addi	r5,r5,26720
 108351c:	01004274 	movhi	r4,265
 1083520:	2120d404 	addi	r4,r4,-31920
 1083524:	10834940 	call	1083494 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1083528:	01804234 	movhi	r6,264
 108352c:	31809204 	addi	r6,r6,584
 1083530:	01404234 	movhi	r5,264
 1083534:	29400804 	addi	r5,r5,32
 1083538:	01004234 	movhi	r4,264
 108353c:	21000804 	addi	r4,r4,32
 1083540:	10834940 	call	1083494 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1083544:	01804234 	movhi	r6,264
 1083548:	319a1804 	addi	r6,r6,26720
 108354c:	01404234 	movhi	r5,264
 1083550:	2959e904 	addi	r5,r5,26532
 1083554:	01004234 	movhi	r4,264
 1083558:	2119e904 	addi	r4,r4,26532
 108355c:	10834940 	call	1083494 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1083560:	10857b00 	call	10857b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1083564:	1085a280 	call	1085a28 <alt_icache_flush_all>
}
 1083568:	0001883a 	nop
 108356c:	e037883a 	mov	sp,fp
 1083570:	dfc00117 	ldw	ra,4(sp)
 1083574:	df000017 	ldw	fp,0(sp)
 1083578:	dec00204 	addi	sp,sp,8
 108357c:	f800283a 	ret

01083580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1083580:	defffe04 	addi	sp,sp,-8
 1083584:	dfc00115 	stw	ra,4(sp)
 1083588:	df000015 	stw	fp,0(sp)
 108358c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1083590:	d0a00917 	ldw	r2,-32732(gp)
 1083594:	10000326 	beq	r2,zero,10835a4 <alt_get_errno+0x24>
 1083598:	d0a00917 	ldw	r2,-32732(gp)
 108359c:	103ee83a 	callr	r2
 10835a0:	00000106 	br	10835a8 <alt_get_errno+0x28>
 10835a4:	d0a6cd04 	addi	r2,gp,-25804
}
 10835a8:	e037883a 	mov	sp,fp
 10835ac:	dfc00117 	ldw	ra,4(sp)
 10835b0:	df000017 	ldw	fp,0(sp)
 10835b4:	dec00204 	addi	sp,sp,8
 10835b8:	f800283a 	ret

010835bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10835bc:	defff904 	addi	sp,sp,-28
 10835c0:	dfc00615 	stw	ra,24(sp)
 10835c4:	df000515 	stw	fp,20(sp)
 10835c8:	df000504 	addi	fp,sp,20
 10835cc:	e13ffd15 	stw	r4,-12(fp)
 10835d0:	e17ffe15 	stw	r5,-8(fp)
 10835d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10835d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10835dc:	e0bffd17 	ldw	r2,-12(fp)
 10835e0:	10000616 	blt	r2,zero,10835fc <lseek+0x40>
 10835e4:	e0bffd17 	ldw	r2,-12(fp)
 10835e8:	10c00324 	muli	r3,r2,12
 10835ec:	00804234 	movhi	r2,264
 10835f0:	109c2d04 	addi	r2,r2,28852
 10835f4:	1885883a 	add	r2,r3,r2
 10835f8:	00000106 	br	1083600 <lseek+0x44>
 10835fc:	0005883a 	mov	r2,zero
 1083600:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1083604:	e0bffc17 	ldw	r2,-16(fp)
 1083608:	10001026 	beq	r2,zero,108364c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 108360c:	e0bffc17 	ldw	r2,-16(fp)
 1083610:	10800017 	ldw	r2,0(r2)
 1083614:	10800717 	ldw	r2,28(r2)
 1083618:	10000926 	beq	r2,zero,1083640 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 108361c:	e0bffc17 	ldw	r2,-16(fp)
 1083620:	10800017 	ldw	r2,0(r2)
 1083624:	10800717 	ldw	r2,28(r2)
 1083628:	e1bfff17 	ldw	r6,-4(fp)
 108362c:	e17ffe17 	ldw	r5,-8(fp)
 1083630:	e13ffc17 	ldw	r4,-16(fp)
 1083634:	103ee83a 	callr	r2
 1083638:	e0bffb15 	stw	r2,-20(fp)
 108363c:	00000506 	br	1083654 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1083640:	00bfde84 	movi	r2,-134
 1083644:	e0bffb15 	stw	r2,-20(fp)
 1083648:	00000206 	br	1083654 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 108364c:	00bfebc4 	movi	r2,-81
 1083650:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1083654:	e0bffb17 	ldw	r2,-20(fp)
 1083658:	1000070e 	bge	r2,zero,1083678 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 108365c:	10835800 	call	1083580 <alt_get_errno>
 1083660:	1007883a 	mov	r3,r2
 1083664:	e0bffb17 	ldw	r2,-20(fp)
 1083668:	0085c83a 	sub	r2,zero,r2
 108366c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1083670:	00bfffc4 	movi	r2,-1
 1083674:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1083678:	e0bffb17 	ldw	r2,-20(fp)
}
 108367c:	e037883a 	mov	sp,fp
 1083680:	dfc00117 	ldw	ra,4(sp)
 1083684:	df000017 	ldw	fp,0(sp)
 1083688:	dec00204 	addi	sp,sp,8
 108368c:	f800283a 	ret

01083690 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1083690:	defffd04 	addi	sp,sp,-12
 1083694:	dfc00215 	stw	ra,8(sp)
 1083698:	df000115 	stw	fp,4(sp)
 108369c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10836a0:	0009883a 	mov	r4,zero
 10836a4:	1083b080 	call	1083b08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10836a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10836ac:	1083b400 	call	1083b40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10836b0:	01804234 	movhi	r6,264
 10836b4:	319a0204 	addi	r6,r6,26632
 10836b8:	01404234 	movhi	r5,264
 10836bc:	295a0204 	addi	r5,r5,26632
 10836c0:	01004234 	movhi	r4,264
 10836c4:	211a0204 	addi	r4,r4,26632
 10836c8:	1085b200 	call	1085b20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10836cc:	10858d80 	call	10858d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10836d0:	01004234 	movhi	r4,264
 10836d4:	21164e04 	addi	r4,r4,22840
 10836d8:	10864100 	call	1086410 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10836dc:	d0a6ce17 	ldw	r2,-25800(gp)
 10836e0:	d0e6cf17 	ldw	r3,-25796(gp)
 10836e4:	d126d017 	ldw	r4,-25792(gp)
 10836e8:	200d883a 	mov	r6,r4
 10836ec:	180b883a 	mov	r5,r3
 10836f0:	1009883a 	mov	r4,r2
 10836f4:	10803240 	call	1080324 <main>
 10836f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10836fc:	01000044 	movi	r4,1
 1083700:	10831cc0 	call	10831cc <close>
  exit (result);
 1083704:	e13fff17 	ldw	r4,-4(fp)
 1083708:	10864240 	call	1086424 <exit>

0108370c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 108370c:	defffe04 	addi	sp,sp,-8
 1083710:	df000115 	stw	fp,4(sp)
 1083714:	df000104 	addi	fp,sp,4
 1083718:	e13fff15 	stw	r4,-4(fp)
}
 108371c:	0001883a 	nop
 1083720:	e037883a 	mov	sp,fp
 1083724:	df000017 	ldw	fp,0(sp)
 1083728:	dec00104 	addi	sp,sp,4
 108372c:	f800283a 	ret

01083730 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1083730:	defffe04 	addi	sp,sp,-8
 1083734:	df000115 	stw	fp,4(sp)
 1083738:	df000104 	addi	fp,sp,4
 108373c:	e13fff15 	stw	r4,-4(fp)
}
 1083740:	0001883a 	nop
 1083744:	e037883a 	mov	sp,fp
 1083748:	df000017 	ldw	fp,0(sp)
 108374c:	dec00104 	addi	sp,sp,4
 1083750:	f800283a 	ret

01083754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1083754:	defffe04 	addi	sp,sp,-8
 1083758:	dfc00115 	stw	ra,4(sp)
 108375c:	df000015 	stw	fp,0(sp)
 1083760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1083764:	d0a00917 	ldw	r2,-32732(gp)
 1083768:	10000326 	beq	r2,zero,1083778 <alt_get_errno+0x24>
 108376c:	d0a00917 	ldw	r2,-32732(gp)
 1083770:	103ee83a 	callr	r2
 1083774:	00000106 	br	108377c <alt_get_errno+0x28>
 1083778:	d0a6cd04 	addi	r2,gp,-25804
}
 108377c:	e037883a 	mov	sp,fp
 1083780:	dfc00117 	ldw	ra,4(sp)
 1083784:	df000017 	ldw	fp,0(sp)
 1083788:	dec00204 	addi	sp,sp,8
 108378c:	f800283a 	ret

01083790 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1083790:	defff904 	addi	sp,sp,-28
 1083794:	dfc00615 	stw	ra,24(sp)
 1083798:	df000515 	stw	fp,20(sp)
 108379c:	df000504 	addi	fp,sp,20
 10837a0:	e13ffd15 	stw	r4,-12(fp)
 10837a4:	e17ffe15 	stw	r5,-8(fp)
 10837a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10837ac:	e0bffd17 	ldw	r2,-12(fp)
 10837b0:	10000616 	blt	r2,zero,10837cc <read+0x3c>
 10837b4:	e0bffd17 	ldw	r2,-12(fp)
 10837b8:	10c00324 	muli	r3,r2,12
 10837bc:	00804234 	movhi	r2,264
 10837c0:	109c2d04 	addi	r2,r2,28852
 10837c4:	1885883a 	add	r2,r3,r2
 10837c8:	00000106 	br	10837d0 <read+0x40>
 10837cc:	0005883a 	mov	r2,zero
 10837d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10837d4:	e0bffb17 	ldw	r2,-20(fp)
 10837d8:	10002226 	beq	r2,zero,1083864 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10837dc:	e0bffb17 	ldw	r2,-20(fp)
 10837e0:	10800217 	ldw	r2,8(r2)
 10837e4:	108000cc 	andi	r2,r2,3
 10837e8:	10800060 	cmpeqi	r2,r2,1
 10837ec:	1000181e 	bne	r2,zero,1083850 <read+0xc0>
        (fd->dev->read))
 10837f0:	e0bffb17 	ldw	r2,-20(fp)
 10837f4:	10800017 	ldw	r2,0(r2)
 10837f8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10837fc:	10001426 	beq	r2,zero,1083850 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1083800:	e0bffb17 	ldw	r2,-20(fp)
 1083804:	10800017 	ldw	r2,0(r2)
 1083808:	10800517 	ldw	r2,20(r2)
 108380c:	e0ffff17 	ldw	r3,-4(fp)
 1083810:	180d883a 	mov	r6,r3
 1083814:	e17ffe17 	ldw	r5,-8(fp)
 1083818:	e13ffb17 	ldw	r4,-20(fp)
 108381c:	103ee83a 	callr	r2
 1083820:	e0bffc15 	stw	r2,-16(fp)
 1083824:	e0bffc17 	ldw	r2,-16(fp)
 1083828:	1000070e 	bge	r2,zero,1083848 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 108382c:	10837540 	call	1083754 <alt_get_errno>
 1083830:	1007883a 	mov	r3,r2
 1083834:	e0bffc17 	ldw	r2,-16(fp)
 1083838:	0085c83a 	sub	r2,zero,r2
 108383c:	18800015 	stw	r2,0(r3)
          return -1;
 1083840:	00bfffc4 	movi	r2,-1
 1083844:	00000c06 	br	1083878 <read+0xe8>
        }
        return rval;
 1083848:	e0bffc17 	ldw	r2,-16(fp)
 108384c:	00000a06 	br	1083878 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1083850:	10837540 	call	1083754 <alt_get_errno>
 1083854:	1007883a 	mov	r3,r2
 1083858:	00800344 	movi	r2,13
 108385c:	18800015 	stw	r2,0(r3)
 1083860:	00000406 	br	1083874 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1083864:	10837540 	call	1083754 <alt_get_errno>
 1083868:	1007883a 	mov	r3,r2
 108386c:	00801444 	movi	r2,81
 1083870:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1083874:	00bfffc4 	movi	r2,-1
}
 1083878:	e037883a 	mov	sp,fp
 108387c:	dfc00117 	ldw	ra,4(sp)
 1083880:	df000017 	ldw	fp,0(sp)
 1083884:	dec00204 	addi	sp,sp,8
 1083888:	f800283a 	ret

0108388c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 108388c:	defffe04 	addi	sp,sp,-8
 1083890:	df000115 	stw	fp,4(sp)
 1083894:	df000104 	addi	fp,sp,4
 1083898:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 108389c:	e0bfff17 	ldw	r2,-4(fp)
 10838a0:	108000d0 	cmplti	r2,r2,3
 10838a4:	10000d1e 	bne	r2,zero,10838dc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10838a8:	00804234 	movhi	r2,264
 10838ac:	109c2d04 	addi	r2,r2,28852
 10838b0:	e0ffff17 	ldw	r3,-4(fp)
 10838b4:	18c00324 	muli	r3,r3,12
 10838b8:	10c5883a 	add	r2,r2,r3
 10838bc:	10800204 	addi	r2,r2,8
 10838c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10838c4:	00804234 	movhi	r2,264
 10838c8:	109c2d04 	addi	r2,r2,28852
 10838cc:	e0ffff17 	ldw	r3,-4(fp)
 10838d0:	18c00324 	muli	r3,r3,12
 10838d4:	10c5883a 	add	r2,r2,r3
 10838d8:	10000015 	stw	zero,0(r2)
  }
}
 10838dc:	0001883a 	nop
 10838e0:	e037883a 	mov	sp,fp
 10838e4:	df000017 	ldw	fp,0(sp)
 10838e8:	dec00104 	addi	sp,sp,4
 10838ec:	f800283a 	ret

010838f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10838f0:	defff904 	addi	sp,sp,-28
 10838f4:	df000615 	stw	fp,24(sp)
 10838f8:	df000604 	addi	fp,sp,24
 10838fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1083900:	0005303a 	rdctl	r2,status
 1083904:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1083908:	e0fffe17 	ldw	r3,-8(fp)
 108390c:	00bfff84 	movi	r2,-2
 1083910:	1884703a 	and	r2,r3,r2
 1083914:	1001703a 	wrctl	status,r2
  
  return context;
 1083918:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 108391c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1083920:	d0a00a17 	ldw	r2,-32728(gp)
 1083924:	10c000c4 	addi	r3,r2,3
 1083928:	00bfff04 	movi	r2,-4
 108392c:	1884703a 	and	r2,r3,r2
 1083930:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1083934:	d0e00a17 	ldw	r3,-32728(gp)
 1083938:	e0bfff17 	ldw	r2,-4(fp)
 108393c:	1887883a 	add	r3,r3,r2
 1083940:	008043b4 	movhi	r2,270
 1083944:	1086a004 	addi	r2,r2,6784
 1083948:	10c0062e 	bgeu	r2,r3,1083964 <sbrk+0x74>
 108394c:	e0bffb17 	ldw	r2,-20(fp)
 1083950:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1083954:	e0bffa17 	ldw	r2,-24(fp)
 1083958:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 108395c:	00bfffc4 	movi	r2,-1
 1083960:	00000b06 	br	1083990 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1083964:	d0a00a17 	ldw	r2,-32728(gp)
 1083968:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 108396c:	d0e00a17 	ldw	r3,-32728(gp)
 1083970:	e0bfff17 	ldw	r2,-4(fp)
 1083974:	1885883a 	add	r2,r3,r2
 1083978:	d0a00a15 	stw	r2,-32728(gp)
 108397c:	e0bffb17 	ldw	r2,-20(fp)
 1083980:	e0bffc15 	stw	r2,-16(fp)
 1083984:	e0bffc17 	ldw	r2,-16(fp)
 1083988:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 108398c:	e0bffd17 	ldw	r2,-12(fp)
} 
 1083990:	e037883a 	mov	sp,fp
 1083994:	df000017 	ldw	fp,0(sp)
 1083998:	dec00104 	addi	sp,sp,4
 108399c:	f800283a 	ret

010839a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10839a0:	defffe04 	addi	sp,sp,-8
 10839a4:	dfc00115 	stw	ra,4(sp)
 10839a8:	df000015 	stw	fp,0(sp)
 10839ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10839b0:	d0a00917 	ldw	r2,-32732(gp)
 10839b4:	10000326 	beq	r2,zero,10839c4 <alt_get_errno+0x24>
 10839b8:	d0a00917 	ldw	r2,-32732(gp)
 10839bc:	103ee83a 	callr	r2
 10839c0:	00000106 	br	10839c8 <alt_get_errno+0x28>
 10839c4:	d0a6cd04 	addi	r2,gp,-25804
}
 10839c8:	e037883a 	mov	sp,fp
 10839cc:	dfc00117 	ldw	ra,4(sp)
 10839d0:	df000017 	ldw	fp,0(sp)
 10839d4:	dec00204 	addi	sp,sp,8
 10839d8:	f800283a 	ret

010839dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10839dc:	defff904 	addi	sp,sp,-28
 10839e0:	dfc00615 	stw	ra,24(sp)
 10839e4:	df000515 	stw	fp,20(sp)
 10839e8:	df000504 	addi	fp,sp,20
 10839ec:	e13ffd15 	stw	r4,-12(fp)
 10839f0:	e17ffe15 	stw	r5,-8(fp)
 10839f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10839f8:	e0bffd17 	ldw	r2,-12(fp)
 10839fc:	10000616 	blt	r2,zero,1083a18 <write+0x3c>
 1083a00:	e0bffd17 	ldw	r2,-12(fp)
 1083a04:	10c00324 	muli	r3,r2,12
 1083a08:	00804234 	movhi	r2,264
 1083a0c:	109c2d04 	addi	r2,r2,28852
 1083a10:	1885883a 	add	r2,r3,r2
 1083a14:	00000106 	br	1083a1c <write+0x40>
 1083a18:	0005883a 	mov	r2,zero
 1083a1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1083a20:	e0bffb17 	ldw	r2,-20(fp)
 1083a24:	10002126 	beq	r2,zero,1083aac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1083a28:	e0bffb17 	ldw	r2,-20(fp)
 1083a2c:	10800217 	ldw	r2,8(r2)
 1083a30:	108000cc 	andi	r2,r2,3
 1083a34:	10001826 	beq	r2,zero,1083a98 <write+0xbc>
 1083a38:	e0bffb17 	ldw	r2,-20(fp)
 1083a3c:	10800017 	ldw	r2,0(r2)
 1083a40:	10800617 	ldw	r2,24(r2)
 1083a44:	10001426 	beq	r2,zero,1083a98 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1083a48:	e0bffb17 	ldw	r2,-20(fp)
 1083a4c:	10800017 	ldw	r2,0(r2)
 1083a50:	10800617 	ldw	r2,24(r2)
 1083a54:	e0ffff17 	ldw	r3,-4(fp)
 1083a58:	180d883a 	mov	r6,r3
 1083a5c:	e17ffe17 	ldw	r5,-8(fp)
 1083a60:	e13ffb17 	ldw	r4,-20(fp)
 1083a64:	103ee83a 	callr	r2
 1083a68:	e0bffc15 	stw	r2,-16(fp)
 1083a6c:	e0bffc17 	ldw	r2,-16(fp)
 1083a70:	1000070e 	bge	r2,zero,1083a90 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1083a74:	10839a00 	call	10839a0 <alt_get_errno>
 1083a78:	1007883a 	mov	r3,r2
 1083a7c:	e0bffc17 	ldw	r2,-16(fp)
 1083a80:	0085c83a 	sub	r2,zero,r2
 1083a84:	18800015 	stw	r2,0(r3)
        return -1;
 1083a88:	00bfffc4 	movi	r2,-1
 1083a8c:	00000c06 	br	1083ac0 <write+0xe4>
      }
      return rval;
 1083a90:	e0bffc17 	ldw	r2,-16(fp)
 1083a94:	00000a06 	br	1083ac0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1083a98:	10839a00 	call	10839a0 <alt_get_errno>
 1083a9c:	1007883a 	mov	r3,r2
 1083aa0:	00800344 	movi	r2,13
 1083aa4:	18800015 	stw	r2,0(r3)
 1083aa8:	00000406 	br	1083abc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1083aac:	10839a00 	call	10839a0 <alt_get_errno>
 1083ab0:	1007883a 	mov	r3,r2
 1083ab4:	00801444 	movi	r2,81
 1083ab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1083abc:	00bfffc4 	movi	r2,-1
}
 1083ac0:	e037883a 	mov	sp,fp
 1083ac4:	dfc00117 	ldw	ra,4(sp)
 1083ac8:	df000017 	ldw	fp,0(sp)
 1083acc:	dec00204 	addi	sp,sp,8
 1083ad0:	f800283a 	ret

01083ad4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1083ad4:	defffd04 	addi	sp,sp,-12
 1083ad8:	dfc00215 	stw	ra,8(sp)
 1083adc:	df000115 	stw	fp,4(sp)
 1083ae0:	df000104 	addi	fp,sp,4
 1083ae4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1083ae8:	d1600604 	addi	r5,gp,-32744
 1083aec:	e13fff17 	ldw	r4,-4(fp)
 1083af0:	10858340 	call	1085834 <alt_dev_llist_insert>
}
 1083af4:	e037883a 	mov	sp,fp
 1083af8:	dfc00117 	ldw	ra,4(sp)
 1083afc:	df000017 	ldw	fp,0(sp)
 1083b00:	dec00204 	addi	sp,sp,8
 1083b04:	f800283a 	ret

01083b08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1083b08:	defffd04 	addi	sp,sp,-12
 1083b0c:	dfc00215 	stw	ra,8(sp)
 1083b10:	df000115 	stw	fp,4(sp)
 1083b14:	df000104 	addi	fp,sp,4
 1083b18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 1083b1c:	10861140 	call	1086114 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1083b20:	00800044 	movi	r2,1
 1083b24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1083b28:	0001883a 	nop
 1083b2c:	e037883a 	mov	sp,fp
 1083b30:	dfc00117 	ldw	ra,4(sp)
 1083b34:	df000017 	ldw	fp,0(sp)
 1083b38:	dec00204 	addi	sp,sp,8
 1083b3c:	f800283a 	ret

01083b40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1083b40:	defffd04 	addi	sp,sp,-12
 1083b44:	dfc00215 	stw	ra,8(sp)
 1083b48:	df000115 	stw	fp,4(sp)
 1083b4c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1083b50:	01800044 	movi	r6,1
 1083b54:	000b883a 	mov	r5,zero
 1083b58:	01004234 	movhi	r4,264
 1083b5c:	211c9704 	addi	r4,r4,29276
 1083b60:	1083ed40 	call	1083ed4 <altera_avalon_jtag_uart_init>
 1083b64:	01004234 	movhi	r4,264
 1083b68:	211c8d04 	addi	r4,r4,29236
 1083b6c:	1083ad40 	call	1083ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 1083b70:	01004274 	movhi	r4,265
 1083b74:	2120a504 	addi	r4,r4,-32108
 1083b78:	1083ad40 	call	1083ad4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 1083b7c:	00804274 	movhi	r2,265
 1083b80:	10a0b104 	addi	r2,r2,-32060
 1083b84:	10800a17 	ldw	r2,40(r2)
 1083b88:	10800017 	ldw	r2,0(r2)
 1083b8c:	1007883a 	mov	r3,r2
 1083b90:	00804274 	movhi	r2,265
 1083b94:	10a0b104 	addi	r2,r2,-32060
 1083b98:	10c00b15 	stw	r3,44(r2)
 1083b9c:	00804274 	movhi	r2,265
 1083ba0:	10a0b104 	addi	r2,r2,-32060
 1083ba4:	10800a17 	ldw	r2,40(r2)
 1083ba8:	10800104 	addi	r2,r2,4
 1083bac:	10800017 	ldw	r2,0(r2)
 1083bb0:	1007883a 	mov	r3,r2
 1083bb4:	00804274 	movhi	r2,265
 1083bb8:	10a0b104 	addi	r2,r2,-32060
 1083bbc:	10c00c15 	stw	r3,48(r2)
 1083bc0:	00804274 	movhi	r2,265
 1083bc4:	10a0b104 	addi	r2,r2,-32060
 1083bc8:	10800a17 	ldw	r2,40(r2)
 1083bcc:	10800204 	addi	r2,r2,8
 1083bd0:	10800017 	ldw	r2,0(r2)
 1083bd4:	10ffffcc 	andi	r3,r2,65535
 1083bd8:	00804274 	movhi	r2,265
 1083bdc:	10a0b104 	addi	r2,r2,-32060
 1083be0:	10c00f15 	stw	r3,60(r2)
 1083be4:	00804274 	movhi	r2,265
 1083be8:	10a0b104 	addi	r2,r2,-32060
 1083bec:	10800a17 	ldw	r2,40(r2)
 1083bf0:	10800204 	addi	r2,r2,8
 1083bf4:	10800017 	ldw	r2,0(r2)
 1083bf8:	1006d43a 	srli	r3,r2,16
 1083bfc:	00804274 	movhi	r2,265
 1083c00:	10a0b104 	addi	r2,r2,-32060
 1083c04:	10c01015 	stw	r3,64(r2)
 1083c08:	00804274 	movhi	r2,265
 1083c0c:	10a0b104 	addi	r2,r2,-32060
 1083c10:	10800a17 	ldw	r2,40(r2)
 1083c14:	10800304 	addi	r2,r2,12
 1083c18:	10800017 	ldw	r2,0(r2)
 1083c1c:	1005d07a 	srai	r2,r2,1
 1083c20:	10c0004c 	andi	r3,r2,1
 1083c24:	00804274 	movhi	r2,265
 1083c28:	10a0b104 	addi	r2,r2,-32060
 1083c2c:	10c00d15 	stw	r3,52(r2)
 1083c30:	00804274 	movhi	r2,265
 1083c34:	10a0b104 	addi	r2,r2,-32060
 1083c38:	10800a17 	ldw	r2,40(r2)
 1083c3c:	10800304 	addi	r2,r2,12
 1083c40:	10800017 	ldw	r2,0(r2)
 1083c44:	1005d13a 	srai	r2,r2,4
 1083c48:	10c003cc 	andi	r3,r2,15
 1083c4c:	00804274 	movhi	r2,265
 1083c50:	10a0b104 	addi	r2,r2,-32060
 1083c54:	10c00e15 	stw	r3,56(r2)
 1083c58:	00804274 	movhi	r2,265
 1083c5c:	10a0b104 	addi	r2,r2,-32060
 1083c60:	10800a17 	ldw	r2,40(r2)
 1083c64:	10800304 	addi	r2,r2,12
 1083c68:	10800017 	ldw	r2,0(r2)
 1083c6c:	1005d43a 	srai	r2,r2,16
 1083c70:	e0bfff05 	stb	r2,-4(fp)
 1083c74:	00804274 	movhi	r2,265
 1083c78:	10a0b104 	addi	r2,r2,-32060
 1083c7c:	10800a17 	ldw	r2,40(r2)
 1083c80:	10800304 	addi	r2,r2,12
 1083c84:	10800017 	ldw	r2,0(r2)
 1083c88:	1004d63a 	srli	r2,r2,24
 1083c8c:	e0bfff45 	stb	r2,-3(fp)
 1083c90:	00804274 	movhi	r2,265
 1083c94:	10a0b104 	addi	r2,r2,-32060
 1083c98:	10800e17 	ldw	r2,56(r2)
 1083c9c:	10800058 	cmpnei	r2,r2,1
 1083ca0:	1000041e 	bne	r2,zero,1083cb4 <alt_sys_init+0x174>
 1083ca4:	00804274 	movhi	r2,265
 1083ca8:	10a0b104 	addi	r2,r2,-32060
 1083cac:	10001115 	stw	zero,68(r2)
 1083cb0:	00000e06 	br	1083cec <alt_sys_init+0x1ac>
 1083cb4:	00804274 	movhi	r2,265
 1083cb8:	10a0b104 	addi	r2,r2,-32060
 1083cbc:	10800e17 	ldw	r2,56(r2)
 1083cc0:	10800098 	cmpnei	r2,r2,2
 1083cc4:	1000051e 	bne	r2,zero,1083cdc <alt_sys_init+0x19c>
 1083cc8:	00804274 	movhi	r2,265
 1083ccc:	10a0b104 	addi	r2,r2,-32060
 1083cd0:	00c00044 	movi	r3,1
 1083cd4:	10c01115 	stw	r3,68(r2)
 1083cd8:	00000406 	br	1083cec <alt_sys_init+0x1ac>
 1083cdc:	00804274 	movhi	r2,265
 1083ce0:	10a0b104 	addi	r2,r2,-32060
 1083ce4:	00c00084 	movi	r3,2
 1083ce8:	10c01115 	stw	r3,68(r2)
 1083cec:	e0bfff03 	ldbu	r2,-4(fp)
 1083cf0:	00c00804 	movi	r3,32
 1083cf4:	1885c83a 	sub	r2,r3,r2
 1083cf8:	00ffffc4 	movi	r3,-1
 1083cfc:	1886d83a 	srl	r3,r3,r2
 1083d00:	00804274 	movhi	r2,265
 1083d04:	10a0b104 	addi	r2,r2,-32060
 1083d08:	10c01215 	stw	r3,72(r2)
 1083d0c:	e0ffff03 	ldbu	r3,-4(fp)
 1083d10:	00804274 	movhi	r2,265
 1083d14:	10a0b104 	addi	r2,r2,-32060
 1083d18:	10801117 	ldw	r2,68(r2)
 1083d1c:	1887883a 	add	r3,r3,r2
 1083d20:	00804274 	movhi	r2,265
 1083d24:	10a0b104 	addi	r2,r2,-32060
 1083d28:	10c01315 	stw	r3,76(r2)
 1083d2c:	e0bfff43 	ldbu	r2,-3(fp)
 1083d30:	00c00804 	movi	r3,32
 1083d34:	1885c83a 	sub	r2,r3,r2
 1083d38:	00ffffc4 	movi	r3,-1
 1083d3c:	1886d83a 	srl	r3,r3,r2
 1083d40:	00804274 	movhi	r2,265
 1083d44:	10a0b104 	addi	r2,r2,-32060
 1083d48:	10c01415 	stw	r3,80(r2)
 1083d4c:	01004274 	movhi	r4,265
 1083d50:	2120b104 	addi	r4,r4,-32060
 1083d54:	1083ad40 	call	1083ad4 <alt_dev_reg>
}
 1083d58:	0001883a 	nop
 1083d5c:	e037883a 	mov	sp,fp
 1083d60:	dfc00117 	ldw	ra,4(sp)
 1083d64:	df000017 	ldw	fp,0(sp)
 1083d68:	dec00204 	addi	sp,sp,8
 1083d6c:	f800283a 	ret

01083d70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1083d70:	defffa04 	addi	sp,sp,-24
 1083d74:	dfc00515 	stw	ra,20(sp)
 1083d78:	df000415 	stw	fp,16(sp)
 1083d7c:	df000404 	addi	fp,sp,16
 1083d80:	e13ffd15 	stw	r4,-12(fp)
 1083d84:	e17ffe15 	stw	r5,-8(fp)
 1083d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1083d8c:	e0bffd17 	ldw	r2,-12(fp)
 1083d90:	10800017 	ldw	r2,0(r2)
 1083d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1083d98:	e0bffc17 	ldw	r2,-16(fp)
 1083d9c:	10c00a04 	addi	r3,r2,40
 1083da0:	e0bffd17 	ldw	r2,-12(fp)
 1083da4:	10800217 	ldw	r2,8(r2)
 1083da8:	100f883a 	mov	r7,r2
 1083dac:	e1bfff17 	ldw	r6,-4(fp)
 1083db0:	e17ffe17 	ldw	r5,-8(fp)
 1083db4:	1809883a 	mov	r4,r3
 1083db8:	10843900 	call	1084390 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1083dbc:	e037883a 	mov	sp,fp
 1083dc0:	dfc00117 	ldw	ra,4(sp)
 1083dc4:	df000017 	ldw	fp,0(sp)
 1083dc8:	dec00204 	addi	sp,sp,8
 1083dcc:	f800283a 	ret

01083dd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1083dd0:	defffa04 	addi	sp,sp,-24
 1083dd4:	dfc00515 	stw	ra,20(sp)
 1083dd8:	df000415 	stw	fp,16(sp)
 1083ddc:	df000404 	addi	fp,sp,16
 1083de0:	e13ffd15 	stw	r4,-12(fp)
 1083de4:	e17ffe15 	stw	r5,-8(fp)
 1083de8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1083dec:	e0bffd17 	ldw	r2,-12(fp)
 1083df0:	10800017 	ldw	r2,0(r2)
 1083df4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1083df8:	e0bffc17 	ldw	r2,-16(fp)
 1083dfc:	10c00a04 	addi	r3,r2,40
 1083e00:	e0bffd17 	ldw	r2,-12(fp)
 1083e04:	10800217 	ldw	r2,8(r2)
 1083e08:	100f883a 	mov	r7,r2
 1083e0c:	e1bfff17 	ldw	r6,-4(fp)
 1083e10:	e17ffe17 	ldw	r5,-8(fp)
 1083e14:	1809883a 	mov	r4,r3
 1083e18:	10845ac0 	call	10845ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1083e1c:	e037883a 	mov	sp,fp
 1083e20:	dfc00117 	ldw	ra,4(sp)
 1083e24:	df000017 	ldw	fp,0(sp)
 1083e28:	dec00204 	addi	sp,sp,8
 1083e2c:	f800283a 	ret

01083e30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1083e30:	defffc04 	addi	sp,sp,-16
 1083e34:	dfc00315 	stw	ra,12(sp)
 1083e38:	df000215 	stw	fp,8(sp)
 1083e3c:	df000204 	addi	fp,sp,8
 1083e40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1083e44:	e0bfff17 	ldw	r2,-4(fp)
 1083e48:	10800017 	ldw	r2,0(r2)
 1083e4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1083e50:	e0bffe17 	ldw	r2,-8(fp)
 1083e54:	10c00a04 	addi	r3,r2,40
 1083e58:	e0bfff17 	ldw	r2,-4(fp)
 1083e5c:	10800217 	ldw	r2,8(r2)
 1083e60:	100b883a 	mov	r5,r2
 1083e64:	1809883a 	mov	r4,r3
 1083e68:	10842380 	call	1084238 <altera_avalon_jtag_uart_close>
}
 1083e6c:	e037883a 	mov	sp,fp
 1083e70:	dfc00117 	ldw	ra,4(sp)
 1083e74:	df000017 	ldw	fp,0(sp)
 1083e78:	dec00204 	addi	sp,sp,8
 1083e7c:	f800283a 	ret

01083e80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1083e80:	defffa04 	addi	sp,sp,-24
 1083e84:	dfc00515 	stw	ra,20(sp)
 1083e88:	df000415 	stw	fp,16(sp)
 1083e8c:	df000404 	addi	fp,sp,16
 1083e90:	e13ffd15 	stw	r4,-12(fp)
 1083e94:	e17ffe15 	stw	r5,-8(fp)
 1083e98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1083e9c:	e0bffd17 	ldw	r2,-12(fp)
 1083ea0:	10800017 	ldw	r2,0(r2)
 1083ea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1083ea8:	e0bffc17 	ldw	r2,-16(fp)
 1083eac:	10800a04 	addi	r2,r2,40
 1083eb0:	e1bfff17 	ldw	r6,-4(fp)
 1083eb4:	e17ffe17 	ldw	r5,-8(fp)
 1083eb8:	1009883a 	mov	r4,r2
 1083ebc:	10842a00 	call	10842a0 <altera_avalon_jtag_uart_ioctl>
}
 1083ec0:	e037883a 	mov	sp,fp
 1083ec4:	dfc00117 	ldw	ra,4(sp)
 1083ec8:	df000017 	ldw	fp,0(sp)
 1083ecc:	dec00204 	addi	sp,sp,8
 1083ed0:	f800283a 	ret

01083ed4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1083ed4:	defffb04 	addi	sp,sp,-20
 1083ed8:	dfc00415 	stw	ra,16(sp)
 1083edc:	df000315 	stw	fp,12(sp)
 1083ee0:	df000304 	addi	fp,sp,12
 1083ee4:	e13ffd15 	stw	r4,-12(fp)
 1083ee8:	e17ffe15 	stw	r5,-8(fp)
 1083eec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1083ef0:	e0bffd17 	ldw	r2,-12(fp)
 1083ef4:	00c00044 	movi	r3,1
 1083ef8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1083efc:	e0bffd17 	ldw	r2,-12(fp)
 1083f00:	10800017 	ldw	r2,0(r2)
 1083f04:	10800104 	addi	r2,r2,4
 1083f08:	1007883a 	mov	r3,r2
 1083f0c:	e0bffd17 	ldw	r2,-12(fp)
 1083f10:	10800817 	ldw	r2,32(r2)
 1083f14:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1083f18:	e0bfff17 	ldw	r2,-4(fp)
 1083f1c:	01804234 	movhi	r6,264
 1083f20:	318fe204 	addi	r6,r6,16264
 1083f24:	e17ffd17 	ldw	r5,-12(fp)
 1083f28:	1009883a 	mov	r4,r2
 1083f2c:	1085b9c0 	call	1085b9c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1083f30:	e0bffd17 	ldw	r2,-12(fp)
 1083f34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1083f38:	e0bffd17 	ldw	r2,-12(fp)
 1083f3c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1083f40:	d0e6d217 	ldw	r3,-25784(gp)
 1083f44:	e1fffd17 	ldw	r7,-12(fp)
 1083f48:	01804234 	movhi	r6,264
 1083f4c:	31906604 	addi	r6,r6,16792
 1083f50:	180b883a 	mov	r5,r3
 1083f54:	1009883a 	mov	r4,r2
 1083f58:	10856840 	call	1085684 <alt_alarm_start>
 1083f5c:	1000040e 	bge	r2,zero,1083f70 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1083f60:	e0fffd17 	ldw	r3,-12(fp)
 1083f64:	00a00034 	movhi	r2,32768
 1083f68:	10bfffc4 	addi	r2,r2,-1
 1083f6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1083f70:	0001883a 	nop
 1083f74:	e037883a 	mov	sp,fp
 1083f78:	dfc00117 	ldw	ra,4(sp)
 1083f7c:	df000017 	ldw	fp,0(sp)
 1083f80:	dec00204 	addi	sp,sp,8
 1083f84:	f800283a 	ret

01083f88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1083f88:	defff704 	addi	sp,sp,-36
 1083f8c:	df000815 	stw	fp,32(sp)
 1083f90:	df000804 	addi	fp,sp,32
 1083f94:	e13ffe15 	stw	r4,-8(fp)
 1083f98:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1083f9c:	e0bffe17 	ldw	r2,-8(fp)
 1083fa0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 1083fa4:	e0bffa17 	ldw	r2,-24(fp)
 1083fa8:	10800017 	ldw	r2,0(r2)
 1083fac:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1083fb0:	e0bffb17 	ldw	r2,-20(fp)
 1083fb4:	10800104 	addi	r2,r2,4
 1083fb8:	10800037 	ldwio	r2,0(r2)
 1083fbc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1083fc0:	e0bffc17 	ldw	r2,-16(fp)
 1083fc4:	1080c00c 	andi	r2,r2,768
 1083fc8:	10006d26 	beq	r2,zero,1084180 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1083fcc:	e0bffc17 	ldw	r2,-16(fp)
 1083fd0:	1080400c 	andi	r2,r2,256
 1083fd4:	10003526 	beq	r2,zero,10840ac <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1083fd8:	00800074 	movhi	r2,1
 1083fdc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1083fe0:	e0bffa17 	ldw	r2,-24(fp)
 1083fe4:	10800a17 	ldw	r2,40(r2)
 1083fe8:	10800044 	addi	r2,r2,1
 1083fec:	1081ffcc 	andi	r2,r2,2047
 1083ff0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 1083ff4:	e0bffa17 	ldw	r2,-24(fp)
 1083ff8:	10c00b17 	ldw	r3,44(r2)
 1083ffc:	e0bffd17 	ldw	r2,-12(fp)
 1084000:	18801526 	beq	r3,r2,1084058 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1084004:	e0bffb17 	ldw	r2,-20(fp)
 1084008:	10800037 	ldwio	r2,0(r2)
 108400c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1084010:	e0bff817 	ldw	r2,-32(fp)
 1084014:	10a0000c 	andi	r2,r2,32768
 1084018:	10001126 	beq	r2,zero,1084060 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 108401c:	e0bffa17 	ldw	r2,-24(fp)
 1084020:	10800a17 	ldw	r2,40(r2)
 1084024:	e0fff817 	ldw	r3,-32(fp)
 1084028:	1809883a 	mov	r4,r3
 108402c:	e0fffa17 	ldw	r3,-24(fp)
 1084030:	1885883a 	add	r2,r3,r2
 1084034:	10800e04 	addi	r2,r2,56
 1084038:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108403c:	e0bffa17 	ldw	r2,-24(fp)
 1084040:	10800a17 	ldw	r2,40(r2)
 1084044:	10800044 	addi	r2,r2,1
 1084048:	10c1ffcc 	andi	r3,r2,2047
 108404c:	e0bffa17 	ldw	r2,-24(fp)
 1084050:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1084054:	003fe206 	br	1083fe0 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 1084058:	0001883a 	nop
 108405c:	00000106 	br	1084064 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 1084060:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1084064:	e0bff817 	ldw	r2,-32(fp)
 1084068:	10bfffec 	andhi	r2,r2,65535
 108406c:	10000f26 	beq	r2,zero,10840ac <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1084070:	e0bffa17 	ldw	r2,-24(fp)
 1084074:	10c00817 	ldw	r3,32(r2)
 1084078:	00bfff84 	movi	r2,-2
 108407c:	1886703a 	and	r3,r3,r2
 1084080:	e0bffa17 	ldw	r2,-24(fp)
 1084084:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1084088:	e0bffb17 	ldw	r2,-20(fp)
 108408c:	10800104 	addi	r2,r2,4
 1084090:	1007883a 	mov	r3,r2
 1084094:	e0bffa17 	ldw	r2,-24(fp)
 1084098:	10800817 	ldw	r2,32(r2)
 108409c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10840a0:	e0bffb17 	ldw	r2,-20(fp)
 10840a4:	10800104 	addi	r2,r2,4
 10840a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10840ac:	e0bffc17 	ldw	r2,-16(fp)
 10840b0:	1080800c 	andi	r2,r2,512
 10840b4:	103fbe26 	beq	r2,zero,1083fb0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10840b8:	e0bffc17 	ldw	r2,-16(fp)
 10840bc:	1004d43a 	srli	r2,r2,16
 10840c0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10840c4:	00001406 	br	1084118 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10840c8:	e0bffb17 	ldw	r2,-20(fp)
 10840cc:	e0fffa17 	ldw	r3,-24(fp)
 10840d0:	18c00d17 	ldw	r3,52(r3)
 10840d4:	e13ffa17 	ldw	r4,-24(fp)
 10840d8:	20c7883a 	add	r3,r4,r3
 10840dc:	18c20e04 	addi	r3,r3,2104
 10840e0:	18c00003 	ldbu	r3,0(r3)
 10840e4:	18c03fcc 	andi	r3,r3,255
 10840e8:	18c0201c 	xori	r3,r3,128
 10840ec:	18ffe004 	addi	r3,r3,-128
 10840f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10840f4:	e0bffa17 	ldw	r2,-24(fp)
 10840f8:	10800d17 	ldw	r2,52(r2)
 10840fc:	10800044 	addi	r2,r2,1
 1084100:	10c1ffcc 	andi	r3,r2,2047
 1084104:	e0bffa17 	ldw	r2,-24(fp)
 1084108:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 108410c:	e0bff917 	ldw	r2,-28(fp)
 1084110:	10bfffc4 	addi	r2,r2,-1
 1084114:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1084118:	e0bff917 	ldw	r2,-28(fp)
 108411c:	10000526 	beq	r2,zero,1084134 <altera_avalon_jtag_uart_irq+0x1ac>
 1084120:	e0bffa17 	ldw	r2,-24(fp)
 1084124:	10c00d17 	ldw	r3,52(r2)
 1084128:	e0bffa17 	ldw	r2,-24(fp)
 108412c:	10800c17 	ldw	r2,48(r2)
 1084130:	18bfe51e 	bne	r3,r2,10840c8 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1084134:	e0bff917 	ldw	r2,-28(fp)
 1084138:	103f9d26 	beq	r2,zero,1083fb0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 108413c:	e0bffa17 	ldw	r2,-24(fp)
 1084140:	10c00817 	ldw	r3,32(r2)
 1084144:	00bfff44 	movi	r2,-3
 1084148:	1886703a 	and	r3,r3,r2
 108414c:	e0bffa17 	ldw	r2,-24(fp)
 1084150:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1084154:	e0bffa17 	ldw	r2,-24(fp)
 1084158:	10800017 	ldw	r2,0(r2)
 108415c:	10800104 	addi	r2,r2,4
 1084160:	1007883a 	mov	r3,r2
 1084164:	e0bffa17 	ldw	r2,-24(fp)
 1084168:	10800817 	ldw	r2,32(r2)
 108416c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1084170:	e0bffb17 	ldw	r2,-20(fp)
 1084174:	10800104 	addi	r2,r2,4
 1084178:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 108417c:	003f8c06 	br	1083fb0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1084180:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1084184:	0001883a 	nop
 1084188:	e037883a 	mov	sp,fp
 108418c:	df000017 	ldw	fp,0(sp)
 1084190:	dec00104 	addi	sp,sp,4
 1084194:	f800283a 	ret

01084198 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1084198:	defff804 	addi	sp,sp,-32
 108419c:	df000715 	stw	fp,28(sp)
 10841a0:	df000704 	addi	fp,sp,28
 10841a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10841a8:	e0bffb17 	ldw	r2,-20(fp)
 10841ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10841b0:	e0bff917 	ldw	r2,-28(fp)
 10841b4:	10800017 	ldw	r2,0(r2)
 10841b8:	10800104 	addi	r2,r2,4
 10841bc:	10800037 	ldwio	r2,0(r2)
 10841c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10841c4:	e0bffa17 	ldw	r2,-24(fp)
 10841c8:	1081000c 	andi	r2,r2,1024
 10841cc:	10000b26 	beq	r2,zero,10841fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10841d0:	e0bff917 	ldw	r2,-28(fp)
 10841d4:	10800017 	ldw	r2,0(r2)
 10841d8:	10800104 	addi	r2,r2,4
 10841dc:	1007883a 	mov	r3,r2
 10841e0:	e0bff917 	ldw	r2,-28(fp)
 10841e4:	10800817 	ldw	r2,32(r2)
 10841e8:	10810014 	ori	r2,r2,1024
 10841ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10841f0:	e0bff917 	ldw	r2,-28(fp)
 10841f4:	10000915 	stw	zero,36(r2)
 10841f8:	00000a06 	br	1084224 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10841fc:	e0bff917 	ldw	r2,-28(fp)
 1084200:	10c00917 	ldw	r3,36(r2)
 1084204:	00a00034 	movhi	r2,32768
 1084208:	10bfff04 	addi	r2,r2,-4
 108420c:	10c00536 	bltu	r2,r3,1084224 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1084210:	e0bff917 	ldw	r2,-28(fp)
 1084214:	10800917 	ldw	r2,36(r2)
 1084218:	10c00044 	addi	r3,r2,1
 108421c:	e0bff917 	ldw	r2,-28(fp)
 1084220:	10c00915 	stw	r3,36(r2)
 1084224:	d0a6d217 	ldw	r2,-25784(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1084228:	e037883a 	mov	sp,fp
 108422c:	df000017 	ldw	fp,0(sp)
 1084230:	dec00104 	addi	sp,sp,4
 1084234:	f800283a 	ret

01084238 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1084238:	defffd04 	addi	sp,sp,-12
 108423c:	df000215 	stw	fp,8(sp)
 1084240:	df000204 	addi	fp,sp,8
 1084244:	e13ffe15 	stw	r4,-8(fp)
 1084248:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 108424c:	00000506 	br	1084264 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1084250:	e0bfff17 	ldw	r2,-4(fp)
 1084254:	1090000c 	andi	r2,r2,16384
 1084258:	10000226 	beq	r2,zero,1084264 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 108425c:	00bffd44 	movi	r2,-11
 1084260:	00000b06 	br	1084290 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1084264:	e0bffe17 	ldw	r2,-8(fp)
 1084268:	10c00d17 	ldw	r3,52(r2)
 108426c:	e0bffe17 	ldw	r2,-8(fp)
 1084270:	10800c17 	ldw	r2,48(r2)
 1084274:	18800526 	beq	r3,r2,108428c <altera_avalon_jtag_uart_close+0x54>
 1084278:	e0bffe17 	ldw	r2,-8(fp)
 108427c:	10c00917 	ldw	r3,36(r2)
 1084280:	e0bffe17 	ldw	r2,-8(fp)
 1084284:	10800117 	ldw	r2,4(r2)
 1084288:	18bff136 	bltu	r3,r2,1084250 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 108428c:	0005883a 	mov	r2,zero
}
 1084290:	e037883a 	mov	sp,fp
 1084294:	df000017 	ldw	fp,0(sp)
 1084298:	dec00104 	addi	sp,sp,4
 108429c:	f800283a 	ret

010842a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10842a0:	defffa04 	addi	sp,sp,-24
 10842a4:	df000515 	stw	fp,20(sp)
 10842a8:	df000504 	addi	fp,sp,20
 10842ac:	e13ffd15 	stw	r4,-12(fp)
 10842b0:	e17ffe15 	stw	r5,-8(fp)
 10842b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 10842b8:	00bff9c4 	movi	r2,-25
 10842bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 10842c0:	e0bffe17 	ldw	r2,-8(fp)
 10842c4:	10da8060 	cmpeqi	r3,r2,27137
 10842c8:	1800031e 	bne	r3,zero,10842d8 <altera_avalon_jtag_uart_ioctl+0x38>
 10842cc:	109a80a0 	cmpeqi	r2,r2,27138
 10842d0:	1000181e 	bne	r2,zero,1084334 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 10842d4:	00002906 	br	108437c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10842d8:	e0bffd17 	ldw	r2,-12(fp)
 10842dc:	10c00117 	ldw	r3,4(r2)
 10842e0:	00a00034 	movhi	r2,32768
 10842e4:	10bfffc4 	addi	r2,r2,-1
 10842e8:	18802126 	beq	r3,r2,1084370 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 10842ec:	e0bfff17 	ldw	r2,-4(fp)
 10842f0:	10800017 	ldw	r2,0(r2)
 10842f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10842f8:	e0bffc17 	ldw	r2,-16(fp)
 10842fc:	10800090 	cmplti	r2,r2,2
 1084300:	1000061e 	bne	r2,zero,108431c <altera_avalon_jtag_uart_ioctl+0x7c>
 1084304:	e0fffc17 	ldw	r3,-16(fp)
 1084308:	00a00034 	movhi	r2,32768
 108430c:	10bfffc4 	addi	r2,r2,-1
 1084310:	18800226 	beq	r3,r2,108431c <altera_avalon_jtag_uart_ioctl+0x7c>
 1084314:	e0bffc17 	ldw	r2,-16(fp)
 1084318:	00000206 	br	1084324 <altera_avalon_jtag_uart_ioctl+0x84>
 108431c:	00a00034 	movhi	r2,32768
 1084320:	10bfff84 	addi	r2,r2,-2
 1084324:	e0fffd17 	ldw	r3,-12(fp)
 1084328:	18800115 	stw	r2,4(r3)
      rc = 0;
 108432c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1084330:	00000f06 	br	1084370 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1084334:	e0bffd17 	ldw	r2,-12(fp)
 1084338:	10c00117 	ldw	r3,4(r2)
 108433c:	00a00034 	movhi	r2,32768
 1084340:	10bfffc4 	addi	r2,r2,-1
 1084344:	18800c26 	beq	r3,r2,1084378 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1084348:	e0bffd17 	ldw	r2,-12(fp)
 108434c:	10c00917 	ldw	r3,36(r2)
 1084350:	e0bffd17 	ldw	r2,-12(fp)
 1084354:	10800117 	ldw	r2,4(r2)
 1084358:	1885803a 	cmpltu	r2,r3,r2
 108435c:	10c03fcc 	andi	r3,r2,255
 1084360:	e0bfff17 	ldw	r2,-4(fp)
 1084364:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1084368:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 108436c:	00000206 	br	1084378 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1084370:	0001883a 	nop
 1084374:	00000106 	br	108437c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1084378:	0001883a 	nop

  default:
    break;
  }

  return rc;
 108437c:	e0bffb17 	ldw	r2,-20(fp)
}
 1084380:	e037883a 	mov	sp,fp
 1084384:	df000017 	ldw	fp,0(sp)
 1084388:	dec00104 	addi	sp,sp,4
 108438c:	f800283a 	ret

01084390 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1084390:	defff304 	addi	sp,sp,-52
 1084394:	dfc00c15 	stw	ra,48(sp)
 1084398:	df000b15 	stw	fp,44(sp)
 108439c:	df000b04 	addi	fp,sp,44
 10843a0:	e13ffc15 	stw	r4,-16(fp)
 10843a4:	e17ffd15 	stw	r5,-12(fp)
 10843a8:	e1bffe15 	stw	r6,-8(fp)
 10843ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 10843b0:	e0bffd17 	ldw	r2,-12(fp)
 10843b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10843b8:	00004706 	br	10844d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 10843bc:	e0bffc17 	ldw	r2,-16(fp)
 10843c0:	10800a17 	ldw	r2,40(r2)
 10843c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10843c8:	e0bffc17 	ldw	r2,-16(fp)
 10843cc:	10800b17 	ldw	r2,44(r2)
 10843d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 10843d4:	e0fff717 	ldw	r3,-36(fp)
 10843d8:	e0bff817 	ldw	r2,-32(fp)
 10843dc:	18800536 	bltu	r3,r2,10843f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10843e0:	e0fff717 	ldw	r3,-36(fp)
 10843e4:	e0bff817 	ldw	r2,-32(fp)
 10843e8:	1885c83a 	sub	r2,r3,r2
 10843ec:	e0bff615 	stw	r2,-40(fp)
 10843f0:	00000406 	br	1084404 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10843f4:	00c20004 	movi	r3,2048
 10843f8:	e0bff817 	ldw	r2,-32(fp)
 10843fc:	1885c83a 	sub	r2,r3,r2
 1084400:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1084404:	e0bff617 	ldw	r2,-40(fp)
 1084408:	10001e26 	beq	r2,zero,1084484 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 108440c:	e0fffe17 	ldw	r3,-8(fp)
 1084410:	e0bff617 	ldw	r2,-40(fp)
 1084414:	1880022e 	bgeu	r3,r2,1084420 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1084418:	e0bffe17 	ldw	r2,-8(fp)
 108441c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1084420:	e0bffc17 	ldw	r2,-16(fp)
 1084424:	10c00e04 	addi	r3,r2,56
 1084428:	e0bff817 	ldw	r2,-32(fp)
 108442c:	1885883a 	add	r2,r3,r2
 1084430:	e1bff617 	ldw	r6,-40(fp)
 1084434:	100b883a 	mov	r5,r2
 1084438:	e13ff517 	ldw	r4,-44(fp)
 108443c:	10818080 	call	1081808 <memcpy>
      ptr   += n;
 1084440:	e0fff517 	ldw	r3,-44(fp)
 1084444:	e0bff617 	ldw	r2,-40(fp)
 1084448:	1885883a 	add	r2,r3,r2
 108444c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1084450:	e0fffe17 	ldw	r3,-8(fp)
 1084454:	e0bff617 	ldw	r2,-40(fp)
 1084458:	1885c83a 	sub	r2,r3,r2
 108445c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1084460:	e0fff817 	ldw	r3,-32(fp)
 1084464:	e0bff617 	ldw	r2,-40(fp)
 1084468:	1885883a 	add	r2,r3,r2
 108446c:	10c1ffcc 	andi	r3,r2,2047
 1084470:	e0bffc17 	ldw	r2,-16(fp)
 1084474:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1084478:	e0bffe17 	ldw	r2,-8(fp)
 108447c:	00bfcf16 	blt	zero,r2,10843bc <altera_avalon_jtag_uart_read+0x2c>
 1084480:	00000106 	br	1084488 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1084484:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1084488:	e0fff517 	ldw	r3,-44(fp)
 108448c:	e0bffd17 	ldw	r2,-12(fp)
 1084490:	1880141e 	bne	r3,r2,10844e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1084494:	e0bfff17 	ldw	r2,-4(fp)
 1084498:	1090000c 	andi	r2,r2,16384
 108449c:	1000131e 	bne	r2,zero,10844ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10844a0:	0001883a 	nop
 10844a4:	e0bffc17 	ldw	r2,-16(fp)
 10844a8:	10c00a17 	ldw	r3,40(r2)
 10844ac:	e0bff717 	ldw	r2,-36(fp)
 10844b0:	1880051e 	bne	r3,r2,10844c8 <altera_avalon_jtag_uart_read+0x138>
 10844b4:	e0bffc17 	ldw	r2,-16(fp)
 10844b8:	10c00917 	ldw	r3,36(r2)
 10844bc:	e0bffc17 	ldw	r2,-16(fp)
 10844c0:	10800117 	ldw	r2,4(r2)
 10844c4:	18bff736 	bltu	r3,r2,10844a4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10844c8:	e0bffc17 	ldw	r2,-16(fp)
 10844cc:	10c00a17 	ldw	r3,40(r2)
 10844d0:	e0bff717 	ldw	r2,-36(fp)
 10844d4:	18800726 	beq	r3,r2,10844f4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10844d8:	e0bffe17 	ldw	r2,-8(fp)
 10844dc:	00bfb716 	blt	zero,r2,10843bc <altera_avalon_jtag_uart_read+0x2c>
 10844e0:	00000506 	br	10844f8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 10844e4:	0001883a 	nop
 10844e8:	00000306 	br	10844f8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 10844ec:	0001883a 	nop
 10844f0:	00000106 	br	10844f8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 10844f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10844f8:	e0fff517 	ldw	r3,-44(fp)
 10844fc:	e0bffd17 	ldw	r2,-12(fp)
 1084500:	18801826 	beq	r3,r2,1084564 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1084504:	0005303a 	rdctl	r2,status
 1084508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108450c:	e0fffb17 	ldw	r3,-20(fp)
 1084510:	00bfff84 	movi	r2,-2
 1084514:	1884703a 	and	r2,r3,r2
 1084518:	1001703a 	wrctl	status,r2
  
  return context;
 108451c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1084520:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1084524:	e0bffc17 	ldw	r2,-16(fp)
 1084528:	10800817 	ldw	r2,32(r2)
 108452c:	10c00054 	ori	r3,r2,1
 1084530:	e0bffc17 	ldw	r2,-16(fp)
 1084534:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1084538:	e0bffc17 	ldw	r2,-16(fp)
 108453c:	10800017 	ldw	r2,0(r2)
 1084540:	10800104 	addi	r2,r2,4
 1084544:	1007883a 	mov	r3,r2
 1084548:	e0bffc17 	ldw	r2,-16(fp)
 108454c:	10800817 	ldw	r2,32(r2)
 1084550:	18800035 	stwio	r2,0(r3)
 1084554:	e0bffa17 	ldw	r2,-24(fp)
 1084558:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108455c:	e0bff917 	ldw	r2,-28(fp)
 1084560:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1084564:	e0fff517 	ldw	r3,-44(fp)
 1084568:	e0bffd17 	ldw	r2,-12(fp)
 108456c:	18800426 	beq	r3,r2,1084580 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1084570:	e0fff517 	ldw	r3,-44(fp)
 1084574:	e0bffd17 	ldw	r2,-12(fp)
 1084578:	1885c83a 	sub	r2,r3,r2
 108457c:	00000606 	br	1084598 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1084580:	e0bfff17 	ldw	r2,-4(fp)
 1084584:	1090000c 	andi	r2,r2,16384
 1084588:	10000226 	beq	r2,zero,1084594 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 108458c:	00bffd44 	movi	r2,-11
 1084590:	00000106 	br	1084598 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1084594:	00bffec4 	movi	r2,-5
}
 1084598:	e037883a 	mov	sp,fp
 108459c:	dfc00117 	ldw	ra,4(sp)
 10845a0:	df000017 	ldw	fp,0(sp)
 10845a4:	dec00204 	addi	sp,sp,8
 10845a8:	f800283a 	ret

010845ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10845ac:	defff304 	addi	sp,sp,-52
 10845b0:	dfc00c15 	stw	ra,48(sp)
 10845b4:	df000b15 	stw	fp,44(sp)
 10845b8:	df000b04 	addi	fp,sp,44
 10845bc:	e13ffc15 	stw	r4,-16(fp)
 10845c0:	e17ffd15 	stw	r5,-12(fp)
 10845c4:	e1bffe15 	stw	r6,-8(fp)
 10845c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10845cc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10845d0:	e0bffd17 	ldw	r2,-12(fp)
 10845d4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10845d8:	00003706 	br	10846b8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10845dc:	e0bffc17 	ldw	r2,-16(fp)
 10845e0:	10800c17 	ldw	r2,48(r2)
 10845e4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 10845e8:	e0bffc17 	ldw	r2,-16(fp)
 10845ec:	10800d17 	ldw	r2,52(r2)
 10845f0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 10845f4:	e0fff917 	ldw	r3,-28(fp)
 10845f8:	e0bff517 	ldw	r2,-44(fp)
 10845fc:	1880062e 	bgeu	r3,r2,1084618 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1084600:	e0fff517 	ldw	r3,-44(fp)
 1084604:	e0bff917 	ldw	r2,-28(fp)
 1084608:	1885c83a 	sub	r2,r3,r2
 108460c:	10bfffc4 	addi	r2,r2,-1
 1084610:	e0bff615 	stw	r2,-40(fp)
 1084614:	00000b06 	br	1084644 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1084618:	e0bff517 	ldw	r2,-44(fp)
 108461c:	10000526 	beq	r2,zero,1084634 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1084620:	00c20004 	movi	r3,2048
 1084624:	e0bff917 	ldw	r2,-28(fp)
 1084628:	1885c83a 	sub	r2,r3,r2
 108462c:	e0bff615 	stw	r2,-40(fp)
 1084630:	00000406 	br	1084644 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1084634:	00c1ffc4 	movi	r3,2047
 1084638:	e0bff917 	ldw	r2,-28(fp)
 108463c:	1885c83a 	sub	r2,r3,r2
 1084640:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1084644:	e0bff617 	ldw	r2,-40(fp)
 1084648:	10001e26 	beq	r2,zero,10846c4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 108464c:	e0fffe17 	ldw	r3,-8(fp)
 1084650:	e0bff617 	ldw	r2,-40(fp)
 1084654:	1880022e 	bgeu	r3,r2,1084660 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1084658:	e0bffe17 	ldw	r2,-8(fp)
 108465c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1084660:	e0bffc17 	ldw	r2,-16(fp)
 1084664:	10c20e04 	addi	r3,r2,2104
 1084668:	e0bff917 	ldw	r2,-28(fp)
 108466c:	1885883a 	add	r2,r3,r2
 1084670:	e1bff617 	ldw	r6,-40(fp)
 1084674:	e17ffd17 	ldw	r5,-12(fp)
 1084678:	1009883a 	mov	r4,r2
 108467c:	10818080 	call	1081808 <memcpy>
      ptr   += n;
 1084680:	e0fffd17 	ldw	r3,-12(fp)
 1084684:	e0bff617 	ldw	r2,-40(fp)
 1084688:	1885883a 	add	r2,r3,r2
 108468c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1084690:	e0fffe17 	ldw	r3,-8(fp)
 1084694:	e0bff617 	ldw	r2,-40(fp)
 1084698:	1885c83a 	sub	r2,r3,r2
 108469c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10846a0:	e0fff917 	ldw	r3,-28(fp)
 10846a4:	e0bff617 	ldw	r2,-40(fp)
 10846a8:	1885883a 	add	r2,r3,r2
 10846ac:	10c1ffcc 	andi	r3,r2,2047
 10846b0:	e0bffc17 	ldw	r2,-16(fp)
 10846b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10846b8:	e0bffe17 	ldw	r2,-8(fp)
 10846bc:	00bfc716 	blt	zero,r2,10845dc <altera_avalon_jtag_uart_write+0x30>
 10846c0:	00000106 	br	10846c8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 10846c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10846c8:	0005303a 	rdctl	r2,status
 10846cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10846d0:	e0fffb17 	ldw	r3,-20(fp)
 10846d4:	00bfff84 	movi	r2,-2
 10846d8:	1884703a 	and	r2,r3,r2
 10846dc:	1001703a 	wrctl	status,r2
  
  return context;
 10846e0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10846e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10846e8:	e0bffc17 	ldw	r2,-16(fp)
 10846ec:	10800817 	ldw	r2,32(r2)
 10846f0:	10c00094 	ori	r3,r2,2
 10846f4:	e0bffc17 	ldw	r2,-16(fp)
 10846f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10846fc:	e0bffc17 	ldw	r2,-16(fp)
 1084700:	10800017 	ldw	r2,0(r2)
 1084704:	10800104 	addi	r2,r2,4
 1084708:	1007883a 	mov	r3,r2
 108470c:	e0bffc17 	ldw	r2,-16(fp)
 1084710:	10800817 	ldw	r2,32(r2)
 1084714:	18800035 	stwio	r2,0(r3)
 1084718:	e0bffa17 	ldw	r2,-24(fp)
 108471c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1084720:	e0bff817 	ldw	r2,-32(fp)
 1084724:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1084728:	e0bffe17 	ldw	r2,-8(fp)
 108472c:	0080100e 	bge	zero,r2,1084770 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1084730:	e0bfff17 	ldw	r2,-4(fp)
 1084734:	1090000c 	andi	r2,r2,16384
 1084738:	1000101e 	bne	r2,zero,108477c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 108473c:	0001883a 	nop
 1084740:	e0bffc17 	ldw	r2,-16(fp)
 1084744:	10c00d17 	ldw	r3,52(r2)
 1084748:	e0bff517 	ldw	r2,-44(fp)
 108474c:	1880051e 	bne	r3,r2,1084764 <altera_avalon_jtag_uart_write+0x1b8>
 1084750:	e0bffc17 	ldw	r2,-16(fp)
 1084754:	10c00917 	ldw	r3,36(r2)
 1084758:	e0bffc17 	ldw	r2,-16(fp)
 108475c:	10800117 	ldw	r2,4(r2)
 1084760:	18bff736 	bltu	r3,r2,1084740 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1084764:	e0bffc17 	ldw	r2,-16(fp)
 1084768:	10800917 	ldw	r2,36(r2)
 108476c:	1000051e 	bne	r2,zero,1084784 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1084770:	e0bffe17 	ldw	r2,-8(fp)
 1084774:	00bfd016 	blt	zero,r2,10846b8 <altera_avalon_jtag_uart_write+0x10c>
 1084778:	00000306 	br	1084788 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 108477c:	0001883a 	nop
 1084780:	00000106 	br	1084788 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1084784:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1084788:	e0fffd17 	ldw	r3,-12(fp)
 108478c:	e0bff717 	ldw	r2,-36(fp)
 1084790:	18800426 	beq	r3,r2,10847a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1084794:	e0fffd17 	ldw	r3,-12(fp)
 1084798:	e0bff717 	ldw	r2,-36(fp)
 108479c:	1885c83a 	sub	r2,r3,r2
 10847a0:	00000606 	br	10847bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 10847a4:	e0bfff17 	ldw	r2,-4(fp)
 10847a8:	1090000c 	andi	r2,r2,16384
 10847ac:	10000226 	beq	r2,zero,10847b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 10847b0:	00bffd44 	movi	r2,-11
 10847b4:	00000106 	br	10847bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 10847b8:	00bffec4 	movi	r2,-5
}
 10847bc:	e037883a 	mov	sp,fp
 10847c0:	dfc00117 	ldw	ra,4(sp)
 10847c4:	df000017 	ldw	fp,0(sp)
 10847c8:	dec00204 	addi	sp,sp,8
 10847cc:	f800283a 	ret

010847d0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 10847d0:	defffc04 	addi	sp,sp,-16
 10847d4:	dfc00315 	stw	ra,12(sp)
 10847d8:	df000215 	stw	fp,8(sp)
 10847dc:	df000204 	addi	fp,sp,8
 10847e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 10847e4:	d1600604 	addi	r5,gp,-32744
 10847e8:	e13fff17 	ldw	r4,-4(fp)
 10847ec:	10859980 	call	1085998 <alt_find_dev>
 10847f0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10847f4:	e0bffe17 	ldw	r2,-8(fp)
}
 10847f8:	e037883a 	mov	sp,fp
 10847fc:	dfc00117 	ldw	ra,4(sp)
 1084800:	df000017 	ldw	fp,0(sp)
 1084804:	dec00204 	addi	sp,sp,8
 1084808:	f800283a 	ret

0108480c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 108480c:	defffa04 	addi	sp,sp,-24
 1084810:	df000515 	stw	fp,20(sp)
 1084814:	df000504 	addi	fp,sp,20
 1084818:	e13ffc15 	stw	r4,-16(fp)
 108481c:	e17ffd15 	stw	r5,-12(fp)
 1084820:	e1bffe15 	stw	r6,-8(fp)
 1084824:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 1084828:	e0bffc17 	ldw	r2,-16(fp)
 108482c:	10800f17 	ldw	r2,60(r2)
 1084830:	e0fffe17 	ldw	r3,-8(fp)
 1084834:	1880042e 	bgeu	r3,r2,1084848 <alt_up_pixel_buffer_dma_draw+0x3c>
 1084838:	e0bffc17 	ldw	r2,-16(fp)
 108483c:	10801017 	ldw	r2,64(r2)
 1084840:	e0ffff17 	ldw	r3,-4(fp)
 1084844:	18800236 	bltu	r3,r2,1084850 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 1084848:	00bfffc4 	movi	r2,-1
 108484c:	00005006 	br	1084990 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 1084850:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1084854:	e0bffc17 	ldw	r2,-16(fp)
 1084858:	10800d17 	ldw	r2,52(r2)
 108485c:	1000151e 	bne	r2,zero,10848b4 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 1084860:	e0bffc17 	ldw	r2,-16(fp)
 1084864:	10c01217 	ldw	r3,72(r2)
 1084868:	e0bffe17 	ldw	r2,-8(fp)
 108486c:	1886703a 	and	r3,r3,r2
 1084870:	e0bffc17 	ldw	r2,-16(fp)
 1084874:	10801117 	ldw	r2,68(r2)
 1084878:	1884983a 	sll	r2,r3,r2
 108487c:	e0fffb17 	ldw	r3,-20(fp)
 1084880:	1885883a 	add	r2,r3,r2
 1084884:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 1084888:	e0bffc17 	ldw	r2,-16(fp)
 108488c:	10c01417 	ldw	r3,80(r2)
 1084890:	e0bfff17 	ldw	r2,-4(fp)
 1084894:	1886703a 	and	r3,r3,r2
 1084898:	e0bffc17 	ldw	r2,-16(fp)
 108489c:	10801317 	ldw	r2,76(r2)
 10848a0:	1884983a 	sll	r2,r3,r2
 10848a4:	e0fffb17 	ldw	r3,-20(fp)
 10848a8:	1885883a 	add	r2,r3,r2
 10848ac:	e0bffb15 	stw	r2,-20(fp)
 10848b0:	00001706 	br	1084910 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 10848b4:	e0bffc17 	ldw	r2,-16(fp)
 10848b8:	10c01217 	ldw	r3,72(r2)
 10848bc:	e0bffe17 	ldw	r2,-8(fp)
 10848c0:	1886703a 	and	r3,r3,r2
 10848c4:	e0bffc17 	ldw	r2,-16(fp)
 10848c8:	10801117 	ldw	r2,68(r2)
 10848cc:	1884983a 	sll	r2,r3,r2
 10848d0:	e0fffb17 	ldw	r3,-20(fp)
 10848d4:	1885883a 	add	r2,r3,r2
 10848d8:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 10848dc:	e0bffc17 	ldw	r2,-16(fp)
 10848e0:	10c01417 	ldw	r3,80(r2)
 10848e4:	e0bfff17 	ldw	r2,-4(fp)
 10848e8:	1886703a 	and	r3,r3,r2
 10848ec:	e0bffc17 	ldw	r2,-16(fp)
 10848f0:	10800f17 	ldw	r2,60(r2)
 10848f4:	1887383a 	mul	r3,r3,r2
 10848f8:	e0bffc17 	ldw	r2,-16(fp)
 10848fc:	10801117 	ldw	r2,68(r2)
 1084900:	1884983a 	sll	r2,r3,r2
 1084904:	e0fffb17 	ldw	r3,-20(fp)
 1084908:	1885883a 	add	r2,r3,r2
 108490c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1084910:	e0bffc17 	ldw	r2,-16(fp)
 1084914:	10800e17 	ldw	r2,56(r2)
 1084918:	10800058 	cmpnei	r2,r2,1
 108491c:	1000081e 	bne	r2,zero,1084940 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 1084920:	e0bffc17 	ldw	r2,-16(fp)
 1084924:	10c00c17 	ldw	r3,48(r2)
 1084928:	e0bffb17 	ldw	r2,-20(fp)
 108492c:	1885883a 	add	r2,r3,r2
 1084930:	1007883a 	mov	r3,r2
 1084934:	e0bffd17 	ldw	r2,-12(fp)
 1084938:	18800025 	stbio	r2,0(r3)
 108493c:	00001306 	br	108498c <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1084940:	e0bffc17 	ldw	r2,-16(fp)
 1084944:	10800e17 	ldw	r2,56(r2)
 1084948:	10800098 	cmpnei	r2,r2,2
 108494c:	1000081e 	bne	r2,zero,1084970 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 1084950:	e0bffc17 	ldw	r2,-16(fp)
 1084954:	10c00c17 	ldw	r3,48(r2)
 1084958:	e0bffb17 	ldw	r2,-20(fp)
 108495c:	1885883a 	add	r2,r3,r2
 1084960:	1007883a 	mov	r3,r2
 1084964:	e0bffd17 	ldw	r2,-12(fp)
 1084968:	1880002d 	sthio	r2,0(r3)
 108496c:	00000706 	br	108498c <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 1084970:	e0bffc17 	ldw	r2,-16(fp)
 1084974:	10c00c17 	ldw	r3,48(r2)
 1084978:	e0bffb17 	ldw	r2,-20(fp)
 108497c:	1885883a 	add	r2,r3,r2
 1084980:	1007883a 	mov	r3,r2
 1084984:	e0bffd17 	ldw	r2,-12(fp)
 1084988:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 108498c:	0005883a 	mov	r2,zero
}
 1084990:	e037883a 	mov	sp,fp
 1084994:	df000017 	ldw	fp,0(sp)
 1084998:	dec00104 	addi	sp,sp,4
 108499c:	f800283a 	ret

010849a0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 10849a0:	defffd04 	addi	sp,sp,-12
 10849a4:	df000215 	stw	fp,8(sp)
 10849a8:	df000204 	addi	fp,sp,8
 10849ac:	e13ffe15 	stw	r4,-8(fp)
 10849b0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 10849b4:	e0bffe17 	ldw	r2,-8(fp)
 10849b8:	10800a17 	ldw	r2,40(r2)
 10849bc:	10800104 	addi	r2,r2,4
 10849c0:	1007883a 	mov	r3,r2
 10849c4:	e0bfff17 	ldw	r2,-4(fp)
 10849c8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 10849cc:	e0bffe17 	ldw	r2,-8(fp)
 10849d0:	10800a17 	ldw	r2,40(r2)
 10849d4:	10800104 	addi	r2,r2,4
 10849d8:	10800037 	ldwio	r2,0(r2)
 10849dc:	1007883a 	mov	r3,r2
 10849e0:	e0bffe17 	ldw	r2,-8(fp)
 10849e4:	10c00c15 	stw	r3,48(r2)
	return 0;
 10849e8:	0005883a 	mov	r2,zero
}
 10849ec:	e037883a 	mov	sp,fp
 10849f0:	df000017 	ldw	fp,0(sp)
 10849f4:	dec00104 	addi	sp,sp,4
 10849f8:	f800283a 	ret

010849fc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 10849fc:	defffd04 	addi	sp,sp,-12
 1084a00:	df000215 	stw	fp,8(sp)
 1084a04:	dc000115 	stw	r16,4(sp)
 1084a08:	df000204 	addi	fp,sp,8
 1084a0c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 1084a10:	e0bffe17 	ldw	r2,-8(fp)
 1084a14:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 1084a18:	e0bffe17 	ldw	r2,-8(fp)
 1084a1c:	10800a17 	ldw	r2,40(r2)
 1084a20:	1007883a 	mov	r3,r2
 1084a24:	00800044 	movi	r2,1
 1084a28:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 1084a2c:	e0bffe17 	ldw	r2,-8(fp)
 1084a30:	10c00b17 	ldw	r3,44(r2)
 1084a34:	e0bffe17 	ldw	r2,-8(fp)
 1084a38:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 1084a3c:	e0bffe17 	ldw	r2,-8(fp)
 1084a40:	14000b15 	stw	r16,44(r2)
	return 0;
 1084a44:	0005883a 	mov	r2,zero
}
 1084a48:	e6ffff04 	addi	sp,fp,-4
 1084a4c:	df000117 	ldw	fp,4(sp)
 1084a50:	dc000017 	ldw	r16,0(sp)
 1084a54:	dec00204 	addi	sp,sp,8
 1084a58:	f800283a 	ret

01084a5c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 1084a5c:	defffe04 	addi	sp,sp,-8
 1084a60:	df000115 	stw	fp,4(sp)
 1084a64:	df000104 	addi	fp,sp,4
 1084a68:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 1084a6c:	e0bfff17 	ldw	r2,-4(fp)
 1084a70:	10800a17 	ldw	r2,40(r2)
 1084a74:	10800304 	addi	r2,r2,12
 1084a78:	10800037 	ldwio	r2,0(r2)
 1084a7c:	1080004c 	andi	r2,r2,1
}
 1084a80:	e037883a 	mov	sp,fp
 1084a84:	df000017 	ldw	fp,0(sp)
 1084a88:	dec00104 	addi	sp,sp,4
 1084a8c:	f800283a 	ret

01084a90 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 1084a90:	defff704 	addi	sp,sp,-36
 1084a94:	df000815 	stw	fp,32(sp)
 1084a98:	dd400715 	stw	r21,28(sp)
 1084a9c:	dd000615 	stw	r20,24(sp)
 1084aa0:	dcc00515 	stw	r19,20(sp)
 1084aa4:	dc800415 	stw	r18,16(sp)
 1084aa8:	dc400315 	stw	r17,12(sp)
 1084aac:	dc000215 	stw	r16,8(sp)
 1084ab0:	df000804 	addi	fp,sp,32
 1084ab4:	e13ff815 	stw	r4,-32(fp)
 1084ab8:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1084abc:	e0bff917 	ldw	r2,-28(fp)
 1084ac0:	10800058 	cmpnei	r2,r2,1
 1084ac4:	1000031e 	bne	r2,zero,1084ad4 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 1084ac8:	e0bff817 	ldw	r2,-32(fp)
 1084acc:	14400c17 	ldw	r17,48(r2)
 1084ad0:	00000206 	br	1084adc <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 1084ad4:	e0bff817 	ldw	r2,-32(fp)
 1084ad8:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 1084adc:	e0bff817 	ldw	r2,-32(fp)
 1084ae0:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1084ae4:	e0bff817 	ldw	r2,-32(fp)
 1084ae8:	10800e17 	ldw	r2,56(r2)
 1084aec:	10800098 	cmpnei	r2,r2,2
 1084af0:	1000031e 	bne	r2,zero,1084b00 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 1084af4:	8405883a 	add	r2,r16,r16
 1084af8:	1021883a 	mov	r16,r2
 1084afc:	00000306 	br	1084b0c <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 1084b00:	8405883a 	add	r2,r16,r16
 1084b04:	1085883a 	add	r2,r2,r2
 1084b08:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 1084b0c:	e0bff817 	ldw	r2,-32(fp)
 1084b10:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1084b14:	e0bff817 	ldw	r2,-32(fp)
 1084b18:	10800d17 	ldw	r2,52(r2)
 1084b1c:	1000111e 	bne	r2,zero,1084b64 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1084b20:	e0bff817 	ldw	r2,-32(fp)
 1084b24:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 1084b28:	0029883a 	mov	r20,zero
 1084b2c:	00000b06 	br	1084b5c <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 1084b30:	0027883a 	mov	r19,zero
 1084b34:	00000406 	br	1084b48 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 1084b38:	9c45883a 	add	r2,r19,r17
 1084b3c:	0007883a 	mov	r3,zero
 1084b40:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 1084b44:	9cc00104 	addi	r19,r19,4
 1084b48:	9c3ffb36 	bltu	r19,r16,1084b38 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 1084b4c:	00800044 	movi	r2,1
 1084b50:	1544983a 	sll	r2,r2,r21
 1084b54:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 1084b58:	a5000044 	addi	r20,r20,1
 1084b5c:	a4bff436 	bltu	r20,r18,1084b30 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 1084b60:	00000a06 	br	1084b8c <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 1084b64:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 1084b68:	0021883a 	mov	r16,zero
 1084b6c:	00000506 	br	1084b84 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 1084b70:	8005883a 	mov	r2,r16
 1084b74:	1445883a 	add	r2,r2,r17
 1084b78:	0007883a 	mov	r3,zero
 1084b7c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 1084b80:	84000104 	addi	r16,r16,4
 1084b84:	8005883a 	mov	r2,r16
 1084b88:	14bff936 	bltu	r2,r18,1084b70 <alt_up_pixel_buffer_dma_clear_screen+0xe0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 1084b8c:	0001883a 	nop
 1084b90:	e6fffa04 	addi	sp,fp,-24
 1084b94:	df000617 	ldw	fp,24(sp)
 1084b98:	dd400517 	ldw	r21,20(sp)
 1084b9c:	dd000417 	ldw	r20,16(sp)
 1084ba0:	dcc00317 	ldw	r19,12(sp)
 1084ba4:	dc800217 	ldw	r18,8(sp)
 1084ba8:	dc400117 	ldw	r17,4(sp)
 1084bac:	dc000017 	ldw	r16,0(sp)
 1084bb0:	dec00704 	addi	sp,sp,28
 1084bb4:	f800283a 	ret

01084bb8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 1084bb8:	defff304 	addi	sp,sp,-52
 1084bbc:	df000c15 	stw	fp,48(sp)
 1084bc0:	ddc00b15 	stw	r23,44(sp)
 1084bc4:	dd800a15 	stw	r22,40(sp)
 1084bc8:	dd400915 	stw	r21,36(sp)
 1084bcc:	dd000815 	stw	r20,32(sp)
 1084bd0:	dcc00715 	stw	r19,28(sp)
 1084bd4:	dc800615 	stw	r18,24(sp)
 1084bd8:	dc400515 	stw	r17,20(sp)
 1084bdc:	dc000415 	stw	r16,16(sp)
 1084be0:	df000c04 	addi	fp,sp,48
 1084be4:	e13ff415 	stw	r4,-48(fp)
 1084be8:	e17ff515 	stw	r5,-44(fp)
 1084bec:	e1bff615 	stw	r6,-40(fp)
 1084bf0:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1084bf4:	e0bff417 	ldw	r2,-48(fp)
 1084bf8:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1084bfc:	e0bff417 	ldw	r2,-48(fp)
 1084c00:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1084c04:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 1084c08:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 1084c0c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 1084c10:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 1084c14:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1084c18:	a580032e 	bgeu	r20,r22,1084c28 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 1084c1c:	b02b883a 	mov	r21,r22
		l_x = r_x;
 1084c20:	a02d883a 	mov	r22,r20
		r_x = temp;
 1084c24:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 1084c28:	9c40032e 	bgeu	r19,r17,1084c38 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 1084c2c:	882b883a 	mov	r21,r17
		t_y = b_y;
 1084c30:	9823883a 	mov	r17,r19
		b_y = temp;
 1084c34:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 1084c38:	b480892e 	bgeu	r22,r18,1084e60 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 1084c3c:	8c00882e 	bgeu	r17,r16,1084e60 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1084c40:	a4800136 	bltu	r20,r18,1084c48 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 1084c44:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1084c48:	9c000136 	bltu	r19,r16,1084c50 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 1084c4c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1084c50:	e0800317 	ldw	r2,12(fp)
 1084c54:	10800058 	cmpnei	r2,r2,1
 1084c58:	1000031e 	bne	r2,zero,1084c68 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 1084c5c:	e0bff417 	ldw	r2,-48(fp)
 1084c60:	14000c17 	ldw	r16,48(r2)
 1084c64:	00000206 	br	1084c70 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 1084c68:	e0bff417 	ldw	r2,-48(fp)
 1084c6c:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1084c70:	e0bff417 	ldw	r2,-48(fp)
 1084c74:	10800d17 	ldw	r2,52(r2)
 1084c78:	10003c1e 	bne	r2,zero,1084d6c <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1084c7c:	e0bff417 	ldw	r2,-48(fp)
 1084c80:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 1084c84:	8d44983a 	sll	r2,r17,r21
 1084c88:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1084c8c:	e0bff417 	ldw	r2,-48(fp)
 1084c90:	10800e17 	ldw	r2,56(r2)
 1084c94:	10800058 	cmpnei	r2,r2,1
 1084c98:	10000f1e 	bne	r2,zero,1084cd8 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 1084c9c:	8825883a 	mov	r18,r17
 1084ca0:	00000b06 	br	1084cd0 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 1084ca4:	b023883a 	mov	r17,r22
 1084ca8:	00000406 	br	1084cbc <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1084cac:	8c05883a 	add	r2,r17,r16
 1084cb0:	b807883a 	mov	r3,r23
 1084cb4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1084cb8:	8c400044 	addi	r17,r17,1
 1084cbc:	a47ffb2e 	bgeu	r20,r17,1084cac <alt_up_pixel_buffer_dma_draw_box+0xf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 1084cc0:	00800044 	movi	r2,1
 1084cc4:	1544983a 	sll	r2,r2,r21
 1084cc8:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1084ccc:	94800044 	addi	r18,r18,1
 1084cd0:	9cbff42e 	bgeu	r19,r18,1084ca4 <alt_up_pixel_buffer_dma_draw_box+0xec>
 1084cd4:	00006306 	br	1084e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1084cd8:	e0bff417 	ldw	r2,-48(fp)
 1084cdc:	10800e17 	ldw	r2,56(r2)
 1084ce0:	10800098 	cmpnei	r2,r2,2
 1084ce4:	1000101e 	bne	r2,zero,1084d28 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 1084ce8:	8825883a 	mov	r18,r17
 1084cec:	00000c06 	br	1084d20 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 1084cf0:	b023883a 	mov	r17,r22
 1084cf4:	00000506 	br	1084d0c <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1084cf8:	8c45883a 	add	r2,r17,r17
 1084cfc:	1405883a 	add	r2,r2,r16
 1084d00:	b807883a 	mov	r3,r23
 1084d04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1084d08:	8c400044 	addi	r17,r17,1
 1084d0c:	a47ffa2e 	bgeu	r20,r17,1084cf8 <alt_up_pixel_buffer_dma_draw_box+0x140>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 1084d10:	00800044 	movi	r2,1
 1084d14:	1544983a 	sll	r2,r2,r21
 1084d18:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1084d1c:	94800044 	addi	r18,r18,1
 1084d20:	9cbff32e 	bgeu	r19,r18,1084cf0 <alt_up_pixel_buffer_dma_draw_box+0x138>
 1084d24:	00004f06 	br	1084e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1084d28:	8825883a 	mov	r18,r17
 1084d2c:	00000d06 	br	1084d64 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 1084d30:	b023883a 	mov	r17,r22
 1084d34:	00000606 	br	1084d50 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1084d38:	8c45883a 	add	r2,r17,r17
 1084d3c:	1085883a 	add	r2,r2,r2
 1084d40:	1405883a 	add	r2,r2,r16
 1084d44:	b807883a 	mov	r3,r23
 1084d48:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1084d4c:	8c400044 	addi	r17,r17,1
 1084d50:	a47ff92e 	bgeu	r20,r17,1084d38 <alt_up_pixel_buffer_dma_draw_box+0x180>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 1084d54:	00800044 	movi	r2,1
 1084d58:	1544983a 	sll	r2,r2,r21
 1084d5c:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1084d60:	94800044 	addi	r18,r18,1
 1084d64:	9cbff22e 	bgeu	r19,r18,1084d30 <alt_up_pixel_buffer_dma_draw_box+0x178>
 1084d68:	00003e06 	br	1084e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1084d6c:	e0bff417 	ldw	r2,-48(fp)
 1084d70:	10800e17 	ldw	r2,56(r2)
 1084d74:	10800058 	cmpnei	r2,r2,1
 1084d78:	10000f1e 	bne	r2,zero,1084db8 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 1084d7c:	8c85383a 	mul	r2,r17,r18
 1084d80:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 1084d84:	882b883a 	mov	r21,r17
 1084d88:	00000906 	br	1084db0 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 1084d8c:	b023883a 	mov	r17,r22
 1084d90:	00000406 	br	1084da4 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1084d94:	8c05883a 	add	r2,r17,r16
 1084d98:	b807883a 	mov	r3,r23
 1084d9c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1084da0:	8c400044 	addi	r17,r17,1
 1084da4:	a47ffb2e 	bgeu	r20,r17,1084d94 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 1084da8:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1084dac:	ad400044 	addi	r21,r21,1
 1084db0:	9d7ff62e 	bgeu	r19,r21,1084d8c <alt_up_pixel_buffer_dma_draw_box+0x1d4>
 1084db4:	00002b06 	br	1084e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1084db8:	e0bff417 	ldw	r2,-48(fp)
 1084dbc:	10800e17 	ldw	r2,56(r2)
 1084dc0:	10800098 	cmpnei	r2,r2,2
 1084dc4:	1000121e 	bne	r2,zero,1084e10 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 1084dc8:	9485883a 	add	r2,r18,r18
 1084dcc:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 1084dd0:	8c85383a 	mul	r2,r17,r18
 1084dd4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 1084dd8:	882b883a 	mov	r21,r17
 1084ddc:	00000a06 	br	1084e08 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 1084de0:	b023883a 	mov	r17,r22
 1084de4:	00000506 	br	1084dfc <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1084de8:	8c45883a 	add	r2,r17,r17
 1084dec:	1405883a 	add	r2,r2,r16
 1084df0:	b807883a 	mov	r3,r23
 1084df4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1084df8:	8c400044 	addi	r17,r17,1
 1084dfc:	a47ffa2e 	bgeu	r20,r17,1084de8 <alt_up_pixel_buffer_dma_draw_box+0x230>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 1084e00:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1084e04:	ad400044 	addi	r21,r21,1
 1084e08:	9d7ff52e 	bgeu	r19,r21,1084de0 <alt_up_pixel_buffer_dma_draw_box+0x228>
 1084e0c:	00001506 	br	1084e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1084e10:	9485883a 	add	r2,r18,r18
 1084e14:	1085883a 	add	r2,r2,r2
 1084e18:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 1084e1c:	8c85383a 	mul	r2,r17,r18
 1084e20:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 1084e24:	882b883a 	mov	r21,r17
 1084e28:	00000b06 	br	1084e58 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 1084e2c:	b023883a 	mov	r17,r22
 1084e30:	00000606 	br	1084e4c <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1084e34:	8c45883a 	add	r2,r17,r17
 1084e38:	1085883a 	add	r2,r2,r2
 1084e3c:	1405883a 	add	r2,r2,r16
 1084e40:	b807883a 	mov	r3,r23
 1084e44:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1084e48:	8c400044 	addi	r17,r17,1
 1084e4c:	a47ff92e 	bgeu	r20,r17,1084e34 <alt_up_pixel_buffer_dma_draw_box+0x27c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 1084e50:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1084e54:	ad400044 	addi	r21,r21,1
 1084e58:	9d7ff42e 	bgeu	r19,r21,1084e2c <alt_up_pixel_buffer_dma_draw_box+0x274>
 1084e5c:	00000106 	br	1084e64 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1084e60:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 1084e64:	e6fff804 	addi	sp,fp,-32
 1084e68:	df000817 	ldw	fp,32(sp)
 1084e6c:	ddc00717 	ldw	r23,28(sp)
 1084e70:	dd800617 	ldw	r22,24(sp)
 1084e74:	dd400517 	ldw	r21,20(sp)
 1084e78:	dd000417 	ldw	r20,16(sp)
 1084e7c:	dcc00317 	ldw	r19,12(sp)
 1084e80:	dc800217 	ldw	r18,8(sp)
 1084e84:	dc400117 	ldw	r17,4(sp)
 1084e88:	dc000017 	ldw	r16,0(sp)
 1084e8c:	dec00904 	addi	sp,sp,36
 1084e90:	f800283a 	ret

01084e94 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 1084e94:	defff404 	addi	sp,sp,-48
 1084e98:	df000b15 	stw	fp,44(sp)
 1084e9c:	dd800a15 	stw	r22,40(sp)
 1084ea0:	dd400915 	stw	r21,36(sp)
 1084ea4:	dd000815 	stw	r20,32(sp)
 1084ea8:	dcc00715 	stw	r19,28(sp)
 1084eac:	dc800615 	stw	r18,24(sp)
 1084eb0:	dc400515 	stw	r17,20(sp)
 1084eb4:	dc000415 	stw	r16,16(sp)
 1084eb8:	df000b04 	addi	fp,sp,44
 1084ebc:	e13ff515 	stw	r4,-44(fp)
 1084ec0:	e17ff615 	stw	r5,-40(fp)
 1084ec4:	e1bff715 	stw	r6,-36(fp)
 1084ec8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1084ecc:	e0bff517 	ldw	r2,-44(fp)
 1084ed0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1084ed4:	e0bff517 	ldw	r2,-44(fp)
 1084ed8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1084edc:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 1084ee0:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 1084ee4:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 1084ee8:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1084eec:	9c40032e 	bgeu	r19,r17,1084efc <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 1084ef0:	882d883a 	mov	r22,r17
		l_x = r_x;
 1084ef4:	9823883a 	mov	r17,r19
		r_x = temp;
 1084ef8:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 1084efc:	8c805d2e 	bgeu	r17,r18,1085074 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 1084f00:	a4005c2e 	bgeu	r20,r16,1085074 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1084f04:	9c800136 	bltu	r19,r18,1084f0c <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 1084f08:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1084f0c:	e0800217 	ldw	r2,8(fp)
 1084f10:	10800058 	cmpnei	r2,r2,1
 1084f14:	1000031e 	bne	r2,zero,1084f24 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 1084f18:	e0bff517 	ldw	r2,-44(fp)
 1084f1c:	14000c17 	ldw	r16,48(r2)
 1084f20:	00000206 	br	1084f2c <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 1084f24:	e0bff517 	ldw	r2,-44(fp)
 1084f28:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1084f2c:	e0bff517 	ldw	r2,-44(fp)
 1084f30:	10800d17 	ldw	r2,52(r2)
 1084f34:	1000231e 	bne	r2,zero,1084fc4 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1084f38:	e0bff517 	ldw	r2,-44(fp)
 1084f3c:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 1084f40:	a484983a 	sll	r2,r20,r18
 1084f44:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1084f48:	e0bff517 	ldw	r2,-44(fp)
 1084f4c:	10800e17 	ldw	r2,56(r2)
 1084f50:	10800058 	cmpnei	r2,r2,1
 1084f54:	1000071e 	bne	r2,zero,1084f74 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 1084f58:	00000406 	br	1084f6c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1084f5c:	8c05883a 	add	r2,r17,r16
 1084f60:	a807883a 	mov	r3,r21
 1084f64:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1084f68:	8c400044 	addi	r17,r17,1
 1084f6c:	9c7ffb2e 	bgeu	r19,r17,1084f5c <alt_up_pixel_buffer_dma_draw_hline+0xc8>
 1084f70:	00004106 	br	1085078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1084f74:	e0bff517 	ldw	r2,-44(fp)
 1084f78:	10800e17 	ldw	r2,56(r2)
 1084f7c:	10800098 	cmpnei	r2,r2,2
 1084f80:	10000e1e 	bne	r2,zero,1084fbc <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 1084f84:	00000506 	br	1084f9c <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 1084f88:	8c45883a 	add	r2,r17,r17
 1084f8c:	1405883a 	add	r2,r2,r16
 1084f90:	a807883a 	mov	r3,r21
 1084f94:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1084f98:	8c400044 	addi	r17,r17,1
 1084f9c:	9c7ffa2e 	bgeu	r19,r17,1084f88 <alt_up_pixel_buffer_dma_draw_hline+0xf4>
 1084fa0:	00003506 	br	1085078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 1084fa4:	8c45883a 	add	r2,r17,r17
 1084fa8:	1085883a 	add	r2,r2,r2
 1084fac:	1405883a 	add	r2,r2,r16
 1084fb0:	a807883a 	mov	r3,r21
 1084fb4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 1084fb8:	8c400044 	addi	r17,r17,1
 1084fbc:	9c7ff92e 	bgeu	r19,r17,1084fa4 <alt_up_pixel_buffer_dma_draw_hline+0x110>
 1084fc0:	00002d06 	br	1085078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1084fc4:	e0bff517 	ldw	r2,-44(fp)
 1084fc8:	10800e17 	ldw	r2,56(r2)
 1084fcc:	10800058 	cmpnei	r2,r2,1
 1084fd0:	1000091e 	bne	r2,zero,1084ff8 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 1084fd4:	a485383a 	mul	r2,r20,r18
 1084fd8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 1084fdc:	00000406 	br	1084ff0 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1084fe0:	8c05883a 	add	r2,r17,r16
 1084fe4:	a807883a 	mov	r3,r21
 1084fe8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1084fec:	8c400044 	addi	r17,r17,1
 1084ff0:	9c7ffb2e 	bgeu	r19,r17,1084fe0 <alt_up_pixel_buffer_dma_draw_hline+0x14c>
 1084ff4:	00002006 	br	1085078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1084ff8:	e0bff517 	ldw	r2,-44(fp)
 1084ffc:	10800e17 	ldw	r2,56(r2)
 1085000:	10800098 	cmpnei	r2,r2,2
 1085004:	10000c1e 	bne	r2,zero,1085038 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 1085008:	9485883a 	add	r2,r18,r18
 108500c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 1085010:	a485383a 	mul	r2,r20,r18
 1085014:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 1085018:	00000506 	br	1085030 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 108501c:	8c45883a 	add	r2,r17,r17
 1085020:	1405883a 	add	r2,r2,r16
 1085024:	a807883a 	mov	r3,r21
 1085028:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 108502c:	8c400044 	addi	r17,r17,1
 1085030:	9c7ffa2e 	bgeu	r19,r17,108501c <alt_up_pixel_buffer_dma_draw_hline+0x188>
 1085034:	00001006 	br	1085078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1085038:	9485883a 	add	r2,r18,r18
 108503c:	1085883a 	add	r2,r2,r2
 1085040:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 1085044:	a485383a 	mul	r2,r20,r18
 1085048:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 108504c:	00000606 	br	1085068 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 1085050:	8c45883a 	add	r2,r17,r17
 1085054:	1085883a 	add	r2,r2,r2
 1085058:	1405883a 	add	r2,r2,r16
 108505c:	a807883a 	mov	r3,r21
 1085060:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1085064:	8c400044 	addi	r17,r17,1
 1085068:	9c7ff92e 	bgeu	r19,r17,1085050 <alt_up_pixel_buffer_dma_draw_hline+0x1bc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 108506c:	84a1883a 	add	r16,r16,r18
 1085070:	00000106 	br	1085078 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1085074:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 1085078:	e6fff904 	addi	sp,fp,-28
 108507c:	df000717 	ldw	fp,28(sp)
 1085080:	dd800617 	ldw	r22,24(sp)
 1085084:	dd400517 	ldw	r21,20(sp)
 1085088:	dd000417 	ldw	r20,16(sp)
 108508c:	dcc00317 	ldw	r19,12(sp)
 1085090:	dc800217 	ldw	r18,8(sp)
 1085094:	dc400117 	ldw	r17,4(sp)
 1085098:	dc000017 	ldw	r16,0(sp)
 108509c:	dec00804 	addi	sp,sp,32
 10850a0:	f800283a 	ret

010850a4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 10850a4:	defff404 	addi	sp,sp,-48
 10850a8:	df000b15 	stw	fp,44(sp)
 10850ac:	dd800a15 	stw	r22,40(sp)
 10850b0:	dd400915 	stw	r21,36(sp)
 10850b4:	dd000815 	stw	r20,32(sp)
 10850b8:	dcc00715 	stw	r19,28(sp)
 10850bc:	dc800615 	stw	r18,24(sp)
 10850c0:	dc400515 	stw	r17,20(sp)
 10850c4:	dc000415 	stw	r16,16(sp)
 10850c8:	df000b04 	addi	fp,sp,44
 10850cc:	e13ff515 	stw	r4,-44(fp)
 10850d0:	e17ff615 	stw	r5,-40(fp)
 10850d4:	e1bff715 	stw	r6,-36(fp)
 10850d8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 10850dc:	e0bff517 	ldw	r2,-44(fp)
 10850e0:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 10850e4:	e0bff517 	ldw	r2,-44(fp)
 10850e8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 10850ec:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 10850f0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 10850f4:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 10850f8:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 10850fc:	9d00032e 	bgeu	r19,r20,108510c <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 1085100:	a02b883a 	mov	r21,r20
		t_y = b_y;
 1085104:	9829883a 	mov	r20,r19
		b_y = temp;
 1085108:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 108510c:	94406c2e 	bgeu	r18,r17,10852c0 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 1085110:	a4006b2e 	bgeu	r20,r16,10852c0 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1085114:	9c000136 	bltu	r19,r16,108511c <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 1085118:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 108511c:	e0800217 	ldw	r2,8(fp)
 1085120:	10800058 	cmpnei	r2,r2,1
 1085124:	1000031e 	bne	r2,zero,1085134 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 1085128:	e0bff517 	ldw	r2,-44(fp)
 108512c:	14000c17 	ldw	r16,48(r2)
 1085130:	00000206 	br	108513c <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 1085134:	e0bff517 	ldw	r2,-44(fp)
 1085138:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 108513c:	e0bff517 	ldw	r2,-44(fp)
 1085140:	10800d17 	ldw	r2,52(r2)
 1085144:	1000301e 	bne	r2,zero,1085208 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1085148:	e0bff517 	ldw	r2,-44(fp)
 108514c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 1085150:	a544983a 	sll	r2,r20,r21
 1085154:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1085158:	e0bff517 	ldw	r2,-44(fp)
 108515c:	10800e17 	ldw	r2,56(r2)
 1085160:	10800058 	cmpnei	r2,r2,1
 1085164:	10000b1e 	bne	r2,zero,1085194 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 1085168:	a023883a 	mov	r17,r20
 108516c:	00000706 	br	108518c <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1085170:	9405883a 	add	r2,r18,r16
 1085174:	b007883a 	mov	r3,r22
 1085178:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 108517c:	00800044 	movi	r2,1
 1085180:	1544983a 	sll	r2,r2,r21
 1085184:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1085188:	8c400044 	addi	r17,r17,1
 108518c:	9c7ff82e 	bgeu	r19,r17,1085170 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
 1085190:	00004c06 	br	10852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1085194:	e0bff517 	ldw	r2,-44(fp)
 1085198:	10800e17 	ldw	r2,56(r2)
 108519c:	10800098 	cmpnei	r2,r2,2
 10851a0:	10000c1e 	bne	r2,zero,10851d4 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 10851a4:	a023883a 	mov	r17,r20
 10851a8:	00000806 	br	10851cc <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 10851ac:	9485883a 	add	r2,r18,r18
 10851b0:	1405883a 	add	r2,r2,r16
 10851b4:	b007883a 	mov	r3,r22
 10851b8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10851bc:	00800044 	movi	r2,1
 10851c0:	1544983a 	sll	r2,r2,r21
 10851c4:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 10851c8:	8c400044 	addi	r17,r17,1
 10851cc:	9c7ff72e 	bgeu	r19,r17,10851ac <alt_up_pixel_buffer_dma_draw_vline+0x108>
 10851d0:	00003c06 	br	10852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10851d4:	a023883a 	mov	r17,r20
 10851d8:	00000906 	br	1085200 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 10851dc:	9485883a 	add	r2,r18,r18
 10851e0:	1085883a 	add	r2,r2,r2
 10851e4:	1405883a 	add	r2,r2,r16
 10851e8:	b007883a 	mov	r3,r22
 10851ec:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10851f0:	00800044 	movi	r2,1
 10851f4:	1544983a 	sll	r2,r2,r21
 10851f8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10851fc:	8c400044 	addi	r17,r17,1
 1085200:	9c7ff62e 	bgeu	r19,r17,10851dc <alt_up_pixel_buffer_dma_draw_vline+0x138>
 1085204:	00002f06 	br	10852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1085208:	e0bff517 	ldw	r2,-44(fp)
 108520c:	10800e17 	ldw	r2,56(r2)
 1085210:	10800058 	cmpnei	r2,r2,1
 1085214:	10000a1e 	bne	r2,zero,1085240 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 1085218:	a445383a 	mul	r2,r20,r17
 108521c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 1085220:	00000506 	br	1085238 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1085224:	9405883a 	add	r2,r18,r16
 1085228:	b007883a 	mov	r3,r22
 108522c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 1085230:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1085234:	a5000044 	addi	r20,r20,1
 1085238:	9d3ffa2e 	bgeu	r19,r20,1085224 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 108523c:	00002106 	br	10852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1085240:	e0bff517 	ldw	r2,-44(fp)
 1085244:	10800e17 	ldw	r2,56(r2)
 1085248:	10800098 	cmpnei	r2,r2,2
 108524c:	10000d1e 	bne	r2,zero,1085284 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 1085250:	8c45883a 	add	r2,r17,r17
 1085254:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 1085258:	a445383a 	mul	r2,r20,r17
 108525c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 1085260:	00000606 	br	108527c <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 1085264:	9485883a 	add	r2,r18,r18
 1085268:	1405883a 	add	r2,r2,r16
 108526c:	b007883a 	mov	r3,r22
 1085270:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 1085274:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1085278:	a5000044 	addi	r20,r20,1
 108527c:	9d3ff92e 	bgeu	r19,r20,1085264 <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
 1085280:	00001006 	br	10852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1085284:	8c45883a 	add	r2,r17,r17
 1085288:	1085883a 	add	r2,r2,r2
 108528c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 1085290:	a445383a 	mul	r2,r20,r17
 1085294:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 1085298:	00000706 	br	10852b8 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 108529c:	9485883a 	add	r2,r18,r18
 10852a0:	1085883a 	add	r2,r2,r2
 10852a4:	1405883a 	add	r2,r2,r16
 10852a8:	b007883a 	mov	r3,r22
 10852ac:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 10852b0:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10852b4:	a5000044 	addi	r20,r20,1
 10852b8:	9d3ff82e 	bgeu	r19,r20,108529c <alt_up_pixel_buffer_dma_draw_vline+0x1f8>
 10852bc:	00000106 	br	10852c4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 10852c0:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 10852c4:	e6fff904 	addi	sp,fp,-28
 10852c8:	df000717 	ldw	fp,28(sp)
 10852cc:	dd800617 	ldw	r22,24(sp)
 10852d0:	dd400517 	ldw	r21,20(sp)
 10852d4:	dd000417 	ldw	r20,16(sp)
 10852d8:	dcc00317 	ldw	r19,12(sp)
 10852dc:	dc800217 	ldw	r18,8(sp)
 10852e0:	dc400117 	ldw	r17,4(sp)
 10852e4:	dc000017 	ldw	r16,0(sp)
 10852e8:	dec00804 	addi	sp,sp,32
 10852ec:	f800283a 	ret

010852f0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 10852f0:	defff804 	addi	sp,sp,-32
 10852f4:	dfc00715 	stw	ra,28(sp)
 10852f8:	df000615 	stw	fp,24(sp)
 10852fc:	df000604 	addi	fp,sp,24
 1085300:	e13ffc15 	stw	r4,-16(fp)
 1085304:	e17ffd15 	stw	r5,-12(fp)
 1085308:	e1bffe15 	stw	r6,-8(fp)
 108530c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 1085310:	e0800417 	ldw	r2,16(fp)
 1085314:	d8800115 	stw	r2,4(sp)
 1085318:	e0800317 	ldw	r2,12(fp)
 108531c:	d8800015 	stw	r2,0(sp)
 1085320:	e1fffe17 	ldw	r7,-8(fp)
 1085324:	e1bfff17 	ldw	r6,-4(fp)
 1085328:	e17ffd17 	ldw	r5,-12(fp)
 108532c:	e13ffc17 	ldw	r4,-16(fp)
 1085330:	1084e940 	call	1084e94 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 1085334:	e0800417 	ldw	r2,16(fp)
 1085338:	d8800115 	stw	r2,4(sp)
 108533c:	e0800317 	ldw	r2,12(fp)
 1085340:	d8800015 	stw	r2,0(sp)
 1085344:	e1c00217 	ldw	r7,8(fp)
 1085348:	e1bfff17 	ldw	r6,-4(fp)
 108534c:	e17ffd17 	ldw	r5,-12(fp)
 1085350:	e13ffc17 	ldw	r4,-16(fp)
 1085354:	1084e940 	call	1084e94 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 1085358:	e0800417 	ldw	r2,16(fp)
 108535c:	d8800115 	stw	r2,4(sp)
 1085360:	e0800317 	ldw	r2,12(fp)
 1085364:	d8800015 	stw	r2,0(sp)
 1085368:	e1c00217 	ldw	r7,8(fp)
 108536c:	e1bffe17 	ldw	r6,-8(fp)
 1085370:	e17ffd17 	ldw	r5,-12(fp)
 1085374:	e13ffc17 	ldw	r4,-16(fp)
 1085378:	10850a40 	call	10850a4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 108537c:	e0800417 	ldw	r2,16(fp)
 1085380:	d8800115 	stw	r2,4(sp)
 1085384:	e0800317 	ldw	r2,12(fp)
 1085388:	d8800015 	stw	r2,0(sp)
 108538c:	e1c00217 	ldw	r7,8(fp)
 1085390:	e1bffe17 	ldw	r6,-8(fp)
 1085394:	e17fff17 	ldw	r5,-4(fp)
 1085398:	e13ffc17 	ldw	r4,-16(fp)
 108539c:	10850a40 	call	10850a4 <alt_up_pixel_buffer_dma_draw_vline>
}
 10853a0:	0001883a 	nop
 10853a4:	e037883a 	mov	sp,fp
 10853a8:	dfc00117 	ldw	ra,4(sp)
 10853ac:	df000017 	ldw	fp,0(sp)
 10853b0:	dec00204 	addi	sp,sp,8
 10853b4:	f800283a 	ret

010853b8 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 10853b8:	deffff04 	addi	sp,sp,-4
 10853bc:	df000015 	stw	fp,0(sp)
 10853c0:	d839883a 	mov	fp,sp
 10853c4:	2005883a 	mov	r2,r4
 10853c8:	3007883a 	mov	r3,r6
 10853cc:	3809883a 	mov	r4,r7
 10853d0:	e1800117 	ldw	r6,4(fp)
 10853d4:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 10853d8:	3800051e 	bne	r7,zero,10853f0 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 10853dc:	2909383a 	mul	r4,r5,r4
 10853e0:	20c7883a 	add	r3,r4,r3
 10853e4:	1885883a 	add	r2,r3,r2
 10853e8:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 10853ec:	00000e06 	br	1085428 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 10853f0:	39c00058 	cmpnei	r7,r7,1
 10853f4:	3800061e 	bne	r7,zero,1085410 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 10853f8:	2909383a 	mul	r4,r5,r4
 10853fc:	20c7883a 	add	r3,r4,r3
 1085400:	18c7883a 	add	r3,r3,r3
 1085404:	1885883a 	add	r2,r3,r2
 1085408:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 108540c:	00000606 	br	1085428 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 1085410:	2909383a 	mul	r4,r5,r4
 1085414:	20c7883a 	add	r3,r4,r3
 1085418:	18c7883a 	add	r3,r3,r3
 108541c:	18c7883a 	add	r3,r3,r3
 1085420:	1885883a 	add	r2,r3,r2
 1085424:	11800035 	stwio	r6,0(r2)
}
 1085428:	0001883a 	nop
 108542c:	e037883a 	mov	sp,fp
 1085430:	df000017 	ldw	fp,0(sp)
 1085434:	dec00104 	addi	sp,sp,4
 1085438:	f800283a 	ret

0108543c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 108543c:	deffeb04 	addi	sp,sp,-84
 1085440:	dfc01415 	stw	ra,80(sp)
 1085444:	df001315 	stw	fp,76(sp)
 1085448:	ddc01215 	stw	r23,72(sp)
 108544c:	dd801115 	stw	r22,68(sp)
 1085450:	dd401015 	stw	r21,64(sp)
 1085454:	dd000f15 	stw	r20,60(sp)
 1085458:	dcc00e15 	stw	r19,56(sp)
 108545c:	dc800d15 	stw	r18,52(sp)
 1085460:	dc400c15 	stw	r17,48(sp)
 1085464:	dc000b15 	stw	r16,44(sp)
 1085468:	df001304 	addi	fp,sp,76
 108546c:	e13fef15 	stw	r4,-68(fp)
 1085470:	e17ff015 	stw	r5,-64(fp)
 1085474:	e1bff115 	stw	r6,-60(fp)
 1085478:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 108547c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 1085480:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 1085484:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 1085488:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 108548c:	a4c5c83a 	sub	r2,r20,r19
 1085490:	1000010e 	bge	r2,zero,1085498 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 1085494:	0085c83a 	sub	r2,zero,r2
 1085498:	1007883a 	mov	r3,r2
 108549c:	9445c83a 	sub	r2,r18,r17
 10854a0:	1000010e 	bge	r2,zero,10854a8 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 10854a4:	0085c83a 	sub	r2,zero,r2
 10854a8:	10c4803a 	cmplt	r2,r2,r3
 10854ac:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 10854b0:	e0bfef17 	ldw	r2,-68(fp)
 10854b4:	10800e17 	ldw	r2,56(r2)
 10854b8:	10800060 	cmpeqi	r2,r2,1
 10854bc:	1000081e 	bne	r2,zero,10854e0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 10854c0:	e0bfef17 	ldw	r2,-68(fp)
 10854c4:	10800e17 	ldw	r2,56(r2)
 10854c8:	10800098 	cmpnei	r2,r2,2
 10854cc:	1000021e 	bne	r2,zero,10854d8 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 10854d0:	00800044 	movi	r2,1
 10854d4:	00000306 	br	10854e4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 10854d8:	00800084 	movi	r2,2
 10854dc:	00000106 	br	10854e4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 10854e0:	0005883a 	mov	r2,zero
 10854e4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 10854e8:	e0800317 	ldw	r2,12(fp)
 10854ec:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 10854f0:	e0bfef17 	ldw	r2,-68(fp)
 10854f4:	10800d17 	ldw	r2,52(r2)
 10854f8:	1000071e 	bne	r2,zero,1085518 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 10854fc:	e0bfef17 	ldw	r2,-68(fp)
 1085500:	10801317 	ldw	r2,76(r2)
 1085504:	e0fff417 	ldw	r3,-48(fp)
 1085508:	10c5c83a 	sub	r2,r2,r3
 108550c:	00c00044 	movi	r3,1
 1085510:	1884983a 	sll	r2,r3,r2
 1085514:	00000206 	br	1085520 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 1085518:	e0bfef17 	ldw	r2,-68(fp)
 108551c:	10800f17 	ldw	r2,60(r2)
 1085520:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 1085524:	e0800417 	ldw	r2,16(fp)
 1085528:	10800058 	cmpnei	r2,r2,1
 108552c:	1000031e 	bne	r2,zero,108553c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 1085530:	e0bfef17 	ldw	r2,-68(fp)
 1085534:	15c00c17 	ldw	r23,48(r2)
 1085538:	00000206 	br	1085544 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 108553c:	e0bfef17 	ldw	r2,-68(fp)
 1085540:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 1085544:	e0bff307 	ldb	r2,-52(fp)
 1085548:	0080060e 	bge	zero,r2,1085564 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 108554c:	8821883a 	mov	r16,r17
		x_0 = y_0;
 1085550:	9823883a 	mov	r17,r19
		y_0 = error;
 1085554:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 1085558:	9021883a 	mov	r16,r18
		x_1 = y_1;
 108555c:	a025883a 	mov	r18,r20
		y_1 = error;
 1085560:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 1085564:	9440060e 	bge	r18,r17,1085580 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 1085568:	8821883a 	mov	r16,r17
		x_0 = x_1;
 108556c:	9023883a 	mov	r17,r18
		x_1 = error;
 1085570:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 1085574:	9821883a 	mov	r16,r19
		y_0 = y_1;
 1085578:	a027883a 	mov	r19,r20
		y_1 = error;
 108557c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 1085580:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 1085584:	a4c5c83a 	sub	r2,r20,r19
 1085588:	1000010e 	bge	r2,zero,1085590 <alt_up_pixel_buffer_dma_draw_line+0x154>
 108558c:	0085c83a 	sub	r2,zero,r2
 1085590:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 1085594:	a804d7fa 	srli	r2,r21,31
 1085598:	1545883a 	add	r2,r2,r21
 108559c:	1005d07a 	srai	r2,r2,1
 10855a0:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 10855a4:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 10855a8:	9d00020e 	bge	r19,r20,10855b4 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 10855ac:	04c00044 	movi	r19,1
 10855b0:	00000106 	br	10855b8 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 10855b4:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 10855b8:	e0bff307 	ldb	r2,-52(fp)
 10855bc:	10800058 	cmpnei	r2,r2,1
 10855c0:	1000211e 	bne	r2,zero,1085648 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 10855c4:	00000f06 	br	1085604 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 10855c8:	e0bff417 	ldw	r2,-48(fp)
 10855cc:	d8800115 	stw	r2,4(sp)
 10855d0:	e0bff517 	ldw	r2,-44(fp)
 10855d4:	d8800015 	stw	r2,0(sp)
 10855d8:	880f883a 	mov	r7,r17
 10855dc:	b00d883a 	mov	r6,r22
 10855e0:	e17ff617 	ldw	r5,-40(fp)
 10855e4:	b809883a 	mov	r4,r23
 10855e8:	10853b80 	call	10853b8 <helper_plot_pixel>
			error = error + deltay;
 10855ec:	e0bff717 	ldw	r2,-36(fp)
 10855f0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 10855f4:	0400020e 	bge	zero,r16,1085600 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 10855f8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 10855fc:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 1085600:	8c400044 	addi	r17,r17,1
 1085604:	947ff00e 	bge	r18,r17,10855c8 <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 1085608:	00001006 	br	108564c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 108560c:	e0bff417 	ldw	r2,-48(fp)
 1085610:	d8800115 	stw	r2,4(sp)
 1085614:	e0bff517 	ldw	r2,-44(fp)
 1085618:	d8800015 	stw	r2,0(sp)
 108561c:	b00f883a 	mov	r7,r22
 1085620:	880d883a 	mov	r6,r17
 1085624:	e17ff617 	ldw	r5,-40(fp)
 1085628:	b809883a 	mov	r4,r23
 108562c:	10853b80 	call	10853b8 <helper_plot_pixel>
			error = error + deltay;
 1085630:	e0bff717 	ldw	r2,-36(fp)
 1085634:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 1085638:	0400020e 	bge	zero,r16,1085644 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 108563c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 1085640:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1085644:	8c400044 	addi	r17,r17,1
 1085648:	947ff00e 	bge	r18,r17,108560c <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 108564c:	0001883a 	nop
 1085650:	e6fff804 	addi	sp,fp,-32
 1085654:	dfc00917 	ldw	ra,36(sp)
 1085658:	df000817 	ldw	fp,32(sp)
 108565c:	ddc00717 	ldw	r23,28(sp)
 1085660:	dd800617 	ldw	r22,24(sp)
 1085664:	dd400517 	ldw	r21,20(sp)
 1085668:	dd000417 	ldw	r20,16(sp)
 108566c:	dcc00317 	ldw	r19,12(sp)
 1085670:	dc800217 	ldw	r18,8(sp)
 1085674:	dc400117 	ldw	r17,4(sp)
 1085678:	dc000017 	ldw	r16,0(sp)
 108567c:	dec00a04 	addi	sp,sp,40
 1085680:	f800283a 	ret

01085684 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1085684:	defff504 	addi	sp,sp,-44
 1085688:	df000a15 	stw	fp,40(sp)
 108568c:	df000a04 	addi	fp,sp,40
 1085690:	e13ffc15 	stw	r4,-16(fp)
 1085694:	e17ffd15 	stw	r5,-12(fp)
 1085698:	e1bffe15 	stw	r6,-8(fp)
 108569c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10856a0:	e03ff615 	stw	zero,-40(fp)
 10856a4:	d0a6d217 	ldw	r2,-25784(gp)
  
  if (alt_ticks_per_second ())
 10856a8:	10003c26 	beq	r2,zero,108579c <alt_alarm_start+0x118>
  {
    if (alarm)
 10856ac:	e0bffc17 	ldw	r2,-16(fp)
 10856b0:	10003826 	beq	r2,zero,1085794 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 10856b4:	e0bffc17 	ldw	r2,-16(fp)
 10856b8:	e0fffe17 	ldw	r3,-8(fp)
 10856bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 10856c0:	e0bffc17 	ldw	r2,-16(fp)
 10856c4:	e0ffff17 	ldw	r3,-4(fp)
 10856c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10856cc:	0005303a 	rdctl	r2,status
 10856d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10856d4:	e0fff917 	ldw	r3,-28(fp)
 10856d8:	00bfff84 	movi	r2,-2
 10856dc:	1884703a 	and	r2,r3,r2
 10856e0:	1001703a 	wrctl	status,r2
  
  return context;
 10856e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 10856e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10856ec:	d0a6d317 	ldw	r2,-25780(gp)
      
      current_nticks = alt_nticks();
 10856f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10856f4:	e0fffd17 	ldw	r3,-12(fp)
 10856f8:	e0bff617 	ldw	r2,-40(fp)
 10856fc:	1885883a 	add	r2,r3,r2
 1085700:	10c00044 	addi	r3,r2,1
 1085704:	e0bffc17 	ldw	r2,-16(fp)
 1085708:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 108570c:	e0bffc17 	ldw	r2,-16(fp)
 1085710:	10c00217 	ldw	r3,8(r2)
 1085714:	e0bff617 	ldw	r2,-40(fp)
 1085718:	1880042e 	bgeu	r3,r2,108572c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 108571c:	e0bffc17 	ldw	r2,-16(fp)
 1085720:	00c00044 	movi	r3,1
 1085724:	10c00405 	stb	r3,16(r2)
 1085728:	00000206 	br	1085734 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 108572c:	e0bffc17 	ldw	r2,-16(fp)
 1085730:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1085734:	e0bffc17 	ldw	r2,-16(fp)
 1085738:	d0e00c04 	addi	r3,gp,-32720
 108573c:	e0fffa15 	stw	r3,-24(fp)
 1085740:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1085744:	e0bffb17 	ldw	r2,-20(fp)
 1085748:	e0fffa17 	ldw	r3,-24(fp)
 108574c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1085750:	e0bffa17 	ldw	r2,-24(fp)
 1085754:	10c00017 	ldw	r3,0(r2)
 1085758:	e0bffb17 	ldw	r2,-20(fp)
 108575c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1085760:	e0bffa17 	ldw	r2,-24(fp)
 1085764:	10800017 	ldw	r2,0(r2)
 1085768:	e0fffb17 	ldw	r3,-20(fp)
 108576c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1085770:	e0bffa17 	ldw	r2,-24(fp)
 1085774:	e0fffb17 	ldw	r3,-20(fp)
 1085778:	10c00015 	stw	r3,0(r2)
 108577c:	e0bff817 	ldw	r2,-32(fp)
 1085780:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1085784:	e0bff717 	ldw	r2,-36(fp)
 1085788:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 108578c:	0005883a 	mov	r2,zero
 1085790:	00000306 	br	10857a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1085794:	00bffa84 	movi	r2,-22
 1085798:	00000106 	br	10857a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 108579c:	00bfde84 	movi	r2,-134
  }
}
 10857a0:	e037883a 	mov	sp,fp
 10857a4:	df000017 	ldw	fp,0(sp)
 10857a8:	dec00104 	addi	sp,sp,4
 10857ac:	f800283a 	ret

010857b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10857b0:	defffe04 	addi	sp,sp,-8
 10857b4:	df000115 	stw	fp,4(sp)
 10857b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10857bc:	e03fff15 	stw	zero,-4(fp)
 10857c0:	00000506 	br	10857d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10857c4:	e0bfff17 	ldw	r2,-4(fp)
 10857c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10857cc:	e0bfff17 	ldw	r2,-4(fp)
 10857d0:	10800804 	addi	r2,r2,32
 10857d4:	e0bfff15 	stw	r2,-4(fp)
 10857d8:	e0bfff17 	ldw	r2,-4(fp)
 10857dc:	10820030 	cmpltui	r2,r2,2048
 10857e0:	103ff81e 	bne	r2,zero,10857c4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10857e4:	0001883a 	nop
 10857e8:	e037883a 	mov	sp,fp
 10857ec:	df000017 	ldw	fp,0(sp)
 10857f0:	dec00104 	addi	sp,sp,4
 10857f4:	f800283a 	ret

010857f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10857f8:	defffe04 	addi	sp,sp,-8
 10857fc:	dfc00115 	stw	ra,4(sp)
 1085800:	df000015 	stw	fp,0(sp)
 1085804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1085808:	d0a00917 	ldw	r2,-32732(gp)
 108580c:	10000326 	beq	r2,zero,108581c <alt_get_errno+0x24>
 1085810:	d0a00917 	ldw	r2,-32732(gp)
 1085814:	103ee83a 	callr	r2
 1085818:	00000106 	br	1085820 <alt_get_errno+0x28>
 108581c:	d0a6cd04 	addi	r2,gp,-25804
}
 1085820:	e037883a 	mov	sp,fp
 1085824:	dfc00117 	ldw	ra,4(sp)
 1085828:	df000017 	ldw	fp,0(sp)
 108582c:	dec00204 	addi	sp,sp,8
 1085830:	f800283a 	ret

01085834 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1085834:	defffa04 	addi	sp,sp,-24
 1085838:	dfc00515 	stw	ra,20(sp)
 108583c:	df000415 	stw	fp,16(sp)
 1085840:	df000404 	addi	fp,sp,16
 1085844:	e13ffe15 	stw	r4,-8(fp)
 1085848:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 108584c:	e0bffe17 	ldw	r2,-8(fp)
 1085850:	10000326 	beq	r2,zero,1085860 <alt_dev_llist_insert+0x2c>
 1085854:	e0bffe17 	ldw	r2,-8(fp)
 1085858:	10800217 	ldw	r2,8(r2)
 108585c:	1000061e 	bne	r2,zero,1085878 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1085860:	10857f80 	call	10857f8 <alt_get_errno>
 1085864:	1007883a 	mov	r3,r2
 1085868:	00800584 	movi	r2,22
 108586c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1085870:	00bffa84 	movi	r2,-22
 1085874:	00001306 	br	10858c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1085878:	e0bffe17 	ldw	r2,-8(fp)
 108587c:	e0ffff17 	ldw	r3,-4(fp)
 1085880:	e0fffc15 	stw	r3,-16(fp)
 1085884:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1085888:	e0bffd17 	ldw	r2,-12(fp)
 108588c:	e0fffc17 	ldw	r3,-16(fp)
 1085890:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1085894:	e0bffc17 	ldw	r2,-16(fp)
 1085898:	10c00017 	ldw	r3,0(r2)
 108589c:	e0bffd17 	ldw	r2,-12(fp)
 10858a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10858a4:	e0bffc17 	ldw	r2,-16(fp)
 10858a8:	10800017 	ldw	r2,0(r2)
 10858ac:	e0fffd17 	ldw	r3,-12(fp)
 10858b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10858b4:	e0bffc17 	ldw	r2,-16(fp)
 10858b8:	e0fffd17 	ldw	r3,-12(fp)
 10858bc:	10c00015 	stw	r3,0(r2)

  return 0;  
 10858c0:	0005883a 	mov	r2,zero
}
 10858c4:	e037883a 	mov	sp,fp
 10858c8:	dfc00117 	ldw	ra,4(sp)
 10858cc:	df000017 	ldw	fp,0(sp)
 10858d0:	dec00204 	addi	sp,sp,8
 10858d4:	f800283a 	ret

010858d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10858d8:	defffd04 	addi	sp,sp,-12
 10858dc:	dfc00215 	stw	ra,8(sp)
 10858e0:	df000115 	stw	fp,4(sp)
 10858e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10858e8:	00804234 	movhi	r2,264
 10858ec:	1099e804 	addi	r2,r2,26528
 10858f0:	e0bfff15 	stw	r2,-4(fp)
 10858f4:	00000606 	br	1085910 <_do_ctors+0x38>
        (*ctor) (); 
 10858f8:	e0bfff17 	ldw	r2,-4(fp)
 10858fc:	10800017 	ldw	r2,0(r2)
 1085900:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1085904:	e0bfff17 	ldw	r2,-4(fp)
 1085908:	10bfff04 	addi	r2,r2,-4
 108590c:	e0bfff15 	stw	r2,-4(fp)
 1085910:	e0ffff17 	ldw	r3,-4(fp)
 1085914:	00804234 	movhi	r2,264
 1085918:	1099e904 	addi	r2,r2,26532
 108591c:	18bff62e 	bgeu	r3,r2,10858f8 <_do_ctors+0x20>
        (*ctor) (); 
}
 1085920:	0001883a 	nop
 1085924:	e037883a 	mov	sp,fp
 1085928:	dfc00117 	ldw	ra,4(sp)
 108592c:	df000017 	ldw	fp,0(sp)
 1085930:	dec00204 	addi	sp,sp,8
 1085934:	f800283a 	ret

01085938 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1085938:	defffd04 	addi	sp,sp,-12
 108593c:	dfc00215 	stw	ra,8(sp)
 1085940:	df000115 	stw	fp,4(sp)
 1085944:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1085948:	00804234 	movhi	r2,264
 108594c:	1099e804 	addi	r2,r2,26528
 1085950:	e0bfff15 	stw	r2,-4(fp)
 1085954:	00000606 	br	1085970 <_do_dtors+0x38>
        (*dtor) (); 
 1085958:	e0bfff17 	ldw	r2,-4(fp)
 108595c:	10800017 	ldw	r2,0(r2)
 1085960:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1085964:	e0bfff17 	ldw	r2,-4(fp)
 1085968:	10bfff04 	addi	r2,r2,-4
 108596c:	e0bfff15 	stw	r2,-4(fp)
 1085970:	e0ffff17 	ldw	r3,-4(fp)
 1085974:	00804234 	movhi	r2,264
 1085978:	1099e904 	addi	r2,r2,26532
 108597c:	18bff62e 	bgeu	r3,r2,1085958 <_do_dtors+0x20>
        (*dtor) (); 
}
 1085980:	0001883a 	nop
 1085984:	e037883a 	mov	sp,fp
 1085988:	dfc00117 	ldw	ra,4(sp)
 108598c:	df000017 	ldw	fp,0(sp)
 1085990:	dec00204 	addi	sp,sp,8
 1085994:	f800283a 	ret

01085998 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1085998:	defffa04 	addi	sp,sp,-24
 108599c:	dfc00515 	stw	ra,20(sp)
 10859a0:	df000415 	stw	fp,16(sp)
 10859a4:	df000404 	addi	fp,sp,16
 10859a8:	e13ffe15 	stw	r4,-8(fp)
 10859ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10859b0:	e0bfff17 	ldw	r2,-4(fp)
 10859b4:	10800017 	ldw	r2,0(r2)
 10859b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10859bc:	e13ffe17 	ldw	r4,-8(fp)
 10859c0:	108049c0 	call	108049c <strlen>
 10859c4:	10800044 	addi	r2,r2,1
 10859c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10859cc:	00000d06 	br	1085a04 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10859d0:	e0bffc17 	ldw	r2,-16(fp)
 10859d4:	10800217 	ldw	r2,8(r2)
 10859d8:	e0fffd17 	ldw	r3,-12(fp)
 10859dc:	180d883a 	mov	r6,r3
 10859e0:	e17ffe17 	ldw	r5,-8(fp)
 10859e4:	1009883a 	mov	r4,r2
 10859e8:	108645c0 	call	108645c <memcmp>
 10859ec:	1000021e 	bne	r2,zero,10859f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10859f0:	e0bffc17 	ldw	r2,-16(fp)
 10859f4:	00000706 	br	1085a14 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10859f8:	e0bffc17 	ldw	r2,-16(fp)
 10859fc:	10800017 	ldw	r2,0(r2)
 1085a00:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1085a04:	e0fffc17 	ldw	r3,-16(fp)
 1085a08:	e0bfff17 	ldw	r2,-4(fp)
 1085a0c:	18bff01e 	bne	r3,r2,10859d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1085a10:	0005883a 	mov	r2,zero
}
 1085a14:	e037883a 	mov	sp,fp
 1085a18:	dfc00117 	ldw	ra,4(sp)
 1085a1c:	df000017 	ldw	fp,0(sp)
 1085a20:	dec00204 	addi	sp,sp,8
 1085a24:	f800283a 	ret

01085a28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1085a28:	defffe04 	addi	sp,sp,-8
 1085a2c:	dfc00115 	stw	ra,4(sp)
 1085a30:	df000015 	stw	fp,0(sp)
 1085a34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1085a38:	01440004 	movi	r5,4096
 1085a3c:	0009883a 	mov	r4,zero
 1085a40:	10862e40 	call	10862e4 <alt_icache_flush>
#endif
}
 1085a44:	0001883a 	nop
 1085a48:	e037883a 	mov	sp,fp
 1085a4c:	dfc00117 	ldw	ra,4(sp)
 1085a50:	df000017 	ldw	fp,0(sp)
 1085a54:	dec00204 	addi	sp,sp,8
 1085a58:	f800283a 	ret

01085a5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1085a5c:	defff904 	addi	sp,sp,-28
 1085a60:	dfc00615 	stw	ra,24(sp)
 1085a64:	df000515 	stw	fp,20(sp)
 1085a68:	df000504 	addi	fp,sp,20
 1085a6c:	e13ffc15 	stw	r4,-16(fp)
 1085a70:	e17ffd15 	stw	r5,-12(fp)
 1085a74:	e1bffe15 	stw	r6,-8(fp)
 1085a78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1085a7c:	e1bfff17 	ldw	r6,-4(fp)
 1085a80:	e17ffe17 	ldw	r5,-8(fp)
 1085a84:	e13ffd17 	ldw	r4,-12(fp)
 1085a88:	1085e1c0 	call	1085e1c <open>
 1085a8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1085a90:	e0bffb17 	ldw	r2,-20(fp)
 1085a94:	10001c16 	blt	r2,zero,1085b08 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1085a98:	00804234 	movhi	r2,264
 1085a9c:	109c2d04 	addi	r2,r2,28852
 1085aa0:	e0fffb17 	ldw	r3,-20(fp)
 1085aa4:	18c00324 	muli	r3,r3,12
 1085aa8:	10c5883a 	add	r2,r2,r3
 1085aac:	10c00017 	ldw	r3,0(r2)
 1085ab0:	e0bffc17 	ldw	r2,-16(fp)
 1085ab4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1085ab8:	00804234 	movhi	r2,264
 1085abc:	109c2d04 	addi	r2,r2,28852
 1085ac0:	e0fffb17 	ldw	r3,-20(fp)
 1085ac4:	18c00324 	muli	r3,r3,12
 1085ac8:	10c5883a 	add	r2,r2,r3
 1085acc:	10800104 	addi	r2,r2,4
 1085ad0:	10c00017 	ldw	r3,0(r2)
 1085ad4:	e0bffc17 	ldw	r2,-16(fp)
 1085ad8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1085adc:	00804234 	movhi	r2,264
 1085ae0:	109c2d04 	addi	r2,r2,28852
 1085ae4:	e0fffb17 	ldw	r3,-20(fp)
 1085ae8:	18c00324 	muli	r3,r3,12
 1085aec:	10c5883a 	add	r2,r2,r3
 1085af0:	10800204 	addi	r2,r2,8
 1085af4:	10c00017 	ldw	r3,0(r2)
 1085af8:	e0bffc17 	ldw	r2,-16(fp)
 1085afc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1085b00:	e13ffb17 	ldw	r4,-20(fp)
 1085b04:	108388c0 	call	108388c <alt_release_fd>
  }
} 
 1085b08:	0001883a 	nop
 1085b0c:	e037883a 	mov	sp,fp
 1085b10:	dfc00117 	ldw	ra,4(sp)
 1085b14:	df000017 	ldw	fp,0(sp)
 1085b18:	dec00204 	addi	sp,sp,8
 1085b1c:	f800283a 	ret

01085b20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1085b20:	defffb04 	addi	sp,sp,-20
 1085b24:	dfc00415 	stw	ra,16(sp)
 1085b28:	df000315 	stw	fp,12(sp)
 1085b2c:	df000304 	addi	fp,sp,12
 1085b30:	e13ffd15 	stw	r4,-12(fp)
 1085b34:	e17ffe15 	stw	r5,-8(fp)
 1085b38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1085b3c:	01c07fc4 	movi	r7,511
 1085b40:	01800044 	movi	r6,1
 1085b44:	e17ffd17 	ldw	r5,-12(fp)
 1085b48:	01004234 	movhi	r4,264
 1085b4c:	211c3004 	addi	r4,r4,28864
 1085b50:	1085a5c0 	call	1085a5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1085b54:	01c07fc4 	movi	r7,511
 1085b58:	000d883a 	mov	r6,zero
 1085b5c:	e17ffe17 	ldw	r5,-8(fp)
 1085b60:	01004234 	movhi	r4,264
 1085b64:	211c2d04 	addi	r4,r4,28852
 1085b68:	1085a5c0 	call	1085a5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1085b6c:	01c07fc4 	movi	r7,511
 1085b70:	01800044 	movi	r6,1
 1085b74:	e17fff17 	ldw	r5,-4(fp)
 1085b78:	01004234 	movhi	r4,264
 1085b7c:	211c3304 	addi	r4,r4,28876
 1085b80:	1085a5c0 	call	1085a5c <alt_open_fd>
}  
 1085b84:	0001883a 	nop
 1085b88:	e037883a 	mov	sp,fp
 1085b8c:	dfc00117 	ldw	ra,4(sp)
 1085b90:	df000017 	ldw	fp,0(sp)
 1085b94:	dec00204 	addi	sp,sp,8
 1085b98:	f800283a 	ret

01085b9c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1085b9c:	defff004 	addi	sp,sp,-64
 1085ba0:	df000f15 	stw	fp,60(sp)
 1085ba4:	df000f04 	addi	fp,sp,60
 1085ba8:	e13ffd15 	stw	r4,-12(fp)
 1085bac:	e17ffe15 	stw	r5,-8(fp)
 1085bb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1085bb4:	00bffa84 	movi	r2,-22
 1085bb8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1085bbc:	e0bffd17 	ldw	r2,-12(fp)
 1085bc0:	10800828 	cmpgeui	r2,r2,32
 1085bc4:	1000501e 	bne	r2,zero,1085d08 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1085bc8:	0005303a 	rdctl	r2,status
 1085bcc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1085bd0:	e0fff617 	ldw	r3,-40(fp)
 1085bd4:	00bfff84 	movi	r2,-2
 1085bd8:	1884703a 	and	r2,r3,r2
 1085bdc:	1001703a 	wrctl	status,r2
  
  return context;
 1085be0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1085be4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 1085be8:	00804274 	movhi	r2,265
 1085bec:	10a7a504 	addi	r2,r2,-24940
 1085bf0:	e0fffd17 	ldw	r3,-12(fp)
 1085bf4:	180690fa 	slli	r3,r3,3
 1085bf8:	10c5883a 	add	r2,r2,r3
 1085bfc:	e0ffff17 	ldw	r3,-4(fp)
 1085c00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1085c04:	00804274 	movhi	r2,265
 1085c08:	10a7a504 	addi	r2,r2,-24940
 1085c0c:	e0fffd17 	ldw	r3,-12(fp)
 1085c10:	180690fa 	slli	r3,r3,3
 1085c14:	10c5883a 	add	r2,r2,r3
 1085c18:	10800104 	addi	r2,r2,4
 1085c1c:	e0fffe17 	ldw	r3,-8(fp)
 1085c20:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1085c24:	e0bfff17 	ldw	r2,-4(fp)
 1085c28:	10001926 	beq	r2,zero,1085c90 <alt_irq_register+0xf4>
 1085c2c:	e0bffd17 	ldw	r2,-12(fp)
 1085c30:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1085c34:	0005303a 	rdctl	r2,status
 1085c38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1085c3c:	e0fff717 	ldw	r3,-36(fp)
 1085c40:	00bfff84 	movi	r2,-2
 1085c44:	1884703a 	and	r2,r3,r2
 1085c48:	1001703a 	wrctl	status,r2
  
  return context;
 1085c4c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1085c50:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1085c54:	00c00044 	movi	r3,1
 1085c58:	e0bff217 	ldw	r2,-56(fp)
 1085c5c:	1884983a 	sll	r2,r3,r2
 1085c60:	1007883a 	mov	r3,r2
 1085c64:	d0a6d117 	ldw	r2,-25788(gp)
 1085c68:	1884b03a 	or	r2,r3,r2
 1085c6c:	d0a6d115 	stw	r2,-25788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1085c70:	d0a6d117 	ldw	r2,-25788(gp)
 1085c74:	100170fa 	wrctl	ienable,r2
 1085c78:	e0bff817 	ldw	r2,-32(fp)
 1085c7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1085c80:	e0bff917 	ldw	r2,-28(fp)
 1085c84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1085c88:	0005883a 	mov	r2,zero
 1085c8c:	00001906 	br	1085cf4 <alt_irq_register+0x158>
 1085c90:	e0bffd17 	ldw	r2,-12(fp)
 1085c94:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1085c98:	0005303a 	rdctl	r2,status
 1085c9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1085ca0:	e0fffa17 	ldw	r3,-24(fp)
 1085ca4:	00bfff84 	movi	r2,-2
 1085ca8:	1884703a 	and	r2,r3,r2
 1085cac:	1001703a 	wrctl	status,r2
  
  return context;
 1085cb0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1085cb4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 1085cb8:	00c00044 	movi	r3,1
 1085cbc:	e0bff417 	ldw	r2,-48(fp)
 1085cc0:	1884983a 	sll	r2,r3,r2
 1085cc4:	0084303a 	nor	r2,zero,r2
 1085cc8:	1007883a 	mov	r3,r2
 1085ccc:	d0a6d117 	ldw	r2,-25788(gp)
 1085cd0:	1884703a 	and	r2,r3,r2
 1085cd4:	d0a6d115 	stw	r2,-25788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1085cd8:	d0a6d117 	ldw	r2,-25788(gp)
 1085cdc:	100170fa 	wrctl	ienable,r2
 1085ce0:	e0bffb17 	ldw	r2,-20(fp)
 1085ce4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1085ce8:	e0bffc17 	ldw	r2,-16(fp)
 1085cec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1085cf0:	0005883a 	mov	r2,zero
 1085cf4:	e0bff115 	stw	r2,-60(fp)
 1085cf8:	e0bff317 	ldw	r2,-52(fp)
 1085cfc:	e0bff515 	stw	r2,-44(fp)
 1085d00:	e0bff517 	ldw	r2,-44(fp)
 1085d04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1085d08:	e0bff117 	ldw	r2,-60(fp)
}
 1085d0c:	e037883a 	mov	sp,fp
 1085d10:	df000017 	ldw	fp,0(sp)
 1085d14:	dec00104 	addi	sp,sp,4
 1085d18:	f800283a 	ret

01085d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1085d1c:	defffe04 	addi	sp,sp,-8
 1085d20:	dfc00115 	stw	ra,4(sp)
 1085d24:	df000015 	stw	fp,0(sp)
 1085d28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1085d2c:	d0a00917 	ldw	r2,-32732(gp)
 1085d30:	10000326 	beq	r2,zero,1085d40 <alt_get_errno+0x24>
 1085d34:	d0a00917 	ldw	r2,-32732(gp)
 1085d38:	103ee83a 	callr	r2
 1085d3c:	00000106 	br	1085d44 <alt_get_errno+0x28>
 1085d40:	d0a6cd04 	addi	r2,gp,-25804
}
 1085d44:	e037883a 	mov	sp,fp
 1085d48:	dfc00117 	ldw	ra,4(sp)
 1085d4c:	df000017 	ldw	fp,0(sp)
 1085d50:	dec00204 	addi	sp,sp,8
 1085d54:	f800283a 	ret

01085d58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1085d58:	defffd04 	addi	sp,sp,-12
 1085d5c:	df000215 	stw	fp,8(sp)
 1085d60:	df000204 	addi	fp,sp,8
 1085d64:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1085d68:	e0bfff17 	ldw	r2,-4(fp)
 1085d6c:	10800217 	ldw	r2,8(r2)
 1085d70:	10d00034 	orhi	r3,r2,16384
 1085d74:	e0bfff17 	ldw	r2,-4(fp)
 1085d78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1085d7c:	e03ffe15 	stw	zero,-8(fp)
 1085d80:	00001d06 	br	1085df8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1085d84:	00804234 	movhi	r2,264
 1085d88:	109c2d04 	addi	r2,r2,28852
 1085d8c:	e0fffe17 	ldw	r3,-8(fp)
 1085d90:	18c00324 	muli	r3,r3,12
 1085d94:	10c5883a 	add	r2,r2,r3
 1085d98:	10c00017 	ldw	r3,0(r2)
 1085d9c:	e0bfff17 	ldw	r2,-4(fp)
 1085da0:	10800017 	ldw	r2,0(r2)
 1085da4:	1880111e 	bne	r3,r2,1085dec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1085da8:	00804234 	movhi	r2,264
 1085dac:	109c2d04 	addi	r2,r2,28852
 1085db0:	e0fffe17 	ldw	r3,-8(fp)
 1085db4:	18c00324 	muli	r3,r3,12
 1085db8:	10c5883a 	add	r2,r2,r3
 1085dbc:	10800204 	addi	r2,r2,8
 1085dc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1085dc4:	1000090e 	bge	r2,zero,1085dec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1085dc8:	e0bffe17 	ldw	r2,-8(fp)
 1085dcc:	10c00324 	muli	r3,r2,12
 1085dd0:	00804234 	movhi	r2,264
 1085dd4:	109c2d04 	addi	r2,r2,28852
 1085dd8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1085ddc:	e0bfff17 	ldw	r2,-4(fp)
 1085de0:	18800226 	beq	r3,r2,1085dec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1085de4:	00bffcc4 	movi	r2,-13
 1085de8:	00000806 	br	1085e0c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1085dec:	e0bffe17 	ldw	r2,-8(fp)
 1085df0:	10800044 	addi	r2,r2,1
 1085df4:	e0bffe15 	stw	r2,-8(fp)
 1085df8:	d0a00817 	ldw	r2,-32736(gp)
 1085dfc:	1007883a 	mov	r3,r2
 1085e00:	e0bffe17 	ldw	r2,-8(fp)
 1085e04:	18bfdf2e 	bgeu	r3,r2,1085d84 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1085e08:	0005883a 	mov	r2,zero
}
 1085e0c:	e037883a 	mov	sp,fp
 1085e10:	df000017 	ldw	fp,0(sp)
 1085e14:	dec00104 	addi	sp,sp,4
 1085e18:	f800283a 	ret

01085e1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1085e1c:	defff604 	addi	sp,sp,-40
 1085e20:	dfc00915 	stw	ra,36(sp)
 1085e24:	df000815 	stw	fp,32(sp)
 1085e28:	df000804 	addi	fp,sp,32
 1085e2c:	e13ffd15 	stw	r4,-12(fp)
 1085e30:	e17ffe15 	stw	r5,-8(fp)
 1085e34:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1085e38:	00bfffc4 	movi	r2,-1
 1085e3c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1085e40:	00bffb44 	movi	r2,-19
 1085e44:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1085e48:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1085e4c:	d1600604 	addi	r5,gp,-32744
 1085e50:	e13ffd17 	ldw	r4,-12(fp)
 1085e54:	10859980 	call	1085998 <alt_find_dev>
 1085e58:	e0bff815 	stw	r2,-32(fp)
 1085e5c:	e0bff817 	ldw	r2,-32(fp)
 1085e60:	1000051e 	bne	r2,zero,1085e78 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1085e64:	e13ffd17 	ldw	r4,-12(fp)
 1085e68:	10861380 	call	1086138 <alt_find_file>
 1085e6c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1085e70:	00800044 	movi	r2,1
 1085e74:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1085e78:	e0bff817 	ldw	r2,-32(fp)
 1085e7c:	10002926 	beq	r2,zero,1085f24 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1085e80:	e13ff817 	ldw	r4,-32(fp)
 1085e84:	10862400 	call	1086240 <alt_get_fd>
 1085e88:	e0bff915 	stw	r2,-28(fp)
 1085e8c:	e0bff917 	ldw	r2,-28(fp)
 1085e90:	1000030e 	bge	r2,zero,1085ea0 <open+0x84>
    {
      status = index;
 1085e94:	e0bff917 	ldw	r2,-28(fp)
 1085e98:	e0bffa15 	stw	r2,-24(fp)
 1085e9c:	00002306 	br	1085f2c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1085ea0:	e0bff917 	ldw	r2,-28(fp)
 1085ea4:	10c00324 	muli	r3,r2,12
 1085ea8:	00804234 	movhi	r2,264
 1085eac:	109c2d04 	addi	r2,r2,28852
 1085eb0:	1885883a 	add	r2,r3,r2
 1085eb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1085eb8:	e0fffe17 	ldw	r3,-8(fp)
 1085ebc:	00900034 	movhi	r2,16384
 1085ec0:	10bfffc4 	addi	r2,r2,-1
 1085ec4:	1886703a 	and	r3,r3,r2
 1085ec8:	e0bffc17 	ldw	r2,-16(fp)
 1085ecc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1085ed0:	e0bffb17 	ldw	r2,-20(fp)
 1085ed4:	1000051e 	bne	r2,zero,1085eec <open+0xd0>
 1085ed8:	e13ffc17 	ldw	r4,-16(fp)
 1085edc:	1085d580 	call	1085d58 <alt_file_locked>
 1085ee0:	e0bffa15 	stw	r2,-24(fp)
 1085ee4:	e0bffa17 	ldw	r2,-24(fp)
 1085ee8:	10001016 	blt	r2,zero,1085f2c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1085eec:	e0bff817 	ldw	r2,-32(fp)
 1085ef0:	10800317 	ldw	r2,12(r2)
 1085ef4:	10000826 	beq	r2,zero,1085f18 <open+0xfc>
 1085ef8:	e0bff817 	ldw	r2,-32(fp)
 1085efc:	10800317 	ldw	r2,12(r2)
 1085f00:	e1ffff17 	ldw	r7,-4(fp)
 1085f04:	e1bffe17 	ldw	r6,-8(fp)
 1085f08:	e17ffd17 	ldw	r5,-12(fp)
 1085f0c:	e13ffc17 	ldw	r4,-16(fp)
 1085f10:	103ee83a 	callr	r2
 1085f14:	00000106 	br	1085f1c <open+0x100>
 1085f18:	0005883a 	mov	r2,zero
 1085f1c:	e0bffa15 	stw	r2,-24(fp)
 1085f20:	00000206 	br	1085f2c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1085f24:	00bffb44 	movi	r2,-19
 1085f28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1085f2c:	e0bffa17 	ldw	r2,-24(fp)
 1085f30:	1000090e 	bge	r2,zero,1085f58 <open+0x13c>
  {
    alt_release_fd (index);  
 1085f34:	e13ff917 	ldw	r4,-28(fp)
 1085f38:	108388c0 	call	108388c <alt_release_fd>
    ALT_ERRNO = -status;
 1085f3c:	1085d1c0 	call	1085d1c <alt_get_errno>
 1085f40:	1007883a 	mov	r3,r2
 1085f44:	e0bffa17 	ldw	r2,-24(fp)
 1085f48:	0085c83a 	sub	r2,zero,r2
 1085f4c:	18800015 	stw	r2,0(r3)
    return -1;
 1085f50:	00bfffc4 	movi	r2,-1
 1085f54:	00000106 	br	1085f5c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1085f58:	e0bff917 	ldw	r2,-28(fp)
}
 1085f5c:	e037883a 	mov	sp,fp
 1085f60:	dfc00117 	ldw	ra,4(sp)
 1085f64:	df000017 	ldw	fp,0(sp)
 1085f68:	dec00204 	addi	sp,sp,8
 1085f6c:	f800283a 	ret

01085f70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1085f70:	defffa04 	addi	sp,sp,-24
 1085f74:	df000515 	stw	fp,20(sp)
 1085f78:	df000504 	addi	fp,sp,20
 1085f7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1085f80:	0005303a 	rdctl	r2,status
 1085f84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1085f88:	e0fffc17 	ldw	r3,-16(fp)
 1085f8c:	00bfff84 	movi	r2,-2
 1085f90:	1884703a 	and	r2,r3,r2
 1085f94:	1001703a 	wrctl	status,r2
  
  return context;
 1085f98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1085f9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1085fa0:	e0bfff17 	ldw	r2,-4(fp)
 1085fa4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1085fa8:	e0bffd17 	ldw	r2,-12(fp)
 1085fac:	10800017 	ldw	r2,0(r2)
 1085fb0:	e0fffd17 	ldw	r3,-12(fp)
 1085fb4:	18c00117 	ldw	r3,4(r3)
 1085fb8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1085fbc:	e0bffd17 	ldw	r2,-12(fp)
 1085fc0:	10800117 	ldw	r2,4(r2)
 1085fc4:	e0fffd17 	ldw	r3,-12(fp)
 1085fc8:	18c00017 	ldw	r3,0(r3)
 1085fcc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1085fd0:	e0bffd17 	ldw	r2,-12(fp)
 1085fd4:	e0fffd17 	ldw	r3,-12(fp)
 1085fd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1085fdc:	e0bffd17 	ldw	r2,-12(fp)
 1085fe0:	e0fffd17 	ldw	r3,-12(fp)
 1085fe4:	10c00015 	stw	r3,0(r2)
 1085fe8:	e0bffb17 	ldw	r2,-20(fp)
 1085fec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1085ff0:	e0bffe17 	ldw	r2,-8(fp)
 1085ff4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1085ff8:	0001883a 	nop
 1085ffc:	e037883a 	mov	sp,fp
 1086000:	df000017 	ldw	fp,0(sp)
 1086004:	dec00104 	addi	sp,sp,4
 1086008:	f800283a 	ret

0108600c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 108600c:	defffb04 	addi	sp,sp,-20
 1086010:	dfc00415 	stw	ra,16(sp)
 1086014:	df000315 	stw	fp,12(sp)
 1086018:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 108601c:	d0a00c17 	ldw	r2,-32720(gp)
 1086020:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1086024:	d0a6d317 	ldw	r2,-25780(gp)
 1086028:	10800044 	addi	r2,r2,1
 108602c:	d0a6d315 	stw	r2,-25780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1086030:	00002e06 	br	10860ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1086034:	e0bffd17 	ldw	r2,-12(fp)
 1086038:	10800017 	ldw	r2,0(r2)
 108603c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1086040:	e0bffd17 	ldw	r2,-12(fp)
 1086044:	10800403 	ldbu	r2,16(r2)
 1086048:	10803fcc 	andi	r2,r2,255
 108604c:	10000426 	beq	r2,zero,1086060 <alt_tick+0x54>
 1086050:	d0a6d317 	ldw	r2,-25780(gp)
 1086054:	1000021e 	bne	r2,zero,1086060 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1086058:	e0bffd17 	ldw	r2,-12(fp)
 108605c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1086060:	e0bffd17 	ldw	r2,-12(fp)
 1086064:	10800217 	ldw	r2,8(r2)
 1086068:	d0e6d317 	ldw	r3,-25780(gp)
 108606c:	18801d36 	bltu	r3,r2,10860e4 <alt_tick+0xd8>
 1086070:	e0bffd17 	ldw	r2,-12(fp)
 1086074:	10800403 	ldbu	r2,16(r2)
 1086078:	10803fcc 	andi	r2,r2,255
 108607c:	1000191e 	bne	r2,zero,10860e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1086080:	e0bffd17 	ldw	r2,-12(fp)
 1086084:	10800317 	ldw	r2,12(r2)
 1086088:	e0fffd17 	ldw	r3,-12(fp)
 108608c:	18c00517 	ldw	r3,20(r3)
 1086090:	1809883a 	mov	r4,r3
 1086094:	103ee83a 	callr	r2
 1086098:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 108609c:	e0bfff17 	ldw	r2,-4(fp)
 10860a0:	1000031e 	bne	r2,zero,10860b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10860a4:	e13ffd17 	ldw	r4,-12(fp)
 10860a8:	1085f700 	call	1085f70 <alt_alarm_stop>
 10860ac:	00000d06 	br	10860e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10860b0:	e0bffd17 	ldw	r2,-12(fp)
 10860b4:	10c00217 	ldw	r3,8(r2)
 10860b8:	e0bfff17 	ldw	r2,-4(fp)
 10860bc:	1887883a 	add	r3,r3,r2
 10860c0:	e0bffd17 	ldw	r2,-12(fp)
 10860c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10860c8:	e0bffd17 	ldw	r2,-12(fp)
 10860cc:	10c00217 	ldw	r3,8(r2)
 10860d0:	d0a6d317 	ldw	r2,-25780(gp)
 10860d4:	1880032e 	bgeu	r3,r2,10860e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 10860d8:	e0bffd17 	ldw	r2,-12(fp)
 10860dc:	00c00044 	movi	r3,1
 10860e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 10860e4:	e0bffe17 	ldw	r2,-8(fp)
 10860e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10860ec:	e0fffd17 	ldw	r3,-12(fp)
 10860f0:	d0a00c04 	addi	r2,gp,-32720
 10860f4:	18bfcf1e 	bne	r3,r2,1086034 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10860f8:	0001883a 	nop
}
 10860fc:	0001883a 	nop
 1086100:	e037883a 	mov	sp,fp
 1086104:	dfc00117 	ldw	ra,4(sp)
 1086108:	df000017 	ldw	fp,0(sp)
 108610c:	dec00204 	addi	sp,sp,8
 1086110:	f800283a 	ret

01086114 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1086114:	deffff04 	addi	sp,sp,-4
 1086118:	df000015 	stw	fp,0(sp)
 108611c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1086120:	000170fa 	wrctl	ienable,zero
}
 1086124:	0001883a 	nop
 1086128:	e037883a 	mov	sp,fp
 108612c:	df000017 	ldw	fp,0(sp)
 1086130:	dec00104 	addi	sp,sp,4
 1086134:	f800283a 	ret

01086138 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1086138:	defffb04 	addi	sp,sp,-20
 108613c:	dfc00415 	stw	ra,16(sp)
 1086140:	df000315 	stw	fp,12(sp)
 1086144:	df000304 	addi	fp,sp,12
 1086148:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 108614c:	d0a00417 	ldw	r2,-32752(gp)
 1086150:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1086154:	00003106 	br	108621c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1086158:	e0bffd17 	ldw	r2,-12(fp)
 108615c:	10800217 	ldw	r2,8(r2)
 1086160:	1009883a 	mov	r4,r2
 1086164:	108049c0 	call	108049c <strlen>
 1086168:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 108616c:	e0bffd17 	ldw	r2,-12(fp)
 1086170:	10c00217 	ldw	r3,8(r2)
 1086174:	e0bffe17 	ldw	r2,-8(fp)
 1086178:	10bfffc4 	addi	r2,r2,-1
 108617c:	1885883a 	add	r2,r3,r2
 1086180:	10800003 	ldbu	r2,0(r2)
 1086184:	10803fcc 	andi	r2,r2,255
 1086188:	1080201c 	xori	r2,r2,128
 108618c:	10bfe004 	addi	r2,r2,-128
 1086190:	10800bd8 	cmpnei	r2,r2,47
 1086194:	1000031e 	bne	r2,zero,10861a4 <alt_find_file+0x6c>
    {
      len -= 1;
 1086198:	e0bffe17 	ldw	r2,-8(fp)
 108619c:	10bfffc4 	addi	r2,r2,-1
 10861a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10861a4:	e0bffe17 	ldw	r2,-8(fp)
 10861a8:	e0ffff17 	ldw	r3,-4(fp)
 10861ac:	1885883a 	add	r2,r3,r2
 10861b0:	10800003 	ldbu	r2,0(r2)
 10861b4:	10803fcc 	andi	r2,r2,255
 10861b8:	1080201c 	xori	r2,r2,128
 10861bc:	10bfe004 	addi	r2,r2,-128
 10861c0:	10800be0 	cmpeqi	r2,r2,47
 10861c4:	1000081e 	bne	r2,zero,10861e8 <alt_find_file+0xb0>
 10861c8:	e0bffe17 	ldw	r2,-8(fp)
 10861cc:	e0ffff17 	ldw	r3,-4(fp)
 10861d0:	1885883a 	add	r2,r3,r2
 10861d4:	10800003 	ldbu	r2,0(r2)
 10861d8:	10803fcc 	andi	r2,r2,255
 10861dc:	1080201c 	xori	r2,r2,128
 10861e0:	10bfe004 	addi	r2,r2,-128
 10861e4:	10000a1e 	bne	r2,zero,1086210 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 10861e8:	e0bffd17 	ldw	r2,-12(fp)
 10861ec:	10800217 	ldw	r2,8(r2)
 10861f0:	e0fffe17 	ldw	r3,-8(fp)
 10861f4:	180d883a 	mov	r6,r3
 10861f8:	e17fff17 	ldw	r5,-4(fp)
 10861fc:	1009883a 	mov	r4,r2
 1086200:	108645c0 	call	108645c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1086204:	1000021e 	bne	r2,zero,1086210 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1086208:	e0bffd17 	ldw	r2,-12(fp)
 108620c:	00000706 	br	108622c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1086210:	e0bffd17 	ldw	r2,-12(fp)
 1086214:	10800017 	ldw	r2,0(r2)
 1086218:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 108621c:	e0fffd17 	ldw	r3,-12(fp)
 1086220:	d0a00404 	addi	r2,gp,-32752
 1086224:	18bfcc1e 	bne	r3,r2,1086158 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1086228:	0005883a 	mov	r2,zero
}
 108622c:	e037883a 	mov	sp,fp
 1086230:	dfc00117 	ldw	ra,4(sp)
 1086234:	df000017 	ldw	fp,0(sp)
 1086238:	dec00204 	addi	sp,sp,8
 108623c:	f800283a 	ret

01086240 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1086240:	defffc04 	addi	sp,sp,-16
 1086244:	df000315 	stw	fp,12(sp)
 1086248:	df000304 	addi	fp,sp,12
 108624c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1086250:	00bffa04 	movi	r2,-24
 1086254:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1086258:	e03ffd15 	stw	zero,-12(fp)
 108625c:	00001906 	br	10862c4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1086260:	00804234 	movhi	r2,264
 1086264:	109c2d04 	addi	r2,r2,28852
 1086268:	e0fffd17 	ldw	r3,-12(fp)
 108626c:	18c00324 	muli	r3,r3,12
 1086270:	10c5883a 	add	r2,r2,r3
 1086274:	10800017 	ldw	r2,0(r2)
 1086278:	10000f1e 	bne	r2,zero,10862b8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 108627c:	00804234 	movhi	r2,264
 1086280:	109c2d04 	addi	r2,r2,28852
 1086284:	e0fffd17 	ldw	r3,-12(fp)
 1086288:	18c00324 	muli	r3,r3,12
 108628c:	10c5883a 	add	r2,r2,r3
 1086290:	e0ffff17 	ldw	r3,-4(fp)
 1086294:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1086298:	d0e00817 	ldw	r3,-32736(gp)
 108629c:	e0bffd17 	ldw	r2,-12(fp)
 10862a0:	1880020e 	bge	r3,r2,10862ac <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 10862a4:	e0bffd17 	ldw	r2,-12(fp)
 10862a8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 10862ac:	e0bffd17 	ldw	r2,-12(fp)
 10862b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 10862b4:	00000606 	br	10862d0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10862b8:	e0bffd17 	ldw	r2,-12(fp)
 10862bc:	10800044 	addi	r2,r2,1
 10862c0:	e0bffd15 	stw	r2,-12(fp)
 10862c4:	e0bffd17 	ldw	r2,-12(fp)
 10862c8:	10800810 	cmplti	r2,r2,32
 10862cc:	103fe41e 	bne	r2,zero,1086260 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10862d0:	e0bffe17 	ldw	r2,-8(fp)
}
 10862d4:	e037883a 	mov	sp,fp
 10862d8:	df000017 	ldw	fp,0(sp)
 10862dc:	dec00104 	addi	sp,sp,4
 10862e0:	f800283a 	ret

010862e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10862e4:	defffb04 	addi	sp,sp,-20
 10862e8:	df000415 	stw	fp,16(sp)
 10862ec:	df000404 	addi	fp,sp,16
 10862f0:	e13ffe15 	stw	r4,-8(fp)
 10862f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10862f8:	e0bfff17 	ldw	r2,-4(fp)
 10862fc:	10840070 	cmpltui	r2,r2,4097
 1086300:	1000021e 	bne	r2,zero,108630c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1086304:	00840004 	movi	r2,4096
 1086308:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 108630c:	e0fffe17 	ldw	r3,-8(fp)
 1086310:	e0bfff17 	ldw	r2,-4(fp)
 1086314:	1885883a 	add	r2,r3,r2
 1086318:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 108631c:	e0bffe17 	ldw	r2,-8(fp)
 1086320:	e0bffc15 	stw	r2,-16(fp)
 1086324:	00000506 	br	108633c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1086328:	e0bffc17 	ldw	r2,-16(fp)
 108632c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1086330:	e0bffc17 	ldw	r2,-16(fp)
 1086334:	10800804 	addi	r2,r2,32
 1086338:	e0bffc15 	stw	r2,-16(fp)
 108633c:	e0fffc17 	ldw	r3,-16(fp)
 1086340:	e0bffd17 	ldw	r2,-12(fp)
 1086344:	18bff836 	bltu	r3,r2,1086328 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1086348:	e0bffe17 	ldw	r2,-8(fp)
 108634c:	108007cc 	andi	r2,r2,31
 1086350:	10000226 	beq	r2,zero,108635c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1086354:	e0bffc17 	ldw	r2,-16(fp)
 1086358:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 108635c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1086360:	0001883a 	nop
 1086364:	e037883a 	mov	sp,fp
 1086368:	df000017 	ldw	fp,0(sp)
 108636c:	dec00104 	addi	sp,sp,4
 1086370:	f800283a 	ret

01086374 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1086374:	defffe04 	addi	sp,sp,-8
 1086378:	df000115 	stw	fp,4(sp)
 108637c:	df000104 	addi	fp,sp,4
 1086380:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1086384:	e0bfff17 	ldw	r2,-4(fp)
 1086388:	10bffe84 	addi	r2,r2,-6
 108638c:	10c00428 	cmpgeui	r3,r2,16
 1086390:	18001a1e 	bne	r3,zero,10863fc <alt_exception_cause_generated_bad_addr+0x88>
 1086394:	100690ba 	slli	r3,r2,2
 1086398:	00804234 	movhi	r2,264
 108639c:	1098eb04 	addi	r2,r2,25516
 10863a0:	1885883a 	add	r2,r3,r2
 10863a4:	10800017 	ldw	r2,0(r2)
 10863a8:	1000683a 	jmp	r2
 10863ac:	010863ec 	andhi	r4,zero,8591
 10863b0:	010863ec 	andhi	r4,zero,8591
 10863b4:	010863fc 	xorhi	r4,zero,8591
 10863b8:	010863fc 	xorhi	r4,zero,8591
 10863bc:	010863fc 	xorhi	r4,zero,8591
 10863c0:	010863ec 	andhi	r4,zero,8591
 10863c4:	010863f4 	movhi	r4,8591
 10863c8:	010863fc 	xorhi	r4,zero,8591
 10863cc:	010863ec 	andhi	r4,zero,8591
 10863d0:	010863ec 	andhi	r4,zero,8591
 10863d4:	010863fc 	xorhi	r4,zero,8591
 10863d8:	010863ec 	andhi	r4,zero,8591
 10863dc:	010863f4 	movhi	r4,8591
 10863e0:	010863fc 	xorhi	r4,zero,8591
 10863e4:	010863fc 	xorhi	r4,zero,8591
 10863e8:	010863ec 	andhi	r4,zero,8591
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 10863ec:	00800044 	movi	r2,1
 10863f0:	00000306 	br	1086400 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 10863f4:	0005883a 	mov	r2,zero
 10863f8:	00000106 	br	1086400 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 10863fc:	0005883a 	mov	r2,zero
  }
}
 1086400:	e037883a 	mov	sp,fp
 1086404:	df000017 	ldw	fp,0(sp)
 1086408:	dec00104 	addi	sp,sp,4
 108640c:	f800283a 	ret

01086410 <atexit>:
 1086410:	200b883a 	mov	r5,r4
 1086414:	000f883a 	mov	r7,zero
 1086418:	000d883a 	mov	r6,zero
 108641c:	0009883a 	mov	r4,zero
 1086420:	10864d81 	jmpi	10864d8 <__register_exitproc>

01086424 <exit>:
 1086424:	defffe04 	addi	sp,sp,-8
 1086428:	000b883a 	mov	r5,zero
 108642c:	dc000015 	stw	r16,0(sp)
 1086430:	dfc00115 	stw	ra,4(sp)
 1086434:	2021883a 	mov	r16,r4
 1086438:	10865f00 	call	10865f0 <__call_exitprocs>
 108643c:	00804274 	movhi	r2,265
 1086440:	10a0c604 	addi	r2,r2,-31976
 1086444:	11000017 	ldw	r4,0(r2)
 1086448:	20800f17 	ldw	r2,60(r4)
 108644c:	10000126 	beq	r2,zero,1086454 <exit+0x30>
 1086450:	103ee83a 	callr	r2
 1086454:	8009883a 	mov	r4,r16
 1086458:	10867700 	call	1086770 <_exit>

0108645c <memcmp>:
 108645c:	01c000c4 	movi	r7,3
 1086460:	3980192e 	bgeu	r7,r6,10864c8 <memcmp+0x6c>
 1086464:	2144b03a 	or	r2,r4,r5
 1086468:	11c4703a 	and	r2,r2,r7
 108646c:	10000f26 	beq	r2,zero,10864ac <memcmp+0x50>
 1086470:	20800003 	ldbu	r2,0(r4)
 1086474:	28c00003 	ldbu	r3,0(r5)
 1086478:	10c0151e 	bne	r2,r3,10864d0 <memcmp+0x74>
 108647c:	31bfff84 	addi	r6,r6,-2
 1086480:	01ffffc4 	movi	r7,-1
 1086484:	00000406 	br	1086498 <memcmp+0x3c>
 1086488:	20800003 	ldbu	r2,0(r4)
 108648c:	28c00003 	ldbu	r3,0(r5)
 1086490:	31bfffc4 	addi	r6,r6,-1
 1086494:	10c00e1e 	bne	r2,r3,10864d0 <memcmp+0x74>
 1086498:	21000044 	addi	r4,r4,1
 108649c:	29400044 	addi	r5,r5,1
 10864a0:	31fff91e 	bne	r6,r7,1086488 <memcmp+0x2c>
 10864a4:	0005883a 	mov	r2,zero
 10864a8:	f800283a 	ret
 10864ac:	20c00017 	ldw	r3,0(r4)
 10864b0:	28800017 	ldw	r2,0(r5)
 10864b4:	18bfee1e 	bne	r3,r2,1086470 <memcmp+0x14>
 10864b8:	31bfff04 	addi	r6,r6,-4
 10864bc:	21000104 	addi	r4,r4,4
 10864c0:	29400104 	addi	r5,r5,4
 10864c4:	39bff936 	bltu	r7,r6,10864ac <memcmp+0x50>
 10864c8:	303fe91e 	bne	r6,zero,1086470 <memcmp+0x14>
 10864cc:	003ff506 	br	10864a4 <memcmp+0x48>
 10864d0:	10c5c83a 	sub	r2,r2,r3
 10864d4:	f800283a 	ret

010864d8 <__register_exitproc>:
 10864d8:	defffa04 	addi	sp,sp,-24
 10864dc:	dc000315 	stw	r16,12(sp)
 10864e0:	04004274 	movhi	r16,265
 10864e4:	8420c604 	addi	r16,r16,-31976
 10864e8:	80c00017 	ldw	r3,0(r16)
 10864ec:	dc400415 	stw	r17,16(sp)
 10864f0:	dfc00515 	stw	ra,20(sp)
 10864f4:	18805217 	ldw	r2,328(r3)
 10864f8:	2023883a 	mov	r17,r4
 10864fc:	10003726 	beq	r2,zero,10865dc <__register_exitproc+0x104>
 1086500:	10c00117 	ldw	r3,4(r2)
 1086504:	010007c4 	movi	r4,31
 1086508:	20c00e16 	blt	r4,r3,1086544 <__register_exitproc+0x6c>
 108650c:	1a000044 	addi	r8,r3,1
 1086510:	8800221e 	bne	r17,zero,108659c <__register_exitproc+0xc4>
 1086514:	18c00084 	addi	r3,r3,2
 1086518:	18c7883a 	add	r3,r3,r3
 108651c:	18c7883a 	add	r3,r3,r3
 1086520:	12000115 	stw	r8,4(r2)
 1086524:	10c7883a 	add	r3,r2,r3
 1086528:	19400015 	stw	r5,0(r3)
 108652c:	0005883a 	mov	r2,zero
 1086530:	dfc00517 	ldw	ra,20(sp)
 1086534:	dc400417 	ldw	r17,16(sp)
 1086538:	dc000317 	ldw	r16,12(sp)
 108653c:	dec00604 	addi	sp,sp,24
 1086540:	f800283a 	ret
 1086544:	00800034 	movhi	r2,0
 1086548:	10800004 	addi	r2,r2,0
 108654c:	10002626 	beq	r2,zero,10865e8 <__register_exitproc+0x110>
 1086550:	01006404 	movi	r4,400
 1086554:	d9400015 	stw	r5,0(sp)
 1086558:	d9800115 	stw	r6,4(sp)
 108655c:	d9c00215 	stw	r7,8(sp)
 1086560:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
 1086564:	d9400017 	ldw	r5,0(sp)
 1086568:	d9800117 	ldw	r6,4(sp)
 108656c:	d9c00217 	ldw	r7,8(sp)
 1086570:	10001d26 	beq	r2,zero,10865e8 <__register_exitproc+0x110>
 1086574:	81000017 	ldw	r4,0(r16)
 1086578:	10000115 	stw	zero,4(r2)
 108657c:	02000044 	movi	r8,1
 1086580:	22405217 	ldw	r9,328(r4)
 1086584:	0007883a 	mov	r3,zero
 1086588:	12400015 	stw	r9,0(r2)
 108658c:	20805215 	stw	r2,328(r4)
 1086590:	10006215 	stw	zero,392(r2)
 1086594:	10006315 	stw	zero,396(r2)
 1086598:	883fde26 	beq	r17,zero,1086514 <__register_exitproc+0x3c>
 108659c:	18c9883a 	add	r4,r3,r3
 10865a0:	2109883a 	add	r4,r4,r4
 10865a4:	1109883a 	add	r4,r2,r4
 10865a8:	21802215 	stw	r6,136(r4)
 10865ac:	01800044 	movi	r6,1
 10865b0:	12406217 	ldw	r9,392(r2)
 10865b4:	30cc983a 	sll	r6,r6,r3
 10865b8:	4992b03a 	or	r9,r9,r6
 10865bc:	12406215 	stw	r9,392(r2)
 10865c0:	21c04215 	stw	r7,264(r4)
 10865c4:	01000084 	movi	r4,2
 10865c8:	893fd21e 	bne	r17,r4,1086514 <__register_exitproc+0x3c>
 10865cc:	11006317 	ldw	r4,396(r2)
 10865d0:	218cb03a 	or	r6,r4,r6
 10865d4:	11806315 	stw	r6,396(r2)
 10865d8:	003fce06 	br	1086514 <__register_exitproc+0x3c>
 10865dc:	18805304 	addi	r2,r3,332
 10865e0:	18805215 	stw	r2,328(r3)
 10865e4:	003fc606 	br	1086500 <__register_exitproc+0x28>
 10865e8:	00bfffc4 	movi	r2,-1
 10865ec:	003fd006 	br	1086530 <__register_exitproc+0x58>

010865f0 <__call_exitprocs>:
 10865f0:	defff504 	addi	sp,sp,-44
 10865f4:	df000915 	stw	fp,36(sp)
 10865f8:	dd400615 	stw	r21,24(sp)
 10865fc:	dc800315 	stw	r18,12(sp)
 1086600:	dfc00a15 	stw	ra,40(sp)
 1086604:	ddc00815 	stw	r23,32(sp)
 1086608:	dd800715 	stw	r22,28(sp)
 108660c:	dd000515 	stw	r20,20(sp)
 1086610:	dcc00415 	stw	r19,16(sp)
 1086614:	dc400215 	stw	r17,8(sp)
 1086618:	dc000115 	stw	r16,4(sp)
 108661c:	d9000015 	stw	r4,0(sp)
 1086620:	2839883a 	mov	fp,r5
 1086624:	04800044 	movi	r18,1
 1086628:	057fffc4 	movi	r21,-1
 108662c:	00804274 	movhi	r2,265
 1086630:	10a0c604 	addi	r2,r2,-31976
 1086634:	12000017 	ldw	r8,0(r2)
 1086638:	45005217 	ldw	r20,328(r8)
 108663c:	44c05204 	addi	r19,r8,328
 1086640:	a0001c26 	beq	r20,zero,10866b4 <__call_exitprocs+0xc4>
 1086644:	a0800117 	ldw	r2,4(r20)
 1086648:	15ffffc4 	addi	r23,r2,-1
 108664c:	b8000d16 	blt	r23,zero,1086684 <__call_exitprocs+0x94>
 1086650:	14000044 	addi	r16,r2,1
 1086654:	8421883a 	add	r16,r16,r16
 1086658:	8421883a 	add	r16,r16,r16
 108665c:	84402004 	addi	r17,r16,128
 1086660:	a463883a 	add	r17,r20,r17
 1086664:	a421883a 	add	r16,r20,r16
 1086668:	e0001e26 	beq	fp,zero,10866e4 <__call_exitprocs+0xf4>
 108666c:	80804017 	ldw	r2,256(r16)
 1086670:	e0801c26 	beq	fp,r2,10866e4 <__call_exitprocs+0xf4>
 1086674:	bdffffc4 	addi	r23,r23,-1
 1086678:	843fff04 	addi	r16,r16,-4
 108667c:	8c7fff04 	addi	r17,r17,-4
 1086680:	bd7ff91e 	bne	r23,r21,1086668 <__call_exitprocs+0x78>
 1086684:	00800034 	movhi	r2,0
 1086688:	10800004 	addi	r2,r2,0
 108668c:	10000926 	beq	r2,zero,10866b4 <__call_exitprocs+0xc4>
 1086690:	a0800117 	ldw	r2,4(r20)
 1086694:	1000301e 	bne	r2,zero,1086758 <__call_exitprocs+0x168>
 1086698:	a0800017 	ldw	r2,0(r20)
 108669c:	10003226 	beq	r2,zero,1086768 <__call_exitprocs+0x178>
 10866a0:	a009883a 	mov	r4,r20
 10866a4:	98800015 	stw	r2,0(r19)
 10866a8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
 10866ac:	9d000017 	ldw	r20,0(r19)
 10866b0:	a03fe41e 	bne	r20,zero,1086644 <__call_exitprocs+0x54>
 10866b4:	dfc00a17 	ldw	ra,40(sp)
 10866b8:	df000917 	ldw	fp,36(sp)
 10866bc:	ddc00817 	ldw	r23,32(sp)
 10866c0:	dd800717 	ldw	r22,28(sp)
 10866c4:	dd400617 	ldw	r21,24(sp)
 10866c8:	dd000517 	ldw	r20,20(sp)
 10866cc:	dcc00417 	ldw	r19,16(sp)
 10866d0:	dc800317 	ldw	r18,12(sp)
 10866d4:	dc400217 	ldw	r17,8(sp)
 10866d8:	dc000117 	ldw	r16,4(sp)
 10866dc:	dec00b04 	addi	sp,sp,44
 10866e0:	f800283a 	ret
 10866e4:	a0800117 	ldw	r2,4(r20)
 10866e8:	80c00017 	ldw	r3,0(r16)
 10866ec:	10bfffc4 	addi	r2,r2,-1
 10866f0:	15c01426 	beq	r2,r23,1086744 <__call_exitprocs+0x154>
 10866f4:	80000015 	stw	zero,0(r16)
 10866f8:	183fde26 	beq	r3,zero,1086674 <__call_exitprocs+0x84>
 10866fc:	95c8983a 	sll	r4,r18,r23
 1086700:	a0806217 	ldw	r2,392(r20)
 1086704:	a5800117 	ldw	r22,4(r20)
 1086708:	2084703a 	and	r2,r4,r2
 108670c:	10000b26 	beq	r2,zero,108673c <__call_exitprocs+0x14c>
 1086710:	a0806317 	ldw	r2,396(r20)
 1086714:	2088703a 	and	r4,r4,r2
 1086718:	20000c1e 	bne	r4,zero,108674c <__call_exitprocs+0x15c>
 108671c:	89400017 	ldw	r5,0(r17)
 1086720:	d9000017 	ldw	r4,0(sp)
 1086724:	183ee83a 	callr	r3
 1086728:	a0800117 	ldw	r2,4(r20)
 108672c:	15bfbf1e 	bne	r2,r22,108662c <__call_exitprocs+0x3c>
 1086730:	98800017 	ldw	r2,0(r19)
 1086734:	153fcf26 	beq	r2,r20,1086674 <__call_exitprocs+0x84>
 1086738:	003fbc06 	br	108662c <__call_exitprocs+0x3c>
 108673c:	183ee83a 	callr	r3
 1086740:	003ff906 	br	1086728 <__call_exitprocs+0x138>
 1086744:	a5c00115 	stw	r23,4(r20)
 1086748:	003feb06 	br	10866f8 <__call_exitprocs+0x108>
 108674c:	89000017 	ldw	r4,0(r17)
 1086750:	183ee83a 	callr	r3
 1086754:	003ff406 	br	1086728 <__call_exitprocs+0x138>
 1086758:	a0800017 	ldw	r2,0(r20)
 108675c:	a027883a 	mov	r19,r20
 1086760:	1029883a 	mov	r20,r2
 1086764:	003fb606 	br	1086640 <__call_exitprocs+0x50>
 1086768:	0005883a 	mov	r2,zero
 108676c:	003ffb06 	br	108675c <__call_exitprocs+0x16c>

01086770 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1086770:	defffd04 	addi	sp,sp,-12
 1086774:	df000215 	stw	fp,8(sp)
 1086778:	df000204 	addi	fp,sp,8
 108677c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1086780:	0001883a 	nop
 1086784:	e0bfff17 	ldw	r2,-4(fp)
 1086788:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 108678c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1086790:	10000226 	beq	r2,zero,108679c <_exit+0x2c>
    ALT_SIM_FAIL();
 1086794:	002af070 	cmpltui	zero,zero,43969
 1086798:	00000106 	br	10867a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 108679c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10867a0:	003fff06 	br	10867a0 <_exit+0x30>
