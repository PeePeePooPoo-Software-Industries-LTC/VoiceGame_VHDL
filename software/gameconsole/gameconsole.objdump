
gameconsole.elf:     file format elf32-littlenios2
gameconsole.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00280248

Program Header:
    LOAD off    0x00001000 vaddr 0x00280000 paddr 0x00280000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00280020 paddr 0x00280020 align 2**12
         filesz 0x00011b1c memsz 0x00011b1c flags r-x
    LOAD off    0x00012b3c vaddr 0x00291b3c paddr 0x002936e0 align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x00015284 vaddr 0x00295284 paddr 0x00295284 align 2**12
         filesz 0x00000000 memsz 0x00000614 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00280000  00280000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00280020  00280020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000114f8  00280248  00280248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003fc  00291740  00291740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  00291b3c  002936e0  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000614  00295284  00295284  00015284  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00295898  00295898  000146e0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000146e0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ef8  00000000  00000000  00014708  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002568a  00000000  00000000  00015600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000943c  00000000  00000000  0003ac8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c01f  00000000  00000000  000440c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002874  00000000  00000000  000500e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000413e  00000000  00000000  0005295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  00056a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006e304  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  0006e338  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007366a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007366d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00073679  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007367a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007367b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00073686  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00073691  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0007369c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  000736a7  2**0
                  CONTENTS, READONLY
 26 .jdi          00005da1  00000000  00000000  000736db  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005e06f  00000000  00000000  0007947c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00280000 l    d  .entry	00000000 .entry
00280020 l    d  .exceptions	00000000 .exceptions
00280248 l    d  .text	00000000 .text
00291740 l    d  .rodata	00000000 .rodata
00291b3c l    d  .rwdata	00000000 .rwdata
00295284 l    d  .bss	00000000 .bss
00295898 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gameconsole_bsp//obj/HAL/src/crt0.o
00280290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 audio.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00291832 l     O .rodata	00000010 zeroes.4404
00282efc l     F .text	000000bc __sbprintf
00291842 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0028310c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00284c3c l     F .text	00000008 __fp_unlock
00284c50 l     F .text	0000019c __sinit.part.1
00284dec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00291b3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00291f80 l     O .rwdata	00000020 lc_ctype_charset
00291f60 l     O .rwdata	00000020 lc_message_charset
00291fa0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00291874 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
002881e8 l     F .text	000000fc __sprint_r.part.0
002919a8 l     O .rodata	00000010 blanks.4348
00291998 l     O .rodata	00000010 zeroes.4349
00289774 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0028d27c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0028d388 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0028d3b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0028d4a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0028d580 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0028d66c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0028d840 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
002936d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0028da8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0028dbc0 l     F .text	00000034 alt_dev_reg
00292588 l     O .rwdata	00001060 jtag_uart_0
002935e8 l     O .rwdata	00000030 audio_and_video_config_0
00293618 l     O .rwdata	00000030 audio_0
00293648 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0028e080 l     F .text	00000210 altera_avalon_jtag_uart_irq
0028e290 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00290794 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
002909f8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00290cb8 l     F .text	0000003c alt_get_errno
00290cf4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
002952bc g     O .bss	00000004 alt_instruction_exception_handler
0028f1b4 g     F .text	00000038 alt_up_av_config_reset
0028782c g     F .text	00000074 _mprec_log10
0028f60c g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
00287918 g     F .text	0000008c __any_on
00289d10 g     F .text	00000054 _isatty_r
00291880 g     O .rodata	00000028 __mprec_tinytens
0028f224 g     F .text	00000034 alt_up_av_config_disable_interrupt
0028d77c g     F .text	0000007c alt_main
00290040 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
00280b7c g     F .text	000000c0 _puts_r
00295798 g     O .bss	00000100 alt_irq
00289d64 g     F .text	00000060 _lseek_r
002936e0 g       *ABS*	00000000 __flash_rwdata_start
0028bda8 g     F .text	00000088 .hidden __eqdf2
0028eb70 g     F .text	00000060 alt_up_audio_read_fifo_avail
0028f2e8 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
00295898 g       *ABS*	00000000 __alt_heap_start
00280b40 g     F .text	0000003c printf
0028ebd0 g     F .text	00000068 alt_up_audio_record_r
00289f7c g     F .text	0000009c _wcrtomb_r
002880a8 g     F .text	0000005c __sseek
00284f8c g     F .text	00000010 __sinit
00289e24 g     F .text	00000140 __swbuf_r
00285a54 g     F .text	0000007c _setlocale_r
00284df4 g     F .text	00000068 __sfmoreglue
0028d81c g     F .text	00000024 __malloc_unlock
0028eadc g     F .text	00000094 alt_up_audio_reset_audio_core
00286724 g     F .text	0000015c memmove
00284f74 g     F .text	00000018 _cleanup
002869a8 g     F .text	000000a8 _Balloc
0028f7a8 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0028be30 g     F .text	000000dc .hidden __gtdf2
002910b0 g     F .text	00000024 altera_nios2_gen2_irq_init
0028f76c g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
00280000 g     F .entry	0000001c __reset
00280020 g       *ABS*	00000000 __flash_exceptions_start
00289cb4 g     F .text	0000005c _fstat_r
002952a0 g     O .bss	00000004 errno
00288024 g     F .text	00000008 __seofread
00280294 g     F .text	00000088 audio_init
0028ea9c g     F .text	00000040 alt_up_audio_write_interrupt_pending
002952a8 g     O .bss	00000004 alt_argv
0029b69c g       *ABS*	00000000 _gp
0028f93c g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00292408 g     O .rwdata	00000180 alt_fd_list
00290934 g     F .text	00000090 alt_find_dev
002865dc g     F .text	00000148 memcpy
00284c44 g     F .text	0000000c _cleanup_r
0028d094 g     F .text	000000dc .hidden __floatsidf
00290abc g     F .text	0000007c alt_io_redirect
0028bf0c g     F .text	000000f4 .hidden __ltdf2
00291740 g       *ABS*	00000000 __DTOR_END__
00280c3c g     F .text	00000014 puts
00291310 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00287f08 g     F .text	00000074 __fpclassifyd
00287788 g     F .text	000000a4 __ratio
00289758 g     F .text	0000001c __vfiprintf_internal
0028efb8 g     F .text	00000050 alt_up_audio_read_fifo_head
0028f9f8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0028e488 g     F .text	0000021c altera_avalon_jtag_uart_read
00280b10 g     F .text	00000030 _printf_r
00280000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00280a54 g     F .text	00000064 .hidden __udivsi3
0028d4dc g     F .text	000000a4 isatty
002918d0 g     O .rodata	000000c8 __mprec_tens
0028fe30 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
00285ad0 g     F .text	0000000c __locale_charset
00291280 g     F .text	00000090 alt_icache_flush
0029529c g     O .bss	00000004 __malloc_top_pad
0028f134 g     F .text	00000080 alt_up_av_config_read_data
002936a8 g     O .rwdata	00000004 __mb_cur_max
00285b00 g     F .text	0000000c _localeconv_r
00286db4 g     F .text	0000003c __i2b
00285410 g     F .text	000004bc __sfvwrite_r
00287f7c g     F .text	00000054 _sbrk_r
00290354 g     F .text	00000084 helper_plot_pixel
00289dc4 g     F .text	00000060 _read_r
002936c8 g     O .rwdata	00000004 alt_max_fd
0028f008 g     F .text	00000068 alt_up_audio_write_fifo_head
002899a8 g     F .text	000000f0 _fclose_r
00284c0c g     F .text	00000030 fflush
00295298 g     O .bss	00000004 __malloc_max_sbrked_mem
00290b38 g     F .text	00000180 alt_irq_register
0028ac14 g     F .text	000008ac .hidden __adddf3
00287530 g     F .text	0000010c __b2d
0028fa2c g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0028a6dc g     F .text	00000538 .hidden __umoddi3
0028d6a8 g     F .text	000000d4 lseek
002936a0 g     O .rwdata	00000004 _global_impure_ptr
002879a4 g     F .text	00000564 _realloc_r
00295898 g       *ABS*	00000000 __bss_end
0028fb54 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
00290fa8 g     F .text	00000108 alt_tick
00295284 g     O .bss	00000004 audio_device
0028a164 g     F .text	00000578 .hidden __udivdi3
00289c10 g     F .text	00000024 _fputwc_r
002918a8 g     O .rodata	00000028 __mprec_bigtens
00286b98 g     F .text	00000104 __s2b
0028d170 g     F .text	000000a8 .hidden __floatunsidf
00287270 g     F .text	00000060 __mcmp
0028e8c8 g     F .text	0000003c alt_up_audio_open_dev
00284fac g     F .text	00000018 __fp_lock_all
0028ed00 g     F .text	00000068 alt_up_audio_play_r
00290f0c g     F .text	0000009c alt_alarm_stop
002952b0 g     O .bss	00000004 alt_irq_active
002800fc g     F .exceptions	000000d8 alt_irq_handler
002923e0 g     O .rwdata	00000028 alt_dev_null
0029074c g     F .text	00000048 alt_dcache_flush_all
00286c9c g     F .text	00000068 __hi0bits
0029028c g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0028d014 g     F .text	00000080 .hidden __fixdfsi
0028047c g     F .text	0000005c vga_swap_buffers
002936e0 g       *ABS*	00000000 __ram_rwdata_end
002936c0 g     O .rwdata	00000008 alt_dev_list
0028dac8 g     F .text	000000f8 write
002903d8 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00291b3c g       *ABS*	00000000 __ram_rodata_end
0028d3f0 g     F .text	000000b0 fstat
0028bf0c g     F .text	000000f4 .hidden __ledf2
00286fe8 g     F .text	00000140 __pow5mult
002882fc g     F .text	0000145c ___vfiprintf_internal_r
00295290 g     O .bss	00000004 __nlocale_changed
00280ab8 g     F .text	00000058 .hidden __umodsi3
00295898 g       *ABS*	00000000 end
0028dfcc g     F .text	000000b4 altera_avalon_jtag_uart_init
002801d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00291740 g       *ABS*	00000000 __CTOR_LIST__
002e1a80 g       *ABS*	00000000 __alt_stack_pointer
0028d218 g     F .text	00000064 .hidden __clzsi2
0028e6a4 g     F .text	00000224 altera_avalon_jtag_uart_write
00284f9c g     F .text	00000004 __sfp_lock_acquire
002864f8 g     F .text	000000e4 memchr
00280ce8 g     F .text	000021f8 ___vfprintf_internal_r
00285100 g     F .text	00000310 _free_r
00285adc g     F .text	00000010 __locale_mb_cur_max
0029158c g     F .text	00000180 __call_exitprocs
0029528c g     O .bss	00000004 __mlocale_changed
002936ac g     O .rwdata	00000004 __malloc_sbrk_base
00280248 g     F .text	0000004c _start
002952b4 g     O .bss	00000004 _alt_tick_rate
0028eeb0 g     F .text	00000108 alt_up_audio_write_fifo
00287128 g     F .text	00000148 __lshift
0028f0d0 g     F .text	00000064 alt_up_av_config_write_data
002952b8 g     O .bss	00000004 _alt_nticks
0028d87c g     F .text	000000fc read
0028dc2c g     F .text	0000023c alt_sys_init
0028edd0 g     F .text	000000e0 alt_up_audio_read_fifo
0028031c g     F .text	000000f0 audio_fill_buffer
00291474 g     F .text	00000118 __register_exitproc
0028f714 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
0028ea04 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00286df0 g     F .text	000001f8 __multiply
0028e330 g     F .text	00000068 altera_avalon_jtag_uart_close
00291b3c g       *ABS*	00000000 __ram_rwdata_start
00291740 g       *ABS*	00000000 __ram_rodata_start
002952c0 g     O .bss	00000028 __malloc_current_mallinfo
0028763c g     F .text	0000014c __d2b
0028de68 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
002911dc g     F .text	000000a4 alt_get_fd
00289890 g     F .text	00000054 _close_r
0028e9b0 g     F .text	00000054 alt_up_audio_enable_write_interrupt
002913f8 g     F .text	0000007c memcmp
0028df28 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00295898 g       *ABS*	00000000 __alt_stack_base
0028df78 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
002952e8 g     O .bss	000004b0 audio_data
00282fb8 g     F .text	00000154 __swsetup_r
0028b4c0 g     F .text	000008e8 .hidden __divdf3
0028e958 g     F .text	00000058 alt_up_audio_disable_read_interrupt
00284e5c g     F .text	00000118 __sfp
002878a0 g     F .text	00000078 __copybits
00291fd8 g     O .rwdata	00000408 __malloc_av_
00284fa8 g     F .text	00000004 __sinit_lock_release
0028c000 g     F .text	00000718 .hidden __muldf3
00287fd0 g     F .text	00000054 __sread
002910d4 g     F .text	00000108 alt_find_file
002907d0 g     F .text	000000a4 alt_dev_llist_insert
0028d7f8 g     F .text	00000024 __malloc_lock
0028d9dc g     F .text	000000b0 sbrk
00284bb0 g     F .text	0000005c _fflush_r
002898e4 g     F .text	000000c4 _calloc_r
00295284 g       *ABS*	00000000 __bss_start
0029369c g     O .rwdata	00000004 audio_data_ptr
00286880 g     F .text	00000128 memset
00280620 g     F .text	0000033c main
0028eca0 g     F .text	00000060 alt_up_audio_write_fifo_space
002952ac g     O .bss	00000004 alt_envp
00295294 g     O .bss	00000004 __malloc_max_total_mem
0028040c g     F .text	00000070 vga_draw_vertical_line
0028f998 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0028dec8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00289f64 g     F .text	00000018 __swbuf
00288104 g     F .text	00000008 __sclose
002e1a80 g       *ABS*	00000000 __alt_heap_limit
00289a98 g     F .text	00000014 fclose
0028330c g     F .text	00001688 _dtoa_r
00285cec g     F .text	0000080c _malloc_r
0028a0d8 g     F .text	00000030 __ascii_wctomb
002936cc g     O .rwdata	00000004 alt_errno
002858cc g     F .text	000000c4 _fwalk
0028095c g     F .text	00000084 .hidden __divsi3
00284fdc g     F .text	00000124 _malloc_trim_r
00291740 g       *ABS*	00000000 __CTOR_END__
0028810c g     F .text	000000dc strcmp
00291740 g       *ABS*	00000000 __flash_rodata_start
00291740 g       *ABS*	00000000 __DTOR_LIST__
0028bda8 g     F .text	00000088 .hidden __nedf2
0028f070 g     F .text	00000060 alt_up_av_config_open_dev
0028dbf4 g     F .text	00000038 alt_irq_init
0028d978 g     F .text	00000064 alt_release_fd
002919b8 g     O .rodata	00000100 .hidden __clz_tab
00295288 g     O .bss	00000004 _PathLocale
002913ac g     F .text	00000014 atexit
00289830 g     F .text	00000060 _write_r
0028f2b0 g     F .text	00000038 alt_up_av_config_read_ready
00285b0c g     F .text	00000018 setlocale
002936a4 g     O .rwdata	00000004 _impure_ptr
002952a4 g     O .bss	00000004 alt_argc
00284994 g     F .text	0000021c __sflush_r
002908d4 g     F .text	00000060 _do_dtors
00285af8 g     F .text	00000008 __locale_cjk_lang
00280020 g       .exceptions	00000000 alt_irq_entry
002874cc g     F .text	00000064 __ulp
00284fc4 g     F .text	00000018 __fp_unlock_all
002936b8 g     O .rwdata	00000008 alt_fs_list
0028ec38 g     F .text	00000068 alt_up_audio_record_l
00280020 g       *ABS*	00000000 __ram_exceptions_start
00285b24 g     F .text	0000000c localeconv
0028f1ec g     F .text	00000038 alt_up_av_config_enable_interrupt
0028f258 g     F .text	00000058 alt_up_av_config_read_acknowledge
0028f5b4 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
002936e0 g       *ABS*	00000000 _edata
00295898 g       *ABS*	00000000 _end
00289aac g     F .text	00000164 __fputwc
00280248 g       *ABS*	00000000 __ram_exceptions_end
0028e398 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0028ed68 g     F .text	00000068 alt_up_audio_play_l
0028802c g     F .text	0000007c __swrite
002936b0 g     O .rwdata	00000004 __malloc_trim_threshold
00285aec g     F .text	0000000c __locale_msgcharset
002913c0 g     F .text	00000038 exit
00285990 g     F .text	000000c4 _fwalk_reent
002872d0 g     F .text	000001fc __mdiff
0028f6bc g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
002809e0 g     F .text	00000074 .hidden __modsi3
002e1a80 g       *ABS*	00000000 __alt_data_end
00280020 g     F .exceptions	00000000 alt_exception
00284fa0 g     F .text	00000004 __sfp_lock_release
00280600 g     F .text	00000020 draw
00280580 g     F .text	00000080 vga_draw_rect
0029170c g     F .text	00000034 _exit
00290620 g     F .text	0000012c alt_alarm_start
00285b30 g     F .text	000001bc __smakebuf_r
00280c50 g     F .text	00000098 strlen
00290db8 g     F .text	00000154 open
0028be30 g     F .text	000000dc .hidden __gedf2
0028f38c g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
002936b4 g     O .rwdata	00000004 __wctomb
002882e4 g     F .text	00000018 __sprint_r
002909c4 g     F .text	00000034 alt_icache_flush_all
002804d8 g     F .text	00000060 vga_draw_pixel
002936d4 g     O .rwdata	00000004 alt_priority_mask
00282ee0 g     F .text	0000001c __vfprintf_internal
0028f664 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
0028a108 g     F .text	0000005c _wctomb_r
0028c718 g     F .text	000008fc .hidden __subdf3
00286d04 g     F .text	000000b0 __lo0bits
002936d8 g     O .rwdata	00000008 alt_alarm_list
00290874 g     F .text	00000060 _do_ctors
0028a018 g     F .text	000000c0 wcrtomb
0028d2b8 g     F .text	000000d0 close
00280538 g     F .text	00000048 vga_clear
0028d5e8 g     F .text	00000084 alt_load
0028e904 g     F .text	00000054 alt_up_audio_enable_read_interrupt
0028f474 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
00289c34 g     F .text	00000080 fputwc
00284fa4 g     F .text	00000004 __sinit_lock_acquire
00286a78 g     F .text	00000120 __multadd
00286a50 g     F .text	00000028 _Bfree
0028f55c g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
0028ea5c g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00280000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  280000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  280004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  280008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  28000c:	00bffd16 	blt	zero,r2,280004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  280010:	00400a34 	movhi	at,40
    ori r1, r1, %lo(_start)
  280014:	08409214 	ori	at,at,584
    jmp r1
  280018:	0800683a 	jmp	at
  28001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x280000>

Disassembly of section .exceptions:

00280020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  280020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  280024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  280028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  28002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  280030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  280034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  280038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  28003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  280040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  280044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  280048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  28004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  280050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  280054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  280058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  28005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  280060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  280064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  280068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  28006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  280070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  280074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  280078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  28007c:	10000326 	beq	r2,zero,28008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  280080:	20000226 	beq	r4,zero,28008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  280084:	02800fc0 	call	2800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  280088:	00000706 	br	2800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  28008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  280090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  280094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  280098:	02801d40 	call	2801d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  28009c:	1000021e 	bne	r2,zero,2800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  2800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  2800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  2800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  2800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  2800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2800f8:	ef80083a 	eret

002800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2800fc:	defff904 	addi	sp,sp,-28
  280100:	dfc00615 	stw	ra,24(sp)
  280104:	df000515 	stw	fp,20(sp)
  280108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  28010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  280110:	0005313a 	rdctl	r2,ipending
  280114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  280118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  28011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  280120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  280124:	00800044 	movi	r2,1
  280128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  28012c:	e0fffb17 	ldw	r3,-20(fp)
  280130:	e0bffc17 	ldw	r2,-16(fp)
  280134:	1884703a 	and	r2,r3,r2
  280138:	10001526 	beq	r2,zero,280190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  28013c:	00800a74 	movhi	r2,41
  280140:	1095e604 	addi	r2,r2,22424
  280144:	e0fffd17 	ldw	r3,-12(fp)
  280148:	180690fa 	slli	r3,r3,3
  28014c:	10c5883a 	add	r2,r2,r3
  280150:	10c00017 	ldw	r3,0(r2)
  280154:	00800a74 	movhi	r2,41
  280158:	1095e604 	addi	r2,r2,22424
  28015c:	e13ffd17 	ldw	r4,-12(fp)
  280160:	200890fa 	slli	r4,r4,3
  280164:	1105883a 	add	r2,r2,r4
  280168:	10800104 	addi	r2,r2,4
  28016c:	10800017 	ldw	r2,0(r2)
  280170:	e17ffd17 	ldw	r5,-12(fp)
  280174:	1009883a 	mov	r4,r2
  280178:	183ee83a 	callr	r3
#endif
        break;
  28017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  280180:	0005313a 	rdctl	r2,ipending
  280184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  280188:	e0bfff17 	ldw	r2,-4(fp)
  28018c:	00000706 	br	2801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  280190:	e0bffc17 	ldw	r2,-16(fp)
  280194:	1085883a 	add	r2,r2,r2
  280198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  28019c:	e0bffd17 	ldw	r2,-12(fp)
  2801a0:	10800044 	addi	r2,r2,1
  2801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2801a8:	003fe006 	br	28012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
  2801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  2801b0:	e0bffb17 	ldw	r2,-20(fp)
  2801b4:	103fda1e 	bne	r2,zero,280120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  2801b8:	0001883a 	nop
}
  2801bc:	0001883a 	nop
  2801c0:	e037883a 	mov	sp,fp
  2801c4:	dfc00117 	ldw	ra,4(sp)
  2801c8:	df000017 	ldw	fp,0(sp)
  2801cc:	dec00204 	addi	sp,sp,8
  2801d0:	f800283a 	ret

002801d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  2801d4:	defffb04 	addi	sp,sp,-20
  2801d8:	dfc00415 	stw	ra,16(sp)
  2801dc:	df000315 	stw	fp,12(sp)
  2801e0:	df000304 	addi	fp,sp,12
  2801e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  2801e8:	000531fa 	rdctl	r2,exception
  2801ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  2801f0:	e0bffd17 	ldw	r2,-12(fp)
  2801f4:	10801f0c 	andi	r2,r2,124
  2801f8:	1004d0ba 	srli	r2,r2,2
  2801fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  280200:	0005333a 	rdctl	r2,badaddr
  280204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  280208:	d0a70817 	ldw	r2,-25568(gp)
  28020c:	10000726 	beq	r2,zero,28022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  280210:	d0a70817 	ldw	r2,-25568(gp)
  280214:	e0fffd17 	ldw	r3,-12(fp)
  280218:	e1bffe17 	ldw	r6,-8(fp)
  28021c:	e17fff17 	ldw	r5,-4(fp)
  280220:	1809883a 	mov	r4,r3
  280224:	103ee83a 	callr	r2
  280228:	00000206 	br	280234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  28022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  280230:	0005883a 	mov	r2,zero
}
  280234:	e037883a 	mov	sp,fp
  280238:	dfc00117 	ldw	ra,4(sp)
  28023c:	df000017 	ldw	fp,0(sp)
  280240:	dec00204 	addi	sp,sp,8
  280244:	f800283a 	ret

Disassembly of section .text:

00280248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  280248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  28024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  280250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  280254:	00bffd16 	blt	zero,r2,28024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  280258:	06c00bb4 	movhi	sp,46
    ori sp, sp, %lo(__alt_stack_pointer)
  28025c:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
  280260:	06800a74 	movhi	gp,41
    ori gp, gp, %lo(_gp)
  280264:	d6ada714 	ori	gp,gp,46748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  280268:	00800a74 	movhi	r2,41
    ori r2, r2, %lo(__bss_start)
  28026c:	1094a114 	ori	r2,r2,21124

    movhi r3, %hi(__bss_end)
  280270:	00c00a74 	movhi	r3,41
    ori r3, r3, %lo(__bss_end)
  280274:	18d62614 	ori	r3,r3,22680

    beq r2, r3, 1f
  280278:	10c00326 	beq	r2,r3,280288 <_start+0x40>

0:
    stw zero, (r2)
  28027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  280280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  280284:	10fffd36 	bltu	r2,r3,28027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  280288:	028d5e80 	call	28d5e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  28028c:	028d77c0 	call	28d77c <alt_main>

00280290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  280290:	003fff06 	br	280290 <alt_after_alt_main>

00280294 <audio_init>:
unsigned int audio_data[AUDIO_BUFFER_SIZE];
extern unsigned int* audio_data_ptr = audio_data;

alt_up_audio_dev* audio_device = NULL;

int audio_init() {
  280294:	defffd04 	addi	sp,sp,-12
  280298:	dfc00215 	stw	ra,8(sp)
  28029c:	df000115 	stw	fp,4(sp)
  2802a0:	df000104 	addi	fp,sp,4
	alt_up_av_config_dev* config_device = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  2802a4:	01000a74 	movhi	r4,41
  2802a8:	2105d004 	addi	r4,r4,5952
  2802ac:	028f0700 	call	28f070 <alt_up_av_config_open_dev>
  2802b0:	e0bfff15 	stw	r2,-4(fp)
	if (config_device == NULL) {
  2802b4:	e0bfff17 	ldw	r2,-4(fp)
  2802b8:	1000051e 	bne	r2,zero,2802d0 <audio_init+0x3c>
		printf("Failed to open config device\n");
  2802bc:	01000a74 	movhi	r4,41
  2802c0:	2105d804 	addi	r4,r4,5984
  2802c4:	0280c3c0 	call	280c3c <puts>
		return 1;
  2802c8:	00800044 	movi	r2,1
  2802cc:	00000e06 	br	280308 <audio_init+0x74>
	}

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
  2802d0:	01000a74 	movhi	r4,41
  2802d4:	2105e004 	addi	r4,r4,6016
  2802d8:	028e8c80 	call	28e8c8 <alt_up_audio_open_dev>
  2802dc:	d0a6fa15 	stw	r2,-25624(gp)
	if (config_device == NULL) {
  2802e0:	e0bfff17 	ldw	r2,-4(fp)
  2802e4:	1000051e 	bne	r2,zero,2802fc <audio_init+0x68>
		printf("Failed to open config device\n");
  2802e8:	01000a74 	movhi	r4,41
  2802ec:	2105d804 	addi	r4,r4,5984
  2802f0:	0280c3c0 	call	280c3c <puts>
		return 1;
  2802f4:	00800044 	movi	r2,1
  2802f8:	00000306 	br	280308 <audio_init+0x74>
	}

	alt_up_av_config_reset(config_device);
  2802fc:	e13fff17 	ldw	r4,-4(fp)
  280300:	028f1b40 	call	28f1b4 <alt_up_av_config_reset>
	return 0;
  280304:	0005883a 	mov	r2,zero
}
  280308:	e037883a 	mov	sp,fp
  28030c:	dfc00117 	ldw	ra,4(sp)
  280310:	df000017 	ldw	fp,0(sp)
  280314:	dec00204 	addi	sp,sp,8
  280318:	f800283a 	ret

0028031c <audio_fill_buffer>:

void audio_fill_buffer() {
  28031c:	defffb04 	addi	sp,sp,-20
  280320:	dfc00415 	stw	ra,16(sp)
  280324:	df000315 	stw	fp,12(sp)
  280328:	df000304 	addi	fp,sp,12
	int break_out = 0;
  28032c:	e03ffd15 	stw	zero,-12(fp)
	while (!break_out) {
  280330:	00002b06 	br	2803e0 <audio_fill_buffer+0xc4>
		unsigned int available = alt_up_audio_read_fifo_avail(audio_device, 0);
  280334:	d0a6fa17 	ldw	r2,-25624(gp)
  280338:	000b883a 	mov	r5,zero
  28033c:	1009883a 	mov	r4,r2
  280340:	028eb700 	call	28eb70 <alt_up_audio_read_fifo_avail>
  280344:	e0bfff15 	stw	r2,-4(fp)
		unsigned int max = available;
  280348:	e0bfff17 	ldw	r2,-4(fp)
  28034c:	e0bffe15 	stw	r2,-8(fp)

		if (audio_data_ptr + max >= audio_data + AUDIO_BUFFER_SIZE) {
  280350:	d0e00017 	ldw	r3,-32768(gp)
  280354:	e0bffe17 	ldw	r2,-8(fp)
  280358:	1085883a 	add	r2,r2,r2
  28035c:	1085883a 	add	r2,r2,r2
  280360:	1887883a 	add	r3,r3,r2
  280364:	00800a74 	movhi	r2,41
  280368:	1095e604 	addi	r2,r2,22424
  28036c:	18800e36 	bltu	r3,r2,2803a8 <audio_fill_buffer+0x8c>
			max = audio_data_ptr + max - (audio_data + AUDIO_BUFFER_SIZE);
  280370:	d0a00017 	ldw	r2,-32768(gp)
  280374:	1007883a 	mov	r3,r2
  280378:	00800a74 	movhi	r2,41
  28037c:	1094ba04 	addi	r2,r2,21224
  280380:	1887c83a 	sub	r3,r3,r2
  280384:	e0bffe17 	ldw	r2,-8(fp)
  280388:	1085883a 	add	r2,r2,r2
  28038c:	1085883a 	add	r2,r2,r2
  280390:	10bed404 	addi	r2,r2,-1200
  280394:	1885883a 	add	r2,r3,r2
  280398:	1005d0ba 	srai	r2,r2,2
  28039c:	e0bffe15 	stw	r2,-8(fp)
			break_out = 1;
  2803a0:	00800044 	movi	r2,1
  2803a4:	e0bffd15 	stw	r2,-12(fp)
		}
		alt_up_audio_read_fifo(audio_device, audio_data_ptr, max, 0);
  2803a8:	d0a6fa17 	ldw	r2,-25624(gp)
  2803ac:	d0e00017 	ldw	r3,-32768(gp)
  2803b0:	e13ffe17 	ldw	r4,-8(fp)
  2803b4:	000f883a 	mov	r7,zero
  2803b8:	200d883a 	mov	r6,r4
  2803bc:	180b883a 	mov	r5,r3
  2803c0:	1009883a 	mov	r4,r2
  2803c4:	028edd00 	call	28edd0 <alt_up_audio_read_fifo>
		audio_data_ptr += max;
  2803c8:	d0e00017 	ldw	r3,-32768(gp)
  2803cc:	e0bffe17 	ldw	r2,-8(fp)
  2803d0:	1085883a 	add	r2,r2,r2
  2803d4:	1085883a 	add	r2,r2,r2
  2803d8:	1885883a 	add	r2,r3,r2
  2803dc:	d0a00015 	stw	r2,-32768(gp)
	return 0;
}

void audio_fill_buffer() {
	int break_out = 0;
	while (!break_out) {
  2803e0:	e0bffd17 	ldw	r2,-12(fp)
  2803e4:	103fd326 	beq	r2,zero,280334 <audio_fill_buffer+0x18>
			break_out = 1;
		}
		alt_up_audio_read_fifo(audio_device, audio_data_ptr, max, 0);
		audio_data_ptr += max;
	}
	audio_data_ptr = audio_data;
  2803e8:	00800a74 	movhi	r2,41
  2803ec:	1094ba04 	addi	r2,r2,21224
  2803f0:	d0a00015 	stw	r2,-32768(gp)
}
  2803f4:	0001883a 	nop
  2803f8:	e037883a 	mov	sp,fp
  2803fc:	dfc00117 	ldw	ra,4(sp)
  280400:	df000017 	ldw	fp,0(sp)
  280404:	dec00204 	addi	sp,sp,8
  280408:	f800283a 	ret

0028040c <vga_draw_vertical_line>:
void vga_clear(VgaBuffer* buff);
void vga_draw_pixel(VgaBuffer* buff, int x, int y, Color);
void vga_draw_rect(VgaBuffer* buff, int x, int y, int w, int h, Color);
void vga_draw_vertical_line(VgaBuffer* buff, int x, int y, int height, Color color);

inline void vga_draw_vertical_line(VgaBuffer* buff, int x, int y, int height, Color color) {
  28040c:	defff804 	addi	sp,sp,-32
  280410:	dfc00715 	stw	ra,28(sp)
  280414:	df000615 	stw	fp,24(sp)
  280418:	df000604 	addi	fp,sp,24
  28041c:	e13ffc15 	stw	r4,-16(fp)
  280420:	e17ffd15 	stw	r5,-12(fp)
  280424:	e1bffe15 	stw	r6,-8(fp)
  280428:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_vline(buff->device, x, y, y + height, color, buff->current_buffer);
  28042c:	e0bffc17 	ldw	r2,-16(fp)
  280430:	11000017 	ldw	r4,0(r2)
  280434:	e0fffe17 	ldw	r3,-8(fp)
  280438:	e0bfff17 	ldw	r2,-4(fp)
  28043c:	1887883a 	add	r3,r3,r2
  280440:	e0bffc17 	ldw	r2,-16(fp)
  280444:	10800117 	ldw	r2,4(r2)
  280448:	d8800115 	stw	r2,4(sp)
  28044c:	e0800217 	ldw	r2,8(fp)
  280450:	d8800015 	stw	r2,0(sp)
  280454:	180f883a 	mov	r7,r3
  280458:	e1bffe17 	ldw	r6,-8(fp)
  28045c:	e17ffd17 	ldw	r5,-12(fp)
  280460:	02900400 	call	290040 <alt_up_pixel_buffer_dma_draw_vline>
}
  280464:	0001883a 	nop
  280468:	e037883a 	mov	sp,fp
  28046c:	dfc00117 	ldw	ra,4(sp)
  280470:	df000017 	ldw	fp,0(sp)
  280474:	dec00204 	addi	sp,sp,8
  280478:	f800283a 	ret

0028047c <vga_swap_buffers>:

inline void vga_swap_buffers(VgaBuffer* buff) {
  28047c:	defffd04 	addi	sp,sp,-12
  280480:	dfc00215 	stw	ra,8(sp)
  280484:	df000115 	stw	fp,4(sp)
  280488:	df000104 	addi	fp,sp,4
  28048c:	e13fff15 	stw	r4,-4(fp)
	alt_up_pixel_buffer_dma_swap_buffers(buff->device);
  280490:	e0bfff17 	ldw	r2,-4(fp)
  280494:	10800017 	ldw	r2,0(r2)
  280498:	1009883a 	mov	r4,r2
  28049c:	028f9980 	call	28f998 <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(buff->device)) {};
  2804a0:	0001883a 	nop
  2804a4:	e0bfff17 	ldw	r2,-4(fp)
  2804a8:	10800017 	ldw	r2,0(r2)
  2804ac:	1009883a 	mov	r4,r2
  2804b0:	028f9f80 	call	28f9f8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  2804b4:	103ffb1e 	bne	r2,zero,2804a4 <vga_swap_buffers+0x28>
	vga_clear(buff);
  2804b8:	e13fff17 	ldw	r4,-4(fp)
  2804bc:	02805380 	call	280538 <vga_clear>
}
  2804c0:	0001883a 	nop
  2804c4:	e037883a 	mov	sp,fp
  2804c8:	dfc00117 	ldw	ra,4(sp)
  2804cc:	df000017 	ldw	fp,0(sp)
  2804d0:	dec00204 	addi	sp,sp,8
  2804d4:	f800283a 	ret

002804d8 <vga_draw_pixel>:

inline void vga_draw_pixel(VgaBuffer* buff, int x, int y, Color color) {
  2804d8:	defffa04 	addi	sp,sp,-24
  2804dc:	dfc00515 	stw	ra,20(sp)
  2804e0:	df000415 	stw	fp,16(sp)
  2804e4:	df000404 	addi	fp,sp,16
  2804e8:	e13ffc15 	stw	r4,-16(fp)
  2804ec:	e17ffd15 	stw	r5,-12(fp)
  2804f0:	e1bffe15 	stw	r6,-8(fp)
  2804f4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw(buff->device, color, x, y);
  2804f8:	e0bffc17 	ldw	r2,-16(fp)
  2804fc:	10800017 	ldw	r2,0(r2)
  280500:	e0ffff17 	ldw	r3,-4(fp)
  280504:	e13ffd17 	ldw	r4,-12(fp)
  280508:	e17ffe17 	ldw	r5,-8(fp)
  28050c:	280f883a 	mov	r7,r5
  280510:	200d883a 	mov	r6,r4
  280514:	180b883a 	mov	r5,r3
  280518:	1009883a 	mov	r4,r2
  28051c:	028f7a80 	call	28f7a8 <alt_up_pixel_buffer_dma_draw>
}
  280520:	0001883a 	nop
  280524:	e037883a 	mov	sp,fp
  280528:	dfc00117 	ldw	ra,4(sp)
  28052c:	df000017 	ldw	fp,0(sp)
  280530:	dec00204 	addi	sp,sp,8
  280534:	f800283a 	ret

00280538 <vga_clear>:

inline void vga_clear(VgaBuffer* buff) {
  280538:	defffd04 	addi	sp,sp,-12
  28053c:	dfc00215 	stw	ra,8(sp)
  280540:	df000115 	stw	fp,4(sp)
  280544:	df000104 	addi	fp,sp,4
  280548:	e13fff15 	stw	r4,-4(fp)
	alt_up_pixel_buffer_dma_clear_screen(buff->device, buff->current_buffer);
  28054c:	e0bfff17 	ldw	r2,-4(fp)
  280550:	10c00017 	ldw	r3,0(r2)
  280554:	e0bfff17 	ldw	r2,-4(fp)
  280558:	10800117 	ldw	r2,4(r2)
  28055c:	100b883a 	mov	r5,r2
  280560:	1809883a 	mov	r4,r3
  280564:	028fa2c0 	call	28fa2c <alt_up_pixel_buffer_dma_clear_screen>
}
  280568:	0001883a 	nop
  28056c:	e037883a 	mov	sp,fp
  280570:	dfc00117 	ldw	ra,4(sp)
  280574:	df000017 	ldw	fp,0(sp)
  280578:	dec00204 	addi	sp,sp,8
  28057c:	f800283a 	ret

00280580 <vga_draw_rect>:

inline void vga_draw_rect(VgaBuffer* buff, int x, int y, int w, int h, Color color) {
  280580:	defff704 	addi	sp,sp,-36
  280584:	dfc00815 	stw	ra,32(sp)
  280588:	df000715 	stw	fp,28(sp)
  28058c:	df000704 	addi	fp,sp,28
  280590:	e13ffc15 	stw	r4,-16(fp)
  280594:	e17ffd15 	stw	r5,-12(fp)
  280598:	e1bffe15 	stw	r6,-8(fp)
  28059c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(buff->device, x, y, x + w, y + h, color, buff->current_buffer);
  2805a0:	e0bffc17 	ldw	r2,-16(fp)
  2805a4:	11000017 	ldw	r4,0(r2)
  2805a8:	e0fffd17 	ldw	r3,-12(fp)
  2805ac:	e0bfff17 	ldw	r2,-4(fp)
  2805b0:	188b883a 	add	r5,r3,r2
  2805b4:	e0fffe17 	ldw	r3,-8(fp)
  2805b8:	e0800217 	ldw	r2,8(fp)
  2805bc:	1885883a 	add	r2,r3,r2
  2805c0:	e0fffc17 	ldw	r3,-16(fp)
  2805c4:	18c00117 	ldw	r3,4(r3)
  2805c8:	d8c00215 	stw	r3,8(sp)
  2805cc:	e0c00317 	ldw	r3,12(fp)
  2805d0:	d8c00115 	stw	r3,4(sp)
  2805d4:	d8800015 	stw	r2,0(sp)
  2805d8:	280f883a 	mov	r7,r5
  2805dc:	e1bffe17 	ldw	r6,-8(fp)
  2805e0:	e17ffd17 	ldw	r5,-12(fp)
  2805e4:	028fb540 	call	28fb54 <alt_up_pixel_buffer_dma_draw_box>
}
  2805e8:	0001883a 	nop
  2805ec:	e037883a 	mov	sp,fp
  2805f0:	dfc00117 	ldw	ra,4(sp)
  2805f4:	df000017 	ldw	fp,0(sp)
  2805f8:	dec00204 	addi	sp,sp,8
  2805fc:	f800283a 	ret

00280600 <draw>:

void draw() {
  280600:	deffff04 	addi	sp,sp,-4
  280604:	df000015 	stw	fp,0(sp)
  280608:	d839883a 	mov	fp,sp

}
  28060c:	0001883a 	nop
  280610:	e037883a 	mov	sp,fp
  280614:	df000017 	ldw	fp,0(sp)
  280618:	dec00104 	addi	sp,sp,4
  28061c:	f800283a 	ret

00280620 <main>:

int main() {
  280620:	deffed04 	addi	sp,sp,-76
  280624:	dfc01215 	stw	ra,72(sp)
  280628:	df001115 	stw	fp,68(sp)
  28062c:	df001104 	addi	fp,sp,68
	VgaBuffer vga_buffer = {
		alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME),
  280630:	01000a74 	movhi	r4,41
  280634:	2105e404 	addi	r4,r4,6032
  280638:	028f76c0 	call	28f76c <alt_up_pixel_buffer_dma_open_dev>
void draw() {

}

int main() {
	VgaBuffer vga_buffer = {
  28063c:	e0bffe15 	stw	r2,-8(fp)
  280640:	00800044 	movi	r2,1
  280644:	e0bfff15 	stw	r2,-4(fp)
		alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME),
		1
	};
	if (vga_buffer.device == NULL) {
  280648:	e0bffe17 	ldw	r2,-8(fp)
  28064c:	1000051e 	bne	r2,zero,280664 <main+0x44>
		printf("Failed to open device\n");
  280650:	01000a74 	movhi	r4,41
  280654:	2105ec04 	addi	r4,r4,6064
  280658:	0280c3c0 	call	280c3c <puts>
		return 1;
  28065c:	00800044 	movi	r2,1
  280660:	0000b906 	br	280948 <main+0x328>
	}
	printf(
		"VGA Setup (FRONT: %p) (BACK: %p)\n",
		vga_buffer.device->buffer_start_address,
  280664:	e0bffe17 	ldw	r2,-8(fp)
	};
	if (vga_buffer.device == NULL) {
		printf("Failed to open device\n");
		return 1;
	}
	printf(
  280668:	10c00b17 	ldw	r3,44(r2)
		"VGA Setup (FRONT: %p) (BACK: %p)\n",
		vga_buffer.device->buffer_start_address,
		vga_buffer.device->back_buffer_start_address
  28066c:	e0bffe17 	ldw	r2,-8(fp)
	};
	if (vga_buffer.device == NULL) {
		printf("Failed to open device\n");
		return 1;
	}
	printf(
  280670:	10800c17 	ldw	r2,48(r2)
  280674:	100d883a 	mov	r6,r2
  280678:	180b883a 	mov	r5,r3
  28067c:	01000a74 	movhi	r4,41
  280680:	2105f204 	addi	r4,r4,6088
  280684:	0280b400 	call	280b40 <printf>
		"VGA Setup (FRONT: %p) (BACK: %p)\n",
		vga_buffer.device->buffer_start_address,
		vga_buffer.device->back_buffer_start_address
	);

	audio_init();
  280688:	02802940 	call	280294 <audio_init>

	int x = 0;
  28068c:	e03ff115 	stw	zero,-60(fp)
	int y = 0;
  280690:	e03ff215 	stw	zero,-56(fp)
	while (1) {
		audio_fill_buffer();
  280694:	028031c0 	call	28031c <audio_fill_buffer>

		unsigned int input = IORD(BUTTON_PASSTHROUGH_BASE, 0);
  280698:	00800c34 	movhi	r2,48
  28069c:	10840404 	addi	r2,r2,4112
  2806a0:	10800037 	ldwio	r2,0(r2)
  2806a4:	e0bff815 	stw	r2,-32(fp)

//		vga_draw_rect(&vga_buffer, x, y, 20, 20, 0);

		int speed = 5;
  2806a8:	00800144 	movi	r2,5
  2806ac:	e0bff915 	stw	r2,-28(fp)

		unsigned int sum = 0;
  2806b0:	e03ff315 	stw	zero,-52(fp)
		unsigned int counted = 0;
  2806b4:	e03ff415 	stw	zero,-48(fp)
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i++) {
  2806b8:	e03ff515 	stw	zero,-44(fp)
  2806bc:	00001506 	br	280714 <main+0xf4>
			int data = audio_data[i];
  2806c0:	00800a74 	movhi	r2,41
  2806c4:	1094ba04 	addi	r2,r2,21224
  2806c8:	e0fff517 	ldw	r3,-44(fp)
  2806cc:	18c7883a 	add	r3,r3,r3
  2806d0:	18c7883a 	add	r3,r3,r3
  2806d4:	10c5883a 	add	r2,r2,r3
  2806d8:	10800017 	ldw	r2,0(r2)
  2806dc:	e0bffd15 	stw	r2,-12(fp)
			if (data < 0xffff / 6) {
  2806e0:	e0bffd17 	ldw	r2,-12(fp)
  2806e4:	108aaa88 	cmpgei	r2,r2,10922
  2806e8:	1000071e 	bne	r2,zero,280708 <main+0xe8>
				sum += data;
  2806ec:	e0bffd17 	ldw	r2,-12(fp)
  2806f0:	e0fff317 	ldw	r3,-52(fp)
  2806f4:	1885883a 	add	r2,r3,r2
  2806f8:	e0bff315 	stw	r2,-52(fp)
				counted++;
  2806fc:	e0bff417 	ldw	r2,-48(fp)
  280700:	10800044 	addi	r2,r2,1
  280704:	e0bff415 	stw	r2,-48(fp)

		int speed = 5;

		unsigned int sum = 0;
		unsigned int counted = 0;
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i++) {
  280708:	e0bff517 	ldw	r2,-44(fp)
  28070c:	10800044 	addi	r2,r2,1
  280710:	e0bff515 	stw	r2,-44(fp)
  280714:	e0bff517 	ldw	r2,-44(fp)
  280718:	10804b10 	cmplti	r2,r2,300
  28071c:	103fe81e 	bne	r2,zero,2806c0 <main+0xa0>
				sum += data;
				counted++;
			}

		}
		sum /= counted;
  280720:	e17ff417 	ldw	r5,-48(fp)
  280724:	e13ff317 	ldw	r4,-52(fp)
  280728:	0280a540 	call	280a54 <__udivsi3>
  28072c:	e0bff315 	stw	r2,-52(fp)

		speed = 5 + sum * 25 / (0xffff / 6);
  280730:	e0bff317 	ldw	r2,-52(fp)
  280734:	10800664 	muli	r2,r2,25
  280738:	014aaa84 	movi	r5,10922
  28073c:	1009883a 	mov	r4,r2
  280740:	0280a540 	call	280a54 <__udivsi3>
  280744:	10800144 	addi	r2,r2,5
  280748:	e0bff915 	stw	r2,-28(fp)

		x += ((input & 0x1) >> 0) * speed;
  28074c:	e0bff817 	ldw	r2,-32(fp)
  280750:	10c0004c 	andi	r3,r2,1
  280754:	e0bff917 	ldw	r2,-28(fp)
  280758:	1887383a 	mul	r3,r3,r2
  28075c:	e0bff117 	ldw	r2,-60(fp)
  280760:	1885883a 	add	r2,r3,r2
  280764:	e0bff115 	stw	r2,-60(fp)
		x -= ((input & 0x2) >> 1) * speed;
  280768:	e0fff117 	ldw	r3,-60(fp)
  28076c:	e0bff817 	ldw	r2,-32(fp)
  280770:	1080008c 	andi	r2,r2,2
  280774:	1008d07a 	srli	r4,r2,1
  280778:	e0bff917 	ldw	r2,-28(fp)
  28077c:	2085383a 	mul	r2,r4,r2
  280780:	1885c83a 	sub	r2,r3,r2
  280784:	e0bff115 	stw	r2,-60(fp)
		y += ((input & 0x4) >> 2) * speed;
  280788:	e0bff817 	ldw	r2,-32(fp)
  28078c:	1080010c 	andi	r2,r2,4
  280790:	1006d0ba 	srli	r3,r2,2
  280794:	e0bff917 	ldw	r2,-28(fp)
  280798:	1887383a 	mul	r3,r3,r2
  28079c:	e0bff217 	ldw	r2,-56(fp)
  2807a0:	1885883a 	add	r2,r3,r2
  2807a4:	e0bff215 	stw	r2,-56(fp)
		y -= ((input & 0x8) >> 3) * speed;
  2807a8:	e0fff217 	ldw	r3,-56(fp)
  2807ac:	e0bff817 	ldw	r2,-32(fp)
  2807b0:	1080020c 	andi	r2,r2,8
  2807b4:	1008d0fa 	srli	r4,r2,3
  2807b8:	e0bff917 	ldw	r2,-28(fp)
  2807bc:	2085383a 	mul	r2,r4,r2
  2807c0:	1885c83a 	sub	r2,r3,r2
  2807c4:	e0bff215 	stw	r2,-56(fp)

		if (x > 300) {
  2807c8:	e0bff117 	ldw	r2,-60(fp)
  2807cc:	10804b50 	cmplti	r2,r2,301
  2807d0:	1000011e 	bne	r2,zero,2807d8 <main+0x1b8>
			x = 0;
  2807d4:	e03ff115 	stw	zero,-60(fp)
		}
		if (x < 0) {
  2807d8:	e0bff117 	ldw	r2,-60(fp)
  2807dc:	1000020e 	bge	r2,zero,2807e8 <main+0x1c8>
			x = 300;
  2807e0:	00804b04 	movi	r2,300
  2807e4:	e0bff115 	stw	r2,-60(fp)
		}
		if (y > 220) {
  2807e8:	e0bff217 	ldw	r2,-56(fp)
  2807ec:	10803750 	cmplti	r2,r2,221
  2807f0:	1000011e 	bne	r2,zero,2807f8 <main+0x1d8>
			y = 0;
  2807f4:	e03ff215 	stw	zero,-56(fp)
		}
		if (y < 0) {
  2807f8:	e0bff217 	ldw	r2,-56(fp)
  2807fc:	1000020e 	bge	r2,zero,280808 <main+0x1e8>
			y = 220;
  280800:	00803704 	movi	r2,220
  280804:	e0bff215 	stw	r2,-56(fp)
		}

		int normalized_x = x * BIT10_MAX / 300;
  280808:	e0bff117 	ldw	r2,-60(fp)
  28080c:	1080ffe4 	muli	r2,r2,1023
  280810:	01404b04 	movi	r5,300
  280814:	1009883a 	mov	r4,r2
  280818:	028095c0 	call	28095c <__divsi3>
  28081c:	e0bffa15 	stw	r2,-24(fp)
		int normalized_y = y * BIT10_MAX / 220;
  280820:	e0bff217 	ldw	r2,-56(fp)
  280824:	1080ffe4 	muli	r2,r2,1023
  280828:	01403704 	movi	r5,220
  28082c:	1009883a 	mov	r4,r2
  280830:	028095c0 	call	28095c <__divsi3>
  280834:	e0bffb15 	stw	r2,-20(fp)

		vga_draw_rect(&vga_buffer, x, y, 20, 20, RGB(BIT10_MAX - (normalized_x + normalized_y) / 2, normalized_x, normalized_y));
  280838:	e0fffa17 	ldw	r3,-24(fp)
  28083c:	e0bffb17 	ldw	r2,-20(fp)
  280840:	1885883a 	add	r2,r3,r2
  280844:	1006d7fa 	srli	r3,r2,31
  280848:	1885883a 	add	r2,r3,r2
  28084c:	1005d07a 	srai	r2,r2,1
  280850:	1007883a 	mov	r3,r2
  280854:	0080ffc4 	movi	r2,1023
  280858:	10c5c83a 	sub	r2,r2,r3
  28085c:	1006953a 	slli	r3,r2,20
  280860:	e0bffa17 	ldw	r2,-24(fp)
  280864:	100492ba 	slli	r2,r2,10
  280868:	1886b03a 	or	r3,r3,r2
  28086c:	e0bffb17 	ldw	r2,-20(fp)
  280870:	1884b03a 	or	r2,r3,r2
  280874:	e0fffe04 	addi	r3,fp,-8
  280878:	d8800115 	stw	r2,4(sp)
  28087c:	00800504 	movi	r2,20
  280880:	d8800015 	stw	r2,0(sp)
  280884:	01c00504 	movi	r7,20
  280888:	e1bff217 	ldw	r6,-56(fp)
  28088c:	e17ff117 	ldw	r5,-60(fp)
  280890:	1809883a 	mov	r4,r3
  280894:	02805800 	call	280580 <vga_draw_rect>

		for (int x = 0; x < 300; x++) {
  280898:	e03ff615 	stw	zero,-40(fp)
  28089c:	00002306 	br	28092c <main+0x30c>
			int RAW = audio_data[x];
  2808a0:	00800a74 	movhi	r2,41
  2808a4:	1094ba04 	addi	r2,r2,21224
  2808a8:	e0fff617 	ldw	r3,-40(fp)
  2808ac:	18c7883a 	add	r3,r3,r3
  2808b0:	18c7883a 	add	r3,r3,r3
  2808b4:	10c5883a 	add	r2,r2,r3
  2808b8:	10800017 	ldw	r2,0(r2)
  2808bc:	e0bff715 	stw	r2,-36(fp)

			if (RAW >= 0xffff / 2) {
  2808c0:	e0bff717 	ldw	r2,-36(fp)
  2808c4:	109fffd0 	cmplti	r2,r2,32767
  2808c8:	1000041e 	bne	r2,zero,2808dc <main+0x2bc>
				RAW = 0xffff - RAW;
  2808cc:	00ffffd4 	movui	r3,65535
  2808d0:	e0bff717 	ldw	r2,-36(fp)
  2808d4:	1885c83a 	sub	r2,r3,r2
  2808d8:	e0bff715 	stw	r2,-36(fp)
			}

			int max_y = RAW * 200 / 0xffff * 2;
  2808dc:	e0bff717 	ldw	r2,-36(fp)
  2808e0:	10803224 	muli	r2,r2,200
  2808e4:	017fffd4 	movui	r5,65535
  2808e8:	1009883a 	mov	r4,r2
  2808ec:	028095c0 	call	28095c <__divsi3>
  2808f0:	1085883a 	add	r2,r2,r2
  2808f4:	e0bffc15 	stw	r2,-16(fp)
//			for (int y = 0; y < max_y; y++) {
//				int val = y * 5;
//				vga_draw_pixel(&vga_buffer, x + 10, y + 10, RGB(BIT10_MAX - val, 0, val));
//			}

			vga_draw_vertical_line(&vga_buffer, x + 10, 10, max_y, RGB(BIT10_MAX, 0, 0));
  2808f8:	e0bff617 	ldw	r2,-40(fp)
  2808fc:	11000284 	addi	r4,r2,10
  280900:	e0fffe04 	addi	r3,fp,-8
  280904:	008ffc34 	movhi	r2,16368
  280908:	d8800015 	stw	r2,0(sp)
  28090c:	e1fffc17 	ldw	r7,-16(fp)
  280910:	01800284 	movi	r6,10
  280914:	200b883a 	mov	r5,r4
  280918:	1809883a 	mov	r4,r3
  28091c:	028040c0 	call	28040c <vga_draw_vertical_line>
		int normalized_x = x * BIT10_MAX / 300;
		int normalized_y = y * BIT10_MAX / 220;

		vga_draw_rect(&vga_buffer, x, y, 20, 20, RGB(BIT10_MAX - (normalized_x + normalized_y) / 2, normalized_x, normalized_y));

		for (int x = 0; x < 300; x++) {
  280920:	e0bff617 	ldw	r2,-40(fp)
  280924:	10800044 	addi	r2,r2,1
  280928:	e0bff615 	stw	r2,-40(fp)
  28092c:	e0bff617 	ldw	r2,-40(fp)
  280930:	10804b10 	cmplti	r2,r2,300
  280934:	103fda1e 	bne	r2,zero,2808a0 <main+0x280>
//			}

			vga_draw_vertical_line(&vga_buffer, x + 10, 10, max_y, RGB(BIT10_MAX, 0, 0));
		}

		vga_swap_buffers(&vga_buffer);
  280938:	e0bffe04 	addi	r2,fp,-8
  28093c:	1009883a 	mov	r4,r2
  280940:	028047c0 	call	28047c <vga_swap_buffers>
	}
  280944:	003f5306 	br	280694 <main+0x74>
	return 0;
}
  280948:	e037883a 	mov	sp,fp
  28094c:	dfc00117 	ldw	ra,4(sp)
  280950:	df000017 	ldw	fp,0(sp)
  280954:	dec00204 	addi	sp,sp,8
  280958:	f800283a 	ret

0028095c <__divsi3>:
  28095c:	20001b16 	blt	r4,zero,2809cc <__divsi3+0x70>
  280960:	000f883a 	mov	r7,zero
  280964:	28001616 	blt	r5,zero,2809c0 <__divsi3+0x64>
  280968:	200d883a 	mov	r6,r4
  28096c:	29001a2e 	bgeu	r5,r4,2809d8 <__divsi3+0x7c>
  280970:	00800804 	movi	r2,32
  280974:	00c00044 	movi	r3,1
  280978:	00000106 	br	280980 <__divsi3+0x24>
  28097c:	10000d26 	beq	r2,zero,2809b4 <__divsi3+0x58>
  280980:	294b883a 	add	r5,r5,r5
  280984:	10bfffc4 	addi	r2,r2,-1
  280988:	18c7883a 	add	r3,r3,r3
  28098c:	293ffb36 	bltu	r5,r4,28097c <__divsi3+0x20>
  280990:	0005883a 	mov	r2,zero
  280994:	18000726 	beq	r3,zero,2809b4 <__divsi3+0x58>
  280998:	0005883a 	mov	r2,zero
  28099c:	31400236 	bltu	r6,r5,2809a8 <__divsi3+0x4c>
  2809a0:	314dc83a 	sub	r6,r6,r5
  2809a4:	10c4b03a 	or	r2,r2,r3
  2809a8:	1806d07a 	srli	r3,r3,1
  2809ac:	280ad07a 	srli	r5,r5,1
  2809b0:	183ffa1e 	bne	r3,zero,28099c <__divsi3+0x40>
  2809b4:	38000126 	beq	r7,zero,2809bc <__divsi3+0x60>
  2809b8:	0085c83a 	sub	r2,zero,r2
  2809bc:	f800283a 	ret
  2809c0:	014bc83a 	sub	r5,zero,r5
  2809c4:	39c0005c 	xori	r7,r7,1
  2809c8:	003fe706 	br	280968 <__divsi3+0xc>
  2809cc:	0109c83a 	sub	r4,zero,r4
  2809d0:	01c00044 	movi	r7,1
  2809d4:	003fe306 	br	280964 <__divsi3+0x8>
  2809d8:	00c00044 	movi	r3,1
  2809dc:	003fee06 	br	280998 <__divsi3+0x3c>

002809e0 <__modsi3>:
  2809e0:	20001716 	blt	r4,zero,280a40 <__modsi3+0x60>
  2809e4:	000f883a 	mov	r7,zero
  2809e8:	2005883a 	mov	r2,r4
  2809ec:	28001216 	blt	r5,zero,280a38 <__modsi3+0x58>
  2809f0:	2900162e 	bgeu	r5,r4,280a4c <__modsi3+0x6c>
  2809f4:	01800804 	movi	r6,32
  2809f8:	00c00044 	movi	r3,1
  2809fc:	00000106 	br	280a04 <__modsi3+0x24>
  280a00:	30000a26 	beq	r6,zero,280a2c <__modsi3+0x4c>
  280a04:	294b883a 	add	r5,r5,r5
  280a08:	31bfffc4 	addi	r6,r6,-1
  280a0c:	18c7883a 	add	r3,r3,r3
  280a10:	293ffb36 	bltu	r5,r4,280a00 <__modsi3+0x20>
  280a14:	18000526 	beq	r3,zero,280a2c <__modsi3+0x4c>
  280a18:	1806d07a 	srli	r3,r3,1
  280a1c:	11400136 	bltu	r2,r5,280a24 <__modsi3+0x44>
  280a20:	1145c83a 	sub	r2,r2,r5
  280a24:	280ad07a 	srli	r5,r5,1
  280a28:	183ffb1e 	bne	r3,zero,280a18 <__modsi3+0x38>
  280a2c:	38000126 	beq	r7,zero,280a34 <__modsi3+0x54>
  280a30:	0085c83a 	sub	r2,zero,r2
  280a34:	f800283a 	ret
  280a38:	014bc83a 	sub	r5,zero,r5
  280a3c:	003fec06 	br	2809f0 <__modsi3+0x10>
  280a40:	0109c83a 	sub	r4,zero,r4
  280a44:	01c00044 	movi	r7,1
  280a48:	003fe706 	br	2809e8 <__modsi3+0x8>
  280a4c:	00c00044 	movi	r3,1
  280a50:	003ff106 	br	280a18 <__modsi3+0x38>

00280a54 <__udivsi3>:
  280a54:	200d883a 	mov	r6,r4
  280a58:	2900152e 	bgeu	r5,r4,280ab0 <__udivsi3+0x5c>
  280a5c:	28001416 	blt	r5,zero,280ab0 <__udivsi3+0x5c>
  280a60:	00800804 	movi	r2,32
  280a64:	00c00044 	movi	r3,1
  280a68:	00000206 	br	280a74 <__udivsi3+0x20>
  280a6c:	10000e26 	beq	r2,zero,280aa8 <__udivsi3+0x54>
  280a70:	28000516 	blt	r5,zero,280a88 <__udivsi3+0x34>
  280a74:	294b883a 	add	r5,r5,r5
  280a78:	10bfffc4 	addi	r2,r2,-1
  280a7c:	18c7883a 	add	r3,r3,r3
  280a80:	293ffa36 	bltu	r5,r4,280a6c <__udivsi3+0x18>
  280a84:	18000826 	beq	r3,zero,280aa8 <__udivsi3+0x54>
  280a88:	0005883a 	mov	r2,zero
  280a8c:	31400236 	bltu	r6,r5,280a98 <__udivsi3+0x44>
  280a90:	314dc83a 	sub	r6,r6,r5
  280a94:	10c4b03a 	or	r2,r2,r3
  280a98:	1806d07a 	srli	r3,r3,1
  280a9c:	280ad07a 	srli	r5,r5,1
  280aa0:	183ffa1e 	bne	r3,zero,280a8c <__udivsi3+0x38>
  280aa4:	f800283a 	ret
  280aa8:	0005883a 	mov	r2,zero
  280aac:	f800283a 	ret
  280ab0:	00c00044 	movi	r3,1
  280ab4:	003ff406 	br	280a88 <__udivsi3+0x34>

00280ab8 <__umodsi3>:
  280ab8:	2005883a 	mov	r2,r4
  280abc:	2900122e 	bgeu	r5,r4,280b08 <__umodsi3+0x50>
  280ac0:	28001116 	blt	r5,zero,280b08 <__umodsi3+0x50>
  280ac4:	01800804 	movi	r6,32
  280ac8:	00c00044 	movi	r3,1
  280acc:	00000206 	br	280ad8 <__umodsi3+0x20>
  280ad0:	30000c26 	beq	r6,zero,280b04 <__umodsi3+0x4c>
  280ad4:	28000516 	blt	r5,zero,280aec <__umodsi3+0x34>
  280ad8:	294b883a 	add	r5,r5,r5
  280adc:	31bfffc4 	addi	r6,r6,-1
  280ae0:	18c7883a 	add	r3,r3,r3
  280ae4:	293ffa36 	bltu	r5,r4,280ad0 <__umodsi3+0x18>
  280ae8:	18000626 	beq	r3,zero,280b04 <__umodsi3+0x4c>
  280aec:	1806d07a 	srli	r3,r3,1
  280af0:	11400136 	bltu	r2,r5,280af8 <__umodsi3+0x40>
  280af4:	1145c83a 	sub	r2,r2,r5
  280af8:	280ad07a 	srli	r5,r5,1
  280afc:	183ffb1e 	bne	r3,zero,280aec <__umodsi3+0x34>
  280b00:	f800283a 	ret
  280b04:	f800283a 	ret
  280b08:	00c00044 	movi	r3,1
  280b0c:	003ff706 	br	280aec <__umodsi3+0x34>

00280b10 <_printf_r>:
  280b10:	defffd04 	addi	sp,sp,-12
  280b14:	2805883a 	mov	r2,r5
  280b18:	dfc00015 	stw	ra,0(sp)
  280b1c:	d9800115 	stw	r6,4(sp)
  280b20:	d9c00215 	stw	r7,8(sp)
  280b24:	21400217 	ldw	r5,8(r4)
  280b28:	d9c00104 	addi	r7,sp,4
  280b2c:	100d883a 	mov	r6,r2
  280b30:	0280ce80 	call	280ce8 <___vfprintf_internal_r>
  280b34:	dfc00017 	ldw	ra,0(sp)
  280b38:	dec00304 	addi	sp,sp,12
  280b3c:	f800283a 	ret

00280b40 <printf>:
  280b40:	defffc04 	addi	sp,sp,-16
  280b44:	dfc00015 	stw	ra,0(sp)
  280b48:	d9400115 	stw	r5,4(sp)
  280b4c:	d9800215 	stw	r6,8(sp)
  280b50:	d9c00315 	stw	r7,12(sp)
  280b54:	00800a74 	movhi	r2,41
  280b58:	108da904 	addi	r2,r2,13988
  280b5c:	10800017 	ldw	r2,0(r2)
  280b60:	200b883a 	mov	r5,r4
  280b64:	d9800104 	addi	r6,sp,4
  280b68:	11000217 	ldw	r4,8(r2)
  280b6c:	0282ee00 	call	282ee0 <__vfprintf_internal>
  280b70:	dfc00017 	ldw	ra,0(sp)
  280b74:	dec00404 	addi	sp,sp,16
  280b78:	f800283a 	ret

00280b7c <_puts_r>:
  280b7c:	defff604 	addi	sp,sp,-40
  280b80:	dc000715 	stw	r16,28(sp)
  280b84:	2021883a 	mov	r16,r4
  280b88:	2809883a 	mov	r4,r5
  280b8c:	dc400815 	stw	r17,32(sp)
  280b90:	dfc00915 	stw	ra,36(sp)
  280b94:	2823883a 	mov	r17,r5
  280b98:	0280c500 	call	280c50 <strlen>
  280b9c:	10c00044 	addi	r3,r2,1
  280ba0:	d8800115 	stw	r2,4(sp)
  280ba4:	00800a74 	movhi	r2,41
  280ba8:	1085fb04 	addi	r2,r2,6124
  280bac:	d8800215 	stw	r2,8(sp)
  280bb0:	00800044 	movi	r2,1
  280bb4:	d8800315 	stw	r2,12(sp)
  280bb8:	00800084 	movi	r2,2
  280bbc:	dc400015 	stw	r17,0(sp)
  280bc0:	d8c00615 	stw	r3,24(sp)
  280bc4:	dec00415 	stw	sp,16(sp)
  280bc8:	d8800515 	stw	r2,20(sp)
  280bcc:	80000226 	beq	r16,zero,280bd8 <_puts_r+0x5c>
  280bd0:	80800e17 	ldw	r2,56(r16)
  280bd4:	10001426 	beq	r2,zero,280c28 <_puts_r+0xac>
  280bd8:	81400217 	ldw	r5,8(r16)
  280bdc:	2880030b 	ldhu	r2,12(r5)
  280be0:	10c8000c 	andi	r3,r2,8192
  280be4:	1800061e 	bne	r3,zero,280c00 <_puts_r+0x84>
  280be8:	29001917 	ldw	r4,100(r5)
  280bec:	00f7ffc4 	movi	r3,-8193
  280bf0:	10880014 	ori	r2,r2,8192
  280bf4:	20c6703a 	and	r3,r4,r3
  280bf8:	2880030d 	sth	r2,12(r5)
  280bfc:	28c01915 	stw	r3,100(r5)
  280c00:	d9800404 	addi	r6,sp,16
  280c04:	8009883a 	mov	r4,r16
  280c08:	02854100 	call	285410 <__sfvwrite_r>
  280c0c:	1000091e 	bne	r2,zero,280c34 <_puts_r+0xb8>
  280c10:	00800284 	movi	r2,10
  280c14:	dfc00917 	ldw	ra,36(sp)
  280c18:	dc400817 	ldw	r17,32(sp)
  280c1c:	dc000717 	ldw	r16,28(sp)
  280c20:	dec00a04 	addi	sp,sp,40
  280c24:	f800283a 	ret
  280c28:	8009883a 	mov	r4,r16
  280c2c:	0284f8c0 	call	284f8c <__sinit>
  280c30:	003fe906 	br	280bd8 <_puts_r+0x5c>
  280c34:	00bfffc4 	movi	r2,-1
  280c38:	003ff606 	br	280c14 <_puts_r+0x98>

00280c3c <puts>:
  280c3c:	00800a74 	movhi	r2,41
  280c40:	108da904 	addi	r2,r2,13988
  280c44:	200b883a 	mov	r5,r4
  280c48:	11000017 	ldw	r4,0(r2)
  280c4c:	0280b7c1 	jmpi	280b7c <_puts_r>

00280c50 <strlen>:
  280c50:	208000cc 	andi	r2,r4,3
  280c54:	10002026 	beq	r2,zero,280cd8 <strlen+0x88>
  280c58:	20800007 	ldb	r2,0(r4)
  280c5c:	10002026 	beq	r2,zero,280ce0 <strlen+0x90>
  280c60:	2005883a 	mov	r2,r4
  280c64:	00000206 	br	280c70 <strlen+0x20>
  280c68:	10c00007 	ldb	r3,0(r2)
  280c6c:	18001826 	beq	r3,zero,280cd0 <strlen+0x80>
  280c70:	10800044 	addi	r2,r2,1
  280c74:	10c000cc 	andi	r3,r2,3
  280c78:	183ffb1e 	bne	r3,zero,280c68 <strlen+0x18>
  280c7c:	10c00017 	ldw	r3,0(r2)
  280c80:	01ffbff4 	movhi	r7,65279
  280c84:	39ffbfc4 	addi	r7,r7,-257
  280c88:	00ca303a 	nor	r5,zero,r3
  280c8c:	01a02074 	movhi	r6,32897
  280c90:	19c7883a 	add	r3,r3,r7
  280c94:	31a02004 	addi	r6,r6,-32640
  280c98:	1946703a 	and	r3,r3,r5
  280c9c:	1986703a 	and	r3,r3,r6
  280ca0:	1800091e 	bne	r3,zero,280cc8 <strlen+0x78>
  280ca4:	10800104 	addi	r2,r2,4
  280ca8:	10c00017 	ldw	r3,0(r2)
  280cac:	19cb883a 	add	r5,r3,r7
  280cb0:	00c6303a 	nor	r3,zero,r3
  280cb4:	28c6703a 	and	r3,r5,r3
  280cb8:	1986703a 	and	r3,r3,r6
  280cbc:	183ff926 	beq	r3,zero,280ca4 <strlen+0x54>
  280cc0:	00000106 	br	280cc8 <strlen+0x78>
  280cc4:	10800044 	addi	r2,r2,1
  280cc8:	10c00007 	ldb	r3,0(r2)
  280ccc:	183ffd1e 	bne	r3,zero,280cc4 <strlen+0x74>
  280cd0:	1105c83a 	sub	r2,r2,r4
  280cd4:	f800283a 	ret
  280cd8:	2005883a 	mov	r2,r4
  280cdc:	003fe706 	br	280c7c <strlen+0x2c>
  280ce0:	0005883a 	mov	r2,zero
  280ce4:	f800283a 	ret

00280ce8 <___vfprintf_internal_r>:
  280ce8:	deffb804 	addi	sp,sp,-288
  280cec:	dfc04715 	stw	ra,284(sp)
  280cf0:	ddc04515 	stw	r23,276(sp)
  280cf4:	dd404315 	stw	r21,268(sp)
  280cf8:	d9002c15 	stw	r4,176(sp)
  280cfc:	282f883a 	mov	r23,r5
  280d00:	302b883a 	mov	r21,r6
  280d04:	d9c02d15 	stw	r7,180(sp)
  280d08:	df004615 	stw	fp,280(sp)
  280d0c:	dd804415 	stw	r22,272(sp)
  280d10:	dd004215 	stw	r20,264(sp)
  280d14:	dcc04115 	stw	r19,260(sp)
  280d18:	dc804015 	stw	r18,256(sp)
  280d1c:	dc403f15 	stw	r17,252(sp)
  280d20:	dc003e15 	stw	r16,248(sp)
  280d24:	0285b000 	call	285b00 <_localeconv_r>
  280d28:	10800017 	ldw	r2,0(r2)
  280d2c:	1009883a 	mov	r4,r2
  280d30:	d8803415 	stw	r2,208(sp)
  280d34:	0280c500 	call	280c50 <strlen>
  280d38:	d8803715 	stw	r2,220(sp)
  280d3c:	d8802c17 	ldw	r2,176(sp)
  280d40:	10000226 	beq	r2,zero,280d4c <___vfprintf_internal_r+0x64>
  280d44:	10800e17 	ldw	r2,56(r2)
  280d48:	1000f926 	beq	r2,zero,281130 <___vfprintf_internal_r+0x448>
  280d4c:	b880030b 	ldhu	r2,12(r23)
  280d50:	10c8000c 	andi	r3,r2,8192
  280d54:	1800061e 	bne	r3,zero,280d70 <___vfprintf_internal_r+0x88>
  280d58:	b9001917 	ldw	r4,100(r23)
  280d5c:	00f7ffc4 	movi	r3,-8193
  280d60:	10880014 	ori	r2,r2,8192
  280d64:	20c6703a 	and	r3,r4,r3
  280d68:	b880030d 	sth	r2,12(r23)
  280d6c:	b8c01915 	stw	r3,100(r23)
  280d70:	10c0020c 	andi	r3,r2,8
  280d74:	1800c126 	beq	r3,zero,28107c <___vfprintf_internal_r+0x394>
  280d78:	b8c00417 	ldw	r3,16(r23)
  280d7c:	1800bf26 	beq	r3,zero,28107c <___vfprintf_internal_r+0x394>
  280d80:	1080068c 	andi	r2,r2,26
  280d84:	00c00284 	movi	r3,10
  280d88:	10c0c426 	beq	r2,r3,28109c <___vfprintf_internal_r+0x3b4>
  280d8c:	d8c00404 	addi	r3,sp,16
  280d90:	05000a74 	movhi	r20,41
  280d94:	d9001e04 	addi	r4,sp,120
  280d98:	a5060c84 	addi	r20,r20,6194
  280d9c:	d8c01e15 	stw	r3,120(sp)
  280da0:	d8002015 	stw	zero,128(sp)
  280da4:	d8001f15 	stw	zero,124(sp)
  280da8:	d8003315 	stw	zero,204(sp)
  280dac:	d8003615 	stw	zero,216(sp)
  280db0:	d8003815 	stw	zero,224(sp)
  280db4:	1811883a 	mov	r8,r3
  280db8:	d8003915 	stw	zero,228(sp)
  280dbc:	d8003a15 	stw	zero,232(sp)
  280dc0:	d8002f15 	stw	zero,188(sp)
  280dc4:	d9002815 	stw	r4,160(sp)
  280dc8:	a8800007 	ldb	r2,0(r21)
  280dcc:	10027b26 	beq	r2,zero,2817bc <___vfprintf_internal_r+0xad4>
  280dd0:	00c00944 	movi	r3,37
  280dd4:	a821883a 	mov	r16,r21
  280dd8:	10c0021e 	bne	r2,r3,280de4 <___vfprintf_internal_r+0xfc>
  280ddc:	00001406 	br	280e30 <___vfprintf_internal_r+0x148>
  280de0:	10c00326 	beq	r2,r3,280df0 <___vfprintf_internal_r+0x108>
  280de4:	84000044 	addi	r16,r16,1
  280de8:	80800007 	ldb	r2,0(r16)
  280dec:	103ffc1e 	bne	r2,zero,280de0 <___vfprintf_internal_r+0xf8>
  280df0:	8563c83a 	sub	r17,r16,r21
  280df4:	88000e26 	beq	r17,zero,280e30 <___vfprintf_internal_r+0x148>
  280df8:	d8c02017 	ldw	r3,128(sp)
  280dfc:	d8801f17 	ldw	r2,124(sp)
  280e00:	45400015 	stw	r21,0(r8)
  280e04:	1c47883a 	add	r3,r3,r17
  280e08:	10800044 	addi	r2,r2,1
  280e0c:	d8c02015 	stw	r3,128(sp)
  280e10:	44400115 	stw	r17,4(r8)
  280e14:	d8801f15 	stw	r2,124(sp)
  280e18:	00c001c4 	movi	r3,7
  280e1c:	1880a716 	blt	r3,r2,2810bc <___vfprintf_internal_r+0x3d4>
  280e20:	42000204 	addi	r8,r8,8
  280e24:	d9402f17 	ldw	r5,188(sp)
  280e28:	2c4b883a 	add	r5,r5,r17
  280e2c:	d9402f15 	stw	r5,188(sp)
  280e30:	80800007 	ldb	r2,0(r16)
  280e34:	1000a826 	beq	r2,zero,2810d8 <___vfprintf_internal_r+0x3f0>
  280e38:	84400047 	ldb	r17,1(r16)
  280e3c:	00bfffc4 	movi	r2,-1
  280e40:	85400044 	addi	r21,r16,1
  280e44:	d8002785 	stb	zero,158(sp)
  280e48:	0007883a 	mov	r3,zero
  280e4c:	000f883a 	mov	r7,zero
  280e50:	d8802915 	stw	r2,164(sp)
  280e54:	d8003115 	stw	zero,196(sp)
  280e58:	0025883a 	mov	r18,zero
  280e5c:	01401604 	movi	r5,88
  280e60:	01800244 	movi	r6,9
  280e64:	02800a84 	movi	r10,42
  280e68:	02401b04 	movi	r9,108
  280e6c:	ad400044 	addi	r21,r21,1
  280e70:	88bff804 	addi	r2,r17,-32
  280e74:	28830436 	bltu	r5,r2,281a88 <___vfprintf_internal_r+0xda0>
  280e78:	100490ba 	slli	r2,r2,2
  280e7c:	01000a34 	movhi	r4,40
  280e80:	2103a404 	addi	r4,r4,3728
  280e84:	1105883a 	add	r2,r2,r4
  280e88:	10800017 	ldw	r2,0(r2)
  280e8c:	1000683a 	jmp	r2
  280e90:	002819a8 	cmpgeui	zero,zero,41062
  280e94:	00281a88 	cmpgei	zero,zero,-24470
  280e98:	00281a88 	cmpgei	zero,zero,-24470
  280e9c:	002819c8 	cmpgei	zero,zero,-24473
  280ea0:	00281a88 	cmpgei	zero,zero,-24470
  280ea4:	00281a88 	cmpgei	zero,zero,-24470
  280ea8:	00281a88 	cmpgei	zero,zero,-24470
  280eac:	00281a88 	cmpgei	zero,zero,-24470
  280eb0:	00281a88 	cmpgei	zero,zero,-24470
  280eb4:	00281a88 	cmpgei	zero,zero,-24470
  280eb8:	0028113c 	xorhi	zero,zero,41028
  280ebc:	002818e4 	muli	zero,zero,-24477
  280ec0:	00281a88 	cmpgei	zero,zero,-24470
  280ec4:	00281004 	movi	zero,-24512
  280ec8:	00281164 	muli	zero,zero,-24507
  280ecc:	00281a88 	cmpgei	zero,zero,-24470
  280ed0:	002811a4 	muli	zero,zero,-24506
  280ed4:	002811b0 	cmpltui	zero,zero,41030
  280ed8:	002811b0 	cmpltui	zero,zero,41030
  280edc:	002811b0 	cmpltui	zero,zero,41030
  280ee0:	002811b0 	cmpltui	zero,zero,41030
  280ee4:	002811b0 	cmpltui	zero,zero,41030
  280ee8:	002811b0 	cmpltui	zero,zero,41030
  280eec:	002811b0 	cmpltui	zero,zero,41030
  280ef0:	002811b0 	cmpltui	zero,zero,41030
  280ef4:	002811b0 	cmpltui	zero,zero,41030
  280ef8:	00281a88 	cmpgei	zero,zero,-24470
  280efc:	00281a88 	cmpgei	zero,zero,-24470
  280f00:	00281a88 	cmpgei	zero,zero,-24470
  280f04:	00281a88 	cmpgei	zero,zero,-24470
  280f08:	00281a88 	cmpgei	zero,zero,-24470
  280f0c:	00281a88 	cmpgei	zero,zero,-24470
  280f10:	00281a88 	cmpgei	zero,zero,-24470
  280f14:	00281a88 	cmpgei	zero,zero,-24470
  280f18:	00281a88 	cmpgei	zero,zero,-24470
  280f1c:	00281a88 	cmpgei	zero,zero,-24470
  280f20:	002811e4 	muli	zero,zero,-24505
  280f24:	002812a0 	cmpeqi	zero,zero,-24502
  280f28:	00281a88 	cmpgei	zero,zero,-24470
  280f2c:	002812a0 	cmpeqi	zero,zero,-24502
  280f30:	00281a88 	cmpgei	zero,zero,-24470
  280f34:	00281a88 	cmpgei	zero,zero,-24470
  280f38:	00281a88 	cmpgei	zero,zero,-24470
  280f3c:	00281a88 	cmpgei	zero,zero,-24470
  280f40:	00281340 	call	28134 <__alt_mem_onchip_memory2_0-0x257ecc>
  280f44:	00281a88 	cmpgei	zero,zero,-24470
  280f48:	00281a88 	cmpgei	zero,zero,-24470
  280f4c:	0028134c 	andi	zero,zero,41037
  280f50:	00281a88 	cmpgei	zero,zero,-24470
  280f54:	00281a88 	cmpgei	zero,zero,-24470
  280f58:	00281a88 	cmpgei	zero,zero,-24470
  280f5c:	00281a88 	cmpgei	zero,zero,-24470
  280f60:	00281a88 	cmpgei	zero,zero,-24470
  280f64:	002817c4 	movi	zero,-24481
  280f68:	00281a88 	cmpgei	zero,zero,-24470
  280f6c:	00281a88 	cmpgei	zero,zero,-24470
  280f70:	00281824 	muli	zero,zero,-24480
  280f74:	00281a88 	cmpgei	zero,zero,-24470
  280f78:	00281a88 	cmpgei	zero,zero,-24470
  280f7c:	00281a88 	cmpgei	zero,zero,-24470
  280f80:	00281a88 	cmpgei	zero,zero,-24470
  280f84:	00281a88 	cmpgei	zero,zero,-24470
  280f88:	00281a88 	cmpgei	zero,zero,-24470
  280f8c:	00281a88 	cmpgei	zero,zero,-24470
  280f90:	00281a88 	cmpgei	zero,zero,-24470
  280f94:	00281a88 	cmpgei	zero,zero,-24470
  280f98:	00281a88 	cmpgei	zero,zero,-24470
  280f9c:	00281a34 	movhi	zero,41064
  280fa0:	002819d4 	movui	zero,41063
  280fa4:	002812a0 	cmpeqi	zero,zero,-24502
  280fa8:	002812a0 	cmpeqi	zero,zero,-24502
  280fac:	002812a0 	cmpeqi	zero,zero,-24502
  280fb0:	002819e4 	muli	zero,zero,-24473
  280fb4:	002819d4 	movui	zero,41063
  280fb8:	00281a88 	cmpgei	zero,zero,-24470
  280fbc:	00281a88 	cmpgei	zero,zero,-24470
  280fc0:	002819f0 	cmpltui	zero,zero,41063
  280fc4:	00281a88 	cmpgei	zero,zero,-24470
  280fc8:	00281a00 	call	281a0 <__alt_mem_onchip_memory2_0-0x257e60>
  280fcc:	002818d4 	movui	zero,41059
  280fd0:	00281010 	cmplti	zero,zero,-24512
  280fd4:	002818f4 	movhi	zero,41059
  280fd8:	00281a88 	cmpgei	zero,zero,-24470
  280fdc:	00281900 	call	28190 <__alt_mem_onchip_memory2_0-0x257e70>
  280fe0:	00281a88 	cmpgei	zero,zero,-24470
  280fe4:	0028195c 	xori	zero,zero,41061
  280fe8:	00281a88 	cmpgei	zero,zero,-24470
  280fec:	00281a88 	cmpgei	zero,zero,-24470
  280ff0:	0028196c 	andhi	zero,zero,41061
  280ff4:	d9003117 	ldw	r4,196(sp)
  280ff8:	d8802d15 	stw	r2,180(sp)
  280ffc:	0109c83a 	sub	r4,zero,r4
  281000:	d9003115 	stw	r4,196(sp)
  281004:	94800114 	ori	r18,r18,4
  281008:	ac400007 	ldb	r17,0(r21)
  28100c:	003f9706 	br	280e6c <___vfprintf_internal_r+0x184>
  281010:	00800c04 	movi	r2,48
  281014:	d9002d17 	ldw	r4,180(sp)
  281018:	d9402917 	ldw	r5,164(sp)
  28101c:	d8802705 	stb	r2,156(sp)
  281020:	00801e04 	movi	r2,120
  281024:	d8802745 	stb	r2,157(sp)
  281028:	d8002785 	stb	zero,158(sp)
  28102c:	20c00104 	addi	r3,r4,4
  281030:	24c00017 	ldw	r19,0(r4)
  281034:	002d883a 	mov	r22,zero
  281038:	90800094 	ori	r2,r18,2
  28103c:	28029a16 	blt	r5,zero,281aa8 <___vfprintf_internal_r+0xdc0>
  281040:	00bfdfc4 	movi	r2,-129
  281044:	90a4703a 	and	r18,r18,r2
  281048:	d8c02d15 	stw	r3,180(sp)
  28104c:	94800094 	ori	r18,r18,2
  281050:	9802871e 	bne	r19,zero,281a70 <___vfprintf_internal_r+0xd88>
  281054:	00800a74 	movhi	r2,41
  281058:	10860504 	addi	r2,r2,6164
  28105c:	d8803915 	stw	r2,228(sp)
  281060:	04401e04 	movi	r17,120
  281064:	d8802917 	ldw	r2,164(sp)
  281068:	0039883a 	mov	fp,zero
  28106c:	1001e926 	beq	r2,zero,281814 <___vfprintf_internal_r+0xb2c>
  281070:	0027883a 	mov	r19,zero
  281074:	002d883a 	mov	r22,zero
  281078:	00020506 	br	281890 <___vfprintf_internal_r+0xba8>
  28107c:	d9002c17 	ldw	r4,176(sp)
  281080:	b80b883a 	mov	r5,r23
  281084:	0282fb80 	call	282fb8 <__swsetup_r>
  281088:	1005ac1e 	bne	r2,zero,28273c <___vfprintf_internal_r+0x1a54>
  28108c:	b880030b 	ldhu	r2,12(r23)
  281090:	00c00284 	movi	r3,10
  281094:	1080068c 	andi	r2,r2,26
  281098:	10ff3c1e 	bne	r2,r3,280d8c <___vfprintf_internal_r+0xa4>
  28109c:	b880038f 	ldh	r2,14(r23)
  2810a0:	103f3a16 	blt	r2,zero,280d8c <___vfprintf_internal_r+0xa4>
  2810a4:	d9c02d17 	ldw	r7,180(sp)
  2810a8:	d9002c17 	ldw	r4,176(sp)
  2810ac:	a80d883a 	mov	r6,r21
  2810b0:	b80b883a 	mov	r5,r23
  2810b4:	0282efc0 	call	282efc <__sbprintf>
  2810b8:	00001106 	br	281100 <___vfprintf_internal_r+0x418>
  2810bc:	d9002c17 	ldw	r4,176(sp)
  2810c0:	d9801e04 	addi	r6,sp,120
  2810c4:	b80b883a 	mov	r5,r23
  2810c8:	02882e40 	call	2882e4 <__sprint_r>
  2810cc:	1000081e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2810d0:	da000404 	addi	r8,sp,16
  2810d4:	003f5306 	br	280e24 <___vfprintf_internal_r+0x13c>
  2810d8:	d8802017 	ldw	r2,128(sp)
  2810dc:	10000426 	beq	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2810e0:	d9002c17 	ldw	r4,176(sp)
  2810e4:	d9801e04 	addi	r6,sp,120
  2810e8:	b80b883a 	mov	r5,r23
  2810ec:	02882e40 	call	2882e4 <__sprint_r>
  2810f0:	b880030b 	ldhu	r2,12(r23)
  2810f4:	1080100c 	andi	r2,r2,64
  2810f8:	1005901e 	bne	r2,zero,28273c <___vfprintf_internal_r+0x1a54>
  2810fc:	d8802f17 	ldw	r2,188(sp)
  281100:	dfc04717 	ldw	ra,284(sp)
  281104:	df004617 	ldw	fp,280(sp)
  281108:	ddc04517 	ldw	r23,276(sp)
  28110c:	dd804417 	ldw	r22,272(sp)
  281110:	dd404317 	ldw	r21,268(sp)
  281114:	dd004217 	ldw	r20,264(sp)
  281118:	dcc04117 	ldw	r19,260(sp)
  28111c:	dc804017 	ldw	r18,256(sp)
  281120:	dc403f17 	ldw	r17,252(sp)
  281124:	dc003e17 	ldw	r16,248(sp)
  281128:	dec04804 	addi	sp,sp,288
  28112c:	f800283a 	ret
  281130:	d9002c17 	ldw	r4,176(sp)
  281134:	0284f8c0 	call	284f8c <__sinit>
  281138:	003f0406 	br	280d4c <___vfprintf_internal_r+0x64>
  28113c:	d8802d17 	ldw	r2,180(sp)
  281140:	d9002d17 	ldw	r4,180(sp)
  281144:	10800017 	ldw	r2,0(r2)
  281148:	d8803115 	stw	r2,196(sp)
  28114c:	20800104 	addi	r2,r4,4
  281150:	d9003117 	ldw	r4,196(sp)
  281154:	203fa716 	blt	r4,zero,280ff4 <___vfprintf_internal_r+0x30c>
  281158:	d8802d15 	stw	r2,180(sp)
  28115c:	ac400007 	ldb	r17,0(r21)
  281160:	003f4206 	br	280e6c <___vfprintf_internal_r+0x184>
  281164:	ac400007 	ldb	r17,0(r21)
  281168:	aac00044 	addi	r11,r21,1
  28116c:	8a872826 	beq	r17,r10,282e10 <___vfprintf_internal_r+0x2128>
  281170:	88bff404 	addi	r2,r17,-48
  281174:	0009883a 	mov	r4,zero
  281178:	30867d36 	bltu	r6,r2,282b70 <___vfprintf_internal_r+0x1e88>
  28117c:	5c400007 	ldb	r17,0(r11)
  281180:	210002a4 	muli	r4,r4,10
  281184:	5d400044 	addi	r21,r11,1
  281188:	a817883a 	mov	r11,r21
  28118c:	2089883a 	add	r4,r4,r2
  281190:	88bff404 	addi	r2,r17,-48
  281194:	30bff92e 	bgeu	r6,r2,28117c <___vfprintf_internal_r+0x494>
  281198:	2005c916 	blt	r4,zero,2828c0 <___vfprintf_internal_r+0x1bd8>
  28119c:	d9002915 	stw	r4,164(sp)
  2811a0:	003f3306 	br	280e70 <___vfprintf_internal_r+0x188>
  2811a4:	94802014 	ori	r18,r18,128
  2811a8:	ac400007 	ldb	r17,0(r21)
  2811ac:	003f2f06 	br	280e6c <___vfprintf_internal_r+0x184>
  2811b0:	a809883a 	mov	r4,r21
  2811b4:	d8003115 	stw	zero,196(sp)
  2811b8:	88bff404 	addi	r2,r17,-48
  2811bc:	0017883a 	mov	r11,zero
  2811c0:	24400007 	ldb	r17,0(r4)
  2811c4:	5ac002a4 	muli	r11,r11,10
  2811c8:	ad400044 	addi	r21,r21,1
  2811cc:	a809883a 	mov	r4,r21
  2811d0:	12d7883a 	add	r11,r2,r11
  2811d4:	88bff404 	addi	r2,r17,-48
  2811d8:	30bff92e 	bgeu	r6,r2,2811c0 <___vfprintf_internal_r+0x4d8>
  2811dc:	dac03115 	stw	r11,196(sp)
  2811e0:	003f2306 	br	280e70 <___vfprintf_internal_r+0x188>
  2811e4:	18c03fcc 	andi	r3,r3,255
  2811e8:	18072b1e 	bne	r3,zero,282e98 <___vfprintf_internal_r+0x21b0>
  2811ec:	94800414 	ori	r18,r18,16
  2811f0:	9080080c 	andi	r2,r18,32
  2811f4:	10037b26 	beq	r2,zero,281fe4 <___vfprintf_internal_r+0x12fc>
  2811f8:	d9402d17 	ldw	r5,180(sp)
  2811fc:	28800117 	ldw	r2,4(r5)
  281200:	2cc00017 	ldw	r19,0(r5)
  281204:	29400204 	addi	r5,r5,8
  281208:	d9402d15 	stw	r5,180(sp)
  28120c:	102d883a 	mov	r22,r2
  281210:	10044b16 	blt	r2,zero,282340 <___vfprintf_internal_r+0x1658>
  281214:	d9402917 	ldw	r5,164(sp)
  281218:	df002783 	ldbu	fp,158(sp)
  28121c:	2803bc16 	blt	r5,zero,282110 <___vfprintf_internal_r+0x1428>
  281220:	00ffdfc4 	movi	r3,-129
  281224:	9d84b03a 	or	r2,r19,r22
  281228:	90e4703a 	and	r18,r18,r3
  28122c:	10017726 	beq	r2,zero,28180c <___vfprintf_internal_r+0xb24>
  281230:	b0038326 	beq	r22,zero,282040 <___vfprintf_internal_r+0x1358>
  281234:	dc402a15 	stw	r17,168(sp)
  281238:	dc001e04 	addi	r16,sp,120
  28123c:	b023883a 	mov	r17,r22
  281240:	402d883a 	mov	r22,r8
  281244:	9809883a 	mov	r4,r19
  281248:	880b883a 	mov	r5,r17
  28124c:	01800284 	movi	r6,10
  281250:	000f883a 	mov	r7,zero
  281254:	028a6dc0 	call	28a6dc <__umoddi3>
  281258:	10800c04 	addi	r2,r2,48
  28125c:	843fffc4 	addi	r16,r16,-1
  281260:	9809883a 	mov	r4,r19
  281264:	880b883a 	mov	r5,r17
  281268:	80800005 	stb	r2,0(r16)
  28126c:	01800284 	movi	r6,10
  281270:	000f883a 	mov	r7,zero
  281274:	028a1640 	call	28a164 <__udivdi3>
  281278:	1027883a 	mov	r19,r2
  28127c:	10c4b03a 	or	r2,r2,r3
  281280:	1823883a 	mov	r17,r3
  281284:	103fef1e 	bne	r2,zero,281244 <___vfprintf_internal_r+0x55c>
  281288:	d8c02817 	ldw	r3,160(sp)
  28128c:	dc402a17 	ldw	r17,168(sp)
  281290:	b011883a 	mov	r8,r22
  281294:	1c07c83a 	sub	r3,r3,r16
  281298:	d8c02e15 	stw	r3,184(sp)
  28129c:	00005906 	br	281404 <___vfprintf_internal_r+0x71c>
  2812a0:	18c03fcc 	andi	r3,r3,255
  2812a4:	1806fa1e 	bne	r3,zero,282e90 <___vfprintf_internal_r+0x21a8>
  2812a8:	9080020c 	andi	r2,r18,8
  2812ac:	10048a26 	beq	r2,zero,2824d8 <___vfprintf_internal_r+0x17f0>
  2812b0:	d8c02d17 	ldw	r3,180(sp)
  2812b4:	d9002d17 	ldw	r4,180(sp)
  2812b8:	d9402d17 	ldw	r5,180(sp)
  2812bc:	18c00017 	ldw	r3,0(r3)
  2812c0:	21000117 	ldw	r4,4(r4)
  2812c4:	29400204 	addi	r5,r5,8
  2812c8:	d8c03615 	stw	r3,216(sp)
  2812cc:	d9003815 	stw	r4,224(sp)
  2812d0:	d9402d15 	stw	r5,180(sp)
  2812d4:	d9003617 	ldw	r4,216(sp)
  2812d8:	d9403817 	ldw	r5,224(sp)
  2812dc:	da003d15 	stw	r8,244(sp)
  2812e0:	04000044 	movi	r16,1
  2812e4:	0287f080 	call	287f08 <__fpclassifyd>
  2812e8:	da003d17 	ldw	r8,244(sp)
  2812ec:	14041f1e 	bne	r2,r16,28236c <___vfprintf_internal_r+0x1684>
  2812f0:	d9003617 	ldw	r4,216(sp)
  2812f4:	d9403817 	ldw	r5,224(sp)
  2812f8:	000d883a 	mov	r6,zero
  2812fc:	000f883a 	mov	r7,zero
  281300:	028bf0c0 	call	28bf0c <__ledf2>
  281304:	da003d17 	ldw	r8,244(sp)
  281308:	1005be16 	blt	r2,zero,282a04 <___vfprintf_internal_r+0x1d1c>
  28130c:	df002783 	ldbu	fp,158(sp)
  281310:	008011c4 	movi	r2,71
  281314:	1445330e 	bge	r2,r17,2827e4 <___vfprintf_internal_r+0x1afc>
  281318:	04000a74 	movhi	r16,41
  28131c:	8405fd04 	addi	r16,r16,6132
  281320:	00c000c4 	movi	r3,3
  281324:	00bfdfc4 	movi	r2,-129
  281328:	d8c02a15 	stw	r3,168(sp)
  28132c:	90a4703a 	and	r18,r18,r2
  281330:	d8c02e15 	stw	r3,184(sp)
  281334:	d8002915 	stw	zero,164(sp)
  281338:	d8003215 	stw	zero,200(sp)
  28133c:	00003706 	br	28141c <___vfprintf_internal_r+0x734>
  281340:	94800214 	ori	r18,r18,8
  281344:	ac400007 	ldb	r17,0(r21)
  281348:	003ec806 	br	280e6c <___vfprintf_internal_r+0x184>
  28134c:	18c03fcc 	andi	r3,r3,255
  281350:	1806db1e 	bne	r3,zero,282ec0 <___vfprintf_internal_r+0x21d8>
  281354:	94800414 	ori	r18,r18,16
  281358:	9080080c 	andi	r2,r18,32
  28135c:	1002d826 	beq	r2,zero,281ec0 <___vfprintf_internal_r+0x11d8>
  281360:	d9402d17 	ldw	r5,180(sp)
  281364:	d8c02917 	ldw	r3,164(sp)
  281368:	d8002785 	stb	zero,158(sp)
  28136c:	28800204 	addi	r2,r5,8
  281370:	2cc00017 	ldw	r19,0(r5)
  281374:	2d800117 	ldw	r22,4(r5)
  281378:	18048f16 	blt	r3,zero,2825b8 <___vfprintf_internal_r+0x18d0>
  28137c:	013fdfc4 	movi	r4,-129
  281380:	9d86b03a 	or	r3,r19,r22
  281384:	d8802d15 	stw	r2,180(sp)
  281388:	9124703a 	and	r18,r18,r4
  28138c:	1802d91e 	bne	r3,zero,281ef4 <___vfprintf_internal_r+0x120c>
  281390:	d8c02917 	ldw	r3,164(sp)
  281394:	0039883a 	mov	fp,zero
  281398:	1805c326 	beq	r3,zero,282aa8 <___vfprintf_internal_r+0x1dc0>
  28139c:	0027883a 	mov	r19,zero
  2813a0:	002d883a 	mov	r22,zero
  2813a4:	dc001e04 	addi	r16,sp,120
  2813a8:	9806d0fa 	srli	r3,r19,3
  2813ac:	b008977a 	slli	r4,r22,29
  2813b0:	b02cd0fa 	srli	r22,r22,3
  2813b4:	9cc001cc 	andi	r19,r19,7
  2813b8:	98800c04 	addi	r2,r19,48
  2813bc:	843fffc4 	addi	r16,r16,-1
  2813c0:	20e6b03a 	or	r19,r4,r3
  2813c4:	80800005 	stb	r2,0(r16)
  2813c8:	9d86b03a 	or	r3,r19,r22
  2813cc:	183ff61e 	bne	r3,zero,2813a8 <___vfprintf_internal_r+0x6c0>
  2813d0:	90c0004c 	andi	r3,r18,1
  2813d4:	18013b26 	beq	r3,zero,2818c4 <___vfprintf_internal_r+0xbdc>
  2813d8:	10803fcc 	andi	r2,r2,255
  2813dc:	1080201c 	xori	r2,r2,128
  2813e0:	10bfe004 	addi	r2,r2,-128
  2813e4:	00c00c04 	movi	r3,48
  2813e8:	10c13626 	beq	r2,r3,2818c4 <___vfprintf_internal_r+0xbdc>
  2813ec:	80ffffc5 	stb	r3,-1(r16)
  2813f0:	d8c02817 	ldw	r3,160(sp)
  2813f4:	80bfffc4 	addi	r2,r16,-1
  2813f8:	1021883a 	mov	r16,r2
  2813fc:	1887c83a 	sub	r3,r3,r2
  281400:	d8c02e15 	stw	r3,184(sp)
  281404:	d8802e17 	ldw	r2,184(sp)
  281408:	d9002917 	ldw	r4,164(sp)
  28140c:	1100010e 	bge	r2,r4,281414 <___vfprintf_internal_r+0x72c>
  281410:	2005883a 	mov	r2,r4
  281414:	d8802a15 	stw	r2,168(sp)
  281418:	d8003215 	stw	zero,200(sp)
  28141c:	e7003fcc 	andi	fp,fp,255
  281420:	e700201c 	xori	fp,fp,128
  281424:	e73fe004 	addi	fp,fp,-128
  281428:	e0000326 	beq	fp,zero,281438 <___vfprintf_internal_r+0x750>
  28142c:	d8c02a17 	ldw	r3,168(sp)
  281430:	18c00044 	addi	r3,r3,1
  281434:	d8c02a15 	stw	r3,168(sp)
  281438:	90c0008c 	andi	r3,r18,2
  28143c:	d8c02b15 	stw	r3,172(sp)
  281440:	18000326 	beq	r3,zero,281450 <___vfprintf_internal_r+0x768>
  281444:	d8c02a17 	ldw	r3,168(sp)
  281448:	18c00084 	addi	r3,r3,2
  28144c:	d8c02a15 	stw	r3,168(sp)
  281450:	90c0210c 	andi	r3,r18,132
  281454:	d8c03015 	stw	r3,192(sp)
  281458:	1801a31e 	bne	r3,zero,281ae8 <___vfprintf_internal_r+0xe00>
  28145c:	d9003117 	ldw	r4,196(sp)
  281460:	d8c02a17 	ldw	r3,168(sp)
  281464:	20e7c83a 	sub	r19,r4,r3
  281468:	04c19f0e 	bge	zero,r19,281ae8 <___vfprintf_internal_r+0xe00>
  28146c:	02400404 	movi	r9,16
  281470:	d8c02017 	ldw	r3,128(sp)
  281474:	d8801f17 	ldw	r2,124(sp)
  281478:	4cc50d0e 	bge	r9,r19,2828b0 <___vfprintf_internal_r+0x1bc8>
  28147c:	01400a74 	movhi	r5,41
  281480:	29461084 	addi	r5,r5,6210
  281484:	dc403b15 	stw	r17,236(sp)
  281488:	d9403515 	stw	r5,212(sp)
  28148c:	9823883a 	mov	r17,r19
  281490:	482d883a 	mov	r22,r9
  281494:	9027883a 	mov	r19,r18
  281498:	070001c4 	movi	fp,7
  28149c:	8025883a 	mov	r18,r16
  2814a0:	dc002c17 	ldw	r16,176(sp)
  2814a4:	00000306 	br	2814b4 <___vfprintf_internal_r+0x7cc>
  2814a8:	8c7ffc04 	addi	r17,r17,-16
  2814ac:	42000204 	addi	r8,r8,8
  2814b0:	b440130e 	bge	r22,r17,281500 <___vfprintf_internal_r+0x818>
  2814b4:	01000a74 	movhi	r4,41
  2814b8:	18c00404 	addi	r3,r3,16
  2814bc:	10800044 	addi	r2,r2,1
  2814c0:	21061084 	addi	r4,r4,6210
  2814c4:	41000015 	stw	r4,0(r8)
  2814c8:	45800115 	stw	r22,4(r8)
  2814cc:	d8c02015 	stw	r3,128(sp)
  2814d0:	d8801f15 	stw	r2,124(sp)
  2814d4:	e0bff40e 	bge	fp,r2,2814a8 <___vfprintf_internal_r+0x7c0>
  2814d8:	d9801e04 	addi	r6,sp,120
  2814dc:	b80b883a 	mov	r5,r23
  2814e0:	8009883a 	mov	r4,r16
  2814e4:	02882e40 	call	2882e4 <__sprint_r>
  2814e8:	103f011e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2814ec:	8c7ffc04 	addi	r17,r17,-16
  2814f0:	d8c02017 	ldw	r3,128(sp)
  2814f4:	d8801f17 	ldw	r2,124(sp)
  2814f8:	da000404 	addi	r8,sp,16
  2814fc:	b47fed16 	blt	r22,r17,2814b4 <___vfprintf_internal_r+0x7cc>
  281500:	9021883a 	mov	r16,r18
  281504:	9825883a 	mov	r18,r19
  281508:	8827883a 	mov	r19,r17
  28150c:	dc403b17 	ldw	r17,236(sp)
  281510:	d9403517 	ldw	r5,212(sp)
  281514:	98c7883a 	add	r3,r19,r3
  281518:	10800044 	addi	r2,r2,1
  28151c:	41400015 	stw	r5,0(r8)
  281520:	44c00115 	stw	r19,4(r8)
  281524:	d8c02015 	stw	r3,128(sp)
  281528:	d8801f15 	stw	r2,124(sp)
  28152c:	010001c4 	movi	r4,7
  281530:	2082a316 	blt	r4,r2,281fc0 <___vfprintf_internal_r+0x12d8>
  281534:	df002787 	ldb	fp,158(sp)
  281538:	42000204 	addi	r8,r8,8
  28153c:	e0000c26 	beq	fp,zero,281570 <___vfprintf_internal_r+0x888>
  281540:	d8801f17 	ldw	r2,124(sp)
  281544:	d9002784 	addi	r4,sp,158
  281548:	18c00044 	addi	r3,r3,1
  28154c:	10800044 	addi	r2,r2,1
  281550:	41000015 	stw	r4,0(r8)
  281554:	01000044 	movi	r4,1
  281558:	41000115 	stw	r4,4(r8)
  28155c:	d8c02015 	stw	r3,128(sp)
  281560:	d8801f15 	stw	r2,124(sp)
  281564:	010001c4 	movi	r4,7
  281568:	20823c16 	blt	r4,r2,281e5c <___vfprintf_internal_r+0x1174>
  28156c:	42000204 	addi	r8,r8,8
  281570:	d8802b17 	ldw	r2,172(sp)
  281574:	10000c26 	beq	r2,zero,2815a8 <___vfprintf_internal_r+0x8c0>
  281578:	d8801f17 	ldw	r2,124(sp)
  28157c:	d9002704 	addi	r4,sp,156
  281580:	18c00084 	addi	r3,r3,2
  281584:	10800044 	addi	r2,r2,1
  281588:	41000015 	stw	r4,0(r8)
  28158c:	01000084 	movi	r4,2
  281590:	41000115 	stw	r4,4(r8)
  281594:	d8c02015 	stw	r3,128(sp)
  281598:	d8801f15 	stw	r2,124(sp)
  28159c:	010001c4 	movi	r4,7
  2815a0:	20823616 	blt	r4,r2,281e7c <___vfprintf_internal_r+0x1194>
  2815a4:	42000204 	addi	r8,r8,8
  2815a8:	d9003017 	ldw	r4,192(sp)
  2815ac:	00802004 	movi	r2,128
  2815b0:	20819926 	beq	r4,r2,281c18 <___vfprintf_internal_r+0xf30>
  2815b4:	d9402917 	ldw	r5,164(sp)
  2815b8:	d8802e17 	ldw	r2,184(sp)
  2815bc:	28adc83a 	sub	r22,r5,r2
  2815c0:	0580310e 	bge	zero,r22,281688 <___vfprintf_internal_r+0x9a0>
  2815c4:	07000404 	movi	fp,16
  2815c8:	d8801f17 	ldw	r2,124(sp)
  2815cc:	e584140e 	bge	fp,r22,282620 <___vfprintf_internal_r+0x1938>
  2815d0:	01400a74 	movhi	r5,41
  2815d4:	29460c84 	addi	r5,r5,6194
  2815d8:	dc402915 	stw	r17,164(sp)
  2815dc:	d9402b15 	stw	r5,172(sp)
  2815e0:	b023883a 	mov	r17,r22
  2815e4:	04c001c4 	movi	r19,7
  2815e8:	a82d883a 	mov	r22,r21
  2815ec:	902b883a 	mov	r21,r18
  2815f0:	8025883a 	mov	r18,r16
  2815f4:	dc002c17 	ldw	r16,176(sp)
  2815f8:	00000306 	br	281608 <___vfprintf_internal_r+0x920>
  2815fc:	8c7ffc04 	addi	r17,r17,-16
  281600:	42000204 	addi	r8,r8,8
  281604:	e440110e 	bge	fp,r17,28164c <___vfprintf_internal_r+0x964>
  281608:	18c00404 	addi	r3,r3,16
  28160c:	10800044 	addi	r2,r2,1
  281610:	45000015 	stw	r20,0(r8)
  281614:	47000115 	stw	fp,4(r8)
  281618:	d8c02015 	stw	r3,128(sp)
  28161c:	d8801f15 	stw	r2,124(sp)
  281620:	98bff60e 	bge	r19,r2,2815fc <___vfprintf_internal_r+0x914>
  281624:	d9801e04 	addi	r6,sp,120
  281628:	b80b883a 	mov	r5,r23
  28162c:	8009883a 	mov	r4,r16
  281630:	02882e40 	call	2882e4 <__sprint_r>
  281634:	103eae1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281638:	8c7ffc04 	addi	r17,r17,-16
  28163c:	d8c02017 	ldw	r3,128(sp)
  281640:	d8801f17 	ldw	r2,124(sp)
  281644:	da000404 	addi	r8,sp,16
  281648:	e47fef16 	blt	fp,r17,281608 <___vfprintf_internal_r+0x920>
  28164c:	9021883a 	mov	r16,r18
  281650:	a825883a 	mov	r18,r21
  281654:	b02b883a 	mov	r21,r22
  281658:	882d883a 	mov	r22,r17
  28165c:	dc402917 	ldw	r17,164(sp)
  281660:	d9002b17 	ldw	r4,172(sp)
  281664:	1d87883a 	add	r3,r3,r22
  281668:	10800044 	addi	r2,r2,1
  28166c:	41000015 	stw	r4,0(r8)
  281670:	45800115 	stw	r22,4(r8)
  281674:	d8c02015 	stw	r3,128(sp)
  281678:	d8801f15 	stw	r2,124(sp)
  28167c:	010001c4 	movi	r4,7
  281680:	2081ee16 	blt	r4,r2,281e3c <___vfprintf_internal_r+0x1154>
  281684:	42000204 	addi	r8,r8,8
  281688:	9080400c 	andi	r2,r18,256
  28168c:	1001181e 	bne	r2,zero,281af0 <___vfprintf_internal_r+0xe08>
  281690:	d9402e17 	ldw	r5,184(sp)
  281694:	d8801f17 	ldw	r2,124(sp)
  281698:	44000015 	stw	r16,0(r8)
  28169c:	1947883a 	add	r3,r3,r5
  2816a0:	10800044 	addi	r2,r2,1
  2816a4:	41400115 	stw	r5,4(r8)
  2816a8:	d8c02015 	stw	r3,128(sp)
  2816ac:	d8801f15 	stw	r2,124(sp)
  2816b0:	010001c4 	movi	r4,7
  2816b4:	2081d316 	blt	r4,r2,281e04 <___vfprintf_internal_r+0x111c>
  2816b8:	42000204 	addi	r8,r8,8
  2816bc:	9480010c 	andi	r18,r18,4
  2816c0:	90003226 	beq	r18,zero,28178c <___vfprintf_internal_r+0xaa4>
  2816c4:	d9403117 	ldw	r5,196(sp)
  2816c8:	d8802a17 	ldw	r2,168(sp)
  2816cc:	28a1c83a 	sub	r16,r5,r2
  2816d0:	04002e0e 	bge	zero,r16,28178c <___vfprintf_internal_r+0xaa4>
  2816d4:	04400404 	movi	r17,16
  2816d8:	d8801f17 	ldw	r2,124(sp)
  2816dc:	8c04a20e 	bge	r17,r16,282968 <___vfprintf_internal_r+0x1c80>
  2816e0:	01400a74 	movhi	r5,41
  2816e4:	29461084 	addi	r5,r5,6210
  2816e8:	d9403515 	stw	r5,212(sp)
  2816ec:	048001c4 	movi	r18,7
  2816f0:	dcc02c17 	ldw	r19,176(sp)
  2816f4:	00000306 	br	281704 <___vfprintf_internal_r+0xa1c>
  2816f8:	843ffc04 	addi	r16,r16,-16
  2816fc:	42000204 	addi	r8,r8,8
  281700:	8c00130e 	bge	r17,r16,281750 <___vfprintf_internal_r+0xa68>
  281704:	01000a74 	movhi	r4,41
  281708:	18c00404 	addi	r3,r3,16
  28170c:	10800044 	addi	r2,r2,1
  281710:	21061084 	addi	r4,r4,6210
  281714:	41000015 	stw	r4,0(r8)
  281718:	44400115 	stw	r17,4(r8)
  28171c:	d8c02015 	stw	r3,128(sp)
  281720:	d8801f15 	stw	r2,124(sp)
  281724:	90bff40e 	bge	r18,r2,2816f8 <___vfprintf_internal_r+0xa10>
  281728:	d9801e04 	addi	r6,sp,120
  28172c:	b80b883a 	mov	r5,r23
  281730:	9809883a 	mov	r4,r19
  281734:	02882e40 	call	2882e4 <__sprint_r>
  281738:	103e6d1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  28173c:	843ffc04 	addi	r16,r16,-16
  281740:	d8c02017 	ldw	r3,128(sp)
  281744:	d8801f17 	ldw	r2,124(sp)
  281748:	da000404 	addi	r8,sp,16
  28174c:	8c3fed16 	blt	r17,r16,281704 <___vfprintf_internal_r+0xa1c>
  281750:	d9403517 	ldw	r5,212(sp)
  281754:	1c07883a 	add	r3,r3,r16
  281758:	10800044 	addi	r2,r2,1
  28175c:	41400015 	stw	r5,0(r8)
  281760:	44000115 	stw	r16,4(r8)
  281764:	d8c02015 	stw	r3,128(sp)
  281768:	d8801f15 	stw	r2,124(sp)
  28176c:	010001c4 	movi	r4,7
  281770:	2080060e 	bge	r4,r2,28178c <___vfprintf_internal_r+0xaa4>
  281774:	d9002c17 	ldw	r4,176(sp)
  281778:	d9801e04 	addi	r6,sp,120
  28177c:	b80b883a 	mov	r5,r23
  281780:	02882e40 	call	2882e4 <__sprint_r>
  281784:	103e5a1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281788:	d8c02017 	ldw	r3,128(sp)
  28178c:	d8803117 	ldw	r2,196(sp)
  281790:	d9002a17 	ldw	r4,168(sp)
  281794:	1100010e 	bge	r2,r4,28179c <___vfprintf_internal_r+0xab4>
  281798:	2005883a 	mov	r2,r4
  28179c:	d9402f17 	ldw	r5,188(sp)
  2817a0:	288b883a 	add	r5,r5,r2
  2817a4:	d9402f15 	stw	r5,188(sp)
  2817a8:	18019e1e 	bne	r3,zero,281e24 <___vfprintf_internal_r+0x113c>
  2817ac:	a8800007 	ldb	r2,0(r21)
  2817b0:	d8001f15 	stw	zero,124(sp)
  2817b4:	da000404 	addi	r8,sp,16
  2817b8:	103d851e 	bne	r2,zero,280dd0 <___vfprintf_internal_r+0xe8>
  2817bc:	a821883a 	mov	r16,r21
  2817c0:	003d9b06 	br	280e30 <___vfprintf_internal_r+0x148>
  2817c4:	18c03fcc 	andi	r3,r3,255
  2817c8:	1805c11e 	bne	r3,zero,282ed0 <___vfprintf_internal_r+0x21e8>
  2817cc:	94800414 	ori	r18,r18,16
  2817d0:	9080080c 	andi	r2,r18,32
  2817d4:	10020c26 	beq	r2,zero,282008 <___vfprintf_internal_r+0x1320>
  2817d8:	d8802d17 	ldw	r2,180(sp)
  2817dc:	d9002917 	ldw	r4,164(sp)
  2817e0:	d8002785 	stb	zero,158(sp)
  2817e4:	10c00204 	addi	r3,r2,8
  2817e8:	14c00017 	ldw	r19,0(r2)
  2817ec:	15800117 	ldw	r22,4(r2)
  2817f0:	20040f16 	blt	r4,zero,282830 <___vfprintf_internal_r+0x1b48>
  2817f4:	013fdfc4 	movi	r4,-129
  2817f8:	9d84b03a 	or	r2,r19,r22
  2817fc:	d8c02d15 	stw	r3,180(sp)
  281800:	9124703a 	and	r18,r18,r4
  281804:	0039883a 	mov	fp,zero
  281808:	103e891e 	bne	r2,zero,281230 <___vfprintf_internal_r+0x548>
  28180c:	d9002917 	ldw	r4,164(sp)
  281810:	2002c11e 	bne	r4,zero,282318 <___vfprintf_internal_r+0x1630>
  281814:	d8002915 	stw	zero,164(sp)
  281818:	d8002e15 	stw	zero,184(sp)
  28181c:	dc001e04 	addi	r16,sp,120
  281820:	003ef806 	br	281404 <___vfprintf_internal_r+0x71c>
  281824:	18c03fcc 	andi	r3,r3,255
  281828:	18059d1e 	bne	r3,zero,282ea0 <___vfprintf_internal_r+0x21b8>
  28182c:	01400a74 	movhi	r5,41
  281830:	29460004 	addi	r5,r5,6144
  281834:	d9403915 	stw	r5,228(sp)
  281838:	9080080c 	andi	r2,r18,32
  28183c:	10005226 	beq	r2,zero,281988 <___vfprintf_internal_r+0xca0>
  281840:	d8802d17 	ldw	r2,180(sp)
  281844:	14c00017 	ldw	r19,0(r2)
  281848:	15800117 	ldw	r22,4(r2)
  28184c:	10800204 	addi	r2,r2,8
  281850:	d8802d15 	stw	r2,180(sp)
  281854:	9080004c 	andi	r2,r18,1
  281858:	10019026 	beq	r2,zero,281e9c <___vfprintf_internal_r+0x11b4>
  28185c:	9d84b03a 	or	r2,r19,r22
  281860:	10036926 	beq	r2,zero,282608 <___vfprintf_internal_r+0x1920>
  281864:	d8c02917 	ldw	r3,164(sp)
  281868:	00800c04 	movi	r2,48
  28186c:	d8802705 	stb	r2,156(sp)
  281870:	dc402745 	stb	r17,157(sp)
  281874:	d8002785 	stb	zero,158(sp)
  281878:	90800094 	ori	r2,r18,2
  28187c:	18045d16 	blt	r3,zero,2829f4 <___vfprintf_internal_r+0x1d0c>
  281880:	00bfdfc4 	movi	r2,-129
  281884:	90a4703a 	and	r18,r18,r2
  281888:	94800094 	ori	r18,r18,2
  28188c:	0039883a 	mov	fp,zero
  281890:	d9003917 	ldw	r4,228(sp)
  281894:	dc001e04 	addi	r16,sp,120
  281898:	988003cc 	andi	r2,r19,15
  28189c:	b006973a 	slli	r3,r22,28
  2818a0:	2085883a 	add	r2,r4,r2
  2818a4:	9826d13a 	srli	r19,r19,4
  2818a8:	10800003 	ldbu	r2,0(r2)
  2818ac:	b02cd13a 	srli	r22,r22,4
  2818b0:	843fffc4 	addi	r16,r16,-1
  2818b4:	1ce6b03a 	or	r19,r3,r19
  2818b8:	80800005 	stb	r2,0(r16)
  2818bc:	9d84b03a 	or	r2,r19,r22
  2818c0:	103ff51e 	bne	r2,zero,281898 <___vfprintf_internal_r+0xbb0>
  2818c4:	d8c02817 	ldw	r3,160(sp)
  2818c8:	1c07c83a 	sub	r3,r3,r16
  2818cc:	d8c02e15 	stw	r3,184(sp)
  2818d0:	003ecc06 	br	281404 <___vfprintf_internal_r+0x71c>
  2818d4:	18c03fcc 	andi	r3,r3,255
  2818d8:	183e9f26 	beq	r3,zero,281358 <___vfprintf_internal_r+0x670>
  2818dc:	d9c02785 	stb	r7,158(sp)
  2818e0:	003e9d06 	br	281358 <___vfprintf_internal_r+0x670>
  2818e4:	00c00044 	movi	r3,1
  2818e8:	01c00ac4 	movi	r7,43
  2818ec:	ac400007 	ldb	r17,0(r21)
  2818f0:	003d5e06 	br	280e6c <___vfprintf_internal_r+0x184>
  2818f4:	94800814 	ori	r18,r18,32
  2818f8:	ac400007 	ldb	r17,0(r21)
  2818fc:	003d5b06 	br	280e6c <___vfprintf_internal_r+0x184>
  281900:	d8c02d17 	ldw	r3,180(sp)
  281904:	d8002785 	stb	zero,158(sp)
  281908:	1c000017 	ldw	r16,0(r3)
  28190c:	1cc00104 	addi	r19,r3,4
  281910:	80041926 	beq	r16,zero,282978 <___vfprintf_internal_r+0x1c90>
  281914:	d9002917 	ldw	r4,164(sp)
  281918:	2003d016 	blt	r4,zero,28285c <___vfprintf_internal_r+0x1b74>
  28191c:	200d883a 	mov	r6,r4
  281920:	000b883a 	mov	r5,zero
  281924:	8009883a 	mov	r4,r16
  281928:	da003d15 	stw	r8,244(sp)
  28192c:	02864f80 	call	2864f8 <memchr>
  281930:	da003d17 	ldw	r8,244(sp)
  281934:	10045426 	beq	r2,zero,282a88 <___vfprintf_internal_r+0x1da0>
  281938:	1405c83a 	sub	r2,r2,r16
  28193c:	d8802e15 	stw	r2,184(sp)
  281940:	1003cc16 	blt	r2,zero,282874 <___vfprintf_internal_r+0x1b8c>
  281944:	df002783 	ldbu	fp,158(sp)
  281948:	d8802a15 	stw	r2,168(sp)
  28194c:	dcc02d15 	stw	r19,180(sp)
  281950:	d8002915 	stw	zero,164(sp)
  281954:	d8003215 	stw	zero,200(sp)
  281958:	003eb006 	br	28141c <___vfprintf_internal_r+0x734>
  28195c:	18c03fcc 	andi	r3,r3,255
  281960:	183f9b26 	beq	r3,zero,2817d0 <___vfprintf_internal_r+0xae8>
  281964:	d9c02785 	stb	r7,158(sp)
  281968:	003f9906 	br	2817d0 <___vfprintf_internal_r+0xae8>
  28196c:	18c03fcc 	andi	r3,r3,255
  281970:	1805551e 	bne	r3,zero,282ec8 <___vfprintf_internal_r+0x21e0>
  281974:	01400a74 	movhi	r5,41
  281978:	29460504 	addi	r5,r5,6164
  28197c:	d9403915 	stw	r5,228(sp)
  281980:	9080080c 	andi	r2,r18,32
  281984:	103fae1e 	bne	r2,zero,281840 <___vfprintf_internal_r+0xb58>
  281988:	9080040c 	andi	r2,r18,16
  28198c:	1002de26 	beq	r2,zero,282508 <___vfprintf_internal_r+0x1820>
  281990:	d8c02d17 	ldw	r3,180(sp)
  281994:	002d883a 	mov	r22,zero
  281998:	1cc00017 	ldw	r19,0(r3)
  28199c:	18c00104 	addi	r3,r3,4
  2819a0:	d8c02d15 	stw	r3,180(sp)
  2819a4:	003fab06 	br	281854 <___vfprintf_internal_r+0xb6c>
  2819a8:	38803fcc 	andi	r2,r7,255
  2819ac:	1080201c 	xori	r2,r2,128
  2819b0:	10bfe004 	addi	r2,r2,-128
  2819b4:	1002d21e 	bne	r2,zero,282500 <___vfprintf_internal_r+0x1818>
  2819b8:	00c00044 	movi	r3,1
  2819bc:	01c00804 	movi	r7,32
  2819c0:	ac400007 	ldb	r17,0(r21)
  2819c4:	003d2906 	br	280e6c <___vfprintf_internal_r+0x184>
  2819c8:	94800054 	ori	r18,r18,1
  2819cc:	ac400007 	ldb	r17,0(r21)
  2819d0:	003d2606 	br	280e6c <___vfprintf_internal_r+0x184>
  2819d4:	18c03fcc 	andi	r3,r3,255
  2819d8:	183e0526 	beq	r3,zero,2811f0 <___vfprintf_internal_r+0x508>
  2819dc:	d9c02785 	stb	r7,158(sp)
  2819e0:	003e0306 	br	2811f0 <___vfprintf_internal_r+0x508>
  2819e4:	94801014 	ori	r18,r18,64
  2819e8:	ac400007 	ldb	r17,0(r21)
  2819ec:	003d1f06 	br	280e6c <___vfprintf_internal_r+0x184>
  2819f0:	ac400007 	ldb	r17,0(r21)
  2819f4:	8a438726 	beq	r17,r9,282814 <___vfprintf_internal_r+0x1b2c>
  2819f8:	94800414 	ori	r18,r18,16
  2819fc:	003d1b06 	br	280e6c <___vfprintf_internal_r+0x184>
  281a00:	18c03fcc 	andi	r3,r3,255
  281a04:	1805341e 	bne	r3,zero,282ed8 <___vfprintf_internal_r+0x21f0>
  281a08:	9080080c 	andi	r2,r18,32
  281a0c:	1002cd26 	beq	r2,zero,282544 <___vfprintf_internal_r+0x185c>
  281a10:	d9402d17 	ldw	r5,180(sp)
  281a14:	d9002f17 	ldw	r4,188(sp)
  281a18:	28800017 	ldw	r2,0(r5)
  281a1c:	2007d7fa 	srai	r3,r4,31
  281a20:	29400104 	addi	r5,r5,4
  281a24:	d9402d15 	stw	r5,180(sp)
  281a28:	11000015 	stw	r4,0(r2)
  281a2c:	10c00115 	stw	r3,4(r2)
  281a30:	003ce506 	br	280dc8 <___vfprintf_internal_r+0xe0>
  281a34:	d8c02d17 	ldw	r3,180(sp)
  281a38:	d9002d17 	ldw	r4,180(sp)
  281a3c:	d8002785 	stb	zero,158(sp)
  281a40:	18800017 	ldw	r2,0(r3)
  281a44:	21000104 	addi	r4,r4,4
  281a48:	00c00044 	movi	r3,1
  281a4c:	d8c02a15 	stw	r3,168(sp)
  281a50:	d8801405 	stb	r2,80(sp)
  281a54:	d9002d15 	stw	r4,180(sp)
  281a58:	d8c02e15 	stw	r3,184(sp)
  281a5c:	d8002915 	stw	zero,164(sp)
  281a60:	d8003215 	stw	zero,200(sp)
  281a64:	dc001404 	addi	r16,sp,80
  281a68:	0039883a 	mov	fp,zero
  281a6c:	003e7206 	br	281438 <___vfprintf_internal_r+0x750>
  281a70:	01000a74 	movhi	r4,41
  281a74:	21060504 	addi	r4,r4,6164
  281a78:	0039883a 	mov	fp,zero
  281a7c:	d9003915 	stw	r4,228(sp)
  281a80:	04401e04 	movi	r17,120
  281a84:	003f8206 	br	281890 <___vfprintf_internal_r+0xba8>
  281a88:	18c03fcc 	andi	r3,r3,255
  281a8c:	1805061e 	bne	r3,zero,282ea8 <___vfprintf_internal_r+0x21c0>
  281a90:	883d9126 	beq	r17,zero,2810d8 <___vfprintf_internal_r+0x3f0>
  281a94:	00c00044 	movi	r3,1
  281a98:	d8c02a15 	stw	r3,168(sp)
  281a9c:	dc401405 	stb	r17,80(sp)
  281aa0:	d8002785 	stb	zero,158(sp)
  281aa4:	003fec06 	br	281a58 <___vfprintf_internal_r+0xd70>
  281aa8:	01400a74 	movhi	r5,41
  281aac:	29460504 	addi	r5,r5,6164
  281ab0:	d9403915 	stw	r5,228(sp)
  281ab4:	d8c02d15 	stw	r3,180(sp)
  281ab8:	1025883a 	mov	r18,r2
  281abc:	04401e04 	movi	r17,120
  281ac0:	9d84b03a 	or	r2,r19,r22
  281ac4:	1000fc1e 	bne	r2,zero,281eb8 <___vfprintf_internal_r+0x11d0>
  281ac8:	0039883a 	mov	fp,zero
  281acc:	00800084 	movi	r2,2
  281ad0:	10803fcc 	andi	r2,r2,255
  281ad4:	00c00044 	movi	r3,1
  281ad8:	10c20f26 	beq	r2,r3,282318 <___vfprintf_internal_r+0x1630>
  281adc:	00c00084 	movi	r3,2
  281ae0:	10fd6326 	beq	r2,r3,281070 <___vfprintf_internal_r+0x388>
  281ae4:	003e2d06 	br	28139c <___vfprintf_internal_r+0x6b4>
  281ae8:	d8c02017 	ldw	r3,128(sp)
  281aec:	003e9306 	br	28153c <___vfprintf_internal_r+0x854>
  281af0:	00801944 	movi	r2,101
  281af4:	14407e0e 	bge	r2,r17,281cf0 <___vfprintf_internal_r+0x1008>
  281af8:	d9003617 	ldw	r4,216(sp)
  281afc:	d9403817 	ldw	r5,224(sp)
  281b00:	000d883a 	mov	r6,zero
  281b04:	000f883a 	mov	r7,zero
  281b08:	d8c03c15 	stw	r3,240(sp)
  281b0c:	da003d15 	stw	r8,244(sp)
  281b10:	028bda80 	call	28bda8 <__eqdf2>
  281b14:	d8c03c17 	ldw	r3,240(sp)
  281b18:	da003d17 	ldw	r8,244(sp)
  281b1c:	1000f71e 	bne	r2,zero,281efc <___vfprintf_internal_r+0x1214>
  281b20:	d8801f17 	ldw	r2,124(sp)
  281b24:	01000a74 	movhi	r4,41
  281b28:	21060c04 	addi	r4,r4,6192
  281b2c:	18c00044 	addi	r3,r3,1
  281b30:	10800044 	addi	r2,r2,1
  281b34:	41000015 	stw	r4,0(r8)
  281b38:	01000044 	movi	r4,1
  281b3c:	41000115 	stw	r4,4(r8)
  281b40:	d8c02015 	stw	r3,128(sp)
  281b44:	d8801f15 	stw	r2,124(sp)
  281b48:	010001c4 	movi	r4,7
  281b4c:	2082b816 	blt	r4,r2,282630 <___vfprintf_internal_r+0x1948>
  281b50:	42000204 	addi	r8,r8,8
  281b54:	d8802617 	ldw	r2,152(sp)
  281b58:	d9403317 	ldw	r5,204(sp)
  281b5c:	11400216 	blt	r2,r5,281b68 <___vfprintf_internal_r+0xe80>
  281b60:	9080004c 	andi	r2,r18,1
  281b64:	103ed526 	beq	r2,zero,2816bc <___vfprintf_internal_r+0x9d4>
  281b68:	d8803717 	ldw	r2,220(sp)
  281b6c:	d9003417 	ldw	r4,208(sp)
  281b70:	d9403717 	ldw	r5,220(sp)
  281b74:	1887883a 	add	r3,r3,r2
  281b78:	d8801f17 	ldw	r2,124(sp)
  281b7c:	41000015 	stw	r4,0(r8)
  281b80:	41400115 	stw	r5,4(r8)
  281b84:	10800044 	addi	r2,r2,1
  281b88:	d8c02015 	stw	r3,128(sp)
  281b8c:	d8801f15 	stw	r2,124(sp)
  281b90:	010001c4 	movi	r4,7
  281b94:	20832916 	blt	r4,r2,28283c <___vfprintf_internal_r+0x1b54>
  281b98:	42000204 	addi	r8,r8,8
  281b9c:	d8803317 	ldw	r2,204(sp)
  281ba0:	143fffc4 	addi	r16,r2,-1
  281ba4:	043ec50e 	bge	zero,r16,2816bc <___vfprintf_internal_r+0x9d4>
  281ba8:	04400404 	movi	r17,16
  281bac:	d8801f17 	ldw	r2,124(sp)
  281bb0:	8c00880e 	bge	r17,r16,281dd4 <___vfprintf_internal_r+0x10ec>
  281bb4:	01400a74 	movhi	r5,41
  281bb8:	29460c84 	addi	r5,r5,6194
  281bbc:	d9402b15 	stw	r5,172(sp)
  281bc0:	058001c4 	movi	r22,7
  281bc4:	dcc02c17 	ldw	r19,176(sp)
  281bc8:	00000306 	br	281bd8 <___vfprintf_internal_r+0xef0>
  281bcc:	42000204 	addi	r8,r8,8
  281bd0:	843ffc04 	addi	r16,r16,-16
  281bd4:	8c00820e 	bge	r17,r16,281de0 <___vfprintf_internal_r+0x10f8>
  281bd8:	18c00404 	addi	r3,r3,16
  281bdc:	10800044 	addi	r2,r2,1
  281be0:	45000015 	stw	r20,0(r8)
  281be4:	44400115 	stw	r17,4(r8)
  281be8:	d8c02015 	stw	r3,128(sp)
  281bec:	d8801f15 	stw	r2,124(sp)
  281bf0:	b0bff60e 	bge	r22,r2,281bcc <___vfprintf_internal_r+0xee4>
  281bf4:	d9801e04 	addi	r6,sp,120
  281bf8:	b80b883a 	mov	r5,r23
  281bfc:	9809883a 	mov	r4,r19
  281c00:	02882e40 	call	2882e4 <__sprint_r>
  281c04:	103d3a1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281c08:	d8c02017 	ldw	r3,128(sp)
  281c0c:	d8801f17 	ldw	r2,124(sp)
  281c10:	da000404 	addi	r8,sp,16
  281c14:	003fee06 	br	281bd0 <___vfprintf_internal_r+0xee8>
  281c18:	d9403117 	ldw	r5,196(sp)
  281c1c:	d8802a17 	ldw	r2,168(sp)
  281c20:	28adc83a 	sub	r22,r5,r2
  281c24:	05be630e 	bge	zero,r22,2815b4 <___vfprintf_internal_r+0x8cc>
  281c28:	07000404 	movi	fp,16
  281c2c:	d8801f17 	ldw	r2,124(sp)
  281c30:	e5838f0e 	bge	fp,r22,282a70 <___vfprintf_internal_r+0x1d88>
  281c34:	01400a74 	movhi	r5,41
  281c38:	29460c84 	addi	r5,r5,6194
  281c3c:	dc403015 	stw	r17,192(sp)
  281c40:	d9402b15 	stw	r5,172(sp)
  281c44:	b023883a 	mov	r17,r22
  281c48:	04c001c4 	movi	r19,7
  281c4c:	a82d883a 	mov	r22,r21
  281c50:	902b883a 	mov	r21,r18
  281c54:	8025883a 	mov	r18,r16
  281c58:	dc002c17 	ldw	r16,176(sp)
  281c5c:	00000306 	br	281c6c <___vfprintf_internal_r+0xf84>
  281c60:	8c7ffc04 	addi	r17,r17,-16
  281c64:	42000204 	addi	r8,r8,8
  281c68:	e440110e 	bge	fp,r17,281cb0 <___vfprintf_internal_r+0xfc8>
  281c6c:	18c00404 	addi	r3,r3,16
  281c70:	10800044 	addi	r2,r2,1
  281c74:	45000015 	stw	r20,0(r8)
  281c78:	47000115 	stw	fp,4(r8)
  281c7c:	d8c02015 	stw	r3,128(sp)
  281c80:	d8801f15 	stw	r2,124(sp)
  281c84:	98bff60e 	bge	r19,r2,281c60 <___vfprintf_internal_r+0xf78>
  281c88:	d9801e04 	addi	r6,sp,120
  281c8c:	b80b883a 	mov	r5,r23
  281c90:	8009883a 	mov	r4,r16
  281c94:	02882e40 	call	2882e4 <__sprint_r>
  281c98:	103d151e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281c9c:	8c7ffc04 	addi	r17,r17,-16
  281ca0:	d8c02017 	ldw	r3,128(sp)
  281ca4:	d8801f17 	ldw	r2,124(sp)
  281ca8:	da000404 	addi	r8,sp,16
  281cac:	e47fef16 	blt	fp,r17,281c6c <___vfprintf_internal_r+0xf84>
  281cb0:	9021883a 	mov	r16,r18
  281cb4:	a825883a 	mov	r18,r21
  281cb8:	b02b883a 	mov	r21,r22
  281cbc:	882d883a 	mov	r22,r17
  281cc0:	dc403017 	ldw	r17,192(sp)
  281cc4:	d9002b17 	ldw	r4,172(sp)
  281cc8:	1d87883a 	add	r3,r3,r22
  281ccc:	10800044 	addi	r2,r2,1
  281cd0:	41000015 	stw	r4,0(r8)
  281cd4:	45800115 	stw	r22,4(r8)
  281cd8:	d8c02015 	stw	r3,128(sp)
  281cdc:	d8801f15 	stw	r2,124(sp)
  281ce0:	010001c4 	movi	r4,7
  281ce4:	20818e16 	blt	r4,r2,282320 <___vfprintf_internal_r+0x1638>
  281ce8:	42000204 	addi	r8,r8,8
  281cec:	003e3106 	br	2815b4 <___vfprintf_internal_r+0x8cc>
  281cf0:	d9403317 	ldw	r5,204(sp)
  281cf4:	00800044 	movi	r2,1
  281cf8:	18c00044 	addi	r3,r3,1
  281cfc:	1141530e 	bge	r2,r5,28224c <___vfprintf_internal_r+0x1564>
  281d00:	dc401f17 	ldw	r17,124(sp)
  281d04:	00800044 	movi	r2,1
  281d08:	40800115 	stw	r2,4(r8)
  281d0c:	8c400044 	addi	r17,r17,1
  281d10:	44000015 	stw	r16,0(r8)
  281d14:	d8c02015 	stw	r3,128(sp)
  281d18:	dc401f15 	stw	r17,124(sp)
  281d1c:	008001c4 	movi	r2,7
  281d20:	14416b16 	blt	r2,r17,2822d0 <___vfprintf_internal_r+0x15e8>
  281d24:	42000204 	addi	r8,r8,8
  281d28:	d8803717 	ldw	r2,220(sp)
  281d2c:	d9003417 	ldw	r4,208(sp)
  281d30:	8c400044 	addi	r17,r17,1
  281d34:	10c7883a 	add	r3,r2,r3
  281d38:	40800115 	stw	r2,4(r8)
  281d3c:	41000015 	stw	r4,0(r8)
  281d40:	d8c02015 	stw	r3,128(sp)
  281d44:	dc401f15 	stw	r17,124(sp)
  281d48:	008001c4 	movi	r2,7
  281d4c:	14416916 	blt	r2,r17,2822f4 <___vfprintf_internal_r+0x160c>
  281d50:	45800204 	addi	r22,r8,8
  281d54:	d9003617 	ldw	r4,216(sp)
  281d58:	d9403817 	ldw	r5,224(sp)
  281d5c:	000d883a 	mov	r6,zero
  281d60:	000f883a 	mov	r7,zero
  281d64:	d8c03c15 	stw	r3,240(sp)
  281d68:	028bda80 	call	28bda8 <__eqdf2>
  281d6c:	d8c03c17 	ldw	r3,240(sp)
  281d70:	1000bc26 	beq	r2,zero,282064 <___vfprintf_internal_r+0x137c>
  281d74:	d9403317 	ldw	r5,204(sp)
  281d78:	84000044 	addi	r16,r16,1
  281d7c:	8c400044 	addi	r17,r17,1
  281d80:	28bfffc4 	addi	r2,r5,-1
  281d84:	1887883a 	add	r3,r3,r2
  281d88:	b0800115 	stw	r2,4(r22)
  281d8c:	b4000015 	stw	r16,0(r22)
  281d90:	d8c02015 	stw	r3,128(sp)
  281d94:	dc401f15 	stw	r17,124(sp)
  281d98:	008001c4 	movi	r2,7
  281d9c:	14414316 	blt	r2,r17,2822ac <___vfprintf_internal_r+0x15c4>
  281da0:	b5800204 	addi	r22,r22,8
  281da4:	d9003a17 	ldw	r4,232(sp)
  281da8:	df0022c4 	addi	fp,sp,139
  281dac:	8c400044 	addi	r17,r17,1
  281db0:	20c7883a 	add	r3,r4,r3
  281db4:	b7000015 	stw	fp,0(r22)
  281db8:	b1000115 	stw	r4,4(r22)
  281dbc:	d8c02015 	stw	r3,128(sp)
  281dc0:	dc401f15 	stw	r17,124(sp)
  281dc4:	008001c4 	movi	r2,7
  281dc8:	14400e16 	blt	r2,r17,281e04 <___vfprintf_internal_r+0x111c>
  281dcc:	b2000204 	addi	r8,r22,8
  281dd0:	003e3a06 	br	2816bc <___vfprintf_internal_r+0x9d4>
  281dd4:	01000a74 	movhi	r4,41
  281dd8:	21060c84 	addi	r4,r4,6194
  281ddc:	d9002b15 	stw	r4,172(sp)
  281de0:	d9002b17 	ldw	r4,172(sp)
  281de4:	1c07883a 	add	r3,r3,r16
  281de8:	44000115 	stw	r16,4(r8)
  281dec:	41000015 	stw	r4,0(r8)
  281df0:	10800044 	addi	r2,r2,1
  281df4:	d8c02015 	stw	r3,128(sp)
  281df8:	d8801f15 	stw	r2,124(sp)
  281dfc:	010001c4 	movi	r4,7
  281e00:	20be2d0e 	bge	r4,r2,2816b8 <___vfprintf_internal_r+0x9d0>
  281e04:	d9002c17 	ldw	r4,176(sp)
  281e08:	d9801e04 	addi	r6,sp,120
  281e0c:	b80b883a 	mov	r5,r23
  281e10:	02882e40 	call	2882e4 <__sprint_r>
  281e14:	103cb61e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281e18:	d8c02017 	ldw	r3,128(sp)
  281e1c:	da000404 	addi	r8,sp,16
  281e20:	003e2606 	br	2816bc <___vfprintf_internal_r+0x9d4>
  281e24:	d9002c17 	ldw	r4,176(sp)
  281e28:	d9801e04 	addi	r6,sp,120
  281e2c:	b80b883a 	mov	r5,r23
  281e30:	02882e40 	call	2882e4 <__sprint_r>
  281e34:	103e5d26 	beq	r2,zero,2817ac <___vfprintf_internal_r+0xac4>
  281e38:	003cad06 	br	2810f0 <___vfprintf_internal_r+0x408>
  281e3c:	d9002c17 	ldw	r4,176(sp)
  281e40:	d9801e04 	addi	r6,sp,120
  281e44:	b80b883a 	mov	r5,r23
  281e48:	02882e40 	call	2882e4 <__sprint_r>
  281e4c:	103ca81e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281e50:	d8c02017 	ldw	r3,128(sp)
  281e54:	da000404 	addi	r8,sp,16
  281e58:	003e0b06 	br	281688 <___vfprintf_internal_r+0x9a0>
  281e5c:	d9002c17 	ldw	r4,176(sp)
  281e60:	d9801e04 	addi	r6,sp,120
  281e64:	b80b883a 	mov	r5,r23
  281e68:	02882e40 	call	2882e4 <__sprint_r>
  281e6c:	103ca01e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281e70:	d8c02017 	ldw	r3,128(sp)
  281e74:	da000404 	addi	r8,sp,16
  281e78:	003dbd06 	br	281570 <___vfprintf_internal_r+0x888>
  281e7c:	d9002c17 	ldw	r4,176(sp)
  281e80:	d9801e04 	addi	r6,sp,120
  281e84:	b80b883a 	mov	r5,r23
  281e88:	02882e40 	call	2882e4 <__sprint_r>
  281e8c:	103c981e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281e90:	d8c02017 	ldw	r3,128(sp)
  281e94:	da000404 	addi	r8,sp,16
  281e98:	003dc306 	br	2815a8 <___vfprintf_internal_r+0x8c0>
  281e9c:	d8802917 	ldw	r2,164(sp)
  281ea0:	d8002785 	stb	zero,158(sp)
  281ea4:	103f0616 	blt	r2,zero,281ac0 <___vfprintf_internal_r+0xdd8>
  281ea8:	00ffdfc4 	movi	r3,-129
  281eac:	9d84b03a 	or	r2,r19,r22
  281eb0:	90e4703a 	and	r18,r18,r3
  281eb4:	103c6b26 	beq	r2,zero,281064 <___vfprintf_internal_r+0x37c>
  281eb8:	0039883a 	mov	fp,zero
  281ebc:	003e7406 	br	281890 <___vfprintf_internal_r+0xba8>
  281ec0:	9080040c 	andi	r2,r18,16
  281ec4:	1001b326 	beq	r2,zero,282594 <___vfprintf_internal_r+0x18ac>
  281ec8:	d9002d17 	ldw	r4,180(sp)
  281ecc:	d9402917 	ldw	r5,164(sp)
  281ed0:	d8002785 	stb	zero,158(sp)
  281ed4:	20800104 	addi	r2,r4,4
  281ed8:	24c00017 	ldw	r19,0(r4)
  281edc:	002d883a 	mov	r22,zero
  281ee0:	2801b516 	blt	r5,zero,2825b8 <___vfprintf_internal_r+0x18d0>
  281ee4:	00ffdfc4 	movi	r3,-129
  281ee8:	d8802d15 	stw	r2,180(sp)
  281eec:	90e4703a 	and	r18,r18,r3
  281ef0:	983d2726 	beq	r19,zero,281390 <___vfprintf_internal_r+0x6a8>
  281ef4:	0039883a 	mov	fp,zero
  281ef8:	003d2a06 	br	2813a4 <___vfprintf_internal_r+0x6bc>
  281efc:	dc402617 	ldw	r17,152(sp)
  281f00:	0441d30e 	bge	zero,r17,282650 <___vfprintf_internal_r+0x1968>
  281f04:	dc403217 	ldw	r17,200(sp)
  281f08:	d8803317 	ldw	r2,204(sp)
  281f0c:	1440010e 	bge	r2,r17,281f14 <___vfprintf_internal_r+0x122c>
  281f10:	1023883a 	mov	r17,r2
  281f14:	04400a0e 	bge	zero,r17,281f40 <___vfprintf_internal_r+0x1258>
  281f18:	d8801f17 	ldw	r2,124(sp)
  281f1c:	1c47883a 	add	r3,r3,r17
  281f20:	44000015 	stw	r16,0(r8)
  281f24:	10800044 	addi	r2,r2,1
  281f28:	44400115 	stw	r17,4(r8)
  281f2c:	d8c02015 	stw	r3,128(sp)
  281f30:	d8801f15 	stw	r2,124(sp)
  281f34:	010001c4 	movi	r4,7
  281f38:	20826516 	blt	r4,r2,2828d0 <___vfprintf_internal_r+0x1be8>
  281f3c:	42000204 	addi	r8,r8,8
  281f40:	88026116 	blt	r17,zero,2828c8 <___vfprintf_internal_r+0x1be0>
  281f44:	d9003217 	ldw	r4,200(sp)
  281f48:	2463c83a 	sub	r17,r4,r17
  281f4c:	04407b0e 	bge	zero,r17,28213c <___vfprintf_internal_r+0x1454>
  281f50:	05800404 	movi	r22,16
  281f54:	d8801f17 	ldw	r2,124(sp)
  281f58:	b4419d0e 	bge	r22,r17,2825d0 <___vfprintf_internal_r+0x18e8>
  281f5c:	01000a74 	movhi	r4,41
  281f60:	21060c84 	addi	r4,r4,6194
  281f64:	d9002b15 	stw	r4,172(sp)
  281f68:	070001c4 	movi	fp,7
  281f6c:	dcc02c17 	ldw	r19,176(sp)
  281f70:	00000306 	br	281f80 <___vfprintf_internal_r+0x1298>
  281f74:	42000204 	addi	r8,r8,8
  281f78:	8c7ffc04 	addi	r17,r17,-16
  281f7c:	b441970e 	bge	r22,r17,2825dc <___vfprintf_internal_r+0x18f4>
  281f80:	18c00404 	addi	r3,r3,16
  281f84:	10800044 	addi	r2,r2,1
  281f88:	45000015 	stw	r20,0(r8)
  281f8c:	45800115 	stw	r22,4(r8)
  281f90:	d8c02015 	stw	r3,128(sp)
  281f94:	d8801f15 	stw	r2,124(sp)
  281f98:	e0bff60e 	bge	fp,r2,281f74 <___vfprintf_internal_r+0x128c>
  281f9c:	d9801e04 	addi	r6,sp,120
  281fa0:	b80b883a 	mov	r5,r23
  281fa4:	9809883a 	mov	r4,r19
  281fa8:	02882e40 	call	2882e4 <__sprint_r>
  281fac:	103c501e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281fb0:	d8c02017 	ldw	r3,128(sp)
  281fb4:	d8801f17 	ldw	r2,124(sp)
  281fb8:	da000404 	addi	r8,sp,16
  281fbc:	003fee06 	br	281f78 <___vfprintf_internal_r+0x1290>
  281fc0:	d9002c17 	ldw	r4,176(sp)
  281fc4:	d9801e04 	addi	r6,sp,120
  281fc8:	b80b883a 	mov	r5,r23
  281fcc:	02882e40 	call	2882e4 <__sprint_r>
  281fd0:	103c471e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  281fd4:	d8c02017 	ldw	r3,128(sp)
  281fd8:	df002787 	ldb	fp,158(sp)
  281fdc:	da000404 	addi	r8,sp,16
  281fe0:	003d5606 	br	28153c <___vfprintf_internal_r+0x854>
  281fe4:	9080040c 	andi	r2,r18,16
  281fe8:	10016126 	beq	r2,zero,282570 <___vfprintf_internal_r+0x1888>
  281fec:	d8802d17 	ldw	r2,180(sp)
  281ff0:	14c00017 	ldw	r19,0(r2)
  281ff4:	10800104 	addi	r2,r2,4
  281ff8:	d8802d15 	stw	r2,180(sp)
  281ffc:	982dd7fa 	srai	r22,r19,31
  282000:	b005883a 	mov	r2,r22
  282004:	003c8206 	br	281210 <___vfprintf_internal_r+0x528>
  282008:	9080040c 	andi	r2,r18,16
  28200c:	10003526 	beq	r2,zero,2820e4 <___vfprintf_internal_r+0x13fc>
  282010:	d9402d17 	ldw	r5,180(sp)
  282014:	d8c02917 	ldw	r3,164(sp)
  282018:	d8002785 	stb	zero,158(sp)
  28201c:	28800104 	addi	r2,r5,4
  282020:	2cc00017 	ldw	r19,0(r5)
  282024:	002d883a 	mov	r22,zero
  282028:	18003716 	blt	r3,zero,282108 <___vfprintf_internal_r+0x1420>
  28202c:	00ffdfc4 	movi	r3,-129
  282030:	d8802d15 	stw	r2,180(sp)
  282034:	90e4703a 	and	r18,r18,r3
  282038:	0039883a 	mov	fp,zero
  28203c:	983df326 	beq	r19,zero,28180c <___vfprintf_internal_r+0xb24>
  282040:	00800244 	movi	r2,9
  282044:	14fc7b36 	bltu	r2,r19,281234 <___vfprintf_internal_r+0x54c>
  282048:	d8c02817 	ldw	r3,160(sp)
  28204c:	dc001dc4 	addi	r16,sp,119
  282050:	9cc00c04 	addi	r19,r19,48
  282054:	1c07c83a 	sub	r3,r3,r16
  282058:	dcc01dc5 	stb	r19,119(sp)
  28205c:	d8c02e15 	stw	r3,184(sp)
  282060:	003ce806 	br	281404 <___vfprintf_internal_r+0x71c>
  282064:	d8803317 	ldw	r2,204(sp)
  282068:	143fffc4 	addi	r16,r2,-1
  28206c:	043f4d0e 	bge	zero,r16,281da4 <___vfprintf_internal_r+0x10bc>
  282070:	07000404 	movi	fp,16
  282074:	e400810e 	bge	fp,r16,28227c <___vfprintf_internal_r+0x1594>
  282078:	01400a74 	movhi	r5,41
  28207c:	29460c84 	addi	r5,r5,6194
  282080:	d9402b15 	stw	r5,172(sp)
  282084:	01c001c4 	movi	r7,7
  282088:	dcc02c17 	ldw	r19,176(sp)
  28208c:	00000306 	br	28209c <___vfprintf_internal_r+0x13b4>
  282090:	b5800204 	addi	r22,r22,8
  282094:	843ffc04 	addi	r16,r16,-16
  282098:	e4007b0e 	bge	fp,r16,282288 <___vfprintf_internal_r+0x15a0>
  28209c:	18c00404 	addi	r3,r3,16
  2820a0:	8c400044 	addi	r17,r17,1
  2820a4:	b5000015 	stw	r20,0(r22)
  2820a8:	b7000115 	stw	fp,4(r22)
  2820ac:	d8c02015 	stw	r3,128(sp)
  2820b0:	dc401f15 	stw	r17,124(sp)
  2820b4:	3c7ff60e 	bge	r7,r17,282090 <___vfprintf_internal_r+0x13a8>
  2820b8:	d9801e04 	addi	r6,sp,120
  2820bc:	b80b883a 	mov	r5,r23
  2820c0:	9809883a 	mov	r4,r19
  2820c4:	d9c03c15 	stw	r7,240(sp)
  2820c8:	02882e40 	call	2882e4 <__sprint_r>
  2820cc:	d9c03c17 	ldw	r7,240(sp)
  2820d0:	103c071e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2820d4:	d8c02017 	ldw	r3,128(sp)
  2820d8:	dc401f17 	ldw	r17,124(sp)
  2820dc:	dd800404 	addi	r22,sp,16
  2820e0:	003fec06 	br	282094 <___vfprintf_internal_r+0x13ac>
  2820e4:	9080100c 	andi	r2,r18,64
  2820e8:	d8002785 	stb	zero,158(sp)
  2820ec:	10010e26 	beq	r2,zero,282528 <___vfprintf_internal_r+0x1840>
  2820f0:	d9002d17 	ldw	r4,180(sp)
  2820f4:	d9402917 	ldw	r5,164(sp)
  2820f8:	002d883a 	mov	r22,zero
  2820fc:	20800104 	addi	r2,r4,4
  282100:	24c0000b 	ldhu	r19,0(r4)
  282104:	283fc90e 	bge	r5,zero,28202c <___vfprintf_internal_r+0x1344>
  282108:	d8802d15 	stw	r2,180(sp)
  28210c:	0039883a 	mov	fp,zero
  282110:	9d84b03a 	or	r2,r19,r22
  282114:	103c461e 	bne	r2,zero,281230 <___vfprintf_internal_r+0x548>
  282118:	00800044 	movi	r2,1
  28211c:	003e6c06 	br	281ad0 <___vfprintf_internal_r+0xde8>
  282120:	d9002c17 	ldw	r4,176(sp)
  282124:	d9801e04 	addi	r6,sp,120
  282128:	b80b883a 	mov	r5,r23
  28212c:	02882e40 	call	2882e4 <__sprint_r>
  282130:	103bef1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282134:	d8c02017 	ldw	r3,128(sp)
  282138:	da000404 	addi	r8,sp,16
  28213c:	d9003217 	ldw	r4,200(sp)
  282140:	d8802617 	ldw	r2,152(sp)
  282144:	d9403317 	ldw	r5,204(sp)
  282148:	8123883a 	add	r17,r16,r4
  28214c:	11400216 	blt	r2,r5,282158 <___vfprintf_internal_r+0x1470>
  282150:	9100004c 	andi	r4,r18,1
  282154:	20000d26 	beq	r4,zero,28218c <___vfprintf_internal_r+0x14a4>
  282158:	d9003717 	ldw	r4,220(sp)
  28215c:	d9403417 	ldw	r5,208(sp)
  282160:	1907883a 	add	r3,r3,r4
  282164:	d9001f17 	ldw	r4,124(sp)
  282168:	41400015 	stw	r5,0(r8)
  28216c:	d9403717 	ldw	r5,220(sp)
  282170:	21000044 	addi	r4,r4,1
  282174:	d8c02015 	stw	r3,128(sp)
  282178:	41400115 	stw	r5,4(r8)
  28217c:	d9001f15 	stw	r4,124(sp)
  282180:	014001c4 	movi	r5,7
  282184:	2901e816 	blt	r5,r4,282928 <___vfprintf_internal_r+0x1c40>
  282188:	42000204 	addi	r8,r8,8
  28218c:	d9003317 	ldw	r4,204(sp)
  282190:	8121883a 	add	r16,r16,r4
  282194:	2085c83a 	sub	r2,r4,r2
  282198:	8461c83a 	sub	r16,r16,r17
  28219c:	1400010e 	bge	r2,r16,2821a4 <___vfprintf_internal_r+0x14bc>
  2821a0:	1021883a 	mov	r16,r2
  2821a4:	04000a0e 	bge	zero,r16,2821d0 <___vfprintf_internal_r+0x14e8>
  2821a8:	d9001f17 	ldw	r4,124(sp)
  2821ac:	1c07883a 	add	r3,r3,r16
  2821b0:	44400015 	stw	r17,0(r8)
  2821b4:	21000044 	addi	r4,r4,1
  2821b8:	44000115 	stw	r16,4(r8)
  2821bc:	d8c02015 	stw	r3,128(sp)
  2821c0:	d9001f15 	stw	r4,124(sp)
  2821c4:	014001c4 	movi	r5,7
  2821c8:	2901fb16 	blt	r5,r4,2829b8 <___vfprintf_internal_r+0x1cd0>
  2821cc:	42000204 	addi	r8,r8,8
  2821d0:	8001f716 	blt	r16,zero,2829b0 <___vfprintf_internal_r+0x1cc8>
  2821d4:	1421c83a 	sub	r16,r2,r16
  2821d8:	043d380e 	bge	zero,r16,2816bc <___vfprintf_internal_r+0x9d4>
  2821dc:	04400404 	movi	r17,16
  2821e0:	d8801f17 	ldw	r2,124(sp)
  2821e4:	8c3efb0e 	bge	r17,r16,281dd4 <___vfprintf_internal_r+0x10ec>
  2821e8:	01400a74 	movhi	r5,41
  2821ec:	29460c84 	addi	r5,r5,6194
  2821f0:	d9402b15 	stw	r5,172(sp)
  2821f4:	058001c4 	movi	r22,7
  2821f8:	dcc02c17 	ldw	r19,176(sp)
  2821fc:	00000306 	br	28220c <___vfprintf_internal_r+0x1524>
  282200:	42000204 	addi	r8,r8,8
  282204:	843ffc04 	addi	r16,r16,-16
  282208:	8c3ef50e 	bge	r17,r16,281de0 <___vfprintf_internal_r+0x10f8>
  28220c:	18c00404 	addi	r3,r3,16
  282210:	10800044 	addi	r2,r2,1
  282214:	45000015 	stw	r20,0(r8)
  282218:	44400115 	stw	r17,4(r8)
  28221c:	d8c02015 	stw	r3,128(sp)
  282220:	d8801f15 	stw	r2,124(sp)
  282224:	b0bff60e 	bge	r22,r2,282200 <___vfprintf_internal_r+0x1518>
  282228:	d9801e04 	addi	r6,sp,120
  28222c:	b80b883a 	mov	r5,r23
  282230:	9809883a 	mov	r4,r19
  282234:	02882e40 	call	2882e4 <__sprint_r>
  282238:	103bad1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  28223c:	d8c02017 	ldw	r3,128(sp)
  282240:	d8801f17 	ldw	r2,124(sp)
  282244:	da000404 	addi	r8,sp,16
  282248:	003fee06 	br	282204 <___vfprintf_internal_r+0x151c>
  28224c:	9088703a 	and	r4,r18,r2
  282250:	203eab1e 	bne	r4,zero,281d00 <___vfprintf_internal_r+0x1018>
  282254:	dc401f17 	ldw	r17,124(sp)
  282258:	40800115 	stw	r2,4(r8)
  28225c:	44000015 	stw	r16,0(r8)
  282260:	8c400044 	addi	r17,r17,1
  282264:	d8c02015 	stw	r3,128(sp)
  282268:	dc401f15 	stw	r17,124(sp)
  28226c:	008001c4 	movi	r2,7
  282270:	14400e16 	blt	r2,r17,2822ac <___vfprintf_internal_r+0x15c4>
  282274:	45800204 	addi	r22,r8,8
  282278:	003eca06 	br	281da4 <___vfprintf_internal_r+0x10bc>
  28227c:	01000a74 	movhi	r4,41
  282280:	21060c84 	addi	r4,r4,6194
  282284:	d9002b15 	stw	r4,172(sp)
  282288:	d8802b17 	ldw	r2,172(sp)
  28228c:	1c07883a 	add	r3,r3,r16
  282290:	8c400044 	addi	r17,r17,1
  282294:	b0800015 	stw	r2,0(r22)
  282298:	b4000115 	stw	r16,4(r22)
  28229c:	d8c02015 	stw	r3,128(sp)
  2822a0:	dc401f15 	stw	r17,124(sp)
  2822a4:	008001c4 	movi	r2,7
  2822a8:	147ebd0e 	bge	r2,r17,281da0 <___vfprintf_internal_r+0x10b8>
  2822ac:	d9002c17 	ldw	r4,176(sp)
  2822b0:	d9801e04 	addi	r6,sp,120
  2822b4:	b80b883a 	mov	r5,r23
  2822b8:	02882e40 	call	2882e4 <__sprint_r>
  2822bc:	103b8c1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2822c0:	d8c02017 	ldw	r3,128(sp)
  2822c4:	dc401f17 	ldw	r17,124(sp)
  2822c8:	dd800404 	addi	r22,sp,16
  2822cc:	003eb506 	br	281da4 <___vfprintf_internal_r+0x10bc>
  2822d0:	d9002c17 	ldw	r4,176(sp)
  2822d4:	d9801e04 	addi	r6,sp,120
  2822d8:	b80b883a 	mov	r5,r23
  2822dc:	02882e40 	call	2882e4 <__sprint_r>
  2822e0:	103b831e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2822e4:	d8c02017 	ldw	r3,128(sp)
  2822e8:	dc401f17 	ldw	r17,124(sp)
  2822ec:	da000404 	addi	r8,sp,16
  2822f0:	003e8d06 	br	281d28 <___vfprintf_internal_r+0x1040>
  2822f4:	d9002c17 	ldw	r4,176(sp)
  2822f8:	d9801e04 	addi	r6,sp,120
  2822fc:	b80b883a 	mov	r5,r23
  282300:	02882e40 	call	2882e4 <__sprint_r>
  282304:	103b7a1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282308:	d8c02017 	ldw	r3,128(sp)
  28230c:	dc401f17 	ldw	r17,124(sp)
  282310:	dd800404 	addi	r22,sp,16
  282314:	003e8f06 	br	281d54 <___vfprintf_internal_r+0x106c>
  282318:	0027883a 	mov	r19,zero
  28231c:	003f4a06 	br	282048 <___vfprintf_internal_r+0x1360>
  282320:	d9002c17 	ldw	r4,176(sp)
  282324:	d9801e04 	addi	r6,sp,120
  282328:	b80b883a 	mov	r5,r23
  28232c:	02882e40 	call	2882e4 <__sprint_r>
  282330:	103b6f1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282334:	d8c02017 	ldw	r3,128(sp)
  282338:	da000404 	addi	r8,sp,16
  28233c:	003c9d06 	br	2815b4 <___vfprintf_internal_r+0x8cc>
  282340:	04e7c83a 	sub	r19,zero,r19
  282344:	9804c03a 	cmpne	r2,r19,zero
  282348:	05adc83a 	sub	r22,zero,r22
  28234c:	b0adc83a 	sub	r22,r22,r2
  282350:	d8802917 	ldw	r2,164(sp)
  282354:	07000b44 	movi	fp,45
  282358:	df002785 	stb	fp,158(sp)
  28235c:	10017b16 	blt	r2,zero,28294c <___vfprintf_internal_r+0x1c64>
  282360:	00bfdfc4 	movi	r2,-129
  282364:	90a4703a 	and	r18,r18,r2
  282368:	003bb106 	br	281230 <___vfprintf_internal_r+0x548>
  28236c:	d9003617 	ldw	r4,216(sp)
  282370:	d9403817 	ldw	r5,224(sp)
  282374:	da003d15 	stw	r8,244(sp)
  282378:	0287f080 	call	287f08 <__fpclassifyd>
  28237c:	da003d17 	ldw	r8,244(sp)
  282380:	1000f026 	beq	r2,zero,282744 <___vfprintf_internal_r+0x1a5c>
  282384:	d9002917 	ldw	r4,164(sp)
  282388:	05bff7c4 	movi	r22,-33
  28238c:	00bfffc4 	movi	r2,-1
  282390:	8dac703a 	and	r22,r17,r22
  282394:	20820026 	beq	r4,r2,282b98 <___vfprintf_internal_r+0x1eb0>
  282398:	008011c4 	movi	r2,71
  28239c:	b081f726 	beq	r22,r2,282b7c <___vfprintf_internal_r+0x1e94>
  2823a0:	d9003817 	ldw	r4,224(sp)
  2823a4:	90c04014 	ori	r3,r18,256
  2823a8:	d8c02b15 	stw	r3,172(sp)
  2823ac:	20021516 	blt	r4,zero,282c04 <___vfprintf_internal_r+0x1f1c>
  2823b0:	dcc03817 	ldw	r19,224(sp)
  2823b4:	d8002a05 	stb	zero,168(sp)
  2823b8:	00801984 	movi	r2,102
  2823bc:	8881f926 	beq	r17,r2,282ba4 <___vfprintf_internal_r+0x1ebc>
  2823c0:	00801184 	movi	r2,70
  2823c4:	88821c26 	beq	r17,r2,282c38 <___vfprintf_internal_r+0x1f50>
  2823c8:	00801144 	movi	r2,69
  2823cc:	b081ef26 	beq	r22,r2,282b8c <___vfprintf_internal_r+0x1ea4>
  2823d0:	d8c02917 	ldw	r3,164(sp)
  2823d4:	d8802104 	addi	r2,sp,132
  2823d8:	d8800315 	stw	r2,12(sp)
  2823dc:	d9403617 	ldw	r5,216(sp)
  2823e0:	d8802504 	addi	r2,sp,148
  2823e4:	d9002c17 	ldw	r4,176(sp)
  2823e8:	d8800215 	stw	r2,8(sp)
  2823ec:	d8802604 	addi	r2,sp,152
  2823f0:	d8c00015 	stw	r3,0(sp)
  2823f4:	d8800115 	stw	r2,4(sp)
  2823f8:	01c00084 	movi	r7,2
  2823fc:	980d883a 	mov	r6,r19
  282400:	d8c03c15 	stw	r3,240(sp)
  282404:	da003d15 	stw	r8,244(sp)
  282408:	028330c0 	call	28330c <_dtoa_r>
  28240c:	1021883a 	mov	r16,r2
  282410:	008019c4 	movi	r2,103
  282414:	d8c03c17 	ldw	r3,240(sp)
  282418:	da003d17 	ldw	r8,244(sp)
  28241c:	88817126 	beq	r17,r2,2829e4 <___vfprintf_internal_r+0x1cfc>
  282420:	008011c4 	movi	r2,71
  282424:	88829226 	beq	r17,r2,282e70 <___vfprintf_internal_r+0x2188>
  282428:	80f9883a 	add	fp,r16,r3
  28242c:	d9003617 	ldw	r4,216(sp)
  282430:	000d883a 	mov	r6,zero
  282434:	000f883a 	mov	r7,zero
  282438:	980b883a 	mov	r5,r19
  28243c:	da003d15 	stw	r8,244(sp)
  282440:	028bda80 	call	28bda8 <__eqdf2>
  282444:	da003d17 	ldw	r8,244(sp)
  282448:	10018d26 	beq	r2,zero,282a80 <___vfprintf_internal_r+0x1d98>
  28244c:	d8802117 	ldw	r2,132(sp)
  282450:	1700062e 	bgeu	r2,fp,28246c <___vfprintf_internal_r+0x1784>
  282454:	01000c04 	movi	r4,48
  282458:	10c00044 	addi	r3,r2,1
  28245c:	d8c02115 	stw	r3,132(sp)
  282460:	11000005 	stb	r4,0(r2)
  282464:	d8802117 	ldw	r2,132(sp)
  282468:	173ffb36 	bltu	r2,fp,282458 <___vfprintf_internal_r+0x1770>
  28246c:	1405c83a 	sub	r2,r2,r16
  282470:	d8803315 	stw	r2,204(sp)
  282474:	008011c4 	movi	r2,71
  282478:	b0817626 	beq	r22,r2,282a54 <___vfprintf_internal_r+0x1d6c>
  28247c:	00801944 	movi	r2,101
  282480:	1442810e 	bge	r2,r17,282e88 <___vfprintf_internal_r+0x21a0>
  282484:	d8c02617 	ldw	r3,152(sp)
  282488:	00801984 	movi	r2,102
  28248c:	d8c03215 	stw	r3,200(sp)
  282490:	8881fe26 	beq	r17,r2,282c8c <___vfprintf_internal_r+0x1fa4>
  282494:	d8c03217 	ldw	r3,200(sp)
  282498:	d9003317 	ldw	r4,204(sp)
  28249c:	1901dd16 	blt	r3,r4,282c14 <___vfprintf_internal_r+0x1f2c>
  2824a0:	9480004c 	andi	r18,r18,1
  2824a4:	90022b1e 	bne	r18,zero,282d54 <___vfprintf_internal_r+0x206c>
  2824a8:	1805883a 	mov	r2,r3
  2824ac:	18028016 	blt	r3,zero,282eb0 <___vfprintf_internal_r+0x21c8>
  2824b0:	d8c03217 	ldw	r3,200(sp)
  2824b4:	044019c4 	movi	r17,103
  2824b8:	d8c02e15 	stw	r3,184(sp)
  2824bc:	df002a07 	ldb	fp,168(sp)
  2824c0:	e001531e 	bne	fp,zero,282a10 <___vfprintf_internal_r+0x1d28>
  2824c4:	df002783 	ldbu	fp,158(sp)
  2824c8:	d8802a15 	stw	r2,168(sp)
  2824cc:	dc802b17 	ldw	r18,172(sp)
  2824d0:	d8002915 	stw	zero,164(sp)
  2824d4:	003bd106 	br	28141c <___vfprintf_internal_r+0x734>
  2824d8:	d8802d17 	ldw	r2,180(sp)
  2824dc:	d8c02d17 	ldw	r3,180(sp)
  2824e0:	d9002d17 	ldw	r4,180(sp)
  2824e4:	10800017 	ldw	r2,0(r2)
  2824e8:	18c00117 	ldw	r3,4(r3)
  2824ec:	21000204 	addi	r4,r4,8
  2824f0:	d8803615 	stw	r2,216(sp)
  2824f4:	d8c03815 	stw	r3,224(sp)
  2824f8:	d9002d15 	stw	r4,180(sp)
  2824fc:	003b7506 	br	2812d4 <___vfprintf_internal_r+0x5ec>
  282500:	ac400007 	ldb	r17,0(r21)
  282504:	003a5906 	br	280e6c <___vfprintf_internal_r+0x184>
  282508:	9080100c 	andi	r2,r18,64
  28250c:	1000a826 	beq	r2,zero,2827b0 <___vfprintf_internal_r+0x1ac8>
  282510:	d9002d17 	ldw	r4,180(sp)
  282514:	002d883a 	mov	r22,zero
  282518:	24c0000b 	ldhu	r19,0(r4)
  28251c:	21000104 	addi	r4,r4,4
  282520:	d9002d15 	stw	r4,180(sp)
  282524:	003ccb06 	br	281854 <___vfprintf_internal_r+0xb6c>
  282528:	d8c02d17 	ldw	r3,180(sp)
  28252c:	d9002917 	ldw	r4,164(sp)
  282530:	002d883a 	mov	r22,zero
  282534:	18800104 	addi	r2,r3,4
  282538:	1cc00017 	ldw	r19,0(r3)
  28253c:	203ebb0e 	bge	r4,zero,28202c <___vfprintf_internal_r+0x1344>
  282540:	003ef106 	br	282108 <___vfprintf_internal_r+0x1420>
  282544:	9080040c 	andi	r2,r18,16
  282548:	1000921e 	bne	r2,zero,282794 <___vfprintf_internal_r+0x1aac>
  28254c:	9480100c 	andi	r18,r18,64
  282550:	90013926 	beq	r18,zero,282a38 <___vfprintf_internal_r+0x1d50>
  282554:	d9002d17 	ldw	r4,180(sp)
  282558:	d9402f17 	ldw	r5,188(sp)
  28255c:	20800017 	ldw	r2,0(r4)
  282560:	21000104 	addi	r4,r4,4
  282564:	d9002d15 	stw	r4,180(sp)
  282568:	1140000d 	sth	r5,0(r2)
  28256c:	003a1606 	br	280dc8 <___vfprintf_internal_r+0xe0>
  282570:	9080100c 	andi	r2,r18,64
  282574:	10008026 	beq	r2,zero,282778 <___vfprintf_internal_r+0x1a90>
  282578:	d8c02d17 	ldw	r3,180(sp)
  28257c:	1cc0000f 	ldh	r19,0(r3)
  282580:	18c00104 	addi	r3,r3,4
  282584:	d8c02d15 	stw	r3,180(sp)
  282588:	982dd7fa 	srai	r22,r19,31
  28258c:	b005883a 	mov	r2,r22
  282590:	003b1f06 	br	281210 <___vfprintf_internal_r+0x528>
  282594:	9080100c 	andi	r2,r18,64
  282598:	d8002785 	stb	zero,158(sp)
  28259c:	10008a1e 	bne	r2,zero,2827c8 <___vfprintf_internal_r+0x1ae0>
  2825a0:	d9402d17 	ldw	r5,180(sp)
  2825a4:	d8c02917 	ldw	r3,164(sp)
  2825a8:	002d883a 	mov	r22,zero
  2825ac:	28800104 	addi	r2,r5,4
  2825b0:	2cc00017 	ldw	r19,0(r5)
  2825b4:	183e4b0e 	bge	r3,zero,281ee4 <___vfprintf_internal_r+0x11fc>
  2825b8:	9d86b03a 	or	r3,r19,r22
  2825bc:	d8802d15 	stw	r2,180(sp)
  2825c0:	183e4c1e 	bne	r3,zero,281ef4 <___vfprintf_internal_r+0x120c>
  2825c4:	0039883a 	mov	fp,zero
  2825c8:	0005883a 	mov	r2,zero
  2825cc:	003d4006 	br	281ad0 <___vfprintf_internal_r+0xde8>
  2825d0:	01400a74 	movhi	r5,41
  2825d4:	29460c84 	addi	r5,r5,6194
  2825d8:	d9402b15 	stw	r5,172(sp)
  2825dc:	d9402b17 	ldw	r5,172(sp)
  2825e0:	1c47883a 	add	r3,r3,r17
  2825e4:	10800044 	addi	r2,r2,1
  2825e8:	41400015 	stw	r5,0(r8)
  2825ec:	44400115 	stw	r17,4(r8)
  2825f0:	d8c02015 	stw	r3,128(sp)
  2825f4:	d8801f15 	stw	r2,124(sp)
  2825f8:	010001c4 	movi	r4,7
  2825fc:	20bec816 	blt	r4,r2,282120 <___vfprintf_internal_r+0x1438>
  282600:	42000204 	addi	r8,r8,8
  282604:	003ecd06 	br	28213c <___vfprintf_internal_r+0x1454>
  282608:	d9002917 	ldw	r4,164(sp)
  28260c:	d8002785 	stb	zero,158(sp)
  282610:	203d2d16 	blt	r4,zero,281ac8 <___vfprintf_internal_r+0xde0>
  282614:	00bfdfc4 	movi	r2,-129
  282618:	90a4703a 	and	r18,r18,r2
  28261c:	003a9106 	br	281064 <___vfprintf_internal_r+0x37c>
  282620:	01000a74 	movhi	r4,41
  282624:	21060c84 	addi	r4,r4,6194
  282628:	d9002b15 	stw	r4,172(sp)
  28262c:	003c0c06 	br	281660 <___vfprintf_internal_r+0x978>
  282630:	d9002c17 	ldw	r4,176(sp)
  282634:	d9801e04 	addi	r6,sp,120
  282638:	b80b883a 	mov	r5,r23
  28263c:	02882e40 	call	2882e4 <__sprint_r>
  282640:	103aab1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282644:	d8c02017 	ldw	r3,128(sp)
  282648:	da000404 	addi	r8,sp,16
  28264c:	003d4106 	br	281b54 <___vfprintf_internal_r+0xe6c>
  282650:	d8801f17 	ldw	r2,124(sp)
  282654:	01400a74 	movhi	r5,41
  282658:	01000044 	movi	r4,1
  28265c:	18c00044 	addi	r3,r3,1
  282660:	10800044 	addi	r2,r2,1
  282664:	29460c04 	addi	r5,r5,6192
  282668:	41000115 	stw	r4,4(r8)
  28266c:	41400015 	stw	r5,0(r8)
  282670:	d8c02015 	stw	r3,128(sp)
  282674:	d8801f15 	stw	r2,124(sp)
  282678:	010001c4 	movi	r4,7
  28267c:	20805c16 	blt	r4,r2,2827f0 <___vfprintf_internal_r+0x1b08>
  282680:	42000204 	addi	r8,r8,8
  282684:	8800041e 	bne	r17,zero,282698 <___vfprintf_internal_r+0x19b0>
  282688:	d8803317 	ldw	r2,204(sp)
  28268c:	1000021e 	bne	r2,zero,282698 <___vfprintf_internal_r+0x19b0>
  282690:	9080004c 	andi	r2,r18,1
  282694:	103c0926 	beq	r2,zero,2816bc <___vfprintf_internal_r+0x9d4>
  282698:	d9003717 	ldw	r4,220(sp)
  28269c:	d8801f17 	ldw	r2,124(sp)
  2826a0:	d9403417 	ldw	r5,208(sp)
  2826a4:	20c7883a 	add	r3,r4,r3
  2826a8:	10800044 	addi	r2,r2,1
  2826ac:	41000115 	stw	r4,4(r8)
  2826b0:	41400015 	stw	r5,0(r8)
  2826b4:	d8c02015 	stw	r3,128(sp)
  2826b8:	d8801f15 	stw	r2,124(sp)
  2826bc:	010001c4 	movi	r4,7
  2826c0:	20812116 	blt	r4,r2,282b48 <___vfprintf_internal_r+0x1e60>
  2826c4:	42000204 	addi	r8,r8,8
  2826c8:	0463c83a 	sub	r17,zero,r17
  2826cc:	0440730e 	bge	zero,r17,28289c <___vfprintf_internal_r+0x1bb4>
  2826d0:	05800404 	movi	r22,16
  2826d4:	b440860e 	bge	r22,r17,2828f0 <___vfprintf_internal_r+0x1c08>
  2826d8:	01400a74 	movhi	r5,41
  2826dc:	29460c84 	addi	r5,r5,6194
  2826e0:	d9402b15 	stw	r5,172(sp)
  2826e4:	070001c4 	movi	fp,7
  2826e8:	dcc02c17 	ldw	r19,176(sp)
  2826ec:	00000306 	br	2826fc <___vfprintf_internal_r+0x1a14>
  2826f0:	42000204 	addi	r8,r8,8
  2826f4:	8c7ffc04 	addi	r17,r17,-16
  2826f8:	b440800e 	bge	r22,r17,2828fc <___vfprintf_internal_r+0x1c14>
  2826fc:	18c00404 	addi	r3,r3,16
  282700:	10800044 	addi	r2,r2,1
  282704:	45000015 	stw	r20,0(r8)
  282708:	45800115 	stw	r22,4(r8)
  28270c:	d8c02015 	stw	r3,128(sp)
  282710:	d8801f15 	stw	r2,124(sp)
  282714:	e0bff60e 	bge	fp,r2,2826f0 <___vfprintf_internal_r+0x1a08>
  282718:	d9801e04 	addi	r6,sp,120
  28271c:	b80b883a 	mov	r5,r23
  282720:	9809883a 	mov	r4,r19
  282724:	02882e40 	call	2882e4 <__sprint_r>
  282728:	103a711e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  28272c:	d8c02017 	ldw	r3,128(sp)
  282730:	d8801f17 	ldw	r2,124(sp)
  282734:	da000404 	addi	r8,sp,16
  282738:	003fee06 	br	2826f4 <___vfprintf_internal_r+0x1a0c>
  28273c:	00bfffc4 	movi	r2,-1
  282740:	003a6f06 	br	281100 <___vfprintf_internal_r+0x418>
  282744:	008011c4 	movi	r2,71
  282748:	1440b816 	blt	r2,r17,282a2c <___vfprintf_internal_r+0x1d44>
  28274c:	04000a74 	movhi	r16,41
  282750:	8405fe04 	addi	r16,r16,6136
  282754:	00c000c4 	movi	r3,3
  282758:	00bfdfc4 	movi	r2,-129
  28275c:	d8c02a15 	stw	r3,168(sp)
  282760:	90a4703a 	and	r18,r18,r2
  282764:	df002783 	ldbu	fp,158(sp)
  282768:	d8c02e15 	stw	r3,184(sp)
  28276c:	d8002915 	stw	zero,164(sp)
  282770:	d8003215 	stw	zero,200(sp)
  282774:	003b2906 	br	28141c <___vfprintf_internal_r+0x734>
  282778:	d9002d17 	ldw	r4,180(sp)
  28277c:	24c00017 	ldw	r19,0(r4)
  282780:	21000104 	addi	r4,r4,4
  282784:	d9002d15 	stw	r4,180(sp)
  282788:	982dd7fa 	srai	r22,r19,31
  28278c:	b005883a 	mov	r2,r22
  282790:	003a9f06 	br	281210 <___vfprintf_internal_r+0x528>
  282794:	d9402d17 	ldw	r5,180(sp)
  282798:	d8c02f17 	ldw	r3,188(sp)
  28279c:	28800017 	ldw	r2,0(r5)
  2827a0:	29400104 	addi	r5,r5,4
  2827a4:	d9402d15 	stw	r5,180(sp)
  2827a8:	10c00015 	stw	r3,0(r2)
  2827ac:	00398606 	br	280dc8 <___vfprintf_internal_r+0xe0>
  2827b0:	d9402d17 	ldw	r5,180(sp)
  2827b4:	002d883a 	mov	r22,zero
  2827b8:	2cc00017 	ldw	r19,0(r5)
  2827bc:	29400104 	addi	r5,r5,4
  2827c0:	d9402d15 	stw	r5,180(sp)
  2827c4:	003c2306 	br	281854 <___vfprintf_internal_r+0xb6c>
  2827c8:	d8c02d17 	ldw	r3,180(sp)
  2827cc:	d9002917 	ldw	r4,164(sp)
  2827d0:	002d883a 	mov	r22,zero
  2827d4:	18800104 	addi	r2,r3,4
  2827d8:	1cc0000b 	ldhu	r19,0(r3)
  2827dc:	203dc10e 	bge	r4,zero,281ee4 <___vfprintf_internal_r+0x11fc>
  2827e0:	003f7506 	br	2825b8 <___vfprintf_internal_r+0x18d0>
  2827e4:	04000a74 	movhi	r16,41
  2827e8:	8405fc04 	addi	r16,r16,6128
  2827ec:	003acc06 	br	281320 <___vfprintf_internal_r+0x638>
  2827f0:	d9002c17 	ldw	r4,176(sp)
  2827f4:	d9801e04 	addi	r6,sp,120
  2827f8:	b80b883a 	mov	r5,r23
  2827fc:	02882e40 	call	2882e4 <__sprint_r>
  282800:	103a3b1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282804:	dc402617 	ldw	r17,152(sp)
  282808:	d8c02017 	ldw	r3,128(sp)
  28280c:	da000404 	addi	r8,sp,16
  282810:	003f9c06 	br	282684 <___vfprintf_internal_r+0x199c>
  282814:	ac400043 	ldbu	r17,1(r21)
  282818:	94800814 	ori	r18,r18,32
  28281c:	ad400044 	addi	r21,r21,1
  282820:	8c403fcc 	andi	r17,r17,255
  282824:	8c40201c 	xori	r17,r17,128
  282828:	8c7fe004 	addi	r17,r17,-128
  28282c:	00398f06 	br	280e6c <___vfprintf_internal_r+0x184>
  282830:	d8c02d15 	stw	r3,180(sp)
  282834:	0039883a 	mov	fp,zero
  282838:	003e3506 	br	282110 <___vfprintf_internal_r+0x1428>
  28283c:	d9002c17 	ldw	r4,176(sp)
  282840:	d9801e04 	addi	r6,sp,120
  282844:	b80b883a 	mov	r5,r23
  282848:	02882e40 	call	2882e4 <__sprint_r>
  28284c:	103a281e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282850:	d8c02017 	ldw	r3,128(sp)
  282854:	da000404 	addi	r8,sp,16
  282858:	003cd006 	br	281b9c <___vfprintf_internal_r+0xeb4>
  28285c:	8009883a 	mov	r4,r16
  282860:	da003d15 	stw	r8,244(sp)
  282864:	0280c500 	call	280c50 <strlen>
  282868:	d8802e15 	stw	r2,184(sp)
  28286c:	da003d17 	ldw	r8,244(sp)
  282870:	103c340e 	bge	r2,zero,281944 <___vfprintf_internal_r+0xc5c>
  282874:	0005883a 	mov	r2,zero
  282878:	003c3206 	br	281944 <___vfprintf_internal_r+0xc5c>
  28287c:	d9002c17 	ldw	r4,176(sp)
  282880:	d9801e04 	addi	r6,sp,120
  282884:	b80b883a 	mov	r5,r23
  282888:	02882e40 	call	2882e4 <__sprint_r>
  28288c:	103a181e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282890:	d8c02017 	ldw	r3,128(sp)
  282894:	d8801f17 	ldw	r2,124(sp)
  282898:	da000404 	addi	r8,sp,16
  28289c:	d9403317 	ldw	r5,204(sp)
  2828a0:	10800044 	addi	r2,r2,1
  2828a4:	44000015 	stw	r16,0(r8)
  2828a8:	28c7883a 	add	r3,r5,r3
  2828ac:	003b7d06 	br	2816a4 <___vfprintf_internal_r+0x9bc>
  2828b0:	01000a74 	movhi	r4,41
  2828b4:	21061084 	addi	r4,r4,6210
  2828b8:	d9003515 	stw	r4,212(sp)
  2828bc:	003b1406 	br	281510 <___vfprintf_internal_r+0x828>
  2828c0:	013fffc4 	movi	r4,-1
  2828c4:	003a3506 	br	28119c <___vfprintf_internal_r+0x4b4>
  2828c8:	0023883a 	mov	r17,zero
  2828cc:	003d9d06 	br	281f44 <___vfprintf_internal_r+0x125c>
  2828d0:	d9002c17 	ldw	r4,176(sp)
  2828d4:	d9801e04 	addi	r6,sp,120
  2828d8:	b80b883a 	mov	r5,r23
  2828dc:	02882e40 	call	2882e4 <__sprint_r>
  2828e0:	103a031e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2828e4:	d8c02017 	ldw	r3,128(sp)
  2828e8:	da000404 	addi	r8,sp,16
  2828ec:	003d9406 	br	281f40 <___vfprintf_internal_r+0x1258>
  2828f0:	01000a74 	movhi	r4,41
  2828f4:	21060c84 	addi	r4,r4,6194
  2828f8:	d9002b15 	stw	r4,172(sp)
  2828fc:	d9002b17 	ldw	r4,172(sp)
  282900:	1c47883a 	add	r3,r3,r17
  282904:	10800044 	addi	r2,r2,1
  282908:	41000015 	stw	r4,0(r8)
  28290c:	44400115 	stw	r17,4(r8)
  282910:	d8c02015 	stw	r3,128(sp)
  282914:	d8801f15 	stw	r2,124(sp)
  282918:	010001c4 	movi	r4,7
  28291c:	20bfd716 	blt	r4,r2,28287c <___vfprintf_internal_r+0x1b94>
  282920:	42000204 	addi	r8,r8,8
  282924:	003fdd06 	br	28289c <___vfprintf_internal_r+0x1bb4>
  282928:	d9002c17 	ldw	r4,176(sp)
  28292c:	d9801e04 	addi	r6,sp,120
  282930:	b80b883a 	mov	r5,r23
  282934:	02882e40 	call	2882e4 <__sprint_r>
  282938:	1039ed1e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  28293c:	d8802617 	ldw	r2,152(sp)
  282940:	d8c02017 	ldw	r3,128(sp)
  282944:	da000404 	addi	r8,sp,16
  282948:	003e1006 	br	28218c <___vfprintf_internal_r+0x14a4>
  28294c:	00800044 	movi	r2,1
  282950:	10803fcc 	andi	r2,r2,255
  282954:	00c00044 	movi	r3,1
  282958:	10fa3526 	beq	r2,r3,281230 <___vfprintf_internal_r+0x548>
  28295c:	00c00084 	movi	r3,2
  282960:	10fbcb26 	beq	r2,r3,281890 <___vfprintf_internal_r+0xba8>
  282964:	003a8f06 	br	2813a4 <___vfprintf_internal_r+0x6bc>
  282968:	01000a74 	movhi	r4,41
  28296c:	21061084 	addi	r4,r4,6210
  282970:	d9003515 	stw	r4,212(sp)
  282974:	003b7606 	br	281750 <___vfprintf_internal_r+0xa68>
  282978:	d8802917 	ldw	r2,164(sp)
  28297c:	00c00184 	movi	r3,6
  282980:	1880012e 	bgeu	r3,r2,282988 <___vfprintf_internal_r+0x1ca0>
  282984:	1805883a 	mov	r2,r3
  282988:	d8802e15 	stw	r2,184(sp)
  28298c:	1000ef16 	blt	r2,zero,282d4c <___vfprintf_internal_r+0x2064>
  282990:	04000a74 	movhi	r16,41
  282994:	d8802a15 	stw	r2,168(sp)
  282998:	dcc02d15 	stw	r19,180(sp)
  28299c:	d8002915 	stw	zero,164(sp)
  2829a0:	d8003215 	stw	zero,200(sp)
  2829a4:	84060a04 	addi	r16,r16,6184
  2829a8:	0039883a 	mov	fp,zero
  2829ac:	003aa206 	br	281438 <___vfprintf_internal_r+0x750>
  2829b0:	0021883a 	mov	r16,zero
  2829b4:	003e0706 	br	2821d4 <___vfprintf_internal_r+0x14ec>
  2829b8:	d9002c17 	ldw	r4,176(sp)
  2829bc:	d9801e04 	addi	r6,sp,120
  2829c0:	b80b883a 	mov	r5,r23
  2829c4:	02882e40 	call	2882e4 <__sprint_r>
  2829c8:	1039c91e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  2829cc:	d8802617 	ldw	r2,152(sp)
  2829d0:	d9403317 	ldw	r5,204(sp)
  2829d4:	d8c02017 	ldw	r3,128(sp)
  2829d8:	da000404 	addi	r8,sp,16
  2829dc:	2885c83a 	sub	r2,r5,r2
  2829e0:	003dfb06 	br	2821d0 <___vfprintf_internal_r+0x14e8>
  2829e4:	9080004c 	andi	r2,r18,1
  2829e8:	103e8f1e 	bne	r2,zero,282428 <___vfprintf_internal_r+0x1740>
  2829ec:	d8802117 	ldw	r2,132(sp)
  2829f0:	003e9e06 	br	28246c <___vfprintf_internal_r+0x1784>
  2829f4:	1025883a 	mov	r18,r2
  2829f8:	0039883a 	mov	fp,zero
  2829fc:	00800084 	movi	r2,2
  282a00:	003fd306 	br	282950 <___vfprintf_internal_r+0x1c68>
  282a04:	07000b44 	movi	fp,45
  282a08:	df002785 	stb	fp,158(sp)
  282a0c:	003a4006 	br	281310 <___vfprintf_internal_r+0x628>
  282a10:	00c00b44 	movi	r3,45
  282a14:	d8c02785 	stb	r3,158(sp)
  282a18:	d8802a15 	stw	r2,168(sp)
  282a1c:	dc802b17 	ldw	r18,172(sp)
  282a20:	d8002915 	stw	zero,164(sp)
  282a24:	07000b44 	movi	fp,45
  282a28:	003a8006 	br	28142c <___vfprintf_internal_r+0x744>
  282a2c:	04000a74 	movhi	r16,41
  282a30:	8405ff04 	addi	r16,r16,6140
  282a34:	003f4706 	br	282754 <___vfprintf_internal_r+0x1a6c>
  282a38:	d8c02d17 	ldw	r3,180(sp)
  282a3c:	d9002f17 	ldw	r4,188(sp)
  282a40:	18800017 	ldw	r2,0(r3)
  282a44:	18c00104 	addi	r3,r3,4
  282a48:	d8c02d15 	stw	r3,180(sp)
  282a4c:	11000015 	stw	r4,0(r2)
  282a50:	0038dd06 	br	280dc8 <___vfprintf_internal_r+0xe0>
  282a54:	dd802617 	ldw	r22,152(sp)
  282a58:	00bfff44 	movi	r2,-3
  282a5c:	b0801c16 	blt	r22,r2,282ad0 <___vfprintf_internal_r+0x1de8>
  282a60:	d9402917 	ldw	r5,164(sp)
  282a64:	2d801a16 	blt	r5,r22,282ad0 <___vfprintf_internal_r+0x1de8>
  282a68:	dd803215 	stw	r22,200(sp)
  282a6c:	003e8906 	br	282494 <___vfprintf_internal_r+0x17ac>
  282a70:	01000a74 	movhi	r4,41
  282a74:	21060c84 	addi	r4,r4,6194
  282a78:	d9002b15 	stw	r4,172(sp)
  282a7c:	003c9106 	br	281cc4 <___vfprintf_internal_r+0xfdc>
  282a80:	e005883a 	mov	r2,fp
  282a84:	003e7906 	br	28246c <___vfprintf_internal_r+0x1784>
  282a88:	d9402917 	ldw	r5,164(sp)
  282a8c:	df002783 	ldbu	fp,158(sp)
  282a90:	dcc02d15 	stw	r19,180(sp)
  282a94:	d9402a15 	stw	r5,168(sp)
  282a98:	d9402e15 	stw	r5,184(sp)
  282a9c:	d8002915 	stw	zero,164(sp)
  282aa0:	d8003215 	stw	zero,200(sp)
  282aa4:	003a5d06 	br	28141c <___vfprintf_internal_r+0x734>
  282aa8:	9080004c 	andi	r2,r18,1
  282aac:	0039883a 	mov	fp,zero
  282ab0:	10000426 	beq	r2,zero,282ac4 <___vfprintf_internal_r+0x1ddc>
  282ab4:	00800c04 	movi	r2,48
  282ab8:	dc001dc4 	addi	r16,sp,119
  282abc:	d8801dc5 	stb	r2,119(sp)
  282ac0:	003b8006 	br	2818c4 <___vfprintf_internal_r+0xbdc>
  282ac4:	d8002e15 	stw	zero,184(sp)
  282ac8:	dc001e04 	addi	r16,sp,120
  282acc:	003a4d06 	br	281404 <___vfprintf_internal_r+0x71c>
  282ad0:	8c7fff84 	addi	r17,r17,-2
  282ad4:	b5bfffc4 	addi	r22,r22,-1
  282ad8:	dd802615 	stw	r22,152(sp)
  282adc:	dc4022c5 	stb	r17,139(sp)
  282ae0:	b000bf16 	blt	r22,zero,282de0 <___vfprintf_internal_r+0x20f8>
  282ae4:	00800ac4 	movi	r2,43
  282ae8:	d8802305 	stb	r2,140(sp)
  282aec:	00800244 	movi	r2,9
  282af0:	15807016 	blt	r2,r22,282cb4 <___vfprintf_internal_r+0x1fcc>
  282af4:	00800c04 	movi	r2,48
  282af8:	b5800c04 	addi	r22,r22,48
  282afc:	d8802345 	stb	r2,141(sp)
  282b00:	dd802385 	stb	r22,142(sp)
  282b04:	d88023c4 	addi	r2,sp,143
  282b08:	df0022c4 	addi	fp,sp,139
  282b0c:	d8c03317 	ldw	r3,204(sp)
  282b10:	1739c83a 	sub	fp,r2,fp
  282b14:	d9003317 	ldw	r4,204(sp)
  282b18:	e0c7883a 	add	r3,fp,r3
  282b1c:	df003a15 	stw	fp,232(sp)
  282b20:	d8c02e15 	stw	r3,184(sp)
  282b24:	00800044 	movi	r2,1
  282b28:	1100b30e 	bge	r2,r4,282df8 <___vfprintf_internal_r+0x2110>
  282b2c:	d8c02e17 	ldw	r3,184(sp)
  282b30:	18c00044 	addi	r3,r3,1
  282b34:	d8c02e15 	stw	r3,184(sp)
  282b38:	1805883a 	mov	r2,r3
  282b3c:	1800ac16 	blt	r3,zero,282df0 <___vfprintf_internal_r+0x2108>
  282b40:	d8003215 	stw	zero,200(sp)
  282b44:	003e5d06 	br	2824bc <___vfprintf_internal_r+0x17d4>
  282b48:	d9002c17 	ldw	r4,176(sp)
  282b4c:	d9801e04 	addi	r6,sp,120
  282b50:	b80b883a 	mov	r5,r23
  282b54:	02882e40 	call	2882e4 <__sprint_r>
  282b58:	1039651e 	bne	r2,zero,2810f0 <___vfprintf_internal_r+0x408>
  282b5c:	dc402617 	ldw	r17,152(sp)
  282b60:	d8c02017 	ldw	r3,128(sp)
  282b64:	d8801f17 	ldw	r2,124(sp)
  282b68:	da000404 	addi	r8,sp,16
  282b6c:	003ed606 	br	2826c8 <___vfprintf_internal_r+0x19e0>
  282b70:	582b883a 	mov	r21,r11
  282b74:	d8002915 	stw	zero,164(sp)
  282b78:	0038bd06 	br	280e70 <___vfprintf_internal_r+0x188>
  282b7c:	d8802917 	ldw	r2,164(sp)
  282b80:	103e071e 	bne	r2,zero,2823a0 <___vfprintf_internal_r+0x16b8>
  282b84:	dc002915 	stw	r16,164(sp)
  282b88:	003e0506 	br	2823a0 <___vfprintf_internal_r+0x16b8>
  282b8c:	d9002917 	ldw	r4,164(sp)
  282b90:	20c00044 	addi	r3,r4,1
  282b94:	003e0f06 	br	2823d4 <___vfprintf_internal_r+0x16ec>
  282b98:	01400184 	movi	r5,6
  282b9c:	d9402915 	stw	r5,164(sp)
  282ba0:	003dff06 	br	2823a0 <___vfprintf_internal_r+0x16b8>
  282ba4:	d8802104 	addi	r2,sp,132
  282ba8:	d8800315 	stw	r2,12(sp)
  282bac:	d8802504 	addi	r2,sp,148
  282bb0:	d8800215 	stw	r2,8(sp)
  282bb4:	d8802604 	addi	r2,sp,152
  282bb8:	d8800115 	stw	r2,4(sp)
  282bbc:	d8802917 	ldw	r2,164(sp)
  282bc0:	d9403617 	ldw	r5,216(sp)
  282bc4:	d9002c17 	ldw	r4,176(sp)
  282bc8:	d8800015 	stw	r2,0(sp)
  282bcc:	01c000c4 	movi	r7,3
  282bd0:	980d883a 	mov	r6,r19
  282bd4:	da003d15 	stw	r8,244(sp)
  282bd8:	028330c0 	call	28330c <_dtoa_r>
  282bdc:	d8c02917 	ldw	r3,164(sp)
  282be0:	da003d17 	ldw	r8,244(sp)
  282be4:	1021883a 	mov	r16,r2
  282be8:	10f9883a 	add	fp,r2,r3
  282bec:	81000007 	ldb	r4,0(r16)
  282bf0:	00800c04 	movi	r2,48
  282bf4:	20805e26 	beq	r4,r2,282d70 <___vfprintf_internal_r+0x2088>
  282bf8:	d8c02617 	ldw	r3,152(sp)
  282bfc:	e0f9883a 	add	fp,fp,r3
  282c00:	003e0a06 	br	28242c <___vfprintf_internal_r+0x1744>
  282c04:	00c00b44 	movi	r3,45
  282c08:	24e0003c 	xorhi	r19,r4,32768
  282c0c:	d8c02a05 	stb	r3,168(sp)
  282c10:	003de906 	br	2823b8 <___vfprintf_internal_r+0x16d0>
  282c14:	d8c03217 	ldw	r3,200(sp)
  282c18:	00c07a0e 	bge	zero,r3,282e04 <___vfprintf_internal_r+0x211c>
  282c1c:	00800044 	movi	r2,1
  282c20:	d9003317 	ldw	r4,204(sp)
  282c24:	1105883a 	add	r2,r2,r4
  282c28:	d8802e15 	stw	r2,184(sp)
  282c2c:	10004e16 	blt	r2,zero,282d68 <___vfprintf_internal_r+0x2080>
  282c30:	044019c4 	movi	r17,103
  282c34:	003e2106 	br	2824bc <___vfprintf_internal_r+0x17d4>
  282c38:	d9002917 	ldw	r4,164(sp)
  282c3c:	d8802104 	addi	r2,sp,132
  282c40:	d8800315 	stw	r2,12(sp)
  282c44:	d9000015 	stw	r4,0(sp)
  282c48:	d8802504 	addi	r2,sp,148
  282c4c:	d9403617 	ldw	r5,216(sp)
  282c50:	d9002c17 	ldw	r4,176(sp)
  282c54:	d8800215 	stw	r2,8(sp)
  282c58:	d8802604 	addi	r2,sp,152
  282c5c:	d8800115 	stw	r2,4(sp)
  282c60:	01c000c4 	movi	r7,3
  282c64:	980d883a 	mov	r6,r19
  282c68:	da003d15 	stw	r8,244(sp)
  282c6c:	028330c0 	call	28330c <_dtoa_r>
  282c70:	d8c02917 	ldw	r3,164(sp)
  282c74:	da003d17 	ldw	r8,244(sp)
  282c78:	1021883a 	mov	r16,r2
  282c7c:	00801184 	movi	r2,70
  282c80:	80f9883a 	add	fp,r16,r3
  282c84:	88bfd926 	beq	r17,r2,282bec <___vfprintf_internal_r+0x1f04>
  282c88:	003de806 	br	28242c <___vfprintf_internal_r+0x1744>
  282c8c:	d9002917 	ldw	r4,164(sp)
  282c90:	00c04d0e 	bge	zero,r3,282dc8 <___vfprintf_internal_r+0x20e0>
  282c94:	2000441e 	bne	r4,zero,282da8 <___vfprintf_internal_r+0x20c0>
  282c98:	9480004c 	andi	r18,r18,1
  282c9c:	9000421e 	bne	r18,zero,282da8 <___vfprintf_internal_r+0x20c0>
  282ca0:	1805883a 	mov	r2,r3
  282ca4:	18007016 	blt	r3,zero,282e68 <___vfprintf_internal_r+0x2180>
  282ca8:	d8c03217 	ldw	r3,200(sp)
  282cac:	d8c02e15 	stw	r3,184(sp)
  282cb0:	003e0206 	br	2824bc <___vfprintf_internal_r+0x17d4>
  282cb4:	df0022c4 	addi	fp,sp,139
  282cb8:	dc002915 	stw	r16,164(sp)
  282cbc:	4027883a 	mov	r19,r8
  282cc0:	e021883a 	mov	r16,fp
  282cc4:	b009883a 	mov	r4,r22
  282cc8:	01400284 	movi	r5,10
  282ccc:	02809e00 	call	2809e0 <__modsi3>
  282cd0:	10800c04 	addi	r2,r2,48
  282cd4:	843fffc4 	addi	r16,r16,-1
  282cd8:	b009883a 	mov	r4,r22
  282cdc:	01400284 	movi	r5,10
  282ce0:	80800005 	stb	r2,0(r16)
  282ce4:	028095c0 	call	28095c <__divsi3>
  282ce8:	102d883a 	mov	r22,r2
  282cec:	00800244 	movi	r2,9
  282cf0:	15bff416 	blt	r2,r22,282cc4 <___vfprintf_internal_r+0x1fdc>
  282cf4:	9811883a 	mov	r8,r19
  282cf8:	b0800c04 	addi	r2,r22,48
  282cfc:	8027883a 	mov	r19,r16
  282d00:	997fffc4 	addi	r5,r19,-1
  282d04:	98bfffc5 	stb	r2,-1(r19)
  282d08:	dc002917 	ldw	r16,164(sp)
  282d0c:	2f006a2e 	bgeu	r5,fp,282eb8 <___vfprintf_internal_r+0x21d0>
  282d10:	d9c02384 	addi	r7,sp,142
  282d14:	3ccfc83a 	sub	r7,r7,r19
  282d18:	d9002344 	addi	r4,sp,141
  282d1c:	e1cf883a 	add	r7,fp,r7
  282d20:	00000106 	br	282d28 <___vfprintf_internal_r+0x2040>
  282d24:	28800003 	ldbu	r2,0(r5)
  282d28:	20800005 	stb	r2,0(r4)
  282d2c:	21000044 	addi	r4,r4,1
  282d30:	29400044 	addi	r5,r5,1
  282d34:	393ffb1e 	bne	r7,r4,282d24 <___vfprintf_internal_r+0x203c>
  282d38:	d8802304 	addi	r2,sp,140
  282d3c:	14c5c83a 	sub	r2,r2,r19
  282d40:	d8c02344 	addi	r3,sp,141
  282d44:	1885883a 	add	r2,r3,r2
  282d48:	003f7006 	br	282b0c <___vfprintf_internal_r+0x1e24>
  282d4c:	0005883a 	mov	r2,zero
  282d50:	003f0f06 	br	282990 <___vfprintf_internal_r+0x1ca8>
  282d54:	d8c03217 	ldw	r3,200(sp)
  282d58:	18c00044 	addi	r3,r3,1
  282d5c:	d8c02e15 	stw	r3,184(sp)
  282d60:	1805883a 	mov	r2,r3
  282d64:	183fb20e 	bge	r3,zero,282c30 <___vfprintf_internal_r+0x1f48>
  282d68:	0005883a 	mov	r2,zero
  282d6c:	003fb006 	br	282c30 <___vfprintf_internal_r+0x1f48>
  282d70:	d9003617 	ldw	r4,216(sp)
  282d74:	000d883a 	mov	r6,zero
  282d78:	000f883a 	mov	r7,zero
  282d7c:	980b883a 	mov	r5,r19
  282d80:	d8c03c15 	stw	r3,240(sp)
  282d84:	da003d15 	stw	r8,244(sp)
  282d88:	028bda80 	call	28bda8 <__eqdf2>
  282d8c:	d8c03c17 	ldw	r3,240(sp)
  282d90:	da003d17 	ldw	r8,244(sp)
  282d94:	103f9826 	beq	r2,zero,282bf8 <___vfprintf_internal_r+0x1f10>
  282d98:	00800044 	movi	r2,1
  282d9c:	10c7c83a 	sub	r3,r2,r3
  282da0:	d8c02615 	stw	r3,152(sp)
  282da4:	003f9506 	br	282bfc <___vfprintf_internal_r+0x1f14>
  282da8:	d9002917 	ldw	r4,164(sp)
  282dac:	d8c03217 	ldw	r3,200(sp)
  282db0:	20800044 	addi	r2,r4,1
  282db4:	1885883a 	add	r2,r3,r2
  282db8:	d8802e15 	stw	r2,184(sp)
  282dbc:	103dbf0e 	bge	r2,zero,2824bc <___vfprintf_internal_r+0x17d4>
  282dc0:	0005883a 	mov	r2,zero
  282dc4:	003dbd06 	br	2824bc <___vfprintf_internal_r+0x17d4>
  282dc8:	2000211e 	bne	r4,zero,282e50 <___vfprintf_internal_r+0x2168>
  282dcc:	9480004c 	andi	r18,r18,1
  282dd0:	90001f1e 	bne	r18,zero,282e50 <___vfprintf_internal_r+0x2168>
  282dd4:	00800044 	movi	r2,1
  282dd8:	d8802e15 	stw	r2,184(sp)
  282ddc:	003db706 	br	2824bc <___vfprintf_internal_r+0x17d4>
  282de0:	00800b44 	movi	r2,45
  282de4:	05adc83a 	sub	r22,zero,r22
  282de8:	d8802305 	stb	r2,140(sp)
  282dec:	003f3f06 	br	282aec <___vfprintf_internal_r+0x1e04>
  282df0:	0005883a 	mov	r2,zero
  282df4:	003f5206 	br	282b40 <___vfprintf_internal_r+0x1e58>
  282df8:	90a4703a 	and	r18,r18,r2
  282dfc:	903f4e26 	beq	r18,zero,282b38 <___vfprintf_internal_r+0x1e50>
  282e00:	003f4a06 	br	282b2c <___vfprintf_internal_r+0x1e44>
  282e04:	00800084 	movi	r2,2
  282e08:	10c5c83a 	sub	r2,r2,r3
  282e0c:	003f8406 	br	282c20 <___vfprintf_internal_r+0x1f38>
  282e10:	d8802d17 	ldw	r2,180(sp)
  282e14:	d9002d17 	ldw	r4,180(sp)
  282e18:	ac400043 	ldbu	r17,1(r21)
  282e1c:	10800017 	ldw	r2,0(r2)
  282e20:	582b883a 	mov	r21,r11
  282e24:	d8802915 	stw	r2,164(sp)
  282e28:	20800104 	addi	r2,r4,4
  282e2c:	d9002917 	ldw	r4,164(sp)
  282e30:	d8802d15 	stw	r2,180(sp)
  282e34:	203e7a0e 	bge	r4,zero,282820 <___vfprintf_internal_r+0x1b38>
  282e38:	8c403fcc 	andi	r17,r17,255
  282e3c:	00bfffc4 	movi	r2,-1
  282e40:	8c40201c 	xori	r17,r17,128
  282e44:	d8802915 	stw	r2,164(sp)
  282e48:	8c7fe004 	addi	r17,r17,-128
  282e4c:	00380706 	br	280e6c <___vfprintf_internal_r+0x184>
  282e50:	d8c02917 	ldw	r3,164(sp)
  282e54:	18c00084 	addi	r3,r3,2
  282e58:	d8c02e15 	stw	r3,184(sp)
  282e5c:	1805883a 	mov	r2,r3
  282e60:	183d960e 	bge	r3,zero,2824bc <___vfprintf_internal_r+0x17d4>
  282e64:	003fd606 	br	282dc0 <___vfprintf_internal_r+0x20d8>
  282e68:	0005883a 	mov	r2,zero
  282e6c:	003f8e06 	br	282ca8 <___vfprintf_internal_r+0x1fc0>
  282e70:	9080004c 	andi	r2,r18,1
  282e74:	103f811e 	bne	r2,zero,282c7c <___vfprintf_internal_r+0x1f94>
  282e78:	d8802117 	ldw	r2,132(sp)
  282e7c:	1405c83a 	sub	r2,r2,r16
  282e80:	d8803315 	stw	r2,204(sp)
  282e84:	b47ef326 	beq	r22,r17,282a54 <___vfprintf_internal_r+0x1d6c>
  282e88:	dd802617 	ldw	r22,152(sp)
  282e8c:	003f1106 	br	282ad4 <___vfprintf_internal_r+0x1dec>
  282e90:	d9c02785 	stb	r7,158(sp)
  282e94:	00390406 	br	2812a8 <___vfprintf_internal_r+0x5c0>
  282e98:	d9c02785 	stb	r7,158(sp)
  282e9c:	0038d306 	br	2811ec <___vfprintf_internal_r+0x504>
  282ea0:	d9c02785 	stb	r7,158(sp)
  282ea4:	003a6106 	br	28182c <___vfprintf_internal_r+0xb44>
  282ea8:	d9c02785 	stb	r7,158(sp)
  282eac:	003af806 	br	281a90 <___vfprintf_internal_r+0xda8>
  282eb0:	0005883a 	mov	r2,zero
  282eb4:	003d7e06 	br	2824b0 <___vfprintf_internal_r+0x17c8>
  282eb8:	d8802344 	addi	r2,sp,141
  282ebc:	003f1306 	br	282b0c <___vfprintf_internal_r+0x1e24>
  282ec0:	d9c02785 	stb	r7,158(sp)
  282ec4:	00392306 	br	281354 <___vfprintf_internal_r+0x66c>
  282ec8:	d9c02785 	stb	r7,158(sp)
  282ecc:	003aa906 	br	281974 <___vfprintf_internal_r+0xc8c>
  282ed0:	d9c02785 	stb	r7,158(sp)
  282ed4:	003a3d06 	br	2817cc <___vfprintf_internal_r+0xae4>
  282ed8:	d9c02785 	stb	r7,158(sp)
  282edc:	003aca06 	br	281a08 <___vfprintf_internal_r+0xd20>

00282ee0 <__vfprintf_internal>:
  282ee0:	00800a74 	movhi	r2,41
  282ee4:	108da904 	addi	r2,r2,13988
  282ee8:	300f883a 	mov	r7,r6
  282eec:	280d883a 	mov	r6,r5
  282ef0:	200b883a 	mov	r5,r4
  282ef4:	11000017 	ldw	r4,0(r2)
  282ef8:	0280ce81 	jmpi	280ce8 <___vfprintf_internal_r>

00282efc <__sbprintf>:
  282efc:	2880030b 	ldhu	r2,12(r5)
  282f00:	2ac01917 	ldw	r11,100(r5)
  282f04:	2a80038b 	ldhu	r10,14(r5)
  282f08:	2a400717 	ldw	r9,28(r5)
  282f0c:	2a000917 	ldw	r8,36(r5)
  282f10:	defee204 	addi	sp,sp,-1144
  282f14:	00c10004 	movi	r3,1024
  282f18:	dc011a15 	stw	r16,1128(sp)
  282f1c:	10bfff4c 	andi	r2,r2,65533
  282f20:	2821883a 	mov	r16,r5
  282f24:	d8cb883a 	add	r5,sp,r3
  282f28:	dc811c15 	stw	r18,1136(sp)
  282f2c:	dc411b15 	stw	r17,1132(sp)
  282f30:	dfc11d15 	stw	ra,1140(sp)
  282f34:	2025883a 	mov	r18,r4
  282f38:	d881030d 	sth	r2,1036(sp)
  282f3c:	dac11915 	stw	r11,1124(sp)
  282f40:	da81038d 	sth	r10,1038(sp)
  282f44:	da410715 	stw	r9,1052(sp)
  282f48:	da010915 	stw	r8,1060(sp)
  282f4c:	dec10015 	stw	sp,1024(sp)
  282f50:	dec10415 	stw	sp,1040(sp)
  282f54:	d8c10215 	stw	r3,1032(sp)
  282f58:	d8c10515 	stw	r3,1044(sp)
  282f5c:	d8010615 	stw	zero,1048(sp)
  282f60:	0280ce80 	call	280ce8 <___vfprintf_internal_r>
  282f64:	1023883a 	mov	r17,r2
  282f68:	10000416 	blt	r2,zero,282f7c <__sbprintf+0x80>
  282f6c:	d9410004 	addi	r5,sp,1024
  282f70:	9009883a 	mov	r4,r18
  282f74:	0284bb00 	call	284bb0 <_fflush_r>
  282f78:	10000d1e 	bne	r2,zero,282fb0 <__sbprintf+0xb4>
  282f7c:	d881030b 	ldhu	r2,1036(sp)
  282f80:	1080100c 	andi	r2,r2,64
  282f84:	10000326 	beq	r2,zero,282f94 <__sbprintf+0x98>
  282f88:	8080030b 	ldhu	r2,12(r16)
  282f8c:	10801014 	ori	r2,r2,64
  282f90:	8080030d 	sth	r2,12(r16)
  282f94:	8805883a 	mov	r2,r17
  282f98:	dfc11d17 	ldw	ra,1140(sp)
  282f9c:	dc811c17 	ldw	r18,1136(sp)
  282fa0:	dc411b17 	ldw	r17,1132(sp)
  282fa4:	dc011a17 	ldw	r16,1128(sp)
  282fa8:	dec11e04 	addi	sp,sp,1144
  282fac:	f800283a 	ret
  282fb0:	047fffc4 	movi	r17,-1
  282fb4:	003ff106 	br	282f7c <__sbprintf+0x80>

00282fb8 <__swsetup_r>:
  282fb8:	00800a74 	movhi	r2,41
  282fbc:	defffd04 	addi	sp,sp,-12
  282fc0:	108da904 	addi	r2,r2,13988
  282fc4:	dc400115 	stw	r17,4(sp)
  282fc8:	2023883a 	mov	r17,r4
  282fcc:	11000017 	ldw	r4,0(r2)
  282fd0:	dc000015 	stw	r16,0(sp)
  282fd4:	dfc00215 	stw	ra,8(sp)
  282fd8:	2821883a 	mov	r16,r5
  282fdc:	20000226 	beq	r4,zero,282fe8 <__swsetup_r+0x30>
  282fe0:	20800e17 	ldw	r2,56(r4)
  282fe4:	10003126 	beq	r2,zero,2830ac <__swsetup_r+0xf4>
  282fe8:	8080030b 	ldhu	r2,12(r16)
  282fec:	10c0020c 	andi	r3,r2,8
  282ff0:	1009883a 	mov	r4,r2
  282ff4:	18000f26 	beq	r3,zero,283034 <__swsetup_r+0x7c>
  282ff8:	80c00417 	ldw	r3,16(r16)
  282ffc:	18001526 	beq	r3,zero,283054 <__swsetup_r+0x9c>
  283000:	1100004c 	andi	r4,r2,1
  283004:	20001c1e 	bne	r4,zero,283078 <__swsetup_r+0xc0>
  283008:	1080008c 	andi	r2,r2,2
  28300c:	1000291e 	bne	r2,zero,2830b4 <__swsetup_r+0xfc>
  283010:	80800517 	ldw	r2,20(r16)
  283014:	80800215 	stw	r2,8(r16)
  283018:	18001c26 	beq	r3,zero,28308c <__swsetup_r+0xd4>
  28301c:	0005883a 	mov	r2,zero
  283020:	dfc00217 	ldw	ra,8(sp)
  283024:	dc400117 	ldw	r17,4(sp)
  283028:	dc000017 	ldw	r16,0(sp)
  28302c:	dec00304 	addi	sp,sp,12
  283030:	f800283a 	ret
  283034:	2080040c 	andi	r2,r4,16
  283038:	10002e26 	beq	r2,zero,2830f4 <__swsetup_r+0x13c>
  28303c:	2080010c 	andi	r2,r4,4
  283040:	10001e1e 	bne	r2,zero,2830bc <__swsetup_r+0x104>
  283044:	80c00417 	ldw	r3,16(r16)
  283048:	20800214 	ori	r2,r4,8
  28304c:	8080030d 	sth	r2,12(r16)
  283050:	183feb1e 	bne	r3,zero,283000 <__swsetup_r+0x48>
  283054:	1100a00c 	andi	r4,r2,640
  283058:	01408004 	movi	r5,512
  28305c:	217fe826 	beq	r4,r5,283000 <__swsetup_r+0x48>
  283060:	800b883a 	mov	r5,r16
  283064:	8809883a 	mov	r4,r17
  283068:	0285b300 	call	285b30 <__smakebuf_r>
  28306c:	8080030b 	ldhu	r2,12(r16)
  283070:	80c00417 	ldw	r3,16(r16)
  283074:	003fe206 	br	283000 <__swsetup_r+0x48>
  283078:	80800517 	ldw	r2,20(r16)
  28307c:	80000215 	stw	zero,8(r16)
  283080:	0085c83a 	sub	r2,zero,r2
  283084:	80800615 	stw	r2,24(r16)
  283088:	183fe41e 	bne	r3,zero,28301c <__swsetup_r+0x64>
  28308c:	80c0030b 	ldhu	r3,12(r16)
  283090:	0005883a 	mov	r2,zero
  283094:	1900200c 	andi	r4,r3,128
  283098:	203fe126 	beq	r4,zero,283020 <__swsetup_r+0x68>
  28309c:	18c01014 	ori	r3,r3,64
  2830a0:	80c0030d 	sth	r3,12(r16)
  2830a4:	00bfffc4 	movi	r2,-1
  2830a8:	003fdd06 	br	283020 <__swsetup_r+0x68>
  2830ac:	0284f8c0 	call	284f8c <__sinit>
  2830b0:	003fcd06 	br	282fe8 <__swsetup_r+0x30>
  2830b4:	0005883a 	mov	r2,zero
  2830b8:	003fd606 	br	283014 <__swsetup_r+0x5c>
  2830bc:	81400c17 	ldw	r5,48(r16)
  2830c0:	28000626 	beq	r5,zero,2830dc <__swsetup_r+0x124>
  2830c4:	80801004 	addi	r2,r16,64
  2830c8:	28800326 	beq	r5,r2,2830d8 <__swsetup_r+0x120>
  2830cc:	8809883a 	mov	r4,r17
  2830d0:	02851000 	call	285100 <_free_r>
  2830d4:	8100030b 	ldhu	r4,12(r16)
  2830d8:	80000c15 	stw	zero,48(r16)
  2830dc:	80c00417 	ldw	r3,16(r16)
  2830e0:	00bff6c4 	movi	r2,-37
  2830e4:	1108703a 	and	r4,r2,r4
  2830e8:	80000115 	stw	zero,4(r16)
  2830ec:	80c00015 	stw	r3,0(r16)
  2830f0:	003fd506 	br	283048 <__swsetup_r+0x90>
  2830f4:	00800244 	movi	r2,9
  2830f8:	88800015 	stw	r2,0(r17)
  2830fc:	20801014 	ori	r2,r4,64
  283100:	8080030d 	sth	r2,12(r16)
  283104:	00bfffc4 	movi	r2,-1
  283108:	003fc506 	br	283020 <__swsetup_r+0x68>

0028310c <quorem>:
  28310c:	defff704 	addi	sp,sp,-36
  283110:	dc800215 	stw	r18,8(sp)
  283114:	20800417 	ldw	r2,16(r4)
  283118:	2c800417 	ldw	r18,16(r5)
  28311c:	dfc00815 	stw	ra,32(sp)
  283120:	ddc00715 	stw	r23,28(sp)
  283124:	dd800615 	stw	r22,24(sp)
  283128:	dd400515 	stw	r21,20(sp)
  28312c:	dd000415 	stw	r20,16(sp)
  283130:	dcc00315 	stw	r19,12(sp)
  283134:	dc400115 	stw	r17,4(sp)
  283138:	dc000015 	stw	r16,0(sp)
  28313c:	14807116 	blt	r2,r18,283304 <quorem+0x1f8>
  283140:	94bfffc4 	addi	r18,r18,-1
  283144:	94ad883a 	add	r22,r18,r18
  283148:	b5ad883a 	add	r22,r22,r22
  28314c:	2c400504 	addi	r17,r5,20
  283150:	8da9883a 	add	r20,r17,r22
  283154:	25400504 	addi	r21,r4,20
  283158:	282f883a 	mov	r23,r5
  28315c:	adad883a 	add	r22,r21,r22
  283160:	a1400017 	ldw	r5,0(r20)
  283164:	2021883a 	mov	r16,r4
  283168:	b1000017 	ldw	r4,0(r22)
  28316c:	29400044 	addi	r5,r5,1
  283170:	0280a540 	call	280a54 <__udivsi3>
  283174:	1027883a 	mov	r19,r2
  283178:	10002c26 	beq	r2,zero,28322c <quorem+0x120>
  28317c:	a813883a 	mov	r9,r21
  283180:	880b883a 	mov	r5,r17
  283184:	0009883a 	mov	r4,zero
  283188:	000d883a 	mov	r6,zero
  28318c:	2a000017 	ldw	r8,0(r5)
  283190:	49c00017 	ldw	r7,0(r9)
  283194:	29400104 	addi	r5,r5,4
  283198:	40bfffcc 	andi	r2,r8,65535
  28319c:	14c5383a 	mul	r2,r2,r19
  2831a0:	4010d43a 	srli	r8,r8,16
  2831a4:	38ffffcc 	andi	r3,r7,65535
  2831a8:	1105883a 	add	r2,r2,r4
  2831ac:	1008d43a 	srli	r4,r2,16
  2831b0:	44d1383a 	mul	r8,r8,r19
  2831b4:	198d883a 	add	r6,r3,r6
  2831b8:	10ffffcc 	andi	r3,r2,65535
  2831bc:	30c7c83a 	sub	r3,r6,r3
  2831c0:	380ed43a 	srli	r7,r7,16
  2831c4:	4105883a 	add	r2,r8,r4
  2831c8:	180dd43a 	srai	r6,r3,16
  2831cc:	113fffcc 	andi	r4,r2,65535
  2831d0:	390fc83a 	sub	r7,r7,r4
  2831d4:	398d883a 	add	r6,r7,r6
  2831d8:	300e943a 	slli	r7,r6,16
  2831dc:	18ffffcc 	andi	r3,r3,65535
  2831e0:	1008d43a 	srli	r4,r2,16
  2831e4:	38ceb03a 	or	r7,r7,r3
  2831e8:	49c00015 	stw	r7,0(r9)
  2831ec:	300dd43a 	srai	r6,r6,16
  2831f0:	4a400104 	addi	r9,r9,4
  2831f4:	a17fe52e 	bgeu	r20,r5,28318c <quorem+0x80>
  2831f8:	b0800017 	ldw	r2,0(r22)
  2831fc:	10000b1e 	bne	r2,zero,28322c <quorem+0x120>
  283200:	b0bfff04 	addi	r2,r22,-4
  283204:	a880082e 	bgeu	r21,r2,283228 <quorem+0x11c>
  283208:	b0ffff17 	ldw	r3,-4(r22)
  28320c:	18000326 	beq	r3,zero,28321c <quorem+0x110>
  283210:	00000506 	br	283228 <quorem+0x11c>
  283214:	10c00017 	ldw	r3,0(r2)
  283218:	1800031e 	bne	r3,zero,283228 <quorem+0x11c>
  28321c:	10bfff04 	addi	r2,r2,-4
  283220:	94bfffc4 	addi	r18,r18,-1
  283224:	a8bffb36 	bltu	r21,r2,283214 <quorem+0x108>
  283228:	84800415 	stw	r18,16(r16)
  28322c:	b80b883a 	mov	r5,r23
  283230:	8009883a 	mov	r4,r16
  283234:	02872700 	call	287270 <__mcmp>
  283238:	10002616 	blt	r2,zero,2832d4 <quorem+0x1c8>
  28323c:	9cc00044 	addi	r19,r19,1
  283240:	a805883a 	mov	r2,r21
  283244:	000b883a 	mov	r5,zero
  283248:	11000017 	ldw	r4,0(r2)
  28324c:	89800017 	ldw	r6,0(r17)
  283250:	10800104 	addi	r2,r2,4
  283254:	20ffffcc 	andi	r3,r4,65535
  283258:	194b883a 	add	r5,r3,r5
  28325c:	30ffffcc 	andi	r3,r6,65535
  283260:	28c7c83a 	sub	r3,r5,r3
  283264:	300cd43a 	srli	r6,r6,16
  283268:	2008d43a 	srli	r4,r4,16
  28326c:	180bd43a 	srai	r5,r3,16
  283270:	18ffffcc 	andi	r3,r3,65535
  283274:	2189c83a 	sub	r4,r4,r6
  283278:	2149883a 	add	r4,r4,r5
  28327c:	200c943a 	slli	r6,r4,16
  283280:	8c400104 	addi	r17,r17,4
  283284:	200bd43a 	srai	r5,r4,16
  283288:	30c6b03a 	or	r3,r6,r3
  28328c:	10ffff15 	stw	r3,-4(r2)
  283290:	a47fed2e 	bgeu	r20,r17,283248 <quorem+0x13c>
  283294:	9485883a 	add	r2,r18,r18
  283298:	1085883a 	add	r2,r2,r2
  28329c:	a887883a 	add	r3,r21,r2
  2832a0:	18800017 	ldw	r2,0(r3)
  2832a4:	10000b1e 	bne	r2,zero,2832d4 <quorem+0x1c8>
  2832a8:	18bfff04 	addi	r2,r3,-4
  2832ac:	a880082e 	bgeu	r21,r2,2832d0 <quorem+0x1c4>
  2832b0:	18ffff17 	ldw	r3,-4(r3)
  2832b4:	18000326 	beq	r3,zero,2832c4 <quorem+0x1b8>
  2832b8:	00000506 	br	2832d0 <quorem+0x1c4>
  2832bc:	10c00017 	ldw	r3,0(r2)
  2832c0:	1800031e 	bne	r3,zero,2832d0 <quorem+0x1c4>
  2832c4:	10bfff04 	addi	r2,r2,-4
  2832c8:	94bfffc4 	addi	r18,r18,-1
  2832cc:	a8bffb36 	bltu	r21,r2,2832bc <quorem+0x1b0>
  2832d0:	84800415 	stw	r18,16(r16)
  2832d4:	9805883a 	mov	r2,r19
  2832d8:	dfc00817 	ldw	ra,32(sp)
  2832dc:	ddc00717 	ldw	r23,28(sp)
  2832e0:	dd800617 	ldw	r22,24(sp)
  2832e4:	dd400517 	ldw	r21,20(sp)
  2832e8:	dd000417 	ldw	r20,16(sp)
  2832ec:	dcc00317 	ldw	r19,12(sp)
  2832f0:	dc800217 	ldw	r18,8(sp)
  2832f4:	dc400117 	ldw	r17,4(sp)
  2832f8:	dc000017 	ldw	r16,0(sp)
  2832fc:	dec00904 	addi	sp,sp,36
  283300:	f800283a 	ret
  283304:	0005883a 	mov	r2,zero
  283308:	003ff306 	br	2832d8 <quorem+0x1cc>

0028330c <_dtoa_r>:
  28330c:	20801017 	ldw	r2,64(r4)
  283310:	deffde04 	addi	sp,sp,-136
  283314:	df002015 	stw	fp,128(sp)
  283318:	dcc01b15 	stw	r19,108(sp)
  28331c:	dc801a15 	stw	r18,104(sp)
  283320:	dc401915 	stw	r17,100(sp)
  283324:	dc001815 	stw	r16,96(sp)
  283328:	dfc02115 	stw	ra,132(sp)
  28332c:	ddc01f15 	stw	r23,124(sp)
  283330:	dd801e15 	stw	r22,120(sp)
  283334:	dd401d15 	stw	r21,116(sp)
  283338:	dd001c15 	stw	r20,112(sp)
  28333c:	d9c00315 	stw	r7,12(sp)
  283340:	2039883a 	mov	fp,r4
  283344:	3023883a 	mov	r17,r6
  283348:	2825883a 	mov	r18,r5
  28334c:	dc002417 	ldw	r16,144(sp)
  283350:	3027883a 	mov	r19,r6
  283354:	10000826 	beq	r2,zero,283378 <_dtoa_r+0x6c>
  283358:	21801117 	ldw	r6,68(r4)
  28335c:	00c00044 	movi	r3,1
  283360:	100b883a 	mov	r5,r2
  283364:	1986983a 	sll	r3,r3,r6
  283368:	11800115 	stw	r6,4(r2)
  28336c:	10c00215 	stw	r3,8(r2)
  283370:	0286a500 	call	286a50 <_Bfree>
  283374:	e0001015 	stw	zero,64(fp)
  283378:	88002e16 	blt	r17,zero,283434 <_dtoa_r+0x128>
  28337c:	80000015 	stw	zero,0(r16)
  283380:	889ffc2c 	andhi	r2,r17,32752
  283384:	00dffc34 	movhi	r3,32752
  283388:	10c01c26 	beq	r2,r3,2833fc <_dtoa_r+0xf0>
  28338c:	000d883a 	mov	r6,zero
  283390:	000f883a 	mov	r7,zero
  283394:	9009883a 	mov	r4,r18
  283398:	980b883a 	mov	r5,r19
  28339c:	028bda80 	call	28bda8 <__eqdf2>
  2833a0:	10002b1e 	bne	r2,zero,283450 <_dtoa_r+0x144>
  2833a4:	d9c02317 	ldw	r7,140(sp)
  2833a8:	00800044 	movi	r2,1
  2833ac:	38800015 	stw	r2,0(r7)
  2833b0:	d8802517 	ldw	r2,148(sp)
  2833b4:	10019e26 	beq	r2,zero,283a30 <_dtoa_r+0x724>
  2833b8:	d8c02517 	ldw	r3,148(sp)
  2833bc:	00800a74 	movhi	r2,41
  2833c0:	10860c44 	addi	r2,r2,6193
  2833c4:	18800015 	stw	r2,0(r3)
  2833c8:	10bfffc4 	addi	r2,r2,-1
  2833cc:	dfc02117 	ldw	ra,132(sp)
  2833d0:	df002017 	ldw	fp,128(sp)
  2833d4:	ddc01f17 	ldw	r23,124(sp)
  2833d8:	dd801e17 	ldw	r22,120(sp)
  2833dc:	dd401d17 	ldw	r21,116(sp)
  2833e0:	dd001c17 	ldw	r20,112(sp)
  2833e4:	dcc01b17 	ldw	r19,108(sp)
  2833e8:	dc801a17 	ldw	r18,104(sp)
  2833ec:	dc401917 	ldw	r17,100(sp)
  2833f0:	dc001817 	ldw	r16,96(sp)
  2833f4:	dec02204 	addi	sp,sp,136
  2833f8:	f800283a 	ret
  2833fc:	d8c02317 	ldw	r3,140(sp)
  283400:	0089c3c4 	movi	r2,9999
  283404:	18800015 	stw	r2,0(r3)
  283408:	90017726 	beq	r18,zero,2839e8 <_dtoa_r+0x6dc>
  28340c:	00800a74 	movhi	r2,41
  283410:	10861804 	addi	r2,r2,6240
  283414:	d9002517 	ldw	r4,148(sp)
  283418:	203fec26 	beq	r4,zero,2833cc <_dtoa_r+0xc0>
  28341c:	10c000c7 	ldb	r3,3(r2)
  283420:	1801781e 	bne	r3,zero,283a04 <_dtoa_r+0x6f8>
  283424:	10c000c4 	addi	r3,r2,3
  283428:	d9802517 	ldw	r6,148(sp)
  28342c:	30c00015 	stw	r3,0(r6)
  283430:	003fe606 	br	2833cc <_dtoa_r+0xc0>
  283434:	04e00034 	movhi	r19,32768
  283438:	9cffffc4 	addi	r19,r19,-1
  28343c:	00800044 	movi	r2,1
  283440:	8ce6703a 	and	r19,r17,r19
  283444:	80800015 	stw	r2,0(r16)
  283448:	9823883a 	mov	r17,r19
  28344c:	003fcc06 	br	283380 <_dtoa_r+0x74>
  283450:	d8800204 	addi	r2,sp,8
  283454:	d8800015 	stw	r2,0(sp)
  283458:	d9c00104 	addi	r7,sp,4
  28345c:	900b883a 	mov	r5,r18
  283460:	980d883a 	mov	r6,r19
  283464:	e009883a 	mov	r4,fp
  283468:	8820d53a 	srli	r16,r17,20
  28346c:	028763c0 	call	28763c <__d2b>
  283470:	d8800915 	stw	r2,36(sp)
  283474:	8001651e 	bne	r16,zero,283a0c <_dtoa_r+0x700>
  283478:	dd800217 	ldw	r22,8(sp)
  28347c:	dc000117 	ldw	r16,4(sp)
  283480:	00800804 	movi	r2,32
  283484:	b421883a 	add	r16,r22,r16
  283488:	80c10c84 	addi	r3,r16,1074
  28348c:	10c2d10e 	bge	r2,r3,283fd4 <_dtoa_r+0xcc8>
  283490:	00801004 	movi	r2,64
  283494:	81010484 	addi	r4,r16,1042
  283498:	10c7c83a 	sub	r3,r2,r3
  28349c:	9108d83a 	srl	r4,r18,r4
  2834a0:	88e2983a 	sll	r17,r17,r3
  2834a4:	2448b03a 	or	r4,r4,r17
  2834a8:	028d1700 	call	28d170 <__floatunsidf>
  2834ac:	017f8434 	movhi	r5,65040
  2834b0:	01800044 	movi	r6,1
  2834b4:	1009883a 	mov	r4,r2
  2834b8:	194b883a 	add	r5,r3,r5
  2834bc:	843fffc4 	addi	r16,r16,-1
  2834c0:	d9801115 	stw	r6,68(sp)
  2834c4:	000d883a 	mov	r6,zero
  2834c8:	01cffe34 	movhi	r7,16376
  2834cc:	028c7180 	call	28c718 <__subdf3>
  2834d0:	0198dbf4 	movhi	r6,25455
  2834d4:	01cff4f4 	movhi	r7,16339
  2834d8:	3190d844 	addi	r6,r6,17249
  2834dc:	39e1e9c4 	addi	r7,r7,-30809
  2834e0:	1009883a 	mov	r4,r2
  2834e4:	180b883a 	mov	r5,r3
  2834e8:	028c0000 	call	28c000 <__muldf3>
  2834ec:	01a2d874 	movhi	r6,35681
  2834f0:	01cff1f4 	movhi	r7,16327
  2834f4:	31b22cc4 	addi	r6,r6,-14157
  2834f8:	39e28a04 	addi	r7,r7,-30168
  2834fc:	180b883a 	mov	r5,r3
  283500:	1009883a 	mov	r4,r2
  283504:	028ac140 	call	28ac14 <__adddf3>
  283508:	8009883a 	mov	r4,r16
  28350c:	1029883a 	mov	r20,r2
  283510:	1823883a 	mov	r17,r3
  283514:	028d0940 	call	28d094 <__floatsidf>
  283518:	019427f4 	movhi	r6,20639
  28351c:	01cff4f4 	movhi	r7,16339
  283520:	319e7ec4 	addi	r6,r6,31227
  283524:	39d104c4 	addi	r7,r7,17427
  283528:	1009883a 	mov	r4,r2
  28352c:	180b883a 	mov	r5,r3
  283530:	028c0000 	call	28c000 <__muldf3>
  283534:	100d883a 	mov	r6,r2
  283538:	180f883a 	mov	r7,r3
  28353c:	a009883a 	mov	r4,r20
  283540:	880b883a 	mov	r5,r17
  283544:	028ac140 	call	28ac14 <__adddf3>
  283548:	1009883a 	mov	r4,r2
  28354c:	180b883a 	mov	r5,r3
  283550:	1029883a 	mov	r20,r2
  283554:	1823883a 	mov	r17,r3
  283558:	028d0140 	call	28d014 <__fixdfsi>
  28355c:	000d883a 	mov	r6,zero
  283560:	000f883a 	mov	r7,zero
  283564:	a009883a 	mov	r4,r20
  283568:	880b883a 	mov	r5,r17
  28356c:	d8800515 	stw	r2,20(sp)
  283570:	028bf0c0 	call	28bf0c <__ledf2>
  283574:	10028716 	blt	r2,zero,283f94 <_dtoa_r+0xc88>
  283578:	d8c00517 	ldw	r3,20(sp)
  28357c:	00800584 	movi	r2,22
  283580:	10c27536 	bltu	r2,r3,283f58 <_dtoa_r+0xc4c>
  283584:	180490fa 	slli	r2,r3,3
  283588:	00c00a74 	movhi	r3,41
  28358c:	18c63404 	addi	r3,r3,6352
  283590:	1885883a 	add	r2,r3,r2
  283594:	11000017 	ldw	r4,0(r2)
  283598:	11400117 	ldw	r5,4(r2)
  28359c:	900d883a 	mov	r6,r18
  2835a0:	980f883a 	mov	r7,r19
  2835a4:	028be300 	call	28be30 <__gedf2>
  2835a8:	00828d0e 	bge	zero,r2,283fe0 <_dtoa_r+0xcd4>
  2835ac:	d9000517 	ldw	r4,20(sp)
  2835b0:	d8000e15 	stw	zero,56(sp)
  2835b4:	213fffc4 	addi	r4,r4,-1
  2835b8:	d9000515 	stw	r4,20(sp)
  2835bc:	b42dc83a 	sub	r22,r22,r16
  2835c0:	b5bfffc4 	addi	r22,r22,-1
  2835c4:	b0026f16 	blt	r22,zero,283f84 <_dtoa_r+0xc78>
  2835c8:	d8000815 	stw	zero,32(sp)
  2835cc:	d9c00517 	ldw	r7,20(sp)
  2835d0:	38026416 	blt	r7,zero,283f64 <_dtoa_r+0xc58>
  2835d4:	b1ed883a 	add	r22,r22,r7
  2835d8:	d9c00d15 	stw	r7,52(sp)
  2835dc:	d8000a15 	stw	zero,40(sp)
  2835e0:	d9800317 	ldw	r6,12(sp)
  2835e4:	00800244 	movi	r2,9
  2835e8:	11811436 	bltu	r2,r6,283a3c <_dtoa_r+0x730>
  2835ec:	00800144 	movi	r2,5
  2835f0:	1184e10e 	bge	r2,r6,284978 <_dtoa_r+0x166c>
  2835f4:	31bfff04 	addi	r6,r6,-4
  2835f8:	d9800315 	stw	r6,12(sp)
  2835fc:	0023883a 	mov	r17,zero
  283600:	d9800317 	ldw	r6,12(sp)
  283604:	008000c4 	movi	r2,3
  283608:	30836726 	beq	r6,r2,2843a8 <_dtoa_r+0x109c>
  28360c:	1183410e 	bge	r2,r6,284314 <_dtoa_r+0x1008>
  283610:	d9c00317 	ldw	r7,12(sp)
  283614:	00800104 	movi	r2,4
  283618:	38827c26 	beq	r7,r2,28400c <_dtoa_r+0xd00>
  28361c:	00800144 	movi	r2,5
  283620:	3884c41e 	bne	r7,r2,284934 <_dtoa_r+0x1628>
  283624:	00800044 	movi	r2,1
  283628:	d8800b15 	stw	r2,44(sp)
  28362c:	d8c00517 	ldw	r3,20(sp)
  283630:	d9002217 	ldw	r4,136(sp)
  283634:	1907883a 	add	r3,r3,r4
  283638:	19800044 	addi	r6,r3,1
  28363c:	d8c00c15 	stw	r3,48(sp)
  283640:	d9800615 	stw	r6,24(sp)
  283644:	0183a40e 	bge	zero,r6,2844d8 <_dtoa_r+0x11cc>
  283648:	d9800617 	ldw	r6,24(sp)
  28364c:	3021883a 	mov	r16,r6
  283650:	e0001115 	stw	zero,68(fp)
  283654:	008005c4 	movi	r2,23
  283658:	1184c92e 	bgeu	r2,r6,284980 <_dtoa_r+0x1674>
  28365c:	00c00044 	movi	r3,1
  283660:	00800104 	movi	r2,4
  283664:	1085883a 	add	r2,r2,r2
  283668:	11000504 	addi	r4,r2,20
  28366c:	180b883a 	mov	r5,r3
  283670:	18c00044 	addi	r3,r3,1
  283674:	313ffb2e 	bgeu	r6,r4,283664 <_dtoa_r+0x358>
  283678:	e1401115 	stw	r5,68(fp)
  28367c:	e009883a 	mov	r4,fp
  283680:	02869a80 	call	2869a8 <_Balloc>
  283684:	d8800715 	stw	r2,28(sp)
  283688:	e0801015 	stw	r2,64(fp)
  28368c:	00800384 	movi	r2,14
  283690:	1400f736 	bltu	r2,r16,283a70 <_dtoa_r+0x764>
  283694:	8800f626 	beq	r17,zero,283a70 <_dtoa_r+0x764>
  283698:	d9c00517 	ldw	r7,20(sp)
  28369c:	01c39a0e 	bge	zero,r7,284508 <_dtoa_r+0x11fc>
  2836a0:	388003cc 	andi	r2,r7,15
  2836a4:	100490fa 	slli	r2,r2,3
  2836a8:	382bd13a 	srai	r21,r7,4
  2836ac:	00c00a74 	movhi	r3,41
  2836b0:	18c63404 	addi	r3,r3,6352
  2836b4:	1885883a 	add	r2,r3,r2
  2836b8:	a8c0040c 	andi	r3,r21,16
  2836bc:	12400017 	ldw	r9,0(r2)
  2836c0:	12000117 	ldw	r8,4(r2)
  2836c4:	18037926 	beq	r3,zero,2844ac <_dtoa_r+0x11a0>
  2836c8:	00800a74 	movhi	r2,41
  2836cc:	10862a04 	addi	r2,r2,6312
  2836d0:	11800817 	ldw	r6,32(r2)
  2836d4:	11c00917 	ldw	r7,36(r2)
  2836d8:	9009883a 	mov	r4,r18
  2836dc:	980b883a 	mov	r5,r19
  2836e0:	da001715 	stw	r8,92(sp)
  2836e4:	da401615 	stw	r9,88(sp)
  2836e8:	028b4c00 	call	28b4c0 <__divdf3>
  2836ec:	da001717 	ldw	r8,92(sp)
  2836f0:	da401617 	ldw	r9,88(sp)
  2836f4:	ad4003cc 	andi	r21,r21,15
  2836f8:	040000c4 	movi	r16,3
  2836fc:	1023883a 	mov	r17,r2
  283700:	1829883a 	mov	r20,r3
  283704:	a8001126 	beq	r21,zero,28374c <_dtoa_r+0x440>
  283708:	05c00a74 	movhi	r23,41
  28370c:	bdc62a04 	addi	r23,r23,6312
  283710:	4805883a 	mov	r2,r9
  283714:	4007883a 	mov	r3,r8
  283718:	a980004c 	andi	r6,r21,1
  28371c:	1009883a 	mov	r4,r2
  283720:	a82bd07a 	srai	r21,r21,1
  283724:	180b883a 	mov	r5,r3
  283728:	30000426 	beq	r6,zero,28373c <_dtoa_r+0x430>
  28372c:	b9800017 	ldw	r6,0(r23)
  283730:	b9c00117 	ldw	r7,4(r23)
  283734:	84000044 	addi	r16,r16,1
  283738:	028c0000 	call	28c000 <__muldf3>
  28373c:	bdc00204 	addi	r23,r23,8
  283740:	a83ff51e 	bne	r21,zero,283718 <_dtoa_r+0x40c>
  283744:	1013883a 	mov	r9,r2
  283748:	1811883a 	mov	r8,r3
  28374c:	480d883a 	mov	r6,r9
  283750:	400f883a 	mov	r7,r8
  283754:	8809883a 	mov	r4,r17
  283758:	a00b883a 	mov	r5,r20
  28375c:	028b4c00 	call	28b4c0 <__divdf3>
  283760:	d8800f15 	stw	r2,60(sp)
  283764:	d8c01015 	stw	r3,64(sp)
  283768:	d8c00e17 	ldw	r3,56(sp)
  28376c:	18000626 	beq	r3,zero,283788 <_dtoa_r+0x47c>
  283770:	d9000f17 	ldw	r4,60(sp)
  283774:	d9401017 	ldw	r5,64(sp)
  283778:	000d883a 	mov	r6,zero
  28377c:	01cffc34 	movhi	r7,16368
  283780:	028bf0c0 	call	28bf0c <__ledf2>
  283784:	10040b16 	blt	r2,zero,2847b4 <_dtoa_r+0x14a8>
  283788:	8009883a 	mov	r4,r16
  28378c:	028d0940 	call	28d094 <__floatsidf>
  283790:	d9800f17 	ldw	r6,60(sp)
  283794:	d9c01017 	ldw	r7,64(sp)
  283798:	1009883a 	mov	r4,r2
  28379c:	180b883a 	mov	r5,r3
  2837a0:	028c0000 	call	28c000 <__muldf3>
  2837a4:	000d883a 	mov	r6,zero
  2837a8:	01d00734 	movhi	r7,16412
  2837ac:	1009883a 	mov	r4,r2
  2837b0:	180b883a 	mov	r5,r3
  2837b4:	028ac140 	call	28ac14 <__adddf3>
  2837b8:	1021883a 	mov	r16,r2
  2837bc:	d8800617 	ldw	r2,24(sp)
  2837c0:	047f3034 	movhi	r17,64704
  2837c4:	1c63883a 	add	r17,r3,r17
  2837c8:	10031826 	beq	r2,zero,28442c <_dtoa_r+0x1120>
  2837cc:	d8c00517 	ldw	r3,20(sp)
  2837d0:	db000617 	ldw	r12,24(sp)
  2837d4:	d8c01315 	stw	r3,76(sp)
  2837d8:	d9000b17 	ldw	r4,44(sp)
  2837dc:	20038f26 	beq	r4,zero,28461c <_dtoa_r+0x1310>
  2837e0:	60bfffc4 	addi	r2,r12,-1
  2837e4:	100490fa 	slli	r2,r2,3
  2837e8:	00c00a74 	movhi	r3,41
  2837ec:	18c63404 	addi	r3,r3,6352
  2837f0:	1885883a 	add	r2,r3,r2
  2837f4:	11800017 	ldw	r6,0(r2)
  2837f8:	11c00117 	ldw	r7,4(r2)
  2837fc:	d8800717 	ldw	r2,28(sp)
  283800:	0009883a 	mov	r4,zero
  283804:	014ff834 	movhi	r5,16352
  283808:	db001615 	stw	r12,88(sp)
  28380c:	15c00044 	addi	r23,r2,1
  283810:	028b4c00 	call	28b4c0 <__divdf3>
  283814:	800d883a 	mov	r6,r16
  283818:	880f883a 	mov	r7,r17
  28381c:	1009883a 	mov	r4,r2
  283820:	180b883a 	mov	r5,r3
  283824:	028c7180 	call	28c718 <__subdf3>
  283828:	d9401017 	ldw	r5,64(sp)
  28382c:	d9000f17 	ldw	r4,60(sp)
  283830:	102b883a 	mov	r21,r2
  283834:	d8c01215 	stw	r3,72(sp)
  283838:	028d0140 	call	28d014 <__fixdfsi>
  28383c:	1009883a 	mov	r4,r2
  283840:	1029883a 	mov	r20,r2
  283844:	028d0940 	call	28d094 <__floatsidf>
  283848:	d9000f17 	ldw	r4,60(sp)
  28384c:	d9401017 	ldw	r5,64(sp)
  283850:	100d883a 	mov	r6,r2
  283854:	180f883a 	mov	r7,r3
  283858:	028c7180 	call	28c718 <__subdf3>
  28385c:	1823883a 	mov	r17,r3
  283860:	d8c00717 	ldw	r3,28(sp)
  283864:	d9401217 	ldw	r5,72(sp)
  283868:	a2000c04 	addi	r8,r20,48
  28386c:	1021883a 	mov	r16,r2
  283870:	1a000005 	stb	r8,0(r3)
  283874:	800d883a 	mov	r6,r16
  283878:	880f883a 	mov	r7,r17
  28387c:	a809883a 	mov	r4,r21
  283880:	4029883a 	mov	r20,r8
  283884:	028be300 	call	28be30 <__gedf2>
  283888:	00841d16 	blt	zero,r2,284900 <_dtoa_r+0x15f4>
  28388c:	800d883a 	mov	r6,r16
  283890:	880f883a 	mov	r7,r17
  283894:	0009883a 	mov	r4,zero
  283898:	014ffc34 	movhi	r5,16368
  28389c:	028c7180 	call	28c718 <__subdf3>
  2838a0:	d9401217 	ldw	r5,72(sp)
  2838a4:	100d883a 	mov	r6,r2
  2838a8:	180f883a 	mov	r7,r3
  2838ac:	a809883a 	mov	r4,r21
  2838b0:	028be300 	call	28be30 <__gedf2>
  2838b4:	db001617 	ldw	r12,88(sp)
  2838b8:	00840e16 	blt	zero,r2,2848f4 <_dtoa_r+0x15e8>
  2838bc:	00800044 	movi	r2,1
  2838c0:	13006b0e 	bge	r2,r12,283a70 <_dtoa_r+0x764>
  2838c4:	d9000717 	ldw	r4,28(sp)
  2838c8:	dd800f15 	stw	r22,60(sp)
  2838cc:	dcc01015 	stw	r19,64(sp)
  2838d0:	2319883a 	add	r12,r4,r12
  2838d4:	dcc01217 	ldw	r19,72(sp)
  2838d8:	602d883a 	mov	r22,r12
  2838dc:	dc801215 	stw	r18,72(sp)
  2838e0:	b825883a 	mov	r18,r23
  2838e4:	00000906 	br	28390c <_dtoa_r+0x600>
  2838e8:	028c7180 	call	28c718 <__subdf3>
  2838ec:	a80d883a 	mov	r6,r21
  2838f0:	980f883a 	mov	r7,r19
  2838f4:	1009883a 	mov	r4,r2
  2838f8:	180b883a 	mov	r5,r3
  2838fc:	028bf0c0 	call	28bf0c <__ledf2>
  283900:	1003e816 	blt	r2,zero,2848a4 <_dtoa_r+0x1598>
  283904:	b825883a 	mov	r18,r23
  283908:	bd83e926 	beq	r23,r22,2848b0 <_dtoa_r+0x15a4>
  28390c:	a809883a 	mov	r4,r21
  283910:	980b883a 	mov	r5,r19
  283914:	000d883a 	mov	r6,zero
  283918:	01d00934 	movhi	r7,16420
  28391c:	028c0000 	call	28c000 <__muldf3>
  283920:	000d883a 	mov	r6,zero
  283924:	01d00934 	movhi	r7,16420
  283928:	8009883a 	mov	r4,r16
  28392c:	880b883a 	mov	r5,r17
  283930:	102b883a 	mov	r21,r2
  283934:	1827883a 	mov	r19,r3
  283938:	028c0000 	call	28c000 <__muldf3>
  28393c:	180b883a 	mov	r5,r3
  283940:	1009883a 	mov	r4,r2
  283944:	1821883a 	mov	r16,r3
  283948:	1023883a 	mov	r17,r2
  28394c:	028d0140 	call	28d014 <__fixdfsi>
  283950:	1009883a 	mov	r4,r2
  283954:	1029883a 	mov	r20,r2
  283958:	028d0940 	call	28d094 <__floatsidf>
  28395c:	8809883a 	mov	r4,r17
  283960:	800b883a 	mov	r5,r16
  283964:	100d883a 	mov	r6,r2
  283968:	180f883a 	mov	r7,r3
  28396c:	028c7180 	call	28c718 <__subdf3>
  283970:	a5000c04 	addi	r20,r20,48
  283974:	a80d883a 	mov	r6,r21
  283978:	980f883a 	mov	r7,r19
  28397c:	1009883a 	mov	r4,r2
  283980:	180b883a 	mov	r5,r3
  283984:	95000005 	stb	r20,0(r18)
  283988:	1021883a 	mov	r16,r2
  28398c:	1823883a 	mov	r17,r3
  283990:	028bf0c0 	call	28bf0c <__ledf2>
  283994:	bdc00044 	addi	r23,r23,1
  283998:	800d883a 	mov	r6,r16
  28399c:	880f883a 	mov	r7,r17
  2839a0:	0009883a 	mov	r4,zero
  2839a4:	014ffc34 	movhi	r5,16368
  2839a8:	103fcf0e 	bge	r2,zero,2838e8 <_dtoa_r+0x5dc>
  2839ac:	d8c01317 	ldw	r3,76(sp)
  2839b0:	d8c00515 	stw	r3,20(sp)
  2839b4:	d9400917 	ldw	r5,36(sp)
  2839b8:	e009883a 	mov	r4,fp
  2839bc:	0286a500 	call	286a50 <_Bfree>
  2839c0:	d9000517 	ldw	r4,20(sp)
  2839c4:	d9802317 	ldw	r6,140(sp)
  2839c8:	d9c02517 	ldw	r7,148(sp)
  2839cc:	b8000005 	stb	zero,0(r23)
  2839d0:	20800044 	addi	r2,r4,1
  2839d4:	30800015 	stw	r2,0(r6)
  2839d8:	3802aa26 	beq	r7,zero,284484 <_dtoa_r+0x1178>
  2839dc:	3dc00015 	stw	r23,0(r7)
  2839e0:	d8800717 	ldw	r2,28(sp)
  2839e4:	003e7906 	br	2833cc <_dtoa_r+0xc0>
  2839e8:	00800434 	movhi	r2,16
  2839ec:	10bfffc4 	addi	r2,r2,-1
  2839f0:	88a2703a 	and	r17,r17,r2
  2839f4:	883e851e 	bne	r17,zero,28340c <_dtoa_r+0x100>
  2839f8:	00800a74 	movhi	r2,41
  2839fc:	10861504 	addi	r2,r2,6228
  283a00:	003e8406 	br	283414 <_dtoa_r+0x108>
  283a04:	10c00204 	addi	r3,r2,8
  283a08:	003e8706 	br	283428 <_dtoa_r+0x11c>
  283a0c:	01400434 	movhi	r5,16
  283a10:	297fffc4 	addi	r5,r5,-1
  283a14:	994a703a 	and	r5,r19,r5
  283a18:	9009883a 	mov	r4,r18
  283a1c:	843f0044 	addi	r16,r16,-1023
  283a20:	294ffc34 	orhi	r5,r5,16368
  283a24:	dd800217 	ldw	r22,8(sp)
  283a28:	d8001115 	stw	zero,68(sp)
  283a2c:	003ea506 	br	2834c4 <_dtoa_r+0x1b8>
  283a30:	00800a74 	movhi	r2,41
  283a34:	10860c04 	addi	r2,r2,6192
  283a38:	003e6406 	br	2833cc <_dtoa_r+0xc0>
  283a3c:	e0001115 	stw	zero,68(fp)
  283a40:	000b883a 	mov	r5,zero
  283a44:	e009883a 	mov	r4,fp
  283a48:	02869a80 	call	2869a8 <_Balloc>
  283a4c:	01bfffc4 	movi	r6,-1
  283a50:	01c00044 	movi	r7,1
  283a54:	d8800715 	stw	r2,28(sp)
  283a58:	d9800c15 	stw	r6,48(sp)
  283a5c:	e0801015 	stw	r2,64(fp)
  283a60:	d8000315 	stw	zero,12(sp)
  283a64:	d9c00b15 	stw	r7,44(sp)
  283a68:	d9800615 	stw	r6,24(sp)
  283a6c:	d8002215 	stw	zero,136(sp)
  283a70:	d8800117 	ldw	r2,4(sp)
  283a74:	10008916 	blt	r2,zero,283c9c <_dtoa_r+0x990>
  283a78:	d9000517 	ldw	r4,20(sp)
  283a7c:	00c00384 	movi	r3,14
  283a80:	19008616 	blt	r3,r4,283c9c <_dtoa_r+0x990>
  283a84:	200490fa 	slli	r2,r4,3
  283a88:	00c00a74 	movhi	r3,41
  283a8c:	d9802217 	ldw	r6,136(sp)
  283a90:	18c63404 	addi	r3,r3,6352
  283a94:	1885883a 	add	r2,r3,r2
  283a98:	14000017 	ldw	r16,0(r2)
  283a9c:	14400117 	ldw	r17,4(r2)
  283aa0:	30016316 	blt	r6,zero,284030 <_dtoa_r+0xd24>
  283aa4:	800d883a 	mov	r6,r16
  283aa8:	880f883a 	mov	r7,r17
  283aac:	9009883a 	mov	r4,r18
  283ab0:	980b883a 	mov	r5,r19
  283ab4:	028b4c00 	call	28b4c0 <__divdf3>
  283ab8:	180b883a 	mov	r5,r3
  283abc:	1009883a 	mov	r4,r2
  283ac0:	028d0140 	call	28d014 <__fixdfsi>
  283ac4:	1009883a 	mov	r4,r2
  283ac8:	102b883a 	mov	r21,r2
  283acc:	028d0940 	call	28d094 <__floatsidf>
  283ad0:	800d883a 	mov	r6,r16
  283ad4:	880f883a 	mov	r7,r17
  283ad8:	1009883a 	mov	r4,r2
  283adc:	180b883a 	mov	r5,r3
  283ae0:	028c0000 	call	28c000 <__muldf3>
  283ae4:	100d883a 	mov	r6,r2
  283ae8:	180f883a 	mov	r7,r3
  283aec:	9009883a 	mov	r4,r18
  283af0:	980b883a 	mov	r5,r19
  283af4:	028c7180 	call	28c718 <__subdf3>
  283af8:	d9c00717 	ldw	r7,28(sp)
  283afc:	1009883a 	mov	r4,r2
  283b00:	a8800c04 	addi	r2,r21,48
  283b04:	38800005 	stb	r2,0(r7)
  283b08:	3dc00044 	addi	r23,r7,1
  283b0c:	d9c00617 	ldw	r7,24(sp)
  283b10:	01800044 	movi	r6,1
  283b14:	180b883a 	mov	r5,r3
  283b18:	2005883a 	mov	r2,r4
  283b1c:	39803826 	beq	r7,r6,283c00 <_dtoa_r+0x8f4>
  283b20:	000d883a 	mov	r6,zero
  283b24:	01d00934 	movhi	r7,16420
  283b28:	028c0000 	call	28c000 <__muldf3>
  283b2c:	000d883a 	mov	r6,zero
  283b30:	000f883a 	mov	r7,zero
  283b34:	1009883a 	mov	r4,r2
  283b38:	180b883a 	mov	r5,r3
  283b3c:	1025883a 	mov	r18,r2
  283b40:	1827883a 	mov	r19,r3
  283b44:	028bda80 	call	28bda8 <__eqdf2>
  283b48:	103f9a26 	beq	r2,zero,2839b4 <_dtoa_r+0x6a8>
  283b4c:	d9c00617 	ldw	r7,24(sp)
  283b50:	d8c00717 	ldw	r3,28(sp)
  283b54:	b829883a 	mov	r20,r23
  283b58:	38bfffc4 	addi	r2,r7,-1
  283b5c:	18ad883a 	add	r22,r3,r2
  283b60:	00000a06 	br	283b8c <_dtoa_r+0x880>
  283b64:	028c0000 	call	28c000 <__muldf3>
  283b68:	000d883a 	mov	r6,zero
  283b6c:	000f883a 	mov	r7,zero
  283b70:	1009883a 	mov	r4,r2
  283b74:	180b883a 	mov	r5,r3
  283b78:	1025883a 	mov	r18,r2
  283b7c:	1827883a 	mov	r19,r3
  283b80:	b829883a 	mov	r20,r23
  283b84:	028bda80 	call	28bda8 <__eqdf2>
  283b88:	103f8a26 	beq	r2,zero,2839b4 <_dtoa_r+0x6a8>
  283b8c:	800d883a 	mov	r6,r16
  283b90:	880f883a 	mov	r7,r17
  283b94:	9009883a 	mov	r4,r18
  283b98:	980b883a 	mov	r5,r19
  283b9c:	028b4c00 	call	28b4c0 <__divdf3>
  283ba0:	180b883a 	mov	r5,r3
  283ba4:	1009883a 	mov	r4,r2
  283ba8:	028d0140 	call	28d014 <__fixdfsi>
  283bac:	1009883a 	mov	r4,r2
  283bb0:	102b883a 	mov	r21,r2
  283bb4:	028d0940 	call	28d094 <__floatsidf>
  283bb8:	800d883a 	mov	r6,r16
  283bbc:	880f883a 	mov	r7,r17
  283bc0:	1009883a 	mov	r4,r2
  283bc4:	180b883a 	mov	r5,r3
  283bc8:	028c0000 	call	28c000 <__muldf3>
  283bcc:	100d883a 	mov	r6,r2
  283bd0:	180f883a 	mov	r7,r3
  283bd4:	9009883a 	mov	r4,r18
  283bd8:	980b883a 	mov	r5,r19
  283bdc:	028c7180 	call	28c718 <__subdf3>
  283be0:	aa000c04 	addi	r8,r21,48
  283be4:	a2000005 	stb	r8,0(r20)
  283be8:	000d883a 	mov	r6,zero
  283bec:	01d00934 	movhi	r7,16420
  283bf0:	1009883a 	mov	r4,r2
  283bf4:	180b883a 	mov	r5,r3
  283bf8:	a5c00044 	addi	r23,r20,1
  283bfc:	b53fd91e 	bne	r22,r20,283b64 <_dtoa_r+0x858>
  283c00:	100d883a 	mov	r6,r2
  283c04:	180f883a 	mov	r7,r3
  283c08:	1009883a 	mov	r4,r2
  283c0c:	180b883a 	mov	r5,r3
  283c10:	028ac140 	call	28ac14 <__adddf3>
  283c14:	100d883a 	mov	r6,r2
  283c18:	180f883a 	mov	r7,r3
  283c1c:	8009883a 	mov	r4,r16
  283c20:	880b883a 	mov	r5,r17
  283c24:	1027883a 	mov	r19,r2
  283c28:	1825883a 	mov	r18,r3
  283c2c:	028bf0c0 	call	28bf0c <__ledf2>
  283c30:	10000816 	blt	r2,zero,283c54 <_dtoa_r+0x948>
  283c34:	980d883a 	mov	r6,r19
  283c38:	900f883a 	mov	r7,r18
  283c3c:	8009883a 	mov	r4,r16
  283c40:	880b883a 	mov	r5,r17
  283c44:	028bda80 	call	28bda8 <__eqdf2>
  283c48:	103f5a1e 	bne	r2,zero,2839b4 <_dtoa_r+0x6a8>
  283c4c:	ad40004c 	andi	r21,r21,1
  283c50:	a83f5826 	beq	r21,zero,2839b4 <_dtoa_r+0x6a8>
  283c54:	bd3fffc3 	ldbu	r20,-1(r23)
  283c58:	b8bfffc4 	addi	r2,r23,-1
  283c5c:	1007883a 	mov	r3,r2
  283c60:	01400e44 	movi	r5,57
  283c64:	d9800717 	ldw	r6,28(sp)
  283c68:	00000506 	br	283c80 <_dtoa_r+0x974>
  283c6c:	18ffffc4 	addi	r3,r3,-1
  283c70:	11824726 	beq	r2,r6,284590 <_dtoa_r+0x1284>
  283c74:	1d000003 	ldbu	r20,0(r3)
  283c78:	102f883a 	mov	r23,r2
  283c7c:	10bfffc4 	addi	r2,r2,-1
  283c80:	a1003fcc 	andi	r4,r20,255
  283c84:	2100201c 	xori	r4,r4,128
  283c88:	213fe004 	addi	r4,r4,-128
  283c8c:	217ff726 	beq	r4,r5,283c6c <_dtoa_r+0x960>
  283c90:	a2000044 	addi	r8,r20,1
  283c94:	12000005 	stb	r8,0(r2)
  283c98:	003f4606 	br	2839b4 <_dtoa_r+0x6a8>
  283c9c:	d9000b17 	ldw	r4,44(sp)
  283ca0:	2000c826 	beq	r4,zero,283fc4 <_dtoa_r+0xcb8>
  283ca4:	d9800317 	ldw	r6,12(sp)
  283ca8:	00c00044 	movi	r3,1
  283cac:	1980f90e 	bge	r3,r6,284094 <_dtoa_r+0xd88>
  283cb0:	d8800617 	ldw	r2,24(sp)
  283cb4:	d8c00a17 	ldw	r3,40(sp)
  283cb8:	157fffc4 	addi	r21,r2,-1
  283cbc:	1d41f316 	blt	r3,r21,28448c <_dtoa_r+0x1180>
  283cc0:	1d6bc83a 	sub	r21,r3,r21
  283cc4:	d9c00617 	ldw	r7,24(sp)
  283cc8:	3802aa16 	blt	r7,zero,284774 <_dtoa_r+0x1468>
  283ccc:	dd000817 	ldw	r20,32(sp)
  283cd0:	d8800617 	ldw	r2,24(sp)
  283cd4:	d8c00817 	ldw	r3,32(sp)
  283cd8:	01400044 	movi	r5,1
  283cdc:	e009883a 	mov	r4,fp
  283ce0:	1887883a 	add	r3,r3,r2
  283ce4:	d8c00815 	stw	r3,32(sp)
  283ce8:	b0ad883a 	add	r22,r22,r2
  283cec:	0286db40 	call	286db4 <__i2b>
  283cf0:	1023883a 	mov	r17,r2
  283cf4:	a0000826 	beq	r20,zero,283d18 <_dtoa_r+0xa0c>
  283cf8:	0580070e 	bge	zero,r22,283d18 <_dtoa_r+0xa0c>
  283cfc:	a005883a 	mov	r2,r20
  283d00:	b500b916 	blt	r22,r20,283fe8 <_dtoa_r+0xcdc>
  283d04:	d9000817 	ldw	r4,32(sp)
  283d08:	a0a9c83a 	sub	r20,r20,r2
  283d0c:	b0adc83a 	sub	r22,r22,r2
  283d10:	2089c83a 	sub	r4,r4,r2
  283d14:	d9000815 	stw	r4,32(sp)
  283d18:	d9800a17 	ldw	r6,40(sp)
  283d1c:	0181810e 	bge	zero,r6,284324 <_dtoa_r+0x1018>
  283d20:	d9c00b17 	ldw	r7,44(sp)
  283d24:	3800b326 	beq	r7,zero,283ff4 <_dtoa_r+0xce8>
  283d28:	a800b226 	beq	r21,zero,283ff4 <_dtoa_r+0xce8>
  283d2c:	880b883a 	mov	r5,r17
  283d30:	a80d883a 	mov	r6,r21
  283d34:	e009883a 	mov	r4,fp
  283d38:	0286fe80 	call	286fe8 <__pow5mult>
  283d3c:	d9800917 	ldw	r6,36(sp)
  283d40:	100b883a 	mov	r5,r2
  283d44:	e009883a 	mov	r4,fp
  283d48:	1023883a 	mov	r17,r2
  283d4c:	0286df00 	call	286df0 <__multiply>
  283d50:	1021883a 	mov	r16,r2
  283d54:	d8800a17 	ldw	r2,40(sp)
  283d58:	d9400917 	ldw	r5,36(sp)
  283d5c:	e009883a 	mov	r4,fp
  283d60:	1545c83a 	sub	r2,r2,r21
  283d64:	d8800a15 	stw	r2,40(sp)
  283d68:	0286a500 	call	286a50 <_Bfree>
  283d6c:	d8c00a17 	ldw	r3,40(sp)
  283d70:	18009f1e 	bne	r3,zero,283ff0 <_dtoa_r+0xce4>
  283d74:	05c00044 	movi	r23,1
  283d78:	e009883a 	mov	r4,fp
  283d7c:	b80b883a 	mov	r5,r23
  283d80:	0286db40 	call	286db4 <__i2b>
  283d84:	d9000d17 	ldw	r4,52(sp)
  283d88:	102b883a 	mov	r21,r2
  283d8c:	2000ce26 	beq	r4,zero,2840c8 <_dtoa_r+0xdbc>
  283d90:	200d883a 	mov	r6,r4
  283d94:	100b883a 	mov	r5,r2
  283d98:	e009883a 	mov	r4,fp
  283d9c:	0286fe80 	call	286fe8 <__pow5mult>
  283da0:	d9800317 	ldw	r6,12(sp)
  283da4:	102b883a 	mov	r21,r2
  283da8:	b981810e 	bge	r23,r6,2843b0 <_dtoa_r+0x10a4>
  283dac:	0027883a 	mov	r19,zero
  283db0:	a8800417 	ldw	r2,16(r21)
  283db4:	05c00804 	movi	r23,32
  283db8:	10800104 	addi	r2,r2,4
  283dbc:	1085883a 	add	r2,r2,r2
  283dc0:	1085883a 	add	r2,r2,r2
  283dc4:	a885883a 	add	r2,r21,r2
  283dc8:	11000017 	ldw	r4,0(r2)
  283dcc:	0286c9c0 	call	286c9c <__hi0bits>
  283dd0:	b885c83a 	sub	r2,r23,r2
  283dd4:	1585883a 	add	r2,r2,r22
  283dd8:	108007cc 	andi	r2,r2,31
  283ddc:	1000b326 	beq	r2,zero,2840ac <_dtoa_r+0xda0>
  283de0:	00c00804 	movi	r3,32
  283de4:	1887c83a 	sub	r3,r3,r2
  283de8:	01000104 	movi	r4,4
  283dec:	20c2cd0e 	bge	r4,r3,284924 <_dtoa_r+0x1618>
  283df0:	00c00704 	movi	r3,28
  283df4:	1885c83a 	sub	r2,r3,r2
  283df8:	d8c00817 	ldw	r3,32(sp)
  283dfc:	a0a9883a 	add	r20,r20,r2
  283e00:	b0ad883a 	add	r22,r22,r2
  283e04:	1887883a 	add	r3,r3,r2
  283e08:	d8c00815 	stw	r3,32(sp)
  283e0c:	d9800817 	ldw	r6,32(sp)
  283e10:	0180040e 	bge	zero,r6,283e24 <_dtoa_r+0xb18>
  283e14:	800b883a 	mov	r5,r16
  283e18:	e009883a 	mov	r4,fp
  283e1c:	02871280 	call	287128 <__lshift>
  283e20:	1021883a 	mov	r16,r2
  283e24:	0580050e 	bge	zero,r22,283e3c <_dtoa_r+0xb30>
  283e28:	a80b883a 	mov	r5,r21
  283e2c:	b00d883a 	mov	r6,r22
  283e30:	e009883a 	mov	r4,fp
  283e34:	02871280 	call	287128 <__lshift>
  283e38:	102b883a 	mov	r21,r2
  283e3c:	d9c00e17 	ldw	r7,56(sp)
  283e40:	3801211e 	bne	r7,zero,2842c8 <_dtoa_r+0xfbc>
  283e44:	d9800617 	ldw	r6,24(sp)
  283e48:	0181380e 	bge	zero,r6,28432c <_dtoa_r+0x1020>
  283e4c:	d8c00b17 	ldw	r3,44(sp)
  283e50:	1800ab1e 	bne	r3,zero,284100 <_dtoa_r+0xdf4>
  283e54:	dc800717 	ldw	r18,28(sp)
  283e58:	dcc00617 	ldw	r19,24(sp)
  283e5c:	9029883a 	mov	r20,r18
  283e60:	00000206 	br	283e6c <_dtoa_r+0xb60>
  283e64:	0286a780 	call	286a78 <__multadd>
  283e68:	1021883a 	mov	r16,r2
  283e6c:	a80b883a 	mov	r5,r21
  283e70:	8009883a 	mov	r4,r16
  283e74:	028310c0 	call	28310c <quorem>
  283e78:	10800c04 	addi	r2,r2,48
  283e7c:	90800005 	stb	r2,0(r18)
  283e80:	94800044 	addi	r18,r18,1
  283e84:	9507c83a 	sub	r3,r18,r20
  283e88:	000f883a 	mov	r7,zero
  283e8c:	01800284 	movi	r6,10
  283e90:	800b883a 	mov	r5,r16
  283e94:	e009883a 	mov	r4,fp
  283e98:	1cfff216 	blt	r3,r19,283e64 <_dtoa_r+0xb58>
  283e9c:	1011883a 	mov	r8,r2
  283ea0:	d8800617 	ldw	r2,24(sp)
  283ea4:	0082370e 	bge	zero,r2,284784 <_dtoa_r+0x1478>
  283ea8:	d9000717 	ldw	r4,28(sp)
  283eac:	0025883a 	mov	r18,zero
  283eb0:	20af883a 	add	r23,r4,r2
  283eb4:	01800044 	movi	r6,1
  283eb8:	800b883a 	mov	r5,r16
  283ebc:	e009883a 	mov	r4,fp
  283ec0:	da001715 	stw	r8,92(sp)
  283ec4:	02871280 	call	287128 <__lshift>
  283ec8:	a80b883a 	mov	r5,r21
  283ecc:	1009883a 	mov	r4,r2
  283ed0:	d8800915 	stw	r2,36(sp)
  283ed4:	02872700 	call	287270 <__mcmp>
  283ed8:	da001717 	ldw	r8,92(sp)
  283edc:	0081800e 	bge	zero,r2,2844e0 <_dtoa_r+0x11d4>
  283ee0:	b93fffc3 	ldbu	r4,-1(r23)
  283ee4:	b8bfffc4 	addi	r2,r23,-1
  283ee8:	1007883a 	mov	r3,r2
  283eec:	01800e44 	movi	r6,57
  283ef0:	d9c00717 	ldw	r7,28(sp)
  283ef4:	00000506 	br	283f0c <_dtoa_r+0xc00>
  283ef8:	18ffffc4 	addi	r3,r3,-1
  283efc:	11c12326 	beq	r2,r7,28438c <_dtoa_r+0x1080>
  283f00:	19000003 	ldbu	r4,0(r3)
  283f04:	102f883a 	mov	r23,r2
  283f08:	10bfffc4 	addi	r2,r2,-1
  283f0c:	21403fcc 	andi	r5,r4,255
  283f10:	2940201c 	xori	r5,r5,128
  283f14:	297fe004 	addi	r5,r5,-128
  283f18:	29bff726 	beq	r5,r6,283ef8 <_dtoa_r+0xbec>
  283f1c:	21000044 	addi	r4,r4,1
  283f20:	11000005 	stb	r4,0(r2)
  283f24:	a80b883a 	mov	r5,r21
  283f28:	e009883a 	mov	r4,fp
  283f2c:	0286a500 	call	286a50 <_Bfree>
  283f30:	883ea026 	beq	r17,zero,2839b4 <_dtoa_r+0x6a8>
  283f34:	90000426 	beq	r18,zero,283f48 <_dtoa_r+0xc3c>
  283f38:	94400326 	beq	r18,r17,283f48 <_dtoa_r+0xc3c>
  283f3c:	900b883a 	mov	r5,r18
  283f40:	e009883a 	mov	r4,fp
  283f44:	0286a500 	call	286a50 <_Bfree>
  283f48:	880b883a 	mov	r5,r17
  283f4c:	e009883a 	mov	r4,fp
  283f50:	0286a500 	call	286a50 <_Bfree>
  283f54:	003e9706 	br	2839b4 <_dtoa_r+0x6a8>
  283f58:	01800044 	movi	r6,1
  283f5c:	d9800e15 	stw	r6,56(sp)
  283f60:	003d9606 	br	2835bc <_dtoa_r+0x2b0>
  283f64:	d8800817 	ldw	r2,32(sp)
  283f68:	d8c00517 	ldw	r3,20(sp)
  283f6c:	d8000d15 	stw	zero,52(sp)
  283f70:	10c5c83a 	sub	r2,r2,r3
  283f74:	00c9c83a 	sub	r4,zero,r3
  283f78:	d8800815 	stw	r2,32(sp)
  283f7c:	d9000a15 	stw	r4,40(sp)
  283f80:	003d9706 	br	2835e0 <_dtoa_r+0x2d4>
  283f84:	05adc83a 	sub	r22,zero,r22
  283f88:	dd800815 	stw	r22,32(sp)
  283f8c:	002d883a 	mov	r22,zero
  283f90:	003d8e06 	br	2835cc <_dtoa_r+0x2c0>
  283f94:	d9000517 	ldw	r4,20(sp)
  283f98:	028d0940 	call	28d094 <__floatsidf>
  283f9c:	100d883a 	mov	r6,r2
  283fa0:	180f883a 	mov	r7,r3
  283fa4:	a009883a 	mov	r4,r20
  283fa8:	880b883a 	mov	r5,r17
  283fac:	028bda80 	call	28bda8 <__eqdf2>
  283fb0:	103d7126 	beq	r2,zero,283578 <_dtoa_r+0x26c>
  283fb4:	d9c00517 	ldw	r7,20(sp)
  283fb8:	39ffffc4 	addi	r7,r7,-1
  283fbc:	d9c00515 	stw	r7,20(sp)
  283fc0:	003d6d06 	br	283578 <_dtoa_r+0x26c>
  283fc4:	dd400a17 	ldw	r21,40(sp)
  283fc8:	dd000817 	ldw	r20,32(sp)
  283fcc:	0023883a 	mov	r17,zero
  283fd0:	003f4806 	br	283cf4 <_dtoa_r+0x9e8>
  283fd4:	10e3c83a 	sub	r17,r2,r3
  283fd8:	9448983a 	sll	r4,r18,r17
  283fdc:	003d3206 	br	2834a8 <_dtoa_r+0x19c>
  283fe0:	d8000e15 	stw	zero,56(sp)
  283fe4:	003d7506 	br	2835bc <_dtoa_r+0x2b0>
  283fe8:	b005883a 	mov	r2,r22
  283fec:	003f4506 	br	283d04 <_dtoa_r+0x9f8>
  283ff0:	dc000915 	stw	r16,36(sp)
  283ff4:	d9800a17 	ldw	r6,40(sp)
  283ff8:	d9400917 	ldw	r5,36(sp)
  283ffc:	e009883a 	mov	r4,fp
  284000:	0286fe80 	call	286fe8 <__pow5mult>
  284004:	1021883a 	mov	r16,r2
  284008:	003f5a06 	br	283d74 <_dtoa_r+0xa68>
  28400c:	01c00044 	movi	r7,1
  284010:	d9c00b15 	stw	r7,44(sp)
  284014:	d8802217 	ldw	r2,136(sp)
  284018:	0081280e 	bge	zero,r2,2844bc <_dtoa_r+0x11b0>
  28401c:	100d883a 	mov	r6,r2
  284020:	1021883a 	mov	r16,r2
  284024:	d8800c15 	stw	r2,48(sp)
  284028:	d8800615 	stw	r2,24(sp)
  28402c:	003d8806 	br	283650 <_dtoa_r+0x344>
  284030:	d8800617 	ldw	r2,24(sp)
  284034:	00be9b16 	blt	zero,r2,283aa4 <_dtoa_r+0x798>
  284038:	10010f1e 	bne	r2,zero,284478 <_dtoa_r+0x116c>
  28403c:	880b883a 	mov	r5,r17
  284040:	000d883a 	mov	r6,zero
  284044:	01d00534 	movhi	r7,16404
  284048:	8009883a 	mov	r4,r16
  28404c:	028c0000 	call	28c000 <__muldf3>
  284050:	900d883a 	mov	r6,r18
  284054:	980f883a 	mov	r7,r19
  284058:	1009883a 	mov	r4,r2
  28405c:	180b883a 	mov	r5,r3
  284060:	028be300 	call	28be30 <__gedf2>
  284064:	002b883a 	mov	r21,zero
  284068:	0023883a 	mov	r17,zero
  28406c:	1000bf16 	blt	r2,zero,28436c <_dtoa_r+0x1060>
  284070:	d9802217 	ldw	r6,136(sp)
  284074:	ddc00717 	ldw	r23,28(sp)
  284078:	018c303a 	nor	r6,zero,r6
  28407c:	d9800515 	stw	r6,20(sp)
  284080:	a80b883a 	mov	r5,r21
  284084:	e009883a 	mov	r4,fp
  284088:	0286a500 	call	286a50 <_Bfree>
  28408c:	883e4926 	beq	r17,zero,2839b4 <_dtoa_r+0x6a8>
  284090:	003fad06 	br	283f48 <_dtoa_r+0xc3c>
  284094:	d9c01117 	ldw	r7,68(sp)
  284098:	3801bc26 	beq	r7,zero,28478c <_dtoa_r+0x1480>
  28409c:	10810cc4 	addi	r2,r2,1075
  2840a0:	dd400a17 	ldw	r21,40(sp)
  2840a4:	dd000817 	ldw	r20,32(sp)
  2840a8:	003f0a06 	br	283cd4 <_dtoa_r+0x9c8>
  2840ac:	00800704 	movi	r2,28
  2840b0:	d9000817 	ldw	r4,32(sp)
  2840b4:	a0a9883a 	add	r20,r20,r2
  2840b8:	b0ad883a 	add	r22,r22,r2
  2840bc:	2089883a 	add	r4,r4,r2
  2840c0:	d9000815 	stw	r4,32(sp)
  2840c4:	003f5106 	br	283e0c <_dtoa_r+0xb00>
  2840c8:	d8c00317 	ldw	r3,12(sp)
  2840cc:	b8c1fc0e 	bge	r23,r3,2848c0 <_dtoa_r+0x15b4>
  2840d0:	0027883a 	mov	r19,zero
  2840d4:	b805883a 	mov	r2,r23
  2840d8:	003f3e06 	br	283dd4 <_dtoa_r+0xac8>
  2840dc:	880b883a 	mov	r5,r17
  2840e0:	e009883a 	mov	r4,fp
  2840e4:	000f883a 	mov	r7,zero
  2840e8:	01800284 	movi	r6,10
  2840ec:	0286a780 	call	286a78 <__multadd>
  2840f0:	d9000c17 	ldw	r4,48(sp)
  2840f4:	1023883a 	mov	r17,r2
  2840f8:	0102040e 	bge	zero,r4,28490c <_dtoa_r+0x1600>
  2840fc:	d9000615 	stw	r4,24(sp)
  284100:	0500050e 	bge	zero,r20,284118 <_dtoa_r+0xe0c>
  284104:	880b883a 	mov	r5,r17
  284108:	a00d883a 	mov	r6,r20
  28410c:	e009883a 	mov	r4,fp
  284110:	02871280 	call	287128 <__lshift>
  284114:	1023883a 	mov	r17,r2
  284118:	9801241e 	bne	r19,zero,2845ac <_dtoa_r+0x12a0>
  28411c:	8829883a 	mov	r20,r17
  284120:	d9000617 	ldw	r4,24(sp)
  284124:	dcc00717 	ldw	r19,28(sp)
  284128:	9480004c 	andi	r18,r18,1
  28412c:	20bfffc4 	addi	r2,r4,-1
  284130:	9885883a 	add	r2,r19,r2
  284134:	d8800415 	stw	r2,16(sp)
  284138:	dc800615 	stw	r18,24(sp)
  28413c:	a80b883a 	mov	r5,r21
  284140:	8009883a 	mov	r4,r16
  284144:	028310c0 	call	28310c <quorem>
  284148:	880b883a 	mov	r5,r17
  28414c:	8009883a 	mov	r4,r16
  284150:	102f883a 	mov	r23,r2
  284154:	02872700 	call	287270 <__mcmp>
  284158:	a80b883a 	mov	r5,r21
  28415c:	a00d883a 	mov	r6,r20
  284160:	e009883a 	mov	r4,fp
  284164:	102d883a 	mov	r22,r2
  284168:	02872d00 	call	2872d0 <__mdiff>
  28416c:	1007883a 	mov	r3,r2
  284170:	10800317 	ldw	r2,12(r2)
  284174:	bc800c04 	addi	r18,r23,48
  284178:	180b883a 	mov	r5,r3
  28417c:	10004e1e 	bne	r2,zero,2842b8 <_dtoa_r+0xfac>
  284180:	8009883a 	mov	r4,r16
  284184:	d8c01615 	stw	r3,88(sp)
  284188:	02872700 	call	287270 <__mcmp>
  28418c:	d8c01617 	ldw	r3,88(sp)
  284190:	e009883a 	mov	r4,fp
  284194:	d8801615 	stw	r2,88(sp)
  284198:	180b883a 	mov	r5,r3
  28419c:	0286a500 	call	286a50 <_Bfree>
  2841a0:	d8801617 	ldw	r2,88(sp)
  2841a4:	1000041e 	bne	r2,zero,2841b8 <_dtoa_r+0xeac>
  2841a8:	d9800317 	ldw	r6,12(sp)
  2841ac:	3000021e 	bne	r6,zero,2841b8 <_dtoa_r+0xeac>
  2841b0:	d8c00617 	ldw	r3,24(sp)
  2841b4:	18003726 	beq	r3,zero,284294 <_dtoa_r+0xf88>
  2841b8:	b0002016 	blt	r22,zero,28423c <_dtoa_r+0xf30>
  2841bc:	b000041e 	bne	r22,zero,2841d0 <_dtoa_r+0xec4>
  2841c0:	d9000317 	ldw	r4,12(sp)
  2841c4:	2000021e 	bne	r4,zero,2841d0 <_dtoa_r+0xec4>
  2841c8:	d8c00617 	ldw	r3,24(sp)
  2841cc:	18001b26 	beq	r3,zero,28423c <_dtoa_r+0xf30>
  2841d0:	00810716 	blt	zero,r2,2845f0 <_dtoa_r+0x12e4>
  2841d4:	d8c00417 	ldw	r3,16(sp)
  2841d8:	9d800044 	addi	r22,r19,1
  2841dc:	9c800005 	stb	r18,0(r19)
  2841e0:	b02f883a 	mov	r23,r22
  2841e4:	98c10626 	beq	r19,r3,284600 <_dtoa_r+0x12f4>
  2841e8:	800b883a 	mov	r5,r16
  2841ec:	000f883a 	mov	r7,zero
  2841f0:	01800284 	movi	r6,10
  2841f4:	e009883a 	mov	r4,fp
  2841f8:	0286a780 	call	286a78 <__multadd>
  2841fc:	1021883a 	mov	r16,r2
  284200:	000f883a 	mov	r7,zero
  284204:	01800284 	movi	r6,10
  284208:	880b883a 	mov	r5,r17
  28420c:	e009883a 	mov	r4,fp
  284210:	8d002526 	beq	r17,r20,2842a8 <_dtoa_r+0xf9c>
  284214:	0286a780 	call	286a78 <__multadd>
  284218:	a00b883a 	mov	r5,r20
  28421c:	000f883a 	mov	r7,zero
  284220:	01800284 	movi	r6,10
  284224:	e009883a 	mov	r4,fp
  284228:	1023883a 	mov	r17,r2
  28422c:	0286a780 	call	286a78 <__multadd>
  284230:	1029883a 	mov	r20,r2
  284234:	b027883a 	mov	r19,r22
  284238:	003fc006 	br	28413c <_dtoa_r+0xe30>
  28423c:	9011883a 	mov	r8,r18
  284240:	00800e0e 	bge	zero,r2,28427c <_dtoa_r+0xf70>
  284244:	800b883a 	mov	r5,r16
  284248:	01800044 	movi	r6,1
  28424c:	e009883a 	mov	r4,fp
  284250:	da001715 	stw	r8,92(sp)
  284254:	02871280 	call	287128 <__lshift>
  284258:	a80b883a 	mov	r5,r21
  28425c:	1009883a 	mov	r4,r2
  284260:	1021883a 	mov	r16,r2
  284264:	02872700 	call	287270 <__mcmp>
  284268:	da001717 	ldw	r8,92(sp)
  28426c:	0081960e 	bge	zero,r2,2848c8 <_dtoa_r+0x15bc>
  284270:	00800e44 	movi	r2,57
  284274:	40817026 	beq	r8,r2,284838 <_dtoa_r+0x152c>
  284278:	ba000c44 	addi	r8,r23,49
  28427c:	8825883a 	mov	r18,r17
  284280:	9dc00044 	addi	r23,r19,1
  284284:	9a000005 	stb	r8,0(r19)
  284288:	a023883a 	mov	r17,r20
  28428c:	dc000915 	stw	r16,36(sp)
  284290:	003f2406 	br	283f24 <_dtoa_r+0xc18>
  284294:	00800e44 	movi	r2,57
  284298:	9011883a 	mov	r8,r18
  28429c:	90816626 	beq	r18,r2,284838 <_dtoa_r+0x152c>
  2842a0:	05bff516 	blt	zero,r22,284278 <_dtoa_r+0xf6c>
  2842a4:	003ff506 	br	28427c <_dtoa_r+0xf70>
  2842a8:	0286a780 	call	286a78 <__multadd>
  2842ac:	1023883a 	mov	r17,r2
  2842b0:	1029883a 	mov	r20,r2
  2842b4:	003fdf06 	br	284234 <_dtoa_r+0xf28>
  2842b8:	e009883a 	mov	r4,fp
  2842bc:	0286a500 	call	286a50 <_Bfree>
  2842c0:	00800044 	movi	r2,1
  2842c4:	003fbc06 	br	2841b8 <_dtoa_r+0xeac>
  2842c8:	a80b883a 	mov	r5,r21
  2842cc:	8009883a 	mov	r4,r16
  2842d0:	02872700 	call	287270 <__mcmp>
  2842d4:	103edb0e 	bge	r2,zero,283e44 <_dtoa_r+0xb38>
  2842d8:	800b883a 	mov	r5,r16
  2842dc:	000f883a 	mov	r7,zero
  2842e0:	01800284 	movi	r6,10
  2842e4:	e009883a 	mov	r4,fp
  2842e8:	0286a780 	call	286a78 <__multadd>
  2842ec:	1021883a 	mov	r16,r2
  2842f0:	d8800517 	ldw	r2,20(sp)
  2842f4:	d8c00b17 	ldw	r3,44(sp)
  2842f8:	10bfffc4 	addi	r2,r2,-1
  2842fc:	d8800515 	stw	r2,20(sp)
  284300:	183f761e 	bne	r3,zero,2840dc <_dtoa_r+0xdd0>
  284304:	d9000c17 	ldw	r4,48(sp)
  284308:	0101730e 	bge	zero,r4,2848d8 <_dtoa_r+0x15cc>
  28430c:	d9000615 	stw	r4,24(sp)
  284310:	003ed006 	br	283e54 <_dtoa_r+0xb48>
  284314:	00800084 	movi	r2,2
  284318:	3081861e 	bne	r6,r2,284934 <_dtoa_r+0x1628>
  28431c:	d8000b15 	stw	zero,44(sp)
  284320:	003f3c06 	br	284014 <_dtoa_r+0xd08>
  284324:	dc000917 	ldw	r16,36(sp)
  284328:	003e9206 	br	283d74 <_dtoa_r+0xa68>
  28432c:	d9c00317 	ldw	r7,12(sp)
  284330:	00800084 	movi	r2,2
  284334:	11fec50e 	bge	r2,r7,283e4c <_dtoa_r+0xb40>
  284338:	d9000617 	ldw	r4,24(sp)
  28433c:	20013c1e 	bne	r4,zero,284830 <_dtoa_r+0x1524>
  284340:	a80b883a 	mov	r5,r21
  284344:	000f883a 	mov	r7,zero
  284348:	01800144 	movi	r6,5
  28434c:	e009883a 	mov	r4,fp
  284350:	0286a780 	call	286a78 <__multadd>
  284354:	100b883a 	mov	r5,r2
  284358:	8009883a 	mov	r4,r16
  28435c:	102b883a 	mov	r21,r2
  284360:	02872700 	call	287270 <__mcmp>
  284364:	dc000915 	stw	r16,36(sp)
  284368:	00bf410e 	bge	zero,r2,284070 <_dtoa_r+0xd64>
  28436c:	d9c00717 	ldw	r7,28(sp)
  284370:	00800c44 	movi	r2,49
  284374:	38800005 	stb	r2,0(r7)
  284378:	d8800517 	ldw	r2,20(sp)
  28437c:	3dc00044 	addi	r23,r7,1
  284380:	10800044 	addi	r2,r2,1
  284384:	d8800515 	stw	r2,20(sp)
  284388:	003f3d06 	br	284080 <_dtoa_r+0xd74>
  28438c:	d9800517 	ldw	r6,20(sp)
  284390:	d9c00717 	ldw	r7,28(sp)
  284394:	00800c44 	movi	r2,49
  284398:	31800044 	addi	r6,r6,1
  28439c:	d9800515 	stw	r6,20(sp)
  2843a0:	38800005 	stb	r2,0(r7)
  2843a4:	003edf06 	br	283f24 <_dtoa_r+0xc18>
  2843a8:	d8000b15 	stw	zero,44(sp)
  2843ac:	003c9f06 	br	28362c <_dtoa_r+0x320>
  2843b0:	903e7e1e 	bne	r18,zero,283dac <_dtoa_r+0xaa0>
  2843b4:	00800434 	movhi	r2,16
  2843b8:	10bfffc4 	addi	r2,r2,-1
  2843bc:	9884703a 	and	r2,r19,r2
  2843c0:	1000ea1e 	bne	r2,zero,28476c <_dtoa_r+0x1460>
  2843c4:	9cdffc2c 	andhi	r19,r19,32752
  2843c8:	9800e826 	beq	r19,zero,28476c <_dtoa_r+0x1460>
  2843cc:	d9c00817 	ldw	r7,32(sp)
  2843d0:	b5800044 	addi	r22,r22,1
  2843d4:	04c00044 	movi	r19,1
  2843d8:	39c00044 	addi	r7,r7,1
  2843dc:	d9c00815 	stw	r7,32(sp)
  2843e0:	d8800d17 	ldw	r2,52(sp)
  2843e4:	103e721e 	bne	r2,zero,283db0 <_dtoa_r+0xaa4>
  2843e8:	00800044 	movi	r2,1
  2843ec:	003e7906 	br	283dd4 <_dtoa_r+0xac8>
  2843f0:	8009883a 	mov	r4,r16
  2843f4:	028d0940 	call	28d094 <__floatsidf>
  2843f8:	d9800f17 	ldw	r6,60(sp)
  2843fc:	d9c01017 	ldw	r7,64(sp)
  284400:	1009883a 	mov	r4,r2
  284404:	180b883a 	mov	r5,r3
  284408:	028c0000 	call	28c000 <__muldf3>
  28440c:	000d883a 	mov	r6,zero
  284410:	01d00734 	movhi	r7,16412
  284414:	1009883a 	mov	r4,r2
  284418:	180b883a 	mov	r5,r3
  28441c:	028ac140 	call	28ac14 <__adddf3>
  284420:	047f3034 	movhi	r17,64704
  284424:	1021883a 	mov	r16,r2
  284428:	1c63883a 	add	r17,r3,r17
  28442c:	d9000f17 	ldw	r4,60(sp)
  284430:	d9401017 	ldw	r5,64(sp)
  284434:	000d883a 	mov	r6,zero
  284438:	01d00534 	movhi	r7,16404
  28443c:	028c7180 	call	28c718 <__subdf3>
  284440:	800d883a 	mov	r6,r16
  284444:	880f883a 	mov	r7,r17
  284448:	1009883a 	mov	r4,r2
  28444c:	180b883a 	mov	r5,r3
  284450:	102b883a 	mov	r21,r2
  284454:	1829883a 	mov	r20,r3
  284458:	028be300 	call	28be30 <__gedf2>
  28445c:	00806c16 	blt	zero,r2,284610 <_dtoa_r+0x1304>
  284460:	89e0003c 	xorhi	r7,r17,32768
  284464:	800d883a 	mov	r6,r16
  284468:	a809883a 	mov	r4,r21
  28446c:	a00b883a 	mov	r5,r20
  284470:	028bf0c0 	call	28bf0c <__ledf2>
  284474:	103d7e0e 	bge	r2,zero,283a70 <_dtoa_r+0x764>
  284478:	002b883a 	mov	r21,zero
  28447c:	0023883a 	mov	r17,zero
  284480:	003efb06 	br	284070 <_dtoa_r+0xd64>
  284484:	d8800717 	ldw	r2,28(sp)
  284488:	003bd006 	br	2833cc <_dtoa_r+0xc0>
  28448c:	d9000a17 	ldw	r4,40(sp)
  284490:	d9800d17 	ldw	r6,52(sp)
  284494:	dd400a15 	stw	r21,40(sp)
  284498:	a905c83a 	sub	r2,r21,r4
  28449c:	308d883a 	add	r6,r6,r2
  2844a0:	d9800d15 	stw	r6,52(sp)
  2844a4:	002b883a 	mov	r21,zero
  2844a8:	003e0606 	br	283cc4 <_dtoa_r+0x9b8>
  2844ac:	9023883a 	mov	r17,r18
  2844b0:	9829883a 	mov	r20,r19
  2844b4:	04000084 	movi	r16,2
  2844b8:	003c9206 	br	283704 <_dtoa_r+0x3f8>
  2844bc:	04000044 	movi	r16,1
  2844c0:	dc000c15 	stw	r16,48(sp)
  2844c4:	dc000615 	stw	r16,24(sp)
  2844c8:	dc002215 	stw	r16,136(sp)
  2844cc:	e0001115 	stw	zero,68(fp)
  2844d0:	000b883a 	mov	r5,zero
  2844d4:	003c6906 	br	28367c <_dtoa_r+0x370>
  2844d8:	3021883a 	mov	r16,r6
  2844dc:	003ffb06 	br	2844cc <_dtoa_r+0x11c0>
  2844e0:	1000021e 	bne	r2,zero,2844ec <_dtoa_r+0x11e0>
  2844e4:	4200004c 	andi	r8,r8,1
  2844e8:	403e7d1e 	bne	r8,zero,283ee0 <_dtoa_r+0xbd4>
  2844ec:	01000c04 	movi	r4,48
  2844f0:	00000106 	br	2844f8 <_dtoa_r+0x11ec>
  2844f4:	102f883a 	mov	r23,r2
  2844f8:	b8bfffc4 	addi	r2,r23,-1
  2844fc:	10c00007 	ldb	r3,0(r2)
  284500:	193ffc26 	beq	r3,r4,2844f4 <_dtoa_r+0x11e8>
  284504:	003e8706 	br	283f24 <_dtoa_r+0xc18>
  284508:	d8800517 	ldw	r2,20(sp)
  28450c:	00a3c83a 	sub	r17,zero,r2
  284510:	8800a426 	beq	r17,zero,2847a4 <_dtoa_r+0x1498>
  284514:	888003cc 	andi	r2,r17,15
  284518:	100490fa 	slli	r2,r2,3
  28451c:	00c00a74 	movhi	r3,41
  284520:	18c63404 	addi	r3,r3,6352
  284524:	1885883a 	add	r2,r3,r2
  284528:	11800017 	ldw	r6,0(r2)
  28452c:	11c00117 	ldw	r7,4(r2)
  284530:	9009883a 	mov	r4,r18
  284534:	980b883a 	mov	r5,r19
  284538:	8823d13a 	srai	r17,r17,4
  28453c:	028c0000 	call	28c000 <__muldf3>
  284540:	d8800f15 	stw	r2,60(sp)
  284544:	d8c01015 	stw	r3,64(sp)
  284548:	8800e826 	beq	r17,zero,2848ec <_dtoa_r+0x15e0>
  28454c:	05000a74 	movhi	r20,41
  284550:	a5062a04 	addi	r20,r20,6312
  284554:	04000084 	movi	r16,2
  284558:	8980004c 	andi	r6,r17,1
  28455c:	1009883a 	mov	r4,r2
  284560:	8823d07a 	srai	r17,r17,1
  284564:	180b883a 	mov	r5,r3
  284568:	30000426 	beq	r6,zero,28457c <_dtoa_r+0x1270>
  28456c:	a1800017 	ldw	r6,0(r20)
  284570:	a1c00117 	ldw	r7,4(r20)
  284574:	84000044 	addi	r16,r16,1
  284578:	028c0000 	call	28c000 <__muldf3>
  28457c:	a5000204 	addi	r20,r20,8
  284580:	883ff51e 	bne	r17,zero,284558 <_dtoa_r+0x124c>
  284584:	d8800f15 	stw	r2,60(sp)
  284588:	d8c01015 	stw	r3,64(sp)
  28458c:	003c7606 	br	283768 <_dtoa_r+0x45c>
  284590:	00c00c04 	movi	r3,48
  284594:	10c00005 	stb	r3,0(r2)
  284598:	d8c00517 	ldw	r3,20(sp)
  28459c:	bd3fffc3 	ldbu	r20,-1(r23)
  2845a0:	18c00044 	addi	r3,r3,1
  2845a4:	d8c00515 	stw	r3,20(sp)
  2845a8:	003db906 	br	283c90 <_dtoa_r+0x984>
  2845ac:	89400117 	ldw	r5,4(r17)
  2845b0:	e009883a 	mov	r4,fp
  2845b4:	02869a80 	call	2869a8 <_Balloc>
  2845b8:	89800417 	ldw	r6,16(r17)
  2845bc:	89400304 	addi	r5,r17,12
  2845c0:	11000304 	addi	r4,r2,12
  2845c4:	31800084 	addi	r6,r6,2
  2845c8:	318d883a 	add	r6,r6,r6
  2845cc:	318d883a 	add	r6,r6,r6
  2845d0:	1027883a 	mov	r19,r2
  2845d4:	02865dc0 	call	2865dc <memcpy>
  2845d8:	01800044 	movi	r6,1
  2845dc:	980b883a 	mov	r5,r19
  2845e0:	e009883a 	mov	r4,fp
  2845e4:	02871280 	call	287128 <__lshift>
  2845e8:	1029883a 	mov	r20,r2
  2845ec:	003ecc06 	br	284120 <_dtoa_r+0xe14>
  2845f0:	00800e44 	movi	r2,57
  2845f4:	90809026 	beq	r18,r2,284838 <_dtoa_r+0x152c>
  2845f8:	92000044 	addi	r8,r18,1
  2845fc:	003f1f06 	br	28427c <_dtoa_r+0xf70>
  284600:	9011883a 	mov	r8,r18
  284604:	8825883a 	mov	r18,r17
  284608:	a023883a 	mov	r17,r20
  28460c:	003e2906 	br	283eb4 <_dtoa_r+0xba8>
  284610:	002b883a 	mov	r21,zero
  284614:	0023883a 	mov	r17,zero
  284618:	003f5406 	br	28436c <_dtoa_r+0x1060>
  28461c:	61bfffc4 	addi	r6,r12,-1
  284620:	300490fa 	slli	r2,r6,3
  284624:	00c00a74 	movhi	r3,41
  284628:	18c63404 	addi	r3,r3,6352
  28462c:	1885883a 	add	r2,r3,r2
  284630:	11000017 	ldw	r4,0(r2)
  284634:	11400117 	ldw	r5,4(r2)
  284638:	d8800717 	ldw	r2,28(sp)
  28463c:	880f883a 	mov	r7,r17
  284640:	d9801215 	stw	r6,72(sp)
  284644:	800d883a 	mov	r6,r16
  284648:	db001615 	stw	r12,88(sp)
  28464c:	15c00044 	addi	r23,r2,1
  284650:	028c0000 	call	28c000 <__muldf3>
  284654:	d9401017 	ldw	r5,64(sp)
  284658:	d9000f17 	ldw	r4,60(sp)
  28465c:	d8c01515 	stw	r3,84(sp)
  284660:	d8801415 	stw	r2,80(sp)
  284664:	028d0140 	call	28d014 <__fixdfsi>
  284668:	1009883a 	mov	r4,r2
  28466c:	1021883a 	mov	r16,r2
  284670:	028d0940 	call	28d094 <__floatsidf>
  284674:	d9000f17 	ldw	r4,60(sp)
  284678:	d9401017 	ldw	r5,64(sp)
  28467c:	100d883a 	mov	r6,r2
  284680:	180f883a 	mov	r7,r3
  284684:	028c7180 	call	28c718 <__subdf3>
  284688:	1829883a 	mov	r20,r3
  28468c:	d8c00717 	ldw	r3,28(sp)
  284690:	84000c04 	addi	r16,r16,48
  284694:	1023883a 	mov	r17,r2
  284698:	1c000005 	stb	r16,0(r3)
  28469c:	db001617 	ldw	r12,88(sp)
  2846a0:	00800044 	movi	r2,1
  2846a4:	60802226 	beq	r12,r2,284730 <_dtoa_r+0x1424>
  2846a8:	d9c00717 	ldw	r7,28(sp)
  2846ac:	8805883a 	mov	r2,r17
  2846b0:	b82b883a 	mov	r21,r23
  2846b4:	3b19883a 	add	r12,r7,r12
  2846b8:	6023883a 	mov	r17,r12
  2846bc:	a007883a 	mov	r3,r20
  2846c0:	dc800f15 	stw	r18,60(sp)
  2846c4:	000d883a 	mov	r6,zero
  2846c8:	01d00934 	movhi	r7,16420
  2846cc:	1009883a 	mov	r4,r2
  2846d0:	180b883a 	mov	r5,r3
  2846d4:	028c0000 	call	28c000 <__muldf3>
  2846d8:	180b883a 	mov	r5,r3
  2846dc:	1009883a 	mov	r4,r2
  2846e0:	1829883a 	mov	r20,r3
  2846e4:	1025883a 	mov	r18,r2
  2846e8:	028d0140 	call	28d014 <__fixdfsi>
  2846ec:	1009883a 	mov	r4,r2
  2846f0:	1021883a 	mov	r16,r2
  2846f4:	028d0940 	call	28d094 <__floatsidf>
  2846f8:	100d883a 	mov	r6,r2
  2846fc:	180f883a 	mov	r7,r3
  284700:	9009883a 	mov	r4,r18
  284704:	a00b883a 	mov	r5,r20
  284708:	84000c04 	addi	r16,r16,48
  28470c:	028c7180 	call	28c718 <__subdf3>
  284710:	ad400044 	addi	r21,r21,1
  284714:	ac3fffc5 	stb	r16,-1(r21)
  284718:	ac7fea1e 	bne	r21,r17,2846c4 <_dtoa_r+0x13b8>
  28471c:	1023883a 	mov	r17,r2
  284720:	d8801217 	ldw	r2,72(sp)
  284724:	dc800f17 	ldw	r18,60(sp)
  284728:	1829883a 	mov	r20,r3
  28472c:	b8af883a 	add	r23,r23,r2
  284730:	d9001417 	ldw	r4,80(sp)
  284734:	d9401517 	ldw	r5,84(sp)
  284738:	000d883a 	mov	r6,zero
  28473c:	01cff834 	movhi	r7,16352
  284740:	028ac140 	call	28ac14 <__adddf3>
  284744:	880d883a 	mov	r6,r17
  284748:	a00f883a 	mov	r7,r20
  28474c:	1009883a 	mov	r4,r2
  284750:	180b883a 	mov	r5,r3
  284754:	028bf0c0 	call	28bf0c <__ledf2>
  284758:	10003e0e 	bge	r2,zero,284854 <_dtoa_r+0x1548>
  28475c:	d9001317 	ldw	r4,76(sp)
  284760:	bd3fffc3 	ldbu	r20,-1(r23)
  284764:	d9000515 	stw	r4,20(sp)
  284768:	003d3b06 	br	283c58 <_dtoa_r+0x94c>
  28476c:	0027883a 	mov	r19,zero
  284770:	003f1b06 	br	2843e0 <_dtoa_r+0x10d4>
  284774:	d8800817 	ldw	r2,32(sp)
  284778:	11e9c83a 	sub	r20,r2,r7
  28477c:	0005883a 	mov	r2,zero
  284780:	003d5406 	br	283cd4 <_dtoa_r+0x9c8>
  284784:	00800044 	movi	r2,1
  284788:	003dc706 	br	283ea8 <_dtoa_r+0xb9c>
  28478c:	d8c00217 	ldw	r3,8(sp)
  284790:	00800d84 	movi	r2,54
  284794:	dd400a17 	ldw	r21,40(sp)
  284798:	10c5c83a 	sub	r2,r2,r3
  28479c:	dd000817 	ldw	r20,32(sp)
  2847a0:	003d4c06 	br	283cd4 <_dtoa_r+0x9c8>
  2847a4:	dc800f15 	stw	r18,60(sp)
  2847a8:	dcc01015 	stw	r19,64(sp)
  2847ac:	04000084 	movi	r16,2
  2847b0:	003bed06 	br	283768 <_dtoa_r+0x45c>
  2847b4:	d9000617 	ldw	r4,24(sp)
  2847b8:	203f0d26 	beq	r4,zero,2843f0 <_dtoa_r+0x10e4>
  2847bc:	d9800c17 	ldw	r6,48(sp)
  2847c0:	01bcab0e 	bge	zero,r6,283a70 <_dtoa_r+0x764>
  2847c4:	d9401017 	ldw	r5,64(sp)
  2847c8:	d9000f17 	ldw	r4,60(sp)
  2847cc:	000d883a 	mov	r6,zero
  2847d0:	01d00934 	movhi	r7,16420
  2847d4:	028c0000 	call	28c000 <__muldf3>
  2847d8:	81000044 	addi	r4,r16,1
  2847dc:	d8800f15 	stw	r2,60(sp)
  2847e0:	d8c01015 	stw	r3,64(sp)
  2847e4:	028d0940 	call	28d094 <__floatsidf>
  2847e8:	d9800f17 	ldw	r6,60(sp)
  2847ec:	d9c01017 	ldw	r7,64(sp)
  2847f0:	1009883a 	mov	r4,r2
  2847f4:	180b883a 	mov	r5,r3
  2847f8:	028c0000 	call	28c000 <__muldf3>
  2847fc:	01d00734 	movhi	r7,16412
  284800:	000d883a 	mov	r6,zero
  284804:	1009883a 	mov	r4,r2
  284808:	180b883a 	mov	r5,r3
  28480c:	028ac140 	call	28ac14 <__adddf3>
  284810:	d9c00517 	ldw	r7,20(sp)
  284814:	047f3034 	movhi	r17,64704
  284818:	1021883a 	mov	r16,r2
  28481c:	39ffffc4 	addi	r7,r7,-1
  284820:	d9c01315 	stw	r7,76(sp)
  284824:	1c63883a 	add	r17,r3,r17
  284828:	db000c17 	ldw	r12,48(sp)
  28482c:	003bea06 	br	2837d8 <_dtoa_r+0x4cc>
  284830:	dc000915 	stw	r16,36(sp)
  284834:	003e0e06 	br	284070 <_dtoa_r+0xd64>
  284838:	01000e44 	movi	r4,57
  28483c:	8825883a 	mov	r18,r17
  284840:	9dc00044 	addi	r23,r19,1
  284844:	99000005 	stb	r4,0(r19)
  284848:	a023883a 	mov	r17,r20
  28484c:	dc000915 	stw	r16,36(sp)
  284850:	003da406 	br	283ee4 <_dtoa_r+0xbd8>
  284854:	d9801417 	ldw	r6,80(sp)
  284858:	d9c01517 	ldw	r7,84(sp)
  28485c:	0009883a 	mov	r4,zero
  284860:	014ff834 	movhi	r5,16352
  284864:	028c7180 	call	28c718 <__subdf3>
  284868:	880d883a 	mov	r6,r17
  28486c:	a00f883a 	mov	r7,r20
  284870:	1009883a 	mov	r4,r2
  284874:	180b883a 	mov	r5,r3
  284878:	028be300 	call	28be30 <__gedf2>
  28487c:	00bc7c0e 	bge	zero,r2,283a70 <_dtoa_r+0x764>
  284880:	01000c04 	movi	r4,48
  284884:	00000106 	br	28488c <_dtoa_r+0x1580>
  284888:	102f883a 	mov	r23,r2
  28488c:	b8bfffc4 	addi	r2,r23,-1
  284890:	10c00007 	ldb	r3,0(r2)
  284894:	193ffc26 	beq	r3,r4,284888 <_dtoa_r+0x157c>
  284898:	d9801317 	ldw	r6,76(sp)
  28489c:	d9800515 	stw	r6,20(sp)
  2848a0:	003c4406 	br	2839b4 <_dtoa_r+0x6a8>
  2848a4:	d9801317 	ldw	r6,76(sp)
  2848a8:	d9800515 	stw	r6,20(sp)
  2848ac:	003cea06 	br	283c58 <_dtoa_r+0x94c>
  2848b0:	dd800f17 	ldw	r22,60(sp)
  2848b4:	dcc01017 	ldw	r19,64(sp)
  2848b8:	dc801217 	ldw	r18,72(sp)
  2848bc:	003c6c06 	br	283a70 <_dtoa_r+0x764>
  2848c0:	903e031e 	bne	r18,zero,2840d0 <_dtoa_r+0xdc4>
  2848c4:	003ebb06 	br	2843b4 <_dtoa_r+0x10a8>
  2848c8:	103e6c1e 	bne	r2,zero,28427c <_dtoa_r+0xf70>
  2848cc:	4080004c 	andi	r2,r8,1
  2848d0:	103e6a26 	beq	r2,zero,28427c <_dtoa_r+0xf70>
  2848d4:	003e6606 	br	284270 <_dtoa_r+0xf64>
  2848d8:	d8c00317 	ldw	r3,12(sp)
  2848dc:	00800084 	movi	r2,2
  2848e0:	10c02916 	blt	r2,r3,284988 <_dtoa_r+0x167c>
  2848e4:	d9000c17 	ldw	r4,48(sp)
  2848e8:	003e8806 	br	28430c <_dtoa_r+0x1000>
  2848ec:	04000084 	movi	r16,2
  2848f0:	003b9d06 	br	283768 <_dtoa_r+0x45c>
  2848f4:	d9001317 	ldw	r4,76(sp)
  2848f8:	d9000515 	stw	r4,20(sp)
  2848fc:	003cd606 	br	283c58 <_dtoa_r+0x94c>
  284900:	d8801317 	ldw	r2,76(sp)
  284904:	d8800515 	stw	r2,20(sp)
  284908:	003c2a06 	br	2839b4 <_dtoa_r+0x6a8>
  28490c:	d9800317 	ldw	r6,12(sp)
  284910:	00800084 	movi	r2,2
  284914:	11801516 	blt	r2,r6,28496c <_dtoa_r+0x1660>
  284918:	d9c00c17 	ldw	r7,48(sp)
  28491c:	d9c00615 	stw	r7,24(sp)
  284920:	003df706 	br	284100 <_dtoa_r+0xdf4>
  284924:	193d3926 	beq	r3,r4,283e0c <_dtoa_r+0xb00>
  284928:	00c00f04 	movi	r3,60
  28492c:	1885c83a 	sub	r2,r3,r2
  284930:	003ddf06 	br	2840b0 <_dtoa_r+0xda4>
  284934:	e009883a 	mov	r4,fp
  284938:	e0001115 	stw	zero,68(fp)
  28493c:	000b883a 	mov	r5,zero
  284940:	02869a80 	call	2869a8 <_Balloc>
  284944:	d8800715 	stw	r2,28(sp)
  284948:	d8c00717 	ldw	r3,28(sp)
  28494c:	00bfffc4 	movi	r2,-1
  284950:	01000044 	movi	r4,1
  284954:	d8800c15 	stw	r2,48(sp)
  284958:	e0c01015 	stw	r3,64(fp)
  28495c:	d9000b15 	stw	r4,44(sp)
  284960:	d8800615 	stw	r2,24(sp)
  284964:	d8002215 	stw	zero,136(sp)
  284968:	003c4106 	br	283a70 <_dtoa_r+0x764>
  28496c:	d8c00c17 	ldw	r3,48(sp)
  284970:	d8c00615 	stw	r3,24(sp)
  284974:	003e7006 	br	284338 <_dtoa_r+0x102c>
  284978:	04400044 	movi	r17,1
  28497c:	003b2006 	br	283600 <_dtoa_r+0x2f4>
  284980:	000b883a 	mov	r5,zero
  284984:	003b3d06 	br	28367c <_dtoa_r+0x370>
  284988:	d8800c17 	ldw	r2,48(sp)
  28498c:	d8800615 	stw	r2,24(sp)
  284990:	003e6906 	br	284338 <_dtoa_r+0x102c>

00284994 <__sflush_r>:
  284994:	2880030b 	ldhu	r2,12(r5)
  284998:	defffb04 	addi	sp,sp,-20
  28499c:	dcc00315 	stw	r19,12(sp)
  2849a0:	dc400115 	stw	r17,4(sp)
  2849a4:	dfc00415 	stw	ra,16(sp)
  2849a8:	dc800215 	stw	r18,8(sp)
  2849ac:	dc000015 	stw	r16,0(sp)
  2849b0:	10c0020c 	andi	r3,r2,8
  2849b4:	2823883a 	mov	r17,r5
  2849b8:	2027883a 	mov	r19,r4
  2849bc:	1800311e 	bne	r3,zero,284a84 <__sflush_r+0xf0>
  2849c0:	28c00117 	ldw	r3,4(r5)
  2849c4:	10820014 	ori	r2,r2,2048
  2849c8:	2880030d 	sth	r2,12(r5)
  2849cc:	00c04b0e 	bge	zero,r3,284afc <__sflush_r+0x168>
  2849d0:	8a000a17 	ldw	r8,40(r17)
  2849d4:	40002326 	beq	r8,zero,284a64 <__sflush_r+0xd0>
  2849d8:	9c000017 	ldw	r16,0(r19)
  2849dc:	10c4000c 	andi	r3,r2,4096
  2849e0:	98000015 	stw	zero,0(r19)
  2849e4:	18004826 	beq	r3,zero,284b08 <__sflush_r+0x174>
  2849e8:	89801417 	ldw	r6,80(r17)
  2849ec:	10c0010c 	andi	r3,r2,4
  2849f0:	18000626 	beq	r3,zero,284a0c <__sflush_r+0x78>
  2849f4:	88c00117 	ldw	r3,4(r17)
  2849f8:	88800c17 	ldw	r2,48(r17)
  2849fc:	30cdc83a 	sub	r6,r6,r3
  284a00:	10000226 	beq	r2,zero,284a0c <__sflush_r+0x78>
  284a04:	88800f17 	ldw	r2,60(r17)
  284a08:	308dc83a 	sub	r6,r6,r2
  284a0c:	89400717 	ldw	r5,28(r17)
  284a10:	000f883a 	mov	r7,zero
  284a14:	9809883a 	mov	r4,r19
  284a18:	403ee83a 	callr	r8
  284a1c:	00ffffc4 	movi	r3,-1
  284a20:	10c04426 	beq	r2,r3,284b34 <__sflush_r+0x1a0>
  284a24:	88c0030b 	ldhu	r3,12(r17)
  284a28:	89000417 	ldw	r4,16(r17)
  284a2c:	88000115 	stw	zero,4(r17)
  284a30:	197dffcc 	andi	r5,r3,63487
  284a34:	8940030d 	sth	r5,12(r17)
  284a38:	89000015 	stw	r4,0(r17)
  284a3c:	18c4000c 	andi	r3,r3,4096
  284a40:	18002c1e 	bne	r3,zero,284af4 <__sflush_r+0x160>
  284a44:	89400c17 	ldw	r5,48(r17)
  284a48:	9c000015 	stw	r16,0(r19)
  284a4c:	28000526 	beq	r5,zero,284a64 <__sflush_r+0xd0>
  284a50:	88801004 	addi	r2,r17,64
  284a54:	28800226 	beq	r5,r2,284a60 <__sflush_r+0xcc>
  284a58:	9809883a 	mov	r4,r19
  284a5c:	02851000 	call	285100 <_free_r>
  284a60:	88000c15 	stw	zero,48(r17)
  284a64:	0005883a 	mov	r2,zero
  284a68:	dfc00417 	ldw	ra,16(sp)
  284a6c:	dcc00317 	ldw	r19,12(sp)
  284a70:	dc800217 	ldw	r18,8(sp)
  284a74:	dc400117 	ldw	r17,4(sp)
  284a78:	dc000017 	ldw	r16,0(sp)
  284a7c:	dec00504 	addi	sp,sp,20
  284a80:	f800283a 	ret
  284a84:	2c800417 	ldw	r18,16(r5)
  284a88:	903ff626 	beq	r18,zero,284a64 <__sflush_r+0xd0>
  284a8c:	2c000017 	ldw	r16,0(r5)
  284a90:	108000cc 	andi	r2,r2,3
  284a94:	2c800015 	stw	r18,0(r5)
  284a98:	84a1c83a 	sub	r16,r16,r18
  284a9c:	1000131e 	bne	r2,zero,284aec <__sflush_r+0x158>
  284aa0:	28800517 	ldw	r2,20(r5)
  284aa4:	88800215 	stw	r2,8(r17)
  284aa8:	04000316 	blt	zero,r16,284ab8 <__sflush_r+0x124>
  284aac:	003fed06 	br	284a64 <__sflush_r+0xd0>
  284ab0:	90a5883a 	add	r18,r18,r2
  284ab4:	043feb0e 	bge	zero,r16,284a64 <__sflush_r+0xd0>
  284ab8:	88800917 	ldw	r2,36(r17)
  284abc:	89400717 	ldw	r5,28(r17)
  284ac0:	800f883a 	mov	r7,r16
  284ac4:	900d883a 	mov	r6,r18
  284ac8:	9809883a 	mov	r4,r19
  284acc:	103ee83a 	callr	r2
  284ad0:	80a1c83a 	sub	r16,r16,r2
  284ad4:	00bff616 	blt	zero,r2,284ab0 <__sflush_r+0x11c>
  284ad8:	88c0030b 	ldhu	r3,12(r17)
  284adc:	00bfffc4 	movi	r2,-1
  284ae0:	18c01014 	ori	r3,r3,64
  284ae4:	88c0030d 	sth	r3,12(r17)
  284ae8:	003fdf06 	br	284a68 <__sflush_r+0xd4>
  284aec:	0005883a 	mov	r2,zero
  284af0:	003fec06 	br	284aa4 <__sflush_r+0x110>
  284af4:	88801415 	stw	r2,80(r17)
  284af8:	003fd206 	br	284a44 <__sflush_r+0xb0>
  284afc:	28c00f17 	ldw	r3,60(r5)
  284b00:	00ffb316 	blt	zero,r3,2849d0 <__sflush_r+0x3c>
  284b04:	003fd706 	br	284a64 <__sflush_r+0xd0>
  284b08:	89400717 	ldw	r5,28(r17)
  284b0c:	000d883a 	mov	r6,zero
  284b10:	01c00044 	movi	r7,1
  284b14:	9809883a 	mov	r4,r19
  284b18:	403ee83a 	callr	r8
  284b1c:	100d883a 	mov	r6,r2
  284b20:	00bfffc4 	movi	r2,-1
  284b24:	30801426 	beq	r6,r2,284b78 <__sflush_r+0x1e4>
  284b28:	8880030b 	ldhu	r2,12(r17)
  284b2c:	8a000a17 	ldw	r8,40(r17)
  284b30:	003fae06 	br	2849ec <__sflush_r+0x58>
  284b34:	98c00017 	ldw	r3,0(r19)
  284b38:	183fba26 	beq	r3,zero,284a24 <__sflush_r+0x90>
  284b3c:	01000744 	movi	r4,29
  284b40:	19000626 	beq	r3,r4,284b5c <__sflush_r+0x1c8>
  284b44:	01000584 	movi	r4,22
  284b48:	19000426 	beq	r3,r4,284b5c <__sflush_r+0x1c8>
  284b4c:	88c0030b 	ldhu	r3,12(r17)
  284b50:	18c01014 	ori	r3,r3,64
  284b54:	88c0030d 	sth	r3,12(r17)
  284b58:	003fc306 	br	284a68 <__sflush_r+0xd4>
  284b5c:	8880030b 	ldhu	r2,12(r17)
  284b60:	88c00417 	ldw	r3,16(r17)
  284b64:	88000115 	stw	zero,4(r17)
  284b68:	10bdffcc 	andi	r2,r2,63487
  284b6c:	8880030d 	sth	r2,12(r17)
  284b70:	88c00015 	stw	r3,0(r17)
  284b74:	003fb306 	br	284a44 <__sflush_r+0xb0>
  284b78:	98800017 	ldw	r2,0(r19)
  284b7c:	103fea26 	beq	r2,zero,284b28 <__sflush_r+0x194>
  284b80:	00c00744 	movi	r3,29
  284b84:	10c00226 	beq	r2,r3,284b90 <__sflush_r+0x1fc>
  284b88:	00c00584 	movi	r3,22
  284b8c:	10c0031e 	bne	r2,r3,284b9c <__sflush_r+0x208>
  284b90:	9c000015 	stw	r16,0(r19)
  284b94:	0005883a 	mov	r2,zero
  284b98:	003fb306 	br	284a68 <__sflush_r+0xd4>
  284b9c:	88c0030b 	ldhu	r3,12(r17)
  284ba0:	3005883a 	mov	r2,r6
  284ba4:	18c01014 	ori	r3,r3,64
  284ba8:	88c0030d 	sth	r3,12(r17)
  284bac:	003fae06 	br	284a68 <__sflush_r+0xd4>

00284bb0 <_fflush_r>:
  284bb0:	defffd04 	addi	sp,sp,-12
  284bb4:	dc000115 	stw	r16,4(sp)
  284bb8:	dfc00215 	stw	ra,8(sp)
  284bbc:	2021883a 	mov	r16,r4
  284bc0:	20000226 	beq	r4,zero,284bcc <_fflush_r+0x1c>
  284bc4:	20800e17 	ldw	r2,56(r4)
  284bc8:	10000c26 	beq	r2,zero,284bfc <_fflush_r+0x4c>
  284bcc:	2880030f 	ldh	r2,12(r5)
  284bd0:	1000051e 	bne	r2,zero,284be8 <_fflush_r+0x38>
  284bd4:	0005883a 	mov	r2,zero
  284bd8:	dfc00217 	ldw	ra,8(sp)
  284bdc:	dc000117 	ldw	r16,4(sp)
  284be0:	dec00304 	addi	sp,sp,12
  284be4:	f800283a 	ret
  284be8:	8009883a 	mov	r4,r16
  284bec:	dfc00217 	ldw	ra,8(sp)
  284bf0:	dc000117 	ldw	r16,4(sp)
  284bf4:	dec00304 	addi	sp,sp,12
  284bf8:	02849941 	jmpi	284994 <__sflush_r>
  284bfc:	d9400015 	stw	r5,0(sp)
  284c00:	0284f8c0 	call	284f8c <__sinit>
  284c04:	d9400017 	ldw	r5,0(sp)
  284c08:	003ff006 	br	284bcc <_fflush_r+0x1c>

00284c0c <fflush>:
  284c0c:	20000526 	beq	r4,zero,284c24 <fflush+0x18>
  284c10:	00800a74 	movhi	r2,41
  284c14:	108da904 	addi	r2,r2,13988
  284c18:	200b883a 	mov	r5,r4
  284c1c:	11000017 	ldw	r4,0(r2)
  284c20:	0284bb01 	jmpi	284bb0 <_fflush_r>
  284c24:	00800a74 	movhi	r2,41
  284c28:	108da804 	addi	r2,r2,13984
  284c2c:	11000017 	ldw	r4,0(r2)
  284c30:	01400a34 	movhi	r5,40
  284c34:	2952ec04 	addi	r5,r5,19376
  284c38:	02859901 	jmpi	285990 <_fwalk_reent>

00284c3c <__fp_unlock>:
  284c3c:	0005883a 	mov	r2,zero
  284c40:	f800283a 	ret

00284c44 <_cleanup_r>:
  284c44:	01400a74 	movhi	r5,41
  284c48:	29666a04 	addi	r5,r5,-26200
  284c4c:	02859901 	jmpi	285990 <_fwalk_reent>

00284c50 <__sinit.part.1>:
  284c50:	defff704 	addi	sp,sp,-36
  284c54:	00c00a34 	movhi	r3,40
  284c58:	dfc00815 	stw	ra,32(sp)
  284c5c:	ddc00715 	stw	r23,28(sp)
  284c60:	dd800615 	stw	r22,24(sp)
  284c64:	dd400515 	stw	r21,20(sp)
  284c68:	dd000415 	stw	r20,16(sp)
  284c6c:	dcc00315 	stw	r19,12(sp)
  284c70:	dc800215 	stw	r18,8(sp)
  284c74:	dc400115 	stw	r17,4(sp)
  284c78:	dc000015 	stw	r16,0(sp)
  284c7c:	18d31104 	addi	r3,r3,19524
  284c80:	24000117 	ldw	r16,4(r4)
  284c84:	20c00f15 	stw	r3,60(r4)
  284c88:	2080bb04 	addi	r2,r4,748
  284c8c:	00c000c4 	movi	r3,3
  284c90:	20c0b915 	stw	r3,740(r4)
  284c94:	2080ba15 	stw	r2,744(r4)
  284c98:	2000b815 	stw	zero,736(r4)
  284c9c:	05c00204 	movi	r23,8
  284ca0:	00800104 	movi	r2,4
  284ca4:	2025883a 	mov	r18,r4
  284ca8:	b80d883a 	mov	r6,r23
  284cac:	81001704 	addi	r4,r16,92
  284cb0:	000b883a 	mov	r5,zero
  284cb4:	80000015 	stw	zero,0(r16)
  284cb8:	80000115 	stw	zero,4(r16)
  284cbc:	80000215 	stw	zero,8(r16)
  284cc0:	8080030d 	sth	r2,12(r16)
  284cc4:	80001915 	stw	zero,100(r16)
  284cc8:	8000038d 	sth	zero,14(r16)
  284ccc:	80000415 	stw	zero,16(r16)
  284cd0:	80000515 	stw	zero,20(r16)
  284cd4:	80000615 	stw	zero,24(r16)
  284cd8:	02868800 	call	286880 <memset>
  284cdc:	05800a34 	movhi	r22,40
  284ce0:	94400217 	ldw	r17,8(r18)
  284ce4:	05400a74 	movhi	r21,41
  284ce8:	05000a74 	movhi	r20,41
  284cec:	04c00a74 	movhi	r19,41
  284cf0:	b59ff404 	addi	r22,r22,32720
  284cf4:	ad600b04 	addi	r21,r21,-32724
  284cf8:	a5202a04 	addi	r20,r20,-32600
  284cfc:	9ce04104 	addi	r19,r19,-32508
  284d00:	85800815 	stw	r22,32(r16)
  284d04:	85400915 	stw	r21,36(r16)
  284d08:	85000a15 	stw	r20,40(r16)
  284d0c:	84c00b15 	stw	r19,44(r16)
  284d10:	84000715 	stw	r16,28(r16)
  284d14:	00800284 	movi	r2,10
  284d18:	8880030d 	sth	r2,12(r17)
  284d1c:	00800044 	movi	r2,1
  284d20:	b80d883a 	mov	r6,r23
  284d24:	89001704 	addi	r4,r17,92
  284d28:	000b883a 	mov	r5,zero
  284d2c:	88000015 	stw	zero,0(r17)
  284d30:	88000115 	stw	zero,4(r17)
  284d34:	88000215 	stw	zero,8(r17)
  284d38:	88001915 	stw	zero,100(r17)
  284d3c:	8880038d 	sth	r2,14(r17)
  284d40:	88000415 	stw	zero,16(r17)
  284d44:	88000515 	stw	zero,20(r17)
  284d48:	88000615 	stw	zero,24(r17)
  284d4c:	02868800 	call	286880 <memset>
  284d50:	94000317 	ldw	r16,12(r18)
  284d54:	00800484 	movi	r2,18
  284d58:	8c400715 	stw	r17,28(r17)
  284d5c:	8d800815 	stw	r22,32(r17)
  284d60:	8d400915 	stw	r21,36(r17)
  284d64:	8d000a15 	stw	r20,40(r17)
  284d68:	8cc00b15 	stw	r19,44(r17)
  284d6c:	8080030d 	sth	r2,12(r16)
  284d70:	00800084 	movi	r2,2
  284d74:	80000015 	stw	zero,0(r16)
  284d78:	80000115 	stw	zero,4(r16)
  284d7c:	80000215 	stw	zero,8(r16)
  284d80:	80001915 	stw	zero,100(r16)
  284d84:	8080038d 	sth	r2,14(r16)
  284d88:	80000415 	stw	zero,16(r16)
  284d8c:	80000515 	stw	zero,20(r16)
  284d90:	80000615 	stw	zero,24(r16)
  284d94:	b80d883a 	mov	r6,r23
  284d98:	000b883a 	mov	r5,zero
  284d9c:	81001704 	addi	r4,r16,92
  284da0:	02868800 	call	286880 <memset>
  284da4:	00800044 	movi	r2,1
  284da8:	84000715 	stw	r16,28(r16)
  284dac:	85800815 	stw	r22,32(r16)
  284db0:	85400915 	stw	r21,36(r16)
  284db4:	85000a15 	stw	r20,40(r16)
  284db8:	84c00b15 	stw	r19,44(r16)
  284dbc:	90800e15 	stw	r2,56(r18)
  284dc0:	dfc00817 	ldw	ra,32(sp)
  284dc4:	ddc00717 	ldw	r23,28(sp)
  284dc8:	dd800617 	ldw	r22,24(sp)
  284dcc:	dd400517 	ldw	r21,20(sp)
  284dd0:	dd000417 	ldw	r20,16(sp)
  284dd4:	dcc00317 	ldw	r19,12(sp)
  284dd8:	dc800217 	ldw	r18,8(sp)
  284ddc:	dc400117 	ldw	r17,4(sp)
  284de0:	dc000017 	ldw	r16,0(sp)
  284de4:	dec00904 	addi	sp,sp,36
  284de8:	f800283a 	ret

00284dec <__fp_lock>:
  284dec:	0005883a 	mov	r2,zero
  284df0:	f800283a 	ret

00284df4 <__sfmoreglue>:
  284df4:	defffc04 	addi	sp,sp,-16
  284df8:	dc400115 	stw	r17,4(sp)
  284dfc:	2c7fffc4 	addi	r17,r5,-1
  284e00:	8c401a24 	muli	r17,r17,104
  284e04:	dc800215 	stw	r18,8(sp)
  284e08:	2825883a 	mov	r18,r5
  284e0c:	89401d04 	addi	r5,r17,116
  284e10:	dc000015 	stw	r16,0(sp)
  284e14:	dfc00315 	stw	ra,12(sp)
  284e18:	0285cec0 	call	285cec <_malloc_r>
  284e1c:	1021883a 	mov	r16,r2
  284e20:	10000726 	beq	r2,zero,284e40 <__sfmoreglue+0x4c>
  284e24:	11000304 	addi	r4,r2,12
  284e28:	10000015 	stw	zero,0(r2)
  284e2c:	14800115 	stw	r18,4(r2)
  284e30:	11000215 	stw	r4,8(r2)
  284e34:	89801a04 	addi	r6,r17,104
  284e38:	000b883a 	mov	r5,zero
  284e3c:	02868800 	call	286880 <memset>
  284e40:	8005883a 	mov	r2,r16
  284e44:	dfc00317 	ldw	ra,12(sp)
  284e48:	dc800217 	ldw	r18,8(sp)
  284e4c:	dc400117 	ldw	r17,4(sp)
  284e50:	dc000017 	ldw	r16,0(sp)
  284e54:	dec00404 	addi	sp,sp,16
  284e58:	f800283a 	ret

00284e5c <__sfp>:
  284e5c:	defffb04 	addi	sp,sp,-20
  284e60:	dc000015 	stw	r16,0(sp)
  284e64:	04000a74 	movhi	r16,41
  284e68:	840da804 	addi	r16,r16,13984
  284e6c:	dcc00315 	stw	r19,12(sp)
  284e70:	2027883a 	mov	r19,r4
  284e74:	81000017 	ldw	r4,0(r16)
  284e78:	dfc00415 	stw	ra,16(sp)
  284e7c:	dc800215 	stw	r18,8(sp)
  284e80:	20800e17 	ldw	r2,56(r4)
  284e84:	dc400115 	stw	r17,4(sp)
  284e88:	1000021e 	bne	r2,zero,284e94 <__sfp+0x38>
  284e8c:	0284c500 	call	284c50 <__sinit.part.1>
  284e90:	81000017 	ldw	r4,0(r16)
  284e94:	2480b804 	addi	r18,r4,736
  284e98:	047fffc4 	movi	r17,-1
  284e9c:	91000117 	ldw	r4,4(r18)
  284ea0:	94000217 	ldw	r16,8(r18)
  284ea4:	213fffc4 	addi	r4,r4,-1
  284ea8:	20000a16 	blt	r4,zero,284ed4 <__sfp+0x78>
  284eac:	8080030f 	ldh	r2,12(r16)
  284eb0:	10000c26 	beq	r2,zero,284ee4 <__sfp+0x88>
  284eb4:	80c01d04 	addi	r3,r16,116
  284eb8:	00000206 	br	284ec4 <__sfp+0x68>
  284ebc:	18bfe60f 	ldh	r2,-104(r3)
  284ec0:	10000826 	beq	r2,zero,284ee4 <__sfp+0x88>
  284ec4:	213fffc4 	addi	r4,r4,-1
  284ec8:	1c3ffd04 	addi	r16,r3,-12
  284ecc:	18c01a04 	addi	r3,r3,104
  284ed0:	247ffa1e 	bne	r4,r17,284ebc <__sfp+0x60>
  284ed4:	90800017 	ldw	r2,0(r18)
  284ed8:	10001d26 	beq	r2,zero,284f50 <__sfp+0xf4>
  284edc:	1025883a 	mov	r18,r2
  284ee0:	003fee06 	br	284e9c <__sfp+0x40>
  284ee4:	00bfffc4 	movi	r2,-1
  284ee8:	8080038d 	sth	r2,14(r16)
  284eec:	00800044 	movi	r2,1
  284ef0:	8080030d 	sth	r2,12(r16)
  284ef4:	80001915 	stw	zero,100(r16)
  284ef8:	80000015 	stw	zero,0(r16)
  284efc:	80000215 	stw	zero,8(r16)
  284f00:	80000115 	stw	zero,4(r16)
  284f04:	80000415 	stw	zero,16(r16)
  284f08:	80000515 	stw	zero,20(r16)
  284f0c:	80000615 	stw	zero,24(r16)
  284f10:	01800204 	movi	r6,8
  284f14:	000b883a 	mov	r5,zero
  284f18:	81001704 	addi	r4,r16,92
  284f1c:	02868800 	call	286880 <memset>
  284f20:	8005883a 	mov	r2,r16
  284f24:	80000c15 	stw	zero,48(r16)
  284f28:	80000d15 	stw	zero,52(r16)
  284f2c:	80001115 	stw	zero,68(r16)
  284f30:	80001215 	stw	zero,72(r16)
  284f34:	dfc00417 	ldw	ra,16(sp)
  284f38:	dcc00317 	ldw	r19,12(sp)
  284f3c:	dc800217 	ldw	r18,8(sp)
  284f40:	dc400117 	ldw	r17,4(sp)
  284f44:	dc000017 	ldw	r16,0(sp)
  284f48:	dec00504 	addi	sp,sp,20
  284f4c:	f800283a 	ret
  284f50:	01400104 	movi	r5,4
  284f54:	9809883a 	mov	r4,r19
  284f58:	0284df40 	call	284df4 <__sfmoreglue>
  284f5c:	90800015 	stw	r2,0(r18)
  284f60:	103fde1e 	bne	r2,zero,284edc <__sfp+0x80>
  284f64:	00800304 	movi	r2,12
  284f68:	98800015 	stw	r2,0(r19)
  284f6c:	0005883a 	mov	r2,zero
  284f70:	003ff006 	br	284f34 <__sfp+0xd8>

00284f74 <_cleanup>:
  284f74:	00800a74 	movhi	r2,41
  284f78:	108da804 	addi	r2,r2,13984
  284f7c:	11000017 	ldw	r4,0(r2)
  284f80:	01400a74 	movhi	r5,41
  284f84:	29666a04 	addi	r5,r5,-26200
  284f88:	02859901 	jmpi	285990 <_fwalk_reent>

00284f8c <__sinit>:
  284f8c:	20800e17 	ldw	r2,56(r4)
  284f90:	10000126 	beq	r2,zero,284f98 <__sinit+0xc>
  284f94:	f800283a 	ret
  284f98:	0284c501 	jmpi	284c50 <__sinit.part.1>

00284f9c <__sfp_lock_acquire>:
  284f9c:	f800283a 	ret

00284fa0 <__sfp_lock_release>:
  284fa0:	f800283a 	ret

00284fa4 <__sinit_lock_acquire>:
  284fa4:	f800283a 	ret

00284fa8 <__sinit_lock_release>:
  284fa8:	f800283a 	ret

00284fac <__fp_lock_all>:
  284fac:	00800a74 	movhi	r2,41
  284fb0:	108da904 	addi	r2,r2,13988
  284fb4:	11000017 	ldw	r4,0(r2)
  284fb8:	01400a34 	movhi	r5,40
  284fbc:	29537b04 	addi	r5,r5,19948
  284fc0:	02858cc1 	jmpi	2858cc <_fwalk>

00284fc4 <__fp_unlock_all>:
  284fc4:	00800a74 	movhi	r2,41
  284fc8:	108da904 	addi	r2,r2,13988
  284fcc:	11000017 	ldw	r4,0(r2)
  284fd0:	01400a34 	movhi	r5,40
  284fd4:	29530f04 	addi	r5,r5,19516
  284fd8:	02858cc1 	jmpi	2858cc <_fwalk>

00284fdc <_malloc_trim_r>:
  284fdc:	defffb04 	addi	sp,sp,-20
  284fe0:	dcc00315 	stw	r19,12(sp)
  284fe4:	04c00a74 	movhi	r19,41
  284fe8:	dc800215 	stw	r18,8(sp)
  284fec:	dc400115 	stw	r17,4(sp)
  284ff0:	dc000015 	stw	r16,0(sp)
  284ff4:	dfc00415 	stw	ra,16(sp)
  284ff8:	2821883a 	mov	r16,r5
  284ffc:	9cc7f604 	addi	r19,r19,8152
  285000:	2025883a 	mov	r18,r4
  285004:	028d7f80 	call	28d7f8 <__malloc_lock>
  285008:	98800217 	ldw	r2,8(r19)
  28500c:	14400117 	ldw	r17,4(r2)
  285010:	00bfff04 	movi	r2,-4
  285014:	88a2703a 	and	r17,r17,r2
  285018:	8c21c83a 	sub	r16,r17,r16
  28501c:	8403fbc4 	addi	r16,r16,4079
  285020:	8020d33a 	srli	r16,r16,12
  285024:	0083ffc4 	movi	r2,4095
  285028:	843fffc4 	addi	r16,r16,-1
  28502c:	8020933a 	slli	r16,r16,12
  285030:	1400060e 	bge	r2,r16,28504c <_malloc_trim_r+0x70>
  285034:	000b883a 	mov	r5,zero
  285038:	9009883a 	mov	r4,r18
  28503c:	0287f7c0 	call	287f7c <_sbrk_r>
  285040:	98c00217 	ldw	r3,8(r19)
  285044:	1c47883a 	add	r3,r3,r17
  285048:	10c00a26 	beq	r2,r3,285074 <_malloc_trim_r+0x98>
  28504c:	9009883a 	mov	r4,r18
  285050:	028d81c0 	call	28d81c <__malloc_unlock>
  285054:	0005883a 	mov	r2,zero
  285058:	dfc00417 	ldw	ra,16(sp)
  28505c:	dcc00317 	ldw	r19,12(sp)
  285060:	dc800217 	ldw	r18,8(sp)
  285064:	dc400117 	ldw	r17,4(sp)
  285068:	dc000017 	ldw	r16,0(sp)
  28506c:	dec00504 	addi	sp,sp,20
  285070:	f800283a 	ret
  285074:	040bc83a 	sub	r5,zero,r16
  285078:	9009883a 	mov	r4,r18
  28507c:	0287f7c0 	call	287f7c <_sbrk_r>
  285080:	00ffffc4 	movi	r3,-1
  285084:	10c00d26 	beq	r2,r3,2850bc <_malloc_trim_r+0xe0>
  285088:	00c00a74 	movhi	r3,41
  28508c:	18d4b004 	addi	r3,r3,21184
  285090:	18800017 	ldw	r2,0(r3)
  285094:	99000217 	ldw	r4,8(r19)
  285098:	8c23c83a 	sub	r17,r17,r16
  28509c:	8c400054 	ori	r17,r17,1
  2850a0:	1421c83a 	sub	r16,r2,r16
  2850a4:	24400115 	stw	r17,4(r4)
  2850a8:	9009883a 	mov	r4,r18
  2850ac:	1c000015 	stw	r16,0(r3)
  2850b0:	028d81c0 	call	28d81c <__malloc_unlock>
  2850b4:	00800044 	movi	r2,1
  2850b8:	003fe706 	br	285058 <_malloc_trim_r+0x7c>
  2850bc:	000b883a 	mov	r5,zero
  2850c0:	9009883a 	mov	r4,r18
  2850c4:	0287f7c0 	call	287f7c <_sbrk_r>
  2850c8:	99000217 	ldw	r4,8(r19)
  2850cc:	014003c4 	movi	r5,15
  2850d0:	1107c83a 	sub	r3,r2,r4
  2850d4:	28ffdd0e 	bge	r5,r3,28504c <_malloc_trim_r+0x70>
  2850d8:	01400a74 	movhi	r5,41
  2850dc:	294dab04 	addi	r5,r5,13996
  2850e0:	29400017 	ldw	r5,0(r5)
  2850e4:	18c00054 	ori	r3,r3,1
  2850e8:	20c00115 	stw	r3,4(r4)
  2850ec:	00c00a74 	movhi	r3,41
  2850f0:	1145c83a 	sub	r2,r2,r5
  2850f4:	18d4b004 	addi	r3,r3,21184
  2850f8:	18800015 	stw	r2,0(r3)
  2850fc:	003fd306 	br	28504c <_malloc_trim_r+0x70>

00285100 <_free_r>:
  285100:	28004126 	beq	r5,zero,285208 <_free_r+0x108>
  285104:	defffd04 	addi	sp,sp,-12
  285108:	dc400115 	stw	r17,4(sp)
  28510c:	dc000015 	stw	r16,0(sp)
  285110:	2023883a 	mov	r17,r4
  285114:	2821883a 	mov	r16,r5
  285118:	dfc00215 	stw	ra,8(sp)
  28511c:	028d7f80 	call	28d7f8 <__malloc_lock>
  285120:	81ffff17 	ldw	r7,-4(r16)
  285124:	00bfff84 	movi	r2,-2
  285128:	01000a74 	movhi	r4,41
  28512c:	81bffe04 	addi	r6,r16,-8
  285130:	3884703a 	and	r2,r7,r2
  285134:	2107f604 	addi	r4,r4,8152
  285138:	308b883a 	add	r5,r6,r2
  28513c:	2a400117 	ldw	r9,4(r5)
  285140:	22000217 	ldw	r8,8(r4)
  285144:	00ffff04 	movi	r3,-4
  285148:	48c6703a 	and	r3,r9,r3
  28514c:	2a005726 	beq	r5,r8,2852ac <_free_r+0x1ac>
  285150:	28c00115 	stw	r3,4(r5)
  285154:	39c0004c 	andi	r7,r7,1
  285158:	3800091e 	bne	r7,zero,285180 <_free_r+0x80>
  28515c:	823ffe17 	ldw	r8,-8(r16)
  285160:	22400204 	addi	r9,r4,8
  285164:	320dc83a 	sub	r6,r6,r8
  285168:	31c00217 	ldw	r7,8(r6)
  28516c:	1205883a 	add	r2,r2,r8
  285170:	3a406526 	beq	r7,r9,285308 <_free_r+0x208>
  285174:	32000317 	ldw	r8,12(r6)
  285178:	3a000315 	stw	r8,12(r7)
  28517c:	41c00215 	stw	r7,8(r8)
  285180:	28cf883a 	add	r7,r5,r3
  285184:	39c00117 	ldw	r7,4(r7)
  285188:	39c0004c 	andi	r7,r7,1
  28518c:	38003a26 	beq	r7,zero,285278 <_free_r+0x178>
  285190:	10c00054 	ori	r3,r2,1
  285194:	30c00115 	stw	r3,4(r6)
  285198:	3087883a 	add	r3,r6,r2
  28519c:	18800015 	stw	r2,0(r3)
  2851a0:	00c07fc4 	movi	r3,511
  2851a4:	18801936 	bltu	r3,r2,28520c <_free_r+0x10c>
  2851a8:	1004d0fa 	srli	r2,r2,3
  2851ac:	01c00044 	movi	r7,1
  2851b0:	21400117 	ldw	r5,4(r4)
  2851b4:	10c00044 	addi	r3,r2,1
  2851b8:	18c7883a 	add	r3,r3,r3
  2851bc:	1005d0ba 	srai	r2,r2,2
  2851c0:	18c7883a 	add	r3,r3,r3
  2851c4:	18c7883a 	add	r3,r3,r3
  2851c8:	1907883a 	add	r3,r3,r4
  2851cc:	3884983a 	sll	r2,r7,r2
  2851d0:	19c00017 	ldw	r7,0(r3)
  2851d4:	1a3ffe04 	addi	r8,r3,-8
  2851d8:	1144b03a 	or	r2,r2,r5
  2851dc:	32000315 	stw	r8,12(r6)
  2851e0:	31c00215 	stw	r7,8(r6)
  2851e4:	20800115 	stw	r2,4(r4)
  2851e8:	19800015 	stw	r6,0(r3)
  2851ec:	39800315 	stw	r6,12(r7)
  2851f0:	8809883a 	mov	r4,r17
  2851f4:	dfc00217 	ldw	ra,8(sp)
  2851f8:	dc400117 	ldw	r17,4(sp)
  2851fc:	dc000017 	ldw	r16,0(sp)
  285200:	dec00304 	addi	sp,sp,12
  285204:	028d81c1 	jmpi	28d81c <__malloc_unlock>
  285208:	f800283a 	ret
  28520c:	100ad27a 	srli	r5,r2,9
  285210:	00c00104 	movi	r3,4
  285214:	19404a36 	bltu	r3,r5,285340 <_free_r+0x240>
  285218:	100ad1ba 	srli	r5,r2,6
  28521c:	28c00e44 	addi	r3,r5,57
  285220:	18c7883a 	add	r3,r3,r3
  285224:	29400e04 	addi	r5,r5,56
  285228:	18c7883a 	add	r3,r3,r3
  28522c:	18c7883a 	add	r3,r3,r3
  285230:	1909883a 	add	r4,r3,r4
  285234:	20c00017 	ldw	r3,0(r4)
  285238:	01c00a74 	movhi	r7,41
  28523c:	213ffe04 	addi	r4,r4,-8
  285240:	39c7f604 	addi	r7,r7,8152
  285244:	20c04426 	beq	r4,r3,285358 <_free_r+0x258>
  285248:	01ffff04 	movi	r7,-4
  28524c:	19400117 	ldw	r5,4(r3)
  285250:	29ca703a 	and	r5,r5,r7
  285254:	1140022e 	bgeu	r2,r5,285260 <_free_r+0x160>
  285258:	18c00217 	ldw	r3,8(r3)
  28525c:	20fffb1e 	bne	r4,r3,28524c <_free_r+0x14c>
  285260:	19000317 	ldw	r4,12(r3)
  285264:	31000315 	stw	r4,12(r6)
  285268:	30c00215 	stw	r3,8(r6)
  28526c:	21800215 	stw	r6,8(r4)
  285270:	19800315 	stw	r6,12(r3)
  285274:	003fde06 	br	2851f0 <_free_r+0xf0>
  285278:	29c00217 	ldw	r7,8(r5)
  28527c:	10c5883a 	add	r2,r2,r3
  285280:	00c00a74 	movhi	r3,41
  285284:	18c7f804 	addi	r3,r3,8160
  285288:	38c03b26 	beq	r7,r3,285378 <_free_r+0x278>
  28528c:	2a000317 	ldw	r8,12(r5)
  285290:	11400054 	ori	r5,r2,1
  285294:	3087883a 	add	r3,r6,r2
  285298:	3a000315 	stw	r8,12(r7)
  28529c:	41c00215 	stw	r7,8(r8)
  2852a0:	31400115 	stw	r5,4(r6)
  2852a4:	18800015 	stw	r2,0(r3)
  2852a8:	003fbd06 	br	2851a0 <_free_r+0xa0>
  2852ac:	39c0004c 	andi	r7,r7,1
  2852b0:	10c5883a 	add	r2,r2,r3
  2852b4:	3800071e 	bne	r7,zero,2852d4 <_free_r+0x1d4>
  2852b8:	81fffe17 	ldw	r7,-8(r16)
  2852bc:	31cdc83a 	sub	r6,r6,r7
  2852c0:	30c00317 	ldw	r3,12(r6)
  2852c4:	31400217 	ldw	r5,8(r6)
  2852c8:	11c5883a 	add	r2,r2,r7
  2852cc:	28c00315 	stw	r3,12(r5)
  2852d0:	19400215 	stw	r5,8(r3)
  2852d4:	10c00054 	ori	r3,r2,1
  2852d8:	30c00115 	stw	r3,4(r6)
  2852dc:	00c00a74 	movhi	r3,41
  2852e0:	18cdac04 	addi	r3,r3,14000
  2852e4:	18c00017 	ldw	r3,0(r3)
  2852e8:	21800215 	stw	r6,8(r4)
  2852ec:	10ffc036 	bltu	r2,r3,2851f0 <_free_r+0xf0>
  2852f0:	00800a74 	movhi	r2,41
  2852f4:	1094a704 	addi	r2,r2,21148
  2852f8:	11400017 	ldw	r5,0(r2)
  2852fc:	8809883a 	mov	r4,r17
  285300:	0284fdc0 	call	284fdc <_malloc_trim_r>
  285304:	003fba06 	br	2851f0 <_free_r+0xf0>
  285308:	28c9883a 	add	r4,r5,r3
  28530c:	21000117 	ldw	r4,4(r4)
  285310:	2100004c 	andi	r4,r4,1
  285314:	2000391e 	bne	r4,zero,2853fc <_free_r+0x2fc>
  285318:	29c00217 	ldw	r7,8(r5)
  28531c:	29000317 	ldw	r4,12(r5)
  285320:	1885883a 	add	r2,r3,r2
  285324:	10c00054 	ori	r3,r2,1
  285328:	39000315 	stw	r4,12(r7)
  28532c:	21c00215 	stw	r7,8(r4)
  285330:	30c00115 	stw	r3,4(r6)
  285334:	308d883a 	add	r6,r6,r2
  285338:	30800015 	stw	r2,0(r6)
  28533c:	003fac06 	br	2851f0 <_free_r+0xf0>
  285340:	00c00504 	movi	r3,20
  285344:	19401536 	bltu	r3,r5,28539c <_free_r+0x29c>
  285348:	28c01704 	addi	r3,r5,92
  28534c:	18c7883a 	add	r3,r3,r3
  285350:	294016c4 	addi	r5,r5,91
  285354:	003fb406 	br	285228 <_free_r+0x128>
  285358:	280bd0ba 	srai	r5,r5,2
  28535c:	00c00044 	movi	r3,1
  285360:	38800117 	ldw	r2,4(r7)
  285364:	194a983a 	sll	r5,r3,r5
  285368:	2007883a 	mov	r3,r4
  28536c:	2884b03a 	or	r2,r5,r2
  285370:	38800115 	stw	r2,4(r7)
  285374:	003fbb06 	br	285264 <_free_r+0x164>
  285378:	21800515 	stw	r6,20(r4)
  28537c:	21800415 	stw	r6,16(r4)
  285380:	10c00054 	ori	r3,r2,1
  285384:	31c00315 	stw	r7,12(r6)
  285388:	31c00215 	stw	r7,8(r6)
  28538c:	30c00115 	stw	r3,4(r6)
  285390:	308d883a 	add	r6,r6,r2
  285394:	30800015 	stw	r2,0(r6)
  285398:	003f9506 	br	2851f0 <_free_r+0xf0>
  28539c:	00c01504 	movi	r3,84
  2853a0:	19400536 	bltu	r3,r5,2853b8 <_free_r+0x2b8>
  2853a4:	100ad33a 	srli	r5,r2,12
  2853a8:	28c01bc4 	addi	r3,r5,111
  2853ac:	18c7883a 	add	r3,r3,r3
  2853b0:	29401b84 	addi	r5,r5,110
  2853b4:	003f9c06 	br	285228 <_free_r+0x128>
  2853b8:	00c05504 	movi	r3,340
  2853bc:	19400536 	bltu	r3,r5,2853d4 <_free_r+0x2d4>
  2853c0:	100ad3fa 	srli	r5,r2,15
  2853c4:	28c01e04 	addi	r3,r5,120
  2853c8:	18c7883a 	add	r3,r3,r3
  2853cc:	29401dc4 	addi	r5,r5,119
  2853d0:	003f9506 	br	285228 <_free_r+0x128>
  2853d4:	00c15504 	movi	r3,1364
  2853d8:	19400536 	bltu	r3,r5,2853f0 <_free_r+0x2f0>
  2853dc:	100ad4ba 	srli	r5,r2,18
  2853e0:	28c01f44 	addi	r3,r5,125
  2853e4:	18c7883a 	add	r3,r3,r3
  2853e8:	29401f04 	addi	r5,r5,124
  2853ec:	003f8e06 	br	285228 <_free_r+0x128>
  2853f0:	00c03f84 	movi	r3,254
  2853f4:	01401f84 	movi	r5,126
  2853f8:	003f8b06 	br	285228 <_free_r+0x128>
  2853fc:	10c00054 	ori	r3,r2,1
  285400:	30c00115 	stw	r3,4(r6)
  285404:	308d883a 	add	r6,r6,r2
  285408:	30800015 	stw	r2,0(r6)
  28540c:	003f7806 	br	2851f0 <_free_r+0xf0>

00285410 <__sfvwrite_r>:
  285410:	30800217 	ldw	r2,8(r6)
  285414:	10006726 	beq	r2,zero,2855b4 <__sfvwrite_r+0x1a4>
  285418:	28c0030b 	ldhu	r3,12(r5)
  28541c:	defff404 	addi	sp,sp,-48
  285420:	dd400715 	stw	r21,28(sp)
  285424:	dd000615 	stw	r20,24(sp)
  285428:	dc000215 	stw	r16,8(sp)
  28542c:	dfc00b15 	stw	ra,44(sp)
  285430:	df000a15 	stw	fp,40(sp)
  285434:	ddc00915 	stw	r23,36(sp)
  285438:	dd800815 	stw	r22,32(sp)
  28543c:	dcc00515 	stw	r19,20(sp)
  285440:	dc800415 	stw	r18,16(sp)
  285444:	dc400315 	stw	r17,12(sp)
  285448:	1880020c 	andi	r2,r3,8
  28544c:	2821883a 	mov	r16,r5
  285450:	202b883a 	mov	r21,r4
  285454:	3029883a 	mov	r20,r6
  285458:	10002726 	beq	r2,zero,2854f8 <__sfvwrite_r+0xe8>
  28545c:	28800417 	ldw	r2,16(r5)
  285460:	10002526 	beq	r2,zero,2854f8 <__sfvwrite_r+0xe8>
  285464:	1880008c 	andi	r2,r3,2
  285468:	a4400017 	ldw	r17,0(r20)
  28546c:	10002a26 	beq	r2,zero,285518 <__sfvwrite_r+0x108>
  285470:	05a00034 	movhi	r22,32768
  285474:	0027883a 	mov	r19,zero
  285478:	0025883a 	mov	r18,zero
  28547c:	b5bf0004 	addi	r22,r22,-1024
  285480:	980d883a 	mov	r6,r19
  285484:	a809883a 	mov	r4,r21
  285488:	90004626 	beq	r18,zero,2855a4 <__sfvwrite_r+0x194>
  28548c:	900f883a 	mov	r7,r18
  285490:	b480022e 	bgeu	r22,r18,28549c <__sfvwrite_r+0x8c>
  285494:	01e00034 	movhi	r7,32768
  285498:	39ff0004 	addi	r7,r7,-1024
  28549c:	80800917 	ldw	r2,36(r16)
  2854a0:	81400717 	ldw	r5,28(r16)
  2854a4:	103ee83a 	callr	r2
  2854a8:	0080570e 	bge	zero,r2,285608 <__sfvwrite_r+0x1f8>
  2854ac:	a0c00217 	ldw	r3,8(r20)
  2854b0:	98a7883a 	add	r19,r19,r2
  2854b4:	90a5c83a 	sub	r18,r18,r2
  2854b8:	1885c83a 	sub	r2,r3,r2
  2854bc:	a0800215 	stw	r2,8(r20)
  2854c0:	103fef1e 	bne	r2,zero,285480 <__sfvwrite_r+0x70>
  2854c4:	0005883a 	mov	r2,zero
  2854c8:	dfc00b17 	ldw	ra,44(sp)
  2854cc:	df000a17 	ldw	fp,40(sp)
  2854d0:	ddc00917 	ldw	r23,36(sp)
  2854d4:	dd800817 	ldw	r22,32(sp)
  2854d8:	dd400717 	ldw	r21,28(sp)
  2854dc:	dd000617 	ldw	r20,24(sp)
  2854e0:	dcc00517 	ldw	r19,20(sp)
  2854e4:	dc800417 	ldw	r18,16(sp)
  2854e8:	dc400317 	ldw	r17,12(sp)
  2854ec:	dc000217 	ldw	r16,8(sp)
  2854f0:	dec00c04 	addi	sp,sp,48
  2854f4:	f800283a 	ret
  2854f8:	800b883a 	mov	r5,r16
  2854fc:	a809883a 	mov	r4,r21
  285500:	0282fb80 	call	282fb8 <__swsetup_r>
  285504:	1000eb1e 	bne	r2,zero,2858b4 <__sfvwrite_r+0x4a4>
  285508:	80c0030b 	ldhu	r3,12(r16)
  28550c:	a4400017 	ldw	r17,0(r20)
  285510:	1880008c 	andi	r2,r3,2
  285514:	103fd61e 	bne	r2,zero,285470 <__sfvwrite_r+0x60>
  285518:	1880004c 	andi	r2,r3,1
  28551c:	10003f1e 	bne	r2,zero,28561c <__sfvwrite_r+0x20c>
  285520:	0039883a 	mov	fp,zero
  285524:	0025883a 	mov	r18,zero
  285528:	90001a26 	beq	r18,zero,285594 <__sfvwrite_r+0x184>
  28552c:	1880800c 	andi	r2,r3,512
  285530:	84c00217 	ldw	r19,8(r16)
  285534:	10002126 	beq	r2,zero,2855bc <__sfvwrite_r+0x1ac>
  285538:	982f883a 	mov	r23,r19
  28553c:	94c09336 	bltu	r18,r19,28578c <__sfvwrite_r+0x37c>
  285540:	1881200c 	andi	r2,r3,1152
  285544:	10009e1e 	bne	r2,zero,2857c0 <__sfvwrite_r+0x3b0>
  285548:	81000017 	ldw	r4,0(r16)
  28554c:	b80d883a 	mov	r6,r23
  285550:	e00b883a 	mov	r5,fp
  285554:	02867240 	call	286724 <memmove>
  285558:	80c00217 	ldw	r3,8(r16)
  28555c:	81000017 	ldw	r4,0(r16)
  285560:	9005883a 	mov	r2,r18
  285564:	1ce7c83a 	sub	r19,r3,r19
  285568:	25cf883a 	add	r7,r4,r23
  28556c:	84c00215 	stw	r19,8(r16)
  285570:	81c00015 	stw	r7,0(r16)
  285574:	a0c00217 	ldw	r3,8(r20)
  285578:	e0b9883a 	add	fp,fp,r2
  28557c:	90a5c83a 	sub	r18,r18,r2
  285580:	18a7c83a 	sub	r19,r3,r2
  285584:	a4c00215 	stw	r19,8(r20)
  285588:	983fce26 	beq	r19,zero,2854c4 <__sfvwrite_r+0xb4>
  28558c:	80c0030b 	ldhu	r3,12(r16)
  285590:	903fe61e 	bne	r18,zero,28552c <__sfvwrite_r+0x11c>
  285594:	8f000017 	ldw	fp,0(r17)
  285598:	8c800117 	ldw	r18,4(r17)
  28559c:	8c400204 	addi	r17,r17,8
  2855a0:	003fe106 	br	285528 <__sfvwrite_r+0x118>
  2855a4:	8cc00017 	ldw	r19,0(r17)
  2855a8:	8c800117 	ldw	r18,4(r17)
  2855ac:	8c400204 	addi	r17,r17,8
  2855b0:	003fb306 	br	285480 <__sfvwrite_r+0x70>
  2855b4:	0005883a 	mov	r2,zero
  2855b8:	f800283a 	ret
  2855bc:	81000017 	ldw	r4,0(r16)
  2855c0:	80800417 	ldw	r2,16(r16)
  2855c4:	11005736 	bltu	r2,r4,285724 <__sfvwrite_r+0x314>
  2855c8:	85c00517 	ldw	r23,20(r16)
  2855cc:	95c05536 	bltu	r18,r23,285724 <__sfvwrite_r+0x314>
  2855d0:	00a00034 	movhi	r2,32768
  2855d4:	10bfffc4 	addi	r2,r2,-1
  2855d8:	9009883a 	mov	r4,r18
  2855dc:	1480012e 	bgeu	r2,r18,2855e4 <__sfvwrite_r+0x1d4>
  2855e0:	1009883a 	mov	r4,r2
  2855e4:	b80b883a 	mov	r5,r23
  2855e8:	028095c0 	call	28095c <__divsi3>
  2855ec:	15cf383a 	mul	r7,r2,r23
  2855f0:	81400717 	ldw	r5,28(r16)
  2855f4:	80800917 	ldw	r2,36(r16)
  2855f8:	e00d883a 	mov	r6,fp
  2855fc:	a809883a 	mov	r4,r21
  285600:	103ee83a 	callr	r2
  285604:	00bfdb16 	blt	zero,r2,285574 <__sfvwrite_r+0x164>
  285608:	8080030b 	ldhu	r2,12(r16)
  28560c:	10801014 	ori	r2,r2,64
  285610:	8080030d 	sth	r2,12(r16)
  285614:	00bfffc4 	movi	r2,-1
  285618:	003fab06 	br	2854c8 <__sfvwrite_r+0xb8>
  28561c:	0027883a 	mov	r19,zero
  285620:	0011883a 	mov	r8,zero
  285624:	0039883a 	mov	fp,zero
  285628:	0025883a 	mov	r18,zero
  28562c:	90001f26 	beq	r18,zero,2856ac <__sfvwrite_r+0x29c>
  285630:	40005a26 	beq	r8,zero,28579c <__sfvwrite_r+0x38c>
  285634:	982d883a 	mov	r22,r19
  285638:	94c0012e 	bgeu	r18,r19,285640 <__sfvwrite_r+0x230>
  28563c:	902d883a 	mov	r22,r18
  285640:	81000017 	ldw	r4,0(r16)
  285644:	80800417 	ldw	r2,16(r16)
  285648:	b02f883a 	mov	r23,r22
  28564c:	81c00517 	ldw	r7,20(r16)
  285650:	1100032e 	bgeu	r2,r4,285660 <__sfvwrite_r+0x250>
  285654:	80c00217 	ldw	r3,8(r16)
  285658:	38c7883a 	add	r3,r7,r3
  28565c:	1d801816 	blt	r3,r22,2856c0 <__sfvwrite_r+0x2b0>
  285660:	b1c03e16 	blt	r22,r7,28575c <__sfvwrite_r+0x34c>
  285664:	80800917 	ldw	r2,36(r16)
  285668:	81400717 	ldw	r5,28(r16)
  28566c:	e00d883a 	mov	r6,fp
  285670:	da000115 	stw	r8,4(sp)
  285674:	a809883a 	mov	r4,r21
  285678:	103ee83a 	callr	r2
  28567c:	102f883a 	mov	r23,r2
  285680:	da000117 	ldw	r8,4(sp)
  285684:	00bfe00e 	bge	zero,r2,285608 <__sfvwrite_r+0x1f8>
  285688:	9de7c83a 	sub	r19,r19,r23
  28568c:	98001f26 	beq	r19,zero,28570c <__sfvwrite_r+0x2fc>
  285690:	a0800217 	ldw	r2,8(r20)
  285694:	e5f9883a 	add	fp,fp,r23
  285698:	95e5c83a 	sub	r18,r18,r23
  28569c:	15efc83a 	sub	r23,r2,r23
  2856a0:	a5c00215 	stw	r23,8(r20)
  2856a4:	b83f8726 	beq	r23,zero,2854c4 <__sfvwrite_r+0xb4>
  2856a8:	903fe11e 	bne	r18,zero,285630 <__sfvwrite_r+0x220>
  2856ac:	8f000017 	ldw	fp,0(r17)
  2856b0:	8c800117 	ldw	r18,4(r17)
  2856b4:	0011883a 	mov	r8,zero
  2856b8:	8c400204 	addi	r17,r17,8
  2856bc:	003fdb06 	br	28562c <__sfvwrite_r+0x21c>
  2856c0:	180d883a 	mov	r6,r3
  2856c4:	e00b883a 	mov	r5,fp
  2856c8:	da000115 	stw	r8,4(sp)
  2856cc:	d8c00015 	stw	r3,0(sp)
  2856d0:	02867240 	call	286724 <memmove>
  2856d4:	d8c00017 	ldw	r3,0(sp)
  2856d8:	80800017 	ldw	r2,0(r16)
  2856dc:	800b883a 	mov	r5,r16
  2856e0:	a809883a 	mov	r4,r21
  2856e4:	10c5883a 	add	r2,r2,r3
  2856e8:	80800015 	stw	r2,0(r16)
  2856ec:	d8c00015 	stw	r3,0(sp)
  2856f0:	0284bb00 	call	284bb0 <_fflush_r>
  2856f4:	d8c00017 	ldw	r3,0(sp)
  2856f8:	da000117 	ldw	r8,4(sp)
  2856fc:	103fc21e 	bne	r2,zero,285608 <__sfvwrite_r+0x1f8>
  285700:	182f883a 	mov	r23,r3
  285704:	9de7c83a 	sub	r19,r19,r23
  285708:	983fe11e 	bne	r19,zero,285690 <__sfvwrite_r+0x280>
  28570c:	800b883a 	mov	r5,r16
  285710:	a809883a 	mov	r4,r21
  285714:	0284bb00 	call	284bb0 <_fflush_r>
  285718:	103fbb1e 	bne	r2,zero,285608 <__sfvwrite_r+0x1f8>
  28571c:	0011883a 	mov	r8,zero
  285720:	003fdb06 	br	285690 <__sfvwrite_r+0x280>
  285724:	94c0012e 	bgeu	r18,r19,28572c <__sfvwrite_r+0x31c>
  285728:	9027883a 	mov	r19,r18
  28572c:	980d883a 	mov	r6,r19
  285730:	e00b883a 	mov	r5,fp
  285734:	02867240 	call	286724 <memmove>
  285738:	80800217 	ldw	r2,8(r16)
  28573c:	80c00017 	ldw	r3,0(r16)
  285740:	14c5c83a 	sub	r2,r2,r19
  285744:	1cc7883a 	add	r3,r3,r19
  285748:	80800215 	stw	r2,8(r16)
  28574c:	80c00015 	stw	r3,0(r16)
  285750:	10004326 	beq	r2,zero,285860 <__sfvwrite_r+0x450>
  285754:	9805883a 	mov	r2,r19
  285758:	003f8606 	br	285574 <__sfvwrite_r+0x164>
  28575c:	b00d883a 	mov	r6,r22
  285760:	e00b883a 	mov	r5,fp
  285764:	da000115 	stw	r8,4(sp)
  285768:	02867240 	call	286724 <memmove>
  28576c:	80800217 	ldw	r2,8(r16)
  285770:	80c00017 	ldw	r3,0(r16)
  285774:	da000117 	ldw	r8,4(sp)
  285778:	1585c83a 	sub	r2,r2,r22
  28577c:	1dad883a 	add	r22,r3,r22
  285780:	80800215 	stw	r2,8(r16)
  285784:	85800015 	stw	r22,0(r16)
  285788:	003fbf06 	br	285688 <__sfvwrite_r+0x278>
  28578c:	81000017 	ldw	r4,0(r16)
  285790:	9027883a 	mov	r19,r18
  285794:	902f883a 	mov	r23,r18
  285798:	003f6c06 	br	28554c <__sfvwrite_r+0x13c>
  28579c:	900d883a 	mov	r6,r18
  2857a0:	01400284 	movi	r5,10
  2857a4:	e009883a 	mov	r4,fp
  2857a8:	02864f80 	call	2864f8 <memchr>
  2857ac:	10003e26 	beq	r2,zero,2858a8 <__sfvwrite_r+0x498>
  2857b0:	10800044 	addi	r2,r2,1
  2857b4:	1727c83a 	sub	r19,r2,fp
  2857b8:	02000044 	movi	r8,1
  2857bc:	003f9d06 	br	285634 <__sfvwrite_r+0x224>
  2857c0:	80800517 	ldw	r2,20(r16)
  2857c4:	81400417 	ldw	r5,16(r16)
  2857c8:	81c00017 	ldw	r7,0(r16)
  2857cc:	10a7883a 	add	r19,r2,r2
  2857d0:	9885883a 	add	r2,r19,r2
  2857d4:	1026d7fa 	srli	r19,r2,31
  2857d8:	396dc83a 	sub	r22,r7,r5
  2857dc:	b1000044 	addi	r4,r22,1
  2857e0:	9885883a 	add	r2,r19,r2
  2857e4:	1027d07a 	srai	r19,r2,1
  2857e8:	2485883a 	add	r2,r4,r18
  2857ec:	980d883a 	mov	r6,r19
  2857f0:	9880022e 	bgeu	r19,r2,2857fc <__sfvwrite_r+0x3ec>
  2857f4:	1027883a 	mov	r19,r2
  2857f8:	100d883a 	mov	r6,r2
  2857fc:	18c1000c 	andi	r3,r3,1024
  285800:	18001c26 	beq	r3,zero,285874 <__sfvwrite_r+0x464>
  285804:	300b883a 	mov	r5,r6
  285808:	a809883a 	mov	r4,r21
  28580c:	0285cec0 	call	285cec <_malloc_r>
  285810:	102f883a 	mov	r23,r2
  285814:	10002926 	beq	r2,zero,2858bc <__sfvwrite_r+0x4ac>
  285818:	81400417 	ldw	r5,16(r16)
  28581c:	b00d883a 	mov	r6,r22
  285820:	1009883a 	mov	r4,r2
  285824:	02865dc0 	call	2865dc <memcpy>
  285828:	8080030b 	ldhu	r2,12(r16)
  28582c:	00fedfc4 	movi	r3,-1153
  285830:	10c4703a 	and	r2,r2,r3
  285834:	10802014 	ori	r2,r2,128
  285838:	8080030d 	sth	r2,12(r16)
  28583c:	bd89883a 	add	r4,r23,r22
  285840:	9d8fc83a 	sub	r7,r19,r22
  285844:	85c00415 	stw	r23,16(r16)
  285848:	84c00515 	stw	r19,20(r16)
  28584c:	81000015 	stw	r4,0(r16)
  285850:	9027883a 	mov	r19,r18
  285854:	81c00215 	stw	r7,8(r16)
  285858:	902f883a 	mov	r23,r18
  28585c:	003f3b06 	br	28554c <__sfvwrite_r+0x13c>
  285860:	800b883a 	mov	r5,r16
  285864:	a809883a 	mov	r4,r21
  285868:	0284bb00 	call	284bb0 <_fflush_r>
  28586c:	103fb926 	beq	r2,zero,285754 <__sfvwrite_r+0x344>
  285870:	003f6506 	br	285608 <__sfvwrite_r+0x1f8>
  285874:	a809883a 	mov	r4,r21
  285878:	02879a40 	call	2879a4 <_realloc_r>
  28587c:	102f883a 	mov	r23,r2
  285880:	103fee1e 	bne	r2,zero,28583c <__sfvwrite_r+0x42c>
  285884:	81400417 	ldw	r5,16(r16)
  285888:	a809883a 	mov	r4,r21
  28588c:	02851000 	call	285100 <_free_r>
  285890:	8080030b 	ldhu	r2,12(r16)
  285894:	00ffdfc4 	movi	r3,-129
  285898:	1884703a 	and	r2,r3,r2
  28589c:	00c00304 	movi	r3,12
  2858a0:	a8c00015 	stw	r3,0(r21)
  2858a4:	003f5906 	br	28560c <__sfvwrite_r+0x1fc>
  2858a8:	94c00044 	addi	r19,r18,1
  2858ac:	02000044 	movi	r8,1
  2858b0:	003f6006 	br	285634 <__sfvwrite_r+0x224>
  2858b4:	00bfffc4 	movi	r2,-1
  2858b8:	003f0306 	br	2854c8 <__sfvwrite_r+0xb8>
  2858bc:	00800304 	movi	r2,12
  2858c0:	a8800015 	stw	r2,0(r21)
  2858c4:	8080030b 	ldhu	r2,12(r16)
  2858c8:	003f5006 	br	28560c <__sfvwrite_r+0x1fc>

002858cc <_fwalk>:
  2858cc:	defff704 	addi	sp,sp,-36
  2858d0:	dd000415 	stw	r20,16(sp)
  2858d4:	dfc00815 	stw	ra,32(sp)
  2858d8:	ddc00715 	stw	r23,28(sp)
  2858dc:	dd800615 	stw	r22,24(sp)
  2858e0:	dd400515 	stw	r21,20(sp)
  2858e4:	dcc00315 	stw	r19,12(sp)
  2858e8:	dc800215 	stw	r18,8(sp)
  2858ec:	dc400115 	stw	r17,4(sp)
  2858f0:	dc000015 	stw	r16,0(sp)
  2858f4:	2500b804 	addi	r20,r4,736
  2858f8:	a0002326 	beq	r20,zero,285988 <_fwalk+0xbc>
  2858fc:	282b883a 	mov	r21,r5
  285900:	002f883a 	mov	r23,zero
  285904:	05800044 	movi	r22,1
  285908:	04ffffc4 	movi	r19,-1
  28590c:	a4400117 	ldw	r17,4(r20)
  285910:	a4800217 	ldw	r18,8(r20)
  285914:	8c7fffc4 	addi	r17,r17,-1
  285918:	88000d16 	blt	r17,zero,285950 <_fwalk+0x84>
  28591c:	94000304 	addi	r16,r18,12
  285920:	94800384 	addi	r18,r18,14
  285924:	8080000b 	ldhu	r2,0(r16)
  285928:	8c7fffc4 	addi	r17,r17,-1
  28592c:	813ffd04 	addi	r4,r16,-12
  285930:	b080042e 	bgeu	r22,r2,285944 <_fwalk+0x78>
  285934:	9080000f 	ldh	r2,0(r18)
  285938:	14c00226 	beq	r2,r19,285944 <_fwalk+0x78>
  28593c:	a83ee83a 	callr	r21
  285940:	b8aeb03a 	or	r23,r23,r2
  285944:	84001a04 	addi	r16,r16,104
  285948:	94801a04 	addi	r18,r18,104
  28594c:	8cfff51e 	bne	r17,r19,285924 <_fwalk+0x58>
  285950:	a5000017 	ldw	r20,0(r20)
  285954:	a03fed1e 	bne	r20,zero,28590c <_fwalk+0x40>
  285958:	b805883a 	mov	r2,r23
  28595c:	dfc00817 	ldw	ra,32(sp)
  285960:	ddc00717 	ldw	r23,28(sp)
  285964:	dd800617 	ldw	r22,24(sp)
  285968:	dd400517 	ldw	r21,20(sp)
  28596c:	dd000417 	ldw	r20,16(sp)
  285970:	dcc00317 	ldw	r19,12(sp)
  285974:	dc800217 	ldw	r18,8(sp)
  285978:	dc400117 	ldw	r17,4(sp)
  28597c:	dc000017 	ldw	r16,0(sp)
  285980:	dec00904 	addi	sp,sp,36
  285984:	f800283a 	ret
  285988:	002f883a 	mov	r23,zero
  28598c:	003ff206 	br	285958 <_fwalk+0x8c>

00285990 <_fwalk_reent>:
  285990:	defff704 	addi	sp,sp,-36
  285994:	dd000415 	stw	r20,16(sp)
  285998:	dfc00815 	stw	ra,32(sp)
  28599c:	ddc00715 	stw	r23,28(sp)
  2859a0:	dd800615 	stw	r22,24(sp)
  2859a4:	dd400515 	stw	r21,20(sp)
  2859a8:	dcc00315 	stw	r19,12(sp)
  2859ac:	dc800215 	stw	r18,8(sp)
  2859b0:	dc400115 	stw	r17,4(sp)
  2859b4:	dc000015 	stw	r16,0(sp)
  2859b8:	2500b804 	addi	r20,r4,736
  2859bc:	a0002326 	beq	r20,zero,285a4c <_fwalk_reent+0xbc>
  2859c0:	282b883a 	mov	r21,r5
  2859c4:	2027883a 	mov	r19,r4
  2859c8:	002f883a 	mov	r23,zero
  2859cc:	05800044 	movi	r22,1
  2859d0:	04bfffc4 	movi	r18,-1
  2859d4:	a4400117 	ldw	r17,4(r20)
  2859d8:	a4000217 	ldw	r16,8(r20)
  2859dc:	8c7fffc4 	addi	r17,r17,-1
  2859e0:	88000c16 	blt	r17,zero,285a14 <_fwalk_reent+0x84>
  2859e4:	84000304 	addi	r16,r16,12
  2859e8:	8080000b 	ldhu	r2,0(r16)
  2859ec:	8c7fffc4 	addi	r17,r17,-1
  2859f0:	817ffd04 	addi	r5,r16,-12
  2859f4:	b080052e 	bgeu	r22,r2,285a0c <_fwalk_reent+0x7c>
  2859f8:	8080008f 	ldh	r2,2(r16)
  2859fc:	9809883a 	mov	r4,r19
  285a00:	14800226 	beq	r2,r18,285a0c <_fwalk_reent+0x7c>
  285a04:	a83ee83a 	callr	r21
  285a08:	b8aeb03a 	or	r23,r23,r2
  285a0c:	84001a04 	addi	r16,r16,104
  285a10:	8cbff51e 	bne	r17,r18,2859e8 <_fwalk_reent+0x58>
  285a14:	a5000017 	ldw	r20,0(r20)
  285a18:	a03fee1e 	bne	r20,zero,2859d4 <_fwalk_reent+0x44>
  285a1c:	b805883a 	mov	r2,r23
  285a20:	dfc00817 	ldw	ra,32(sp)
  285a24:	ddc00717 	ldw	r23,28(sp)
  285a28:	dd800617 	ldw	r22,24(sp)
  285a2c:	dd400517 	ldw	r21,20(sp)
  285a30:	dd000417 	ldw	r20,16(sp)
  285a34:	dcc00317 	ldw	r19,12(sp)
  285a38:	dc800217 	ldw	r18,8(sp)
  285a3c:	dc400117 	ldw	r17,4(sp)
  285a40:	dc000017 	ldw	r16,0(sp)
  285a44:	dec00904 	addi	sp,sp,36
  285a48:	f800283a 	ret
  285a4c:	002f883a 	mov	r23,zero
  285a50:	003ff206 	br	285a1c <_fwalk_reent+0x8c>

00285a54 <_setlocale_r>:
  285a54:	30001b26 	beq	r6,zero,285ac4 <_setlocale_r+0x70>
  285a58:	01400a74 	movhi	r5,41
  285a5c:	defffe04 	addi	sp,sp,-8
  285a60:	29461a04 	addi	r5,r5,6248
  285a64:	3009883a 	mov	r4,r6
  285a68:	dc000015 	stw	r16,0(sp)
  285a6c:	dfc00115 	stw	ra,4(sp)
  285a70:	3021883a 	mov	r16,r6
  285a74:	028810c0 	call	28810c <strcmp>
  285a78:	1000061e 	bne	r2,zero,285a94 <_setlocale_r+0x40>
  285a7c:	00800a74 	movhi	r2,41
  285a80:	10861904 	addi	r2,r2,6244
  285a84:	dfc00117 	ldw	ra,4(sp)
  285a88:	dc000017 	ldw	r16,0(sp)
  285a8c:	dec00204 	addi	sp,sp,8
  285a90:	f800283a 	ret
  285a94:	01400a74 	movhi	r5,41
  285a98:	29461904 	addi	r5,r5,6244
  285a9c:	8009883a 	mov	r4,r16
  285aa0:	028810c0 	call	28810c <strcmp>
  285aa4:	103ff526 	beq	r2,zero,285a7c <_setlocale_r+0x28>
  285aa8:	01400a74 	movhi	r5,41
  285aac:	29460404 	addi	r5,r5,6160
  285ab0:	8009883a 	mov	r4,r16
  285ab4:	028810c0 	call	28810c <strcmp>
  285ab8:	103ff026 	beq	r2,zero,285a7c <_setlocale_r+0x28>
  285abc:	0005883a 	mov	r2,zero
  285ac0:	003ff006 	br	285a84 <_setlocale_r+0x30>
  285ac4:	00800a74 	movhi	r2,41
  285ac8:	10861904 	addi	r2,r2,6244
  285acc:	f800283a 	ret

00285ad0 <__locale_charset>:
  285ad0:	00800a74 	movhi	r2,41
  285ad4:	1087e004 	addi	r2,r2,8064
  285ad8:	f800283a 	ret

00285adc <__locale_mb_cur_max>:
  285adc:	00800a74 	movhi	r2,41
  285ae0:	108daa04 	addi	r2,r2,13992
  285ae4:	10800017 	ldw	r2,0(r2)
  285ae8:	f800283a 	ret

00285aec <__locale_msgcharset>:
  285aec:	00800a74 	movhi	r2,41
  285af0:	1087d804 	addi	r2,r2,8032
  285af4:	f800283a 	ret

00285af8 <__locale_cjk_lang>:
  285af8:	0005883a 	mov	r2,zero
  285afc:	f800283a 	ret

00285b00 <_localeconv_r>:
  285b00:	00800a74 	movhi	r2,41
  285b04:	1087e804 	addi	r2,r2,8096
  285b08:	f800283a 	ret

00285b0c <setlocale>:
  285b0c:	00800a74 	movhi	r2,41
  285b10:	108da904 	addi	r2,r2,13988
  285b14:	280d883a 	mov	r6,r5
  285b18:	200b883a 	mov	r5,r4
  285b1c:	11000017 	ldw	r4,0(r2)
  285b20:	0285a541 	jmpi	285a54 <_setlocale_r>

00285b24 <localeconv>:
  285b24:	00800a74 	movhi	r2,41
  285b28:	1087e804 	addi	r2,r2,8096
  285b2c:	f800283a 	ret

00285b30 <__smakebuf_r>:
  285b30:	2880030b 	ldhu	r2,12(r5)
  285b34:	10c0008c 	andi	r3,r2,2
  285b38:	1800411e 	bne	r3,zero,285c40 <__smakebuf_r+0x110>
  285b3c:	deffec04 	addi	sp,sp,-80
  285b40:	dc000f15 	stw	r16,60(sp)
  285b44:	2821883a 	mov	r16,r5
  285b48:	2940038f 	ldh	r5,14(r5)
  285b4c:	dc401015 	stw	r17,64(sp)
  285b50:	dfc01315 	stw	ra,76(sp)
  285b54:	dcc01215 	stw	r19,72(sp)
  285b58:	dc801115 	stw	r18,68(sp)
  285b5c:	2023883a 	mov	r17,r4
  285b60:	28001c16 	blt	r5,zero,285bd4 <__smakebuf_r+0xa4>
  285b64:	d80d883a 	mov	r6,sp
  285b68:	0289cb40 	call	289cb4 <_fstat_r>
  285b6c:	10001816 	blt	r2,zero,285bd0 <__smakebuf_r+0xa0>
  285b70:	d8800117 	ldw	r2,4(sp)
  285b74:	00e00014 	movui	r3,32768
  285b78:	10bc000c 	andi	r2,r2,61440
  285b7c:	14c80020 	cmpeqi	r19,r2,8192
  285b80:	10c03726 	beq	r2,r3,285c60 <__smakebuf_r+0x130>
  285b84:	80c0030b 	ldhu	r3,12(r16)
  285b88:	18c20014 	ori	r3,r3,2048
  285b8c:	80c0030d 	sth	r3,12(r16)
  285b90:	00c80004 	movi	r3,8192
  285b94:	10c0521e 	bne	r2,r3,285ce0 <__smakebuf_r+0x1b0>
  285b98:	8140038f 	ldh	r5,14(r16)
  285b9c:	8809883a 	mov	r4,r17
  285ba0:	0289d100 	call	289d10 <_isatty_r>
  285ba4:	10004c26 	beq	r2,zero,285cd8 <__smakebuf_r+0x1a8>
  285ba8:	8080030b 	ldhu	r2,12(r16)
  285bac:	80c010c4 	addi	r3,r16,67
  285bb0:	80c00015 	stw	r3,0(r16)
  285bb4:	10800054 	ori	r2,r2,1
  285bb8:	8080030d 	sth	r2,12(r16)
  285bbc:	00800044 	movi	r2,1
  285bc0:	80c00415 	stw	r3,16(r16)
  285bc4:	80800515 	stw	r2,20(r16)
  285bc8:	04810004 	movi	r18,1024
  285bcc:	00000706 	br	285bec <__smakebuf_r+0xbc>
  285bd0:	8080030b 	ldhu	r2,12(r16)
  285bd4:	10c0200c 	andi	r3,r2,128
  285bd8:	18001f1e 	bne	r3,zero,285c58 <__smakebuf_r+0x128>
  285bdc:	04810004 	movi	r18,1024
  285be0:	10820014 	ori	r2,r2,2048
  285be4:	8080030d 	sth	r2,12(r16)
  285be8:	0027883a 	mov	r19,zero
  285bec:	900b883a 	mov	r5,r18
  285bf0:	8809883a 	mov	r4,r17
  285bf4:	0285cec0 	call	285cec <_malloc_r>
  285bf8:	10002c26 	beq	r2,zero,285cac <__smakebuf_r+0x17c>
  285bfc:	80c0030b 	ldhu	r3,12(r16)
  285c00:	01000a34 	movhi	r4,40
  285c04:	21131104 	addi	r4,r4,19524
  285c08:	89000f15 	stw	r4,60(r17)
  285c0c:	18c02014 	ori	r3,r3,128
  285c10:	80c0030d 	sth	r3,12(r16)
  285c14:	80800015 	stw	r2,0(r16)
  285c18:	80800415 	stw	r2,16(r16)
  285c1c:	84800515 	stw	r18,20(r16)
  285c20:	98001a1e 	bne	r19,zero,285c8c <__smakebuf_r+0x15c>
  285c24:	dfc01317 	ldw	ra,76(sp)
  285c28:	dcc01217 	ldw	r19,72(sp)
  285c2c:	dc801117 	ldw	r18,68(sp)
  285c30:	dc401017 	ldw	r17,64(sp)
  285c34:	dc000f17 	ldw	r16,60(sp)
  285c38:	dec01404 	addi	sp,sp,80
  285c3c:	f800283a 	ret
  285c40:	288010c4 	addi	r2,r5,67
  285c44:	28800015 	stw	r2,0(r5)
  285c48:	28800415 	stw	r2,16(r5)
  285c4c:	00800044 	movi	r2,1
  285c50:	28800515 	stw	r2,20(r5)
  285c54:	f800283a 	ret
  285c58:	04801004 	movi	r18,64
  285c5c:	003fe006 	br	285be0 <__smakebuf_r+0xb0>
  285c60:	81000a17 	ldw	r4,40(r16)
  285c64:	00c00a74 	movhi	r3,41
  285c68:	18e02a04 	addi	r3,r3,-32600
  285c6c:	20ffc51e 	bne	r4,r3,285b84 <__smakebuf_r+0x54>
  285c70:	8080030b 	ldhu	r2,12(r16)
  285c74:	04810004 	movi	r18,1024
  285c78:	84801315 	stw	r18,76(r16)
  285c7c:	1484b03a 	or	r2,r2,r18
  285c80:	8080030d 	sth	r2,12(r16)
  285c84:	0027883a 	mov	r19,zero
  285c88:	003fd806 	br	285bec <__smakebuf_r+0xbc>
  285c8c:	8140038f 	ldh	r5,14(r16)
  285c90:	8809883a 	mov	r4,r17
  285c94:	0289d100 	call	289d10 <_isatty_r>
  285c98:	103fe226 	beq	r2,zero,285c24 <__smakebuf_r+0xf4>
  285c9c:	8080030b 	ldhu	r2,12(r16)
  285ca0:	10800054 	ori	r2,r2,1
  285ca4:	8080030d 	sth	r2,12(r16)
  285ca8:	003fde06 	br	285c24 <__smakebuf_r+0xf4>
  285cac:	8080030b 	ldhu	r2,12(r16)
  285cb0:	10c0800c 	andi	r3,r2,512
  285cb4:	183fdb1e 	bne	r3,zero,285c24 <__smakebuf_r+0xf4>
  285cb8:	10800094 	ori	r2,r2,2
  285cbc:	80c010c4 	addi	r3,r16,67
  285cc0:	8080030d 	sth	r2,12(r16)
  285cc4:	00800044 	movi	r2,1
  285cc8:	80c00015 	stw	r3,0(r16)
  285ccc:	80c00415 	stw	r3,16(r16)
  285cd0:	80800515 	stw	r2,20(r16)
  285cd4:	003fd306 	br	285c24 <__smakebuf_r+0xf4>
  285cd8:	04810004 	movi	r18,1024
  285cdc:	003fc306 	br	285bec <__smakebuf_r+0xbc>
  285ce0:	0027883a 	mov	r19,zero
  285ce4:	04810004 	movi	r18,1024
  285ce8:	003fc006 	br	285bec <__smakebuf_r+0xbc>

00285cec <_malloc_r>:
  285cec:	defff504 	addi	sp,sp,-44
  285cf0:	dc800315 	stw	r18,12(sp)
  285cf4:	dfc00a15 	stw	ra,40(sp)
  285cf8:	df000915 	stw	fp,36(sp)
  285cfc:	ddc00815 	stw	r23,32(sp)
  285d00:	dd800715 	stw	r22,28(sp)
  285d04:	dd400615 	stw	r21,24(sp)
  285d08:	dd000515 	stw	r20,20(sp)
  285d0c:	dcc00415 	stw	r19,16(sp)
  285d10:	dc400215 	stw	r17,8(sp)
  285d14:	dc000115 	stw	r16,4(sp)
  285d18:	288002c4 	addi	r2,r5,11
  285d1c:	00c00584 	movi	r3,22
  285d20:	2025883a 	mov	r18,r4
  285d24:	18807f2e 	bgeu	r3,r2,285f24 <_malloc_r+0x238>
  285d28:	047ffe04 	movi	r17,-8
  285d2c:	1462703a 	and	r17,r2,r17
  285d30:	8800a316 	blt	r17,zero,285fc0 <_malloc_r+0x2d4>
  285d34:	8940a236 	bltu	r17,r5,285fc0 <_malloc_r+0x2d4>
  285d38:	028d7f80 	call	28d7f8 <__malloc_lock>
  285d3c:	00807dc4 	movi	r2,503
  285d40:	1441e92e 	bgeu	r2,r17,2864e8 <_malloc_r+0x7fc>
  285d44:	8804d27a 	srli	r2,r17,9
  285d48:	1000a126 	beq	r2,zero,285fd0 <_malloc_r+0x2e4>
  285d4c:	00c00104 	movi	r3,4
  285d50:	18811e36 	bltu	r3,r2,2861cc <_malloc_r+0x4e0>
  285d54:	8804d1ba 	srli	r2,r17,6
  285d58:	12000e44 	addi	r8,r2,57
  285d5c:	11c00e04 	addi	r7,r2,56
  285d60:	4209883a 	add	r4,r8,r8
  285d64:	04c00a74 	movhi	r19,41
  285d68:	2109883a 	add	r4,r4,r4
  285d6c:	9cc7f604 	addi	r19,r19,8152
  285d70:	2109883a 	add	r4,r4,r4
  285d74:	9909883a 	add	r4,r19,r4
  285d78:	24000117 	ldw	r16,4(r4)
  285d7c:	213ffe04 	addi	r4,r4,-8
  285d80:	24009726 	beq	r4,r16,285fe0 <_malloc_r+0x2f4>
  285d84:	80800117 	ldw	r2,4(r16)
  285d88:	01bfff04 	movi	r6,-4
  285d8c:	014003c4 	movi	r5,15
  285d90:	1184703a 	and	r2,r2,r6
  285d94:	1447c83a 	sub	r3,r2,r17
  285d98:	28c00716 	blt	r5,r3,285db8 <_malloc_r+0xcc>
  285d9c:	1800920e 	bge	r3,zero,285fe8 <_malloc_r+0x2fc>
  285da0:	84000317 	ldw	r16,12(r16)
  285da4:	24008e26 	beq	r4,r16,285fe0 <_malloc_r+0x2f4>
  285da8:	80800117 	ldw	r2,4(r16)
  285dac:	1184703a 	and	r2,r2,r6
  285db0:	1447c83a 	sub	r3,r2,r17
  285db4:	28fff90e 	bge	r5,r3,285d9c <_malloc_r+0xb0>
  285db8:	3809883a 	mov	r4,r7
  285dbc:	01800a74 	movhi	r6,41
  285dc0:	9c000417 	ldw	r16,16(r19)
  285dc4:	3187f604 	addi	r6,r6,8152
  285dc8:	32000204 	addi	r8,r6,8
  285dcc:	82013426 	beq	r16,r8,2862a0 <_malloc_r+0x5b4>
  285dd0:	80c00117 	ldw	r3,4(r16)
  285dd4:	00bfff04 	movi	r2,-4
  285dd8:	188e703a 	and	r7,r3,r2
  285ddc:	3c45c83a 	sub	r2,r7,r17
  285de0:	00c003c4 	movi	r3,15
  285de4:	18811f16 	blt	r3,r2,286264 <_malloc_r+0x578>
  285de8:	32000515 	stw	r8,20(r6)
  285dec:	32000415 	stw	r8,16(r6)
  285df0:	10007f0e 	bge	r2,zero,285ff0 <_malloc_r+0x304>
  285df4:	00807fc4 	movi	r2,511
  285df8:	11c0fd36 	bltu	r2,r7,2861f0 <_malloc_r+0x504>
  285dfc:	3806d0fa 	srli	r3,r7,3
  285e00:	01c00044 	movi	r7,1
  285e04:	30800117 	ldw	r2,4(r6)
  285e08:	19400044 	addi	r5,r3,1
  285e0c:	294b883a 	add	r5,r5,r5
  285e10:	1807d0ba 	srai	r3,r3,2
  285e14:	294b883a 	add	r5,r5,r5
  285e18:	294b883a 	add	r5,r5,r5
  285e1c:	298b883a 	add	r5,r5,r6
  285e20:	38c6983a 	sll	r3,r7,r3
  285e24:	29c00017 	ldw	r7,0(r5)
  285e28:	2a7ffe04 	addi	r9,r5,-8
  285e2c:	1886b03a 	or	r3,r3,r2
  285e30:	82400315 	stw	r9,12(r16)
  285e34:	81c00215 	stw	r7,8(r16)
  285e38:	30c00115 	stw	r3,4(r6)
  285e3c:	2c000015 	stw	r16,0(r5)
  285e40:	3c000315 	stw	r16,12(r7)
  285e44:	2005d0ba 	srai	r2,r4,2
  285e48:	01400044 	movi	r5,1
  285e4c:	288a983a 	sll	r5,r5,r2
  285e50:	19406f36 	bltu	r3,r5,286010 <_malloc_r+0x324>
  285e54:	28c4703a 	and	r2,r5,r3
  285e58:	10000a1e 	bne	r2,zero,285e84 <_malloc_r+0x198>
  285e5c:	00bfff04 	movi	r2,-4
  285e60:	294b883a 	add	r5,r5,r5
  285e64:	2088703a 	and	r4,r4,r2
  285e68:	28c4703a 	and	r2,r5,r3
  285e6c:	21000104 	addi	r4,r4,4
  285e70:	1000041e 	bne	r2,zero,285e84 <_malloc_r+0x198>
  285e74:	294b883a 	add	r5,r5,r5
  285e78:	28c4703a 	and	r2,r5,r3
  285e7c:	21000104 	addi	r4,r4,4
  285e80:	103ffc26 	beq	r2,zero,285e74 <_malloc_r+0x188>
  285e84:	02bfff04 	movi	r10,-4
  285e88:	024003c4 	movi	r9,15
  285e8c:	21800044 	addi	r6,r4,1
  285e90:	318d883a 	add	r6,r6,r6
  285e94:	318d883a 	add	r6,r6,r6
  285e98:	318d883a 	add	r6,r6,r6
  285e9c:	998d883a 	add	r6,r19,r6
  285ea0:	333ffe04 	addi	r12,r6,-8
  285ea4:	2017883a 	mov	r11,r4
  285ea8:	31800104 	addi	r6,r6,4
  285eac:	34000017 	ldw	r16,0(r6)
  285eb0:	31fffd04 	addi	r7,r6,-12
  285eb4:	81c0041e 	bne	r16,r7,285ec8 <_malloc_r+0x1dc>
  285eb8:	0000fb06 	br	2862a8 <_malloc_r+0x5bc>
  285ebc:	1801030e 	bge	r3,zero,2862cc <_malloc_r+0x5e0>
  285ec0:	84000317 	ldw	r16,12(r16)
  285ec4:	81c0f826 	beq	r16,r7,2862a8 <_malloc_r+0x5bc>
  285ec8:	80800117 	ldw	r2,4(r16)
  285ecc:	1284703a 	and	r2,r2,r10
  285ed0:	1447c83a 	sub	r3,r2,r17
  285ed4:	48fff90e 	bge	r9,r3,285ebc <_malloc_r+0x1d0>
  285ed8:	80800317 	ldw	r2,12(r16)
  285edc:	81000217 	ldw	r4,8(r16)
  285ee0:	89400054 	ori	r5,r17,1
  285ee4:	81400115 	stw	r5,4(r16)
  285ee8:	20800315 	stw	r2,12(r4)
  285eec:	11000215 	stw	r4,8(r2)
  285ef0:	8463883a 	add	r17,r16,r17
  285ef4:	9c400515 	stw	r17,20(r19)
  285ef8:	9c400415 	stw	r17,16(r19)
  285efc:	18800054 	ori	r2,r3,1
  285f00:	88800115 	stw	r2,4(r17)
  285f04:	8a000315 	stw	r8,12(r17)
  285f08:	8a000215 	stw	r8,8(r17)
  285f0c:	88e3883a 	add	r17,r17,r3
  285f10:	88c00015 	stw	r3,0(r17)
  285f14:	9009883a 	mov	r4,r18
  285f18:	028d81c0 	call	28d81c <__malloc_unlock>
  285f1c:	80800204 	addi	r2,r16,8
  285f20:	00001b06 	br	285f90 <_malloc_r+0x2a4>
  285f24:	04400404 	movi	r17,16
  285f28:	89402536 	bltu	r17,r5,285fc0 <_malloc_r+0x2d4>
  285f2c:	028d7f80 	call	28d7f8 <__malloc_lock>
  285f30:	00800184 	movi	r2,6
  285f34:	01000084 	movi	r4,2
  285f38:	04c00a74 	movhi	r19,41
  285f3c:	1085883a 	add	r2,r2,r2
  285f40:	9cc7f604 	addi	r19,r19,8152
  285f44:	1085883a 	add	r2,r2,r2
  285f48:	9885883a 	add	r2,r19,r2
  285f4c:	14000117 	ldw	r16,4(r2)
  285f50:	10fffe04 	addi	r3,r2,-8
  285f54:	80c0d926 	beq	r16,r3,2862bc <_malloc_r+0x5d0>
  285f58:	80c00117 	ldw	r3,4(r16)
  285f5c:	81000317 	ldw	r4,12(r16)
  285f60:	00bfff04 	movi	r2,-4
  285f64:	1884703a 	and	r2,r3,r2
  285f68:	81400217 	ldw	r5,8(r16)
  285f6c:	8085883a 	add	r2,r16,r2
  285f70:	10c00117 	ldw	r3,4(r2)
  285f74:	29000315 	stw	r4,12(r5)
  285f78:	21400215 	stw	r5,8(r4)
  285f7c:	18c00054 	ori	r3,r3,1
  285f80:	10c00115 	stw	r3,4(r2)
  285f84:	9009883a 	mov	r4,r18
  285f88:	028d81c0 	call	28d81c <__malloc_unlock>
  285f8c:	80800204 	addi	r2,r16,8
  285f90:	dfc00a17 	ldw	ra,40(sp)
  285f94:	df000917 	ldw	fp,36(sp)
  285f98:	ddc00817 	ldw	r23,32(sp)
  285f9c:	dd800717 	ldw	r22,28(sp)
  285fa0:	dd400617 	ldw	r21,24(sp)
  285fa4:	dd000517 	ldw	r20,20(sp)
  285fa8:	dcc00417 	ldw	r19,16(sp)
  285fac:	dc800317 	ldw	r18,12(sp)
  285fb0:	dc400217 	ldw	r17,8(sp)
  285fb4:	dc000117 	ldw	r16,4(sp)
  285fb8:	dec00b04 	addi	sp,sp,44
  285fbc:	f800283a 	ret
  285fc0:	00800304 	movi	r2,12
  285fc4:	90800015 	stw	r2,0(r18)
  285fc8:	0005883a 	mov	r2,zero
  285fcc:	003ff006 	br	285f90 <_malloc_r+0x2a4>
  285fd0:	01002004 	movi	r4,128
  285fd4:	02001004 	movi	r8,64
  285fd8:	01c00fc4 	movi	r7,63
  285fdc:	003f6106 	br	285d64 <_malloc_r+0x78>
  285fe0:	4009883a 	mov	r4,r8
  285fe4:	003f7506 	br	285dbc <_malloc_r+0xd0>
  285fe8:	81000317 	ldw	r4,12(r16)
  285fec:	003fde06 	br	285f68 <_malloc_r+0x27c>
  285ff0:	81c5883a 	add	r2,r16,r7
  285ff4:	11400117 	ldw	r5,4(r2)
  285ff8:	9009883a 	mov	r4,r18
  285ffc:	29400054 	ori	r5,r5,1
  286000:	11400115 	stw	r5,4(r2)
  286004:	028d81c0 	call	28d81c <__malloc_unlock>
  286008:	80800204 	addi	r2,r16,8
  28600c:	003fe006 	br	285f90 <_malloc_r+0x2a4>
  286010:	9c000217 	ldw	r16,8(r19)
  286014:	00bfff04 	movi	r2,-4
  286018:	85800117 	ldw	r22,4(r16)
  28601c:	b0ac703a 	and	r22,r22,r2
  286020:	b4400336 	bltu	r22,r17,286030 <_malloc_r+0x344>
  286024:	b445c83a 	sub	r2,r22,r17
  286028:	00c003c4 	movi	r3,15
  28602c:	18805d16 	blt	r3,r2,2861a4 <_malloc_r+0x4b8>
  286030:	05c00a74 	movhi	r23,41
  286034:	00800a74 	movhi	r2,41
  286038:	1094a704 	addi	r2,r2,21148
  28603c:	bdcdab04 	addi	r23,r23,13996
  286040:	15400017 	ldw	r21,0(r2)
  286044:	b8c00017 	ldw	r3,0(r23)
  286048:	00bfffc4 	movi	r2,-1
  28604c:	858d883a 	add	r6,r16,r22
  286050:	8d6b883a 	add	r21,r17,r21
  286054:	1880ea26 	beq	r3,r2,286400 <_malloc_r+0x714>
  286058:	ad4403c4 	addi	r21,r21,4111
  28605c:	00bc0004 	movi	r2,-4096
  286060:	a8aa703a 	and	r21,r21,r2
  286064:	a80b883a 	mov	r5,r21
  286068:	9009883a 	mov	r4,r18
  28606c:	d9800015 	stw	r6,0(sp)
  286070:	0287f7c0 	call	287f7c <_sbrk_r>
  286074:	1029883a 	mov	r20,r2
  286078:	00bfffc4 	movi	r2,-1
  28607c:	d9800017 	ldw	r6,0(sp)
  286080:	a080e826 	beq	r20,r2,286424 <_malloc_r+0x738>
  286084:	a180a636 	bltu	r20,r6,286320 <_malloc_r+0x634>
  286088:	07000a74 	movhi	fp,41
  28608c:	e714b004 	addi	fp,fp,21184
  286090:	e0800017 	ldw	r2,0(fp)
  286094:	a887883a 	add	r3,r21,r2
  286098:	e0c00015 	stw	r3,0(fp)
  28609c:	3500e626 	beq	r6,r20,286438 <_malloc_r+0x74c>
  2860a0:	b9000017 	ldw	r4,0(r23)
  2860a4:	00bfffc4 	movi	r2,-1
  2860a8:	2080ee26 	beq	r4,r2,286464 <_malloc_r+0x778>
  2860ac:	a185c83a 	sub	r2,r20,r6
  2860b0:	10c5883a 	add	r2,r2,r3
  2860b4:	e0800015 	stw	r2,0(fp)
  2860b8:	a0c001cc 	andi	r3,r20,7
  2860bc:	1800bc26 	beq	r3,zero,2863b0 <_malloc_r+0x6c4>
  2860c0:	a0e9c83a 	sub	r20,r20,r3
  2860c4:	00840204 	movi	r2,4104
  2860c8:	a5000204 	addi	r20,r20,8
  2860cc:	10c7c83a 	sub	r3,r2,r3
  2860d0:	a545883a 	add	r2,r20,r21
  2860d4:	1083ffcc 	andi	r2,r2,4095
  2860d8:	18abc83a 	sub	r21,r3,r2
  2860dc:	a80b883a 	mov	r5,r21
  2860e0:	9009883a 	mov	r4,r18
  2860e4:	0287f7c0 	call	287f7c <_sbrk_r>
  2860e8:	00ffffc4 	movi	r3,-1
  2860ec:	10c0e126 	beq	r2,r3,286474 <_malloc_r+0x788>
  2860f0:	1505c83a 	sub	r2,r2,r20
  2860f4:	1545883a 	add	r2,r2,r21
  2860f8:	10800054 	ori	r2,r2,1
  2860fc:	e0c00017 	ldw	r3,0(fp)
  286100:	9d000215 	stw	r20,8(r19)
  286104:	a0800115 	stw	r2,4(r20)
  286108:	a8c7883a 	add	r3,r21,r3
  28610c:	e0c00015 	stw	r3,0(fp)
  286110:	84c00e26 	beq	r16,r19,28614c <_malloc_r+0x460>
  286114:	018003c4 	movi	r6,15
  286118:	3580a72e 	bgeu	r6,r22,2863b8 <_malloc_r+0x6cc>
  28611c:	81400117 	ldw	r5,4(r16)
  286120:	013ffe04 	movi	r4,-8
  286124:	b0bffd04 	addi	r2,r22,-12
  286128:	1104703a 	and	r2,r2,r4
  28612c:	2900004c 	andi	r4,r5,1
  286130:	2088b03a 	or	r4,r4,r2
  286134:	81000115 	stw	r4,4(r16)
  286138:	01400144 	movi	r5,5
  28613c:	8089883a 	add	r4,r16,r2
  286140:	21400115 	stw	r5,4(r4)
  286144:	21400215 	stw	r5,8(r4)
  286148:	3080cd36 	bltu	r6,r2,286480 <_malloc_r+0x794>
  28614c:	00800a74 	movhi	r2,41
  286150:	1094a604 	addi	r2,r2,21144
  286154:	11000017 	ldw	r4,0(r2)
  286158:	20c0012e 	bgeu	r4,r3,286160 <_malloc_r+0x474>
  28615c:	10c00015 	stw	r3,0(r2)
  286160:	00800a74 	movhi	r2,41
  286164:	1094a504 	addi	r2,r2,21140
  286168:	11000017 	ldw	r4,0(r2)
  28616c:	9c000217 	ldw	r16,8(r19)
  286170:	20c0012e 	bgeu	r4,r3,286178 <_malloc_r+0x48c>
  286174:	10c00015 	stw	r3,0(r2)
  286178:	80c00117 	ldw	r3,4(r16)
  28617c:	00bfff04 	movi	r2,-4
  286180:	1886703a 	and	r3,r3,r2
  286184:	1c45c83a 	sub	r2,r3,r17
  286188:	1c400236 	bltu	r3,r17,286194 <_malloc_r+0x4a8>
  28618c:	00c003c4 	movi	r3,15
  286190:	18800416 	blt	r3,r2,2861a4 <_malloc_r+0x4b8>
  286194:	9009883a 	mov	r4,r18
  286198:	028d81c0 	call	28d81c <__malloc_unlock>
  28619c:	0005883a 	mov	r2,zero
  2861a0:	003f7b06 	br	285f90 <_malloc_r+0x2a4>
  2861a4:	88c00054 	ori	r3,r17,1
  2861a8:	80c00115 	stw	r3,4(r16)
  2861ac:	8463883a 	add	r17,r16,r17
  2861b0:	10800054 	ori	r2,r2,1
  2861b4:	9c400215 	stw	r17,8(r19)
  2861b8:	88800115 	stw	r2,4(r17)
  2861bc:	9009883a 	mov	r4,r18
  2861c0:	028d81c0 	call	28d81c <__malloc_unlock>
  2861c4:	80800204 	addi	r2,r16,8
  2861c8:	003f7106 	br	285f90 <_malloc_r+0x2a4>
  2861cc:	00c00504 	movi	r3,20
  2861d0:	18804a2e 	bgeu	r3,r2,2862fc <_malloc_r+0x610>
  2861d4:	00c01504 	movi	r3,84
  2861d8:	18806e36 	bltu	r3,r2,286394 <_malloc_r+0x6a8>
  2861dc:	8804d33a 	srli	r2,r17,12
  2861e0:	12001bc4 	addi	r8,r2,111
  2861e4:	11c01b84 	addi	r7,r2,110
  2861e8:	4209883a 	add	r4,r8,r8
  2861ec:	003edd06 	br	285d64 <_malloc_r+0x78>
  2861f0:	3804d27a 	srli	r2,r7,9
  2861f4:	00c00104 	movi	r3,4
  2861f8:	1880442e 	bgeu	r3,r2,28630c <_malloc_r+0x620>
  2861fc:	00c00504 	movi	r3,20
  286200:	18808136 	bltu	r3,r2,286408 <_malloc_r+0x71c>
  286204:	11401704 	addi	r5,r2,92
  286208:	10c016c4 	addi	r3,r2,91
  28620c:	294b883a 	add	r5,r5,r5
  286210:	294b883a 	add	r5,r5,r5
  286214:	294b883a 	add	r5,r5,r5
  286218:	994b883a 	add	r5,r19,r5
  28621c:	28800017 	ldw	r2,0(r5)
  286220:	01800a74 	movhi	r6,41
  286224:	297ffe04 	addi	r5,r5,-8
  286228:	3187f604 	addi	r6,r6,8152
  28622c:	28806526 	beq	r5,r2,2863c4 <_malloc_r+0x6d8>
  286230:	01bfff04 	movi	r6,-4
  286234:	10c00117 	ldw	r3,4(r2)
  286238:	1986703a 	and	r3,r3,r6
  28623c:	38c0022e 	bgeu	r7,r3,286248 <_malloc_r+0x55c>
  286240:	10800217 	ldw	r2,8(r2)
  286244:	28bffb1e 	bne	r5,r2,286234 <_malloc_r+0x548>
  286248:	11400317 	ldw	r5,12(r2)
  28624c:	98c00117 	ldw	r3,4(r19)
  286250:	81400315 	stw	r5,12(r16)
  286254:	80800215 	stw	r2,8(r16)
  286258:	2c000215 	stw	r16,8(r5)
  28625c:	14000315 	stw	r16,12(r2)
  286260:	003ef806 	br	285e44 <_malloc_r+0x158>
  286264:	88c00054 	ori	r3,r17,1
  286268:	80c00115 	stw	r3,4(r16)
  28626c:	8463883a 	add	r17,r16,r17
  286270:	34400515 	stw	r17,20(r6)
  286274:	34400415 	stw	r17,16(r6)
  286278:	10c00054 	ori	r3,r2,1
  28627c:	8a000315 	stw	r8,12(r17)
  286280:	8a000215 	stw	r8,8(r17)
  286284:	88c00115 	stw	r3,4(r17)
  286288:	88a3883a 	add	r17,r17,r2
  28628c:	88800015 	stw	r2,0(r17)
  286290:	9009883a 	mov	r4,r18
  286294:	028d81c0 	call	28d81c <__malloc_unlock>
  286298:	80800204 	addi	r2,r16,8
  28629c:	003f3c06 	br	285f90 <_malloc_r+0x2a4>
  2862a0:	30c00117 	ldw	r3,4(r6)
  2862a4:	003ee706 	br	285e44 <_malloc_r+0x158>
  2862a8:	5ac00044 	addi	r11,r11,1
  2862ac:	588000cc 	andi	r2,r11,3
  2862b0:	31800204 	addi	r6,r6,8
  2862b4:	103efd1e 	bne	r2,zero,285eac <_malloc_r+0x1c0>
  2862b8:	00002406 	br	28634c <_malloc_r+0x660>
  2862bc:	14000317 	ldw	r16,12(r2)
  2862c0:	143f251e 	bne	r2,r16,285f58 <_malloc_r+0x26c>
  2862c4:	21000084 	addi	r4,r4,2
  2862c8:	003ebc06 	br	285dbc <_malloc_r+0xd0>
  2862cc:	8085883a 	add	r2,r16,r2
  2862d0:	10c00117 	ldw	r3,4(r2)
  2862d4:	81000317 	ldw	r4,12(r16)
  2862d8:	81400217 	ldw	r5,8(r16)
  2862dc:	18c00054 	ori	r3,r3,1
  2862e0:	10c00115 	stw	r3,4(r2)
  2862e4:	29000315 	stw	r4,12(r5)
  2862e8:	21400215 	stw	r5,8(r4)
  2862ec:	9009883a 	mov	r4,r18
  2862f0:	028d81c0 	call	28d81c <__malloc_unlock>
  2862f4:	80800204 	addi	r2,r16,8
  2862f8:	003f2506 	br	285f90 <_malloc_r+0x2a4>
  2862fc:	12001704 	addi	r8,r2,92
  286300:	11c016c4 	addi	r7,r2,91
  286304:	4209883a 	add	r4,r8,r8
  286308:	003e9606 	br	285d64 <_malloc_r+0x78>
  28630c:	3804d1ba 	srli	r2,r7,6
  286310:	11400e44 	addi	r5,r2,57
  286314:	10c00e04 	addi	r3,r2,56
  286318:	294b883a 	add	r5,r5,r5
  28631c:	003fbc06 	br	286210 <_malloc_r+0x524>
  286320:	84ff5926 	beq	r16,r19,286088 <_malloc_r+0x39c>
  286324:	00800a74 	movhi	r2,41
  286328:	1087f604 	addi	r2,r2,8152
  28632c:	14000217 	ldw	r16,8(r2)
  286330:	00bfff04 	movi	r2,-4
  286334:	80c00117 	ldw	r3,4(r16)
  286338:	1886703a 	and	r3,r3,r2
  28633c:	003f9106 	br	286184 <_malloc_r+0x498>
  286340:	60800217 	ldw	r2,8(r12)
  286344:	213fffc4 	addi	r4,r4,-1
  286348:	1300651e 	bne	r2,r12,2864e0 <_malloc_r+0x7f4>
  28634c:	208000cc 	andi	r2,r4,3
  286350:	633ffe04 	addi	r12,r12,-8
  286354:	103ffa1e 	bne	r2,zero,286340 <_malloc_r+0x654>
  286358:	98800117 	ldw	r2,4(r19)
  28635c:	0146303a 	nor	r3,zero,r5
  286360:	1884703a 	and	r2,r3,r2
  286364:	98800115 	stw	r2,4(r19)
  286368:	294b883a 	add	r5,r5,r5
  28636c:	117f2836 	bltu	r2,r5,286010 <_malloc_r+0x324>
  286370:	283f2726 	beq	r5,zero,286010 <_malloc_r+0x324>
  286374:	2886703a 	and	r3,r5,r2
  286378:	5809883a 	mov	r4,r11
  28637c:	183ec31e 	bne	r3,zero,285e8c <_malloc_r+0x1a0>
  286380:	294b883a 	add	r5,r5,r5
  286384:	2886703a 	and	r3,r5,r2
  286388:	21000104 	addi	r4,r4,4
  28638c:	183ffc26 	beq	r3,zero,286380 <_malloc_r+0x694>
  286390:	003ebe06 	br	285e8c <_malloc_r+0x1a0>
  286394:	00c05504 	movi	r3,340
  286398:	18801236 	bltu	r3,r2,2863e4 <_malloc_r+0x6f8>
  28639c:	8804d3fa 	srli	r2,r17,15
  2863a0:	12001e04 	addi	r8,r2,120
  2863a4:	11c01dc4 	addi	r7,r2,119
  2863a8:	4209883a 	add	r4,r8,r8
  2863ac:	003e6d06 	br	285d64 <_malloc_r+0x78>
  2863b0:	00c40004 	movi	r3,4096
  2863b4:	003f4606 	br	2860d0 <_malloc_r+0x3e4>
  2863b8:	00800044 	movi	r2,1
  2863bc:	a0800115 	stw	r2,4(r20)
  2863c0:	003f7406 	br	286194 <_malloc_r+0x4a8>
  2863c4:	1805d0ba 	srai	r2,r3,2
  2863c8:	01c00044 	movi	r7,1
  2863cc:	30c00117 	ldw	r3,4(r6)
  2863d0:	388e983a 	sll	r7,r7,r2
  2863d4:	2805883a 	mov	r2,r5
  2863d8:	38c6b03a 	or	r3,r7,r3
  2863dc:	30c00115 	stw	r3,4(r6)
  2863e0:	003f9b06 	br	286250 <_malloc_r+0x564>
  2863e4:	00c15504 	movi	r3,1364
  2863e8:	18801a36 	bltu	r3,r2,286454 <_malloc_r+0x768>
  2863ec:	8804d4ba 	srli	r2,r17,18
  2863f0:	12001f44 	addi	r8,r2,125
  2863f4:	11c01f04 	addi	r7,r2,124
  2863f8:	4209883a 	add	r4,r8,r8
  2863fc:	003e5906 	br	285d64 <_malloc_r+0x78>
  286400:	ad400404 	addi	r21,r21,16
  286404:	003f1706 	br	286064 <_malloc_r+0x378>
  286408:	00c01504 	movi	r3,84
  28640c:	18802336 	bltu	r3,r2,28649c <_malloc_r+0x7b0>
  286410:	3804d33a 	srli	r2,r7,12
  286414:	11401bc4 	addi	r5,r2,111
  286418:	10c01b84 	addi	r3,r2,110
  28641c:	294b883a 	add	r5,r5,r5
  286420:	003f7b06 	br	286210 <_malloc_r+0x524>
  286424:	9c000217 	ldw	r16,8(r19)
  286428:	00bfff04 	movi	r2,-4
  28642c:	80c00117 	ldw	r3,4(r16)
  286430:	1886703a 	and	r3,r3,r2
  286434:	003f5306 	br	286184 <_malloc_r+0x498>
  286438:	3083ffcc 	andi	r2,r6,4095
  28643c:	103f181e 	bne	r2,zero,2860a0 <_malloc_r+0x3b4>
  286440:	99000217 	ldw	r4,8(r19)
  286444:	b545883a 	add	r2,r22,r21
  286448:	10800054 	ori	r2,r2,1
  28644c:	20800115 	stw	r2,4(r4)
  286450:	003f3e06 	br	28614c <_malloc_r+0x460>
  286454:	01003f84 	movi	r4,254
  286458:	02001fc4 	movi	r8,127
  28645c:	01c01f84 	movi	r7,126
  286460:	003e4006 	br	285d64 <_malloc_r+0x78>
  286464:	00800a74 	movhi	r2,41
  286468:	108dab04 	addi	r2,r2,13996
  28646c:	15000015 	stw	r20,0(r2)
  286470:	003f1106 	br	2860b8 <_malloc_r+0x3cc>
  286474:	00800044 	movi	r2,1
  286478:	002b883a 	mov	r21,zero
  28647c:	003f1f06 	br	2860fc <_malloc_r+0x410>
  286480:	81400204 	addi	r5,r16,8
  286484:	9009883a 	mov	r4,r18
  286488:	02851000 	call	285100 <_free_r>
  28648c:	00800a74 	movhi	r2,41
  286490:	1094b004 	addi	r2,r2,21184
  286494:	10c00017 	ldw	r3,0(r2)
  286498:	003f2c06 	br	28614c <_malloc_r+0x460>
  28649c:	00c05504 	movi	r3,340
  2864a0:	18800536 	bltu	r3,r2,2864b8 <_malloc_r+0x7cc>
  2864a4:	3804d3fa 	srli	r2,r7,15
  2864a8:	11401e04 	addi	r5,r2,120
  2864ac:	10c01dc4 	addi	r3,r2,119
  2864b0:	294b883a 	add	r5,r5,r5
  2864b4:	003f5606 	br	286210 <_malloc_r+0x524>
  2864b8:	00c15504 	movi	r3,1364
  2864bc:	18800536 	bltu	r3,r2,2864d4 <_malloc_r+0x7e8>
  2864c0:	3804d4ba 	srli	r2,r7,18
  2864c4:	11401f44 	addi	r5,r2,125
  2864c8:	10c01f04 	addi	r3,r2,124
  2864cc:	294b883a 	add	r5,r5,r5
  2864d0:	003f4f06 	br	286210 <_malloc_r+0x524>
  2864d4:	01403f84 	movi	r5,254
  2864d8:	00c01f84 	movi	r3,126
  2864dc:	003f4c06 	br	286210 <_malloc_r+0x524>
  2864e0:	98800117 	ldw	r2,4(r19)
  2864e4:	003fa006 	br	286368 <_malloc_r+0x67c>
  2864e8:	8808d0fa 	srli	r4,r17,3
  2864ec:	20800044 	addi	r2,r4,1
  2864f0:	1085883a 	add	r2,r2,r2
  2864f4:	003e9006 	br	285f38 <_malloc_r+0x24c>

002864f8 <memchr>:
  2864f8:	208000cc 	andi	r2,r4,3
  2864fc:	280f883a 	mov	r7,r5
  286500:	10003426 	beq	r2,zero,2865d4 <memchr+0xdc>
  286504:	30bfffc4 	addi	r2,r6,-1
  286508:	30001a26 	beq	r6,zero,286574 <memchr+0x7c>
  28650c:	20c00003 	ldbu	r3,0(r4)
  286510:	29803fcc 	andi	r6,r5,255
  286514:	30c0051e 	bne	r6,r3,28652c <memchr+0x34>
  286518:	00001806 	br	28657c <memchr+0x84>
  28651c:	10001526 	beq	r2,zero,286574 <memchr+0x7c>
  286520:	20c00003 	ldbu	r3,0(r4)
  286524:	10bfffc4 	addi	r2,r2,-1
  286528:	30c01426 	beq	r6,r3,28657c <memchr+0x84>
  28652c:	21000044 	addi	r4,r4,1
  286530:	20c000cc 	andi	r3,r4,3
  286534:	183ff91e 	bne	r3,zero,28651c <memchr+0x24>
  286538:	020000c4 	movi	r8,3
  28653c:	40801136 	bltu	r8,r2,286584 <memchr+0x8c>
  286540:	10000c26 	beq	r2,zero,286574 <memchr+0x7c>
  286544:	20c00003 	ldbu	r3,0(r4)
  286548:	29403fcc 	andi	r5,r5,255
  28654c:	28c00b26 	beq	r5,r3,28657c <memchr+0x84>
  286550:	20c00044 	addi	r3,r4,1
  286554:	39803fcc 	andi	r6,r7,255
  286558:	2089883a 	add	r4,r4,r2
  28655c:	00000306 	br	28656c <memchr+0x74>
  286560:	18c00044 	addi	r3,r3,1
  286564:	197fffc3 	ldbu	r5,-1(r3)
  286568:	31400526 	beq	r6,r5,286580 <memchr+0x88>
  28656c:	1805883a 	mov	r2,r3
  286570:	20fffb1e 	bne	r4,r3,286560 <memchr+0x68>
  286574:	0005883a 	mov	r2,zero
  286578:	f800283a 	ret
  28657c:	2005883a 	mov	r2,r4
  286580:	f800283a 	ret
  286584:	28c03fcc 	andi	r3,r5,255
  286588:	1812923a 	slli	r9,r3,8
  28658c:	02ffbff4 	movhi	r11,65279
  286590:	02a02074 	movhi	r10,32897
  286594:	48d2b03a 	or	r9,r9,r3
  286598:	4806943a 	slli	r3,r9,16
  28659c:	5affbfc4 	addi	r11,r11,-257
  2865a0:	52a02004 	addi	r10,r10,-32640
  2865a4:	48d2b03a 	or	r9,r9,r3
  2865a8:	20c00017 	ldw	r3,0(r4)
  2865ac:	48c6f03a 	xor	r3,r9,r3
  2865b0:	1acd883a 	add	r6,r3,r11
  2865b4:	00c6303a 	nor	r3,zero,r3
  2865b8:	30c6703a 	and	r3,r6,r3
  2865bc:	1a86703a 	and	r3,r3,r10
  2865c0:	183fe01e 	bne	r3,zero,286544 <memchr+0x4c>
  2865c4:	10bfff04 	addi	r2,r2,-4
  2865c8:	21000104 	addi	r4,r4,4
  2865cc:	40bff636 	bltu	r8,r2,2865a8 <memchr+0xb0>
  2865d0:	003fdb06 	br	286540 <memchr+0x48>
  2865d4:	3005883a 	mov	r2,r6
  2865d8:	003fd706 	br	286538 <memchr+0x40>

002865dc <memcpy>:
  2865dc:	defffd04 	addi	sp,sp,-12
  2865e0:	dfc00215 	stw	ra,8(sp)
  2865e4:	dc400115 	stw	r17,4(sp)
  2865e8:	dc000015 	stw	r16,0(sp)
  2865ec:	00c003c4 	movi	r3,15
  2865f0:	2005883a 	mov	r2,r4
  2865f4:	1980452e 	bgeu	r3,r6,28670c <memcpy+0x130>
  2865f8:	2906b03a 	or	r3,r5,r4
  2865fc:	18c000cc 	andi	r3,r3,3
  286600:	1800441e 	bne	r3,zero,286714 <memcpy+0x138>
  286604:	347ffc04 	addi	r17,r6,-16
  286608:	8822d13a 	srli	r17,r17,4
  28660c:	28c00104 	addi	r3,r5,4
  286610:	23400104 	addi	r13,r4,4
  286614:	8820913a 	slli	r16,r17,4
  286618:	2b000204 	addi	r12,r5,8
  28661c:	22c00204 	addi	r11,r4,8
  286620:	84000504 	addi	r16,r16,20
  286624:	2a800304 	addi	r10,r5,12
  286628:	22400304 	addi	r9,r4,12
  28662c:	2c21883a 	add	r16,r5,r16
  286630:	2811883a 	mov	r8,r5
  286634:	200f883a 	mov	r7,r4
  286638:	41000017 	ldw	r4,0(r8)
  28663c:	1fc00017 	ldw	ra,0(r3)
  286640:	63c00017 	ldw	r15,0(r12)
  286644:	39000015 	stw	r4,0(r7)
  286648:	53800017 	ldw	r14,0(r10)
  28664c:	6fc00015 	stw	ra,0(r13)
  286650:	5bc00015 	stw	r15,0(r11)
  286654:	4b800015 	stw	r14,0(r9)
  286658:	18c00404 	addi	r3,r3,16
  28665c:	39c00404 	addi	r7,r7,16
  286660:	42000404 	addi	r8,r8,16
  286664:	6b400404 	addi	r13,r13,16
  286668:	63000404 	addi	r12,r12,16
  28666c:	5ac00404 	addi	r11,r11,16
  286670:	52800404 	addi	r10,r10,16
  286674:	4a400404 	addi	r9,r9,16
  286678:	1c3fef1e 	bne	r3,r16,286638 <memcpy+0x5c>
  28667c:	89c00044 	addi	r7,r17,1
  286680:	380e913a 	slli	r7,r7,4
  286684:	310003cc 	andi	r4,r6,15
  286688:	02c000c4 	movi	r11,3
  28668c:	11c7883a 	add	r3,r2,r7
  286690:	29cb883a 	add	r5,r5,r7
  286694:	5900212e 	bgeu	r11,r4,28671c <memcpy+0x140>
  286698:	1813883a 	mov	r9,r3
  28669c:	2811883a 	mov	r8,r5
  2866a0:	200f883a 	mov	r7,r4
  2866a4:	42800017 	ldw	r10,0(r8)
  2866a8:	4a400104 	addi	r9,r9,4
  2866ac:	39ffff04 	addi	r7,r7,-4
  2866b0:	4abfff15 	stw	r10,-4(r9)
  2866b4:	42000104 	addi	r8,r8,4
  2866b8:	59fffa36 	bltu	r11,r7,2866a4 <memcpy+0xc8>
  2866bc:	213fff04 	addi	r4,r4,-4
  2866c0:	2008d0ba 	srli	r4,r4,2
  2866c4:	318000cc 	andi	r6,r6,3
  2866c8:	21000044 	addi	r4,r4,1
  2866cc:	2109883a 	add	r4,r4,r4
  2866d0:	2109883a 	add	r4,r4,r4
  2866d4:	1907883a 	add	r3,r3,r4
  2866d8:	290b883a 	add	r5,r5,r4
  2866dc:	30000626 	beq	r6,zero,2866f8 <memcpy+0x11c>
  2866e0:	198d883a 	add	r6,r3,r6
  2866e4:	29c00003 	ldbu	r7,0(r5)
  2866e8:	18c00044 	addi	r3,r3,1
  2866ec:	29400044 	addi	r5,r5,1
  2866f0:	19ffffc5 	stb	r7,-1(r3)
  2866f4:	19bffb1e 	bne	r3,r6,2866e4 <memcpy+0x108>
  2866f8:	dfc00217 	ldw	ra,8(sp)
  2866fc:	dc400117 	ldw	r17,4(sp)
  286700:	dc000017 	ldw	r16,0(sp)
  286704:	dec00304 	addi	sp,sp,12
  286708:	f800283a 	ret
  28670c:	2007883a 	mov	r3,r4
  286710:	003ff206 	br	2866dc <memcpy+0x100>
  286714:	2007883a 	mov	r3,r4
  286718:	003ff106 	br	2866e0 <memcpy+0x104>
  28671c:	200d883a 	mov	r6,r4
  286720:	003fee06 	br	2866dc <memcpy+0x100>

00286724 <memmove>:
  286724:	2005883a 	mov	r2,r4
  286728:	29000b2e 	bgeu	r5,r4,286758 <memmove+0x34>
  28672c:	298f883a 	add	r7,r5,r6
  286730:	21c0092e 	bgeu	r4,r7,286758 <memmove+0x34>
  286734:	2187883a 	add	r3,r4,r6
  286738:	198bc83a 	sub	r5,r3,r6
  28673c:	30004826 	beq	r6,zero,286860 <memmove+0x13c>
  286740:	39ffffc4 	addi	r7,r7,-1
  286744:	39000003 	ldbu	r4,0(r7)
  286748:	18ffffc4 	addi	r3,r3,-1
  28674c:	19000005 	stb	r4,0(r3)
  286750:	28fffb1e 	bne	r5,r3,286740 <memmove+0x1c>
  286754:	f800283a 	ret
  286758:	00c003c4 	movi	r3,15
  28675c:	1980412e 	bgeu	r3,r6,286864 <memmove+0x140>
  286760:	2886b03a 	or	r3,r5,r2
  286764:	18c000cc 	andi	r3,r3,3
  286768:	1800401e 	bne	r3,zero,28686c <memmove+0x148>
  28676c:	33fffc04 	addi	r15,r6,-16
  286770:	781ed13a 	srli	r15,r15,4
  286774:	28c00104 	addi	r3,r5,4
  286778:	13400104 	addi	r13,r2,4
  28677c:	781c913a 	slli	r14,r15,4
  286780:	2b000204 	addi	r12,r5,8
  286784:	12c00204 	addi	r11,r2,8
  286788:	73800504 	addi	r14,r14,20
  28678c:	2a800304 	addi	r10,r5,12
  286790:	12400304 	addi	r9,r2,12
  286794:	2b9d883a 	add	r14,r5,r14
  286798:	2811883a 	mov	r8,r5
  28679c:	100f883a 	mov	r7,r2
  2867a0:	41000017 	ldw	r4,0(r8)
  2867a4:	39c00404 	addi	r7,r7,16
  2867a8:	18c00404 	addi	r3,r3,16
  2867ac:	393ffc15 	stw	r4,-16(r7)
  2867b0:	193ffc17 	ldw	r4,-16(r3)
  2867b4:	6b400404 	addi	r13,r13,16
  2867b8:	5ac00404 	addi	r11,r11,16
  2867bc:	693ffc15 	stw	r4,-16(r13)
  2867c0:	61000017 	ldw	r4,0(r12)
  2867c4:	4a400404 	addi	r9,r9,16
  2867c8:	42000404 	addi	r8,r8,16
  2867cc:	593ffc15 	stw	r4,-16(r11)
  2867d0:	51000017 	ldw	r4,0(r10)
  2867d4:	63000404 	addi	r12,r12,16
  2867d8:	52800404 	addi	r10,r10,16
  2867dc:	493ffc15 	stw	r4,-16(r9)
  2867e0:	1bbfef1e 	bne	r3,r14,2867a0 <memmove+0x7c>
  2867e4:	79000044 	addi	r4,r15,1
  2867e8:	2008913a 	slli	r4,r4,4
  2867ec:	328003cc 	andi	r10,r6,15
  2867f0:	02c000c4 	movi	r11,3
  2867f4:	1107883a 	add	r3,r2,r4
  2867f8:	290b883a 	add	r5,r5,r4
  2867fc:	5a801e2e 	bgeu	r11,r10,286878 <memmove+0x154>
  286800:	1813883a 	mov	r9,r3
  286804:	2811883a 	mov	r8,r5
  286808:	500f883a 	mov	r7,r10
  28680c:	41000017 	ldw	r4,0(r8)
  286810:	4a400104 	addi	r9,r9,4
  286814:	39ffff04 	addi	r7,r7,-4
  286818:	493fff15 	stw	r4,-4(r9)
  28681c:	42000104 	addi	r8,r8,4
  286820:	59fffa36 	bltu	r11,r7,28680c <memmove+0xe8>
  286824:	513fff04 	addi	r4,r10,-4
  286828:	2008d0ba 	srli	r4,r4,2
  28682c:	318000cc 	andi	r6,r6,3
  286830:	21000044 	addi	r4,r4,1
  286834:	2109883a 	add	r4,r4,r4
  286838:	2109883a 	add	r4,r4,r4
  28683c:	1907883a 	add	r3,r3,r4
  286840:	290b883a 	add	r5,r5,r4
  286844:	30000b26 	beq	r6,zero,286874 <memmove+0x150>
  286848:	198d883a 	add	r6,r3,r6
  28684c:	29c00003 	ldbu	r7,0(r5)
  286850:	18c00044 	addi	r3,r3,1
  286854:	29400044 	addi	r5,r5,1
  286858:	19ffffc5 	stb	r7,-1(r3)
  28685c:	19bffb1e 	bne	r3,r6,28684c <memmove+0x128>
  286860:	f800283a 	ret
  286864:	1007883a 	mov	r3,r2
  286868:	003ff606 	br	286844 <memmove+0x120>
  28686c:	1007883a 	mov	r3,r2
  286870:	003ff506 	br	286848 <memmove+0x124>
  286874:	f800283a 	ret
  286878:	500d883a 	mov	r6,r10
  28687c:	003ff106 	br	286844 <memmove+0x120>

00286880 <memset>:
  286880:	20c000cc 	andi	r3,r4,3
  286884:	2005883a 	mov	r2,r4
  286888:	18004426 	beq	r3,zero,28699c <memset+0x11c>
  28688c:	31ffffc4 	addi	r7,r6,-1
  286890:	30004026 	beq	r6,zero,286994 <memset+0x114>
  286894:	2813883a 	mov	r9,r5
  286898:	200d883a 	mov	r6,r4
  28689c:	2007883a 	mov	r3,r4
  2868a0:	00000406 	br	2868b4 <memset+0x34>
  2868a4:	3a3fffc4 	addi	r8,r7,-1
  2868a8:	31800044 	addi	r6,r6,1
  2868ac:	38003926 	beq	r7,zero,286994 <memset+0x114>
  2868b0:	400f883a 	mov	r7,r8
  2868b4:	18c00044 	addi	r3,r3,1
  2868b8:	32400005 	stb	r9,0(r6)
  2868bc:	1a0000cc 	andi	r8,r3,3
  2868c0:	403ff81e 	bne	r8,zero,2868a4 <memset+0x24>
  2868c4:	010000c4 	movi	r4,3
  2868c8:	21c02d2e 	bgeu	r4,r7,286980 <memset+0x100>
  2868cc:	29003fcc 	andi	r4,r5,255
  2868d0:	200c923a 	slli	r6,r4,8
  2868d4:	3108b03a 	or	r4,r6,r4
  2868d8:	200c943a 	slli	r6,r4,16
  2868dc:	218cb03a 	or	r6,r4,r6
  2868e0:	010003c4 	movi	r4,15
  2868e4:	21c0182e 	bgeu	r4,r7,286948 <memset+0xc8>
  2868e8:	3b3ffc04 	addi	r12,r7,-16
  2868ec:	6018d13a 	srli	r12,r12,4
  2868f0:	1a000104 	addi	r8,r3,4
  2868f4:	1ac00204 	addi	r11,r3,8
  2868f8:	6008913a 	slli	r4,r12,4
  2868fc:	1a800304 	addi	r10,r3,12
  286900:	1813883a 	mov	r9,r3
  286904:	21000504 	addi	r4,r4,20
  286908:	1909883a 	add	r4,r3,r4
  28690c:	49800015 	stw	r6,0(r9)
  286910:	41800015 	stw	r6,0(r8)
  286914:	59800015 	stw	r6,0(r11)
  286918:	51800015 	stw	r6,0(r10)
  28691c:	42000404 	addi	r8,r8,16
  286920:	4a400404 	addi	r9,r9,16
  286924:	5ac00404 	addi	r11,r11,16
  286928:	52800404 	addi	r10,r10,16
  28692c:	413ff71e 	bne	r8,r4,28690c <memset+0x8c>
  286930:	63000044 	addi	r12,r12,1
  286934:	6018913a 	slli	r12,r12,4
  286938:	39c003cc 	andi	r7,r7,15
  28693c:	010000c4 	movi	r4,3
  286940:	1b07883a 	add	r3,r3,r12
  286944:	21c00e2e 	bgeu	r4,r7,286980 <memset+0x100>
  286948:	1813883a 	mov	r9,r3
  28694c:	3811883a 	mov	r8,r7
  286950:	010000c4 	movi	r4,3
  286954:	49800015 	stw	r6,0(r9)
  286958:	423fff04 	addi	r8,r8,-4
  28695c:	4a400104 	addi	r9,r9,4
  286960:	223ffc36 	bltu	r4,r8,286954 <memset+0xd4>
  286964:	393fff04 	addi	r4,r7,-4
  286968:	2008d0ba 	srli	r4,r4,2
  28696c:	39c000cc 	andi	r7,r7,3
  286970:	21000044 	addi	r4,r4,1
  286974:	2109883a 	add	r4,r4,r4
  286978:	2109883a 	add	r4,r4,r4
  28697c:	1907883a 	add	r3,r3,r4
  286980:	38000526 	beq	r7,zero,286998 <memset+0x118>
  286984:	19cf883a 	add	r7,r3,r7
  286988:	19400005 	stb	r5,0(r3)
  28698c:	18c00044 	addi	r3,r3,1
  286990:	38fffd1e 	bne	r7,r3,286988 <memset+0x108>
  286994:	f800283a 	ret
  286998:	f800283a 	ret
  28699c:	2007883a 	mov	r3,r4
  2869a0:	300f883a 	mov	r7,r6
  2869a4:	003fc706 	br	2868c4 <memset+0x44>

002869a8 <_Balloc>:
  2869a8:	20801317 	ldw	r2,76(r4)
  2869ac:	defffc04 	addi	sp,sp,-16
  2869b0:	dc400115 	stw	r17,4(sp)
  2869b4:	dc000015 	stw	r16,0(sp)
  2869b8:	dfc00315 	stw	ra,12(sp)
  2869bc:	dc800215 	stw	r18,8(sp)
  2869c0:	2023883a 	mov	r17,r4
  2869c4:	2821883a 	mov	r16,r5
  2869c8:	10000f26 	beq	r2,zero,286a08 <_Balloc+0x60>
  2869cc:	8407883a 	add	r3,r16,r16
  2869d0:	18c7883a 	add	r3,r3,r3
  2869d4:	10c7883a 	add	r3,r2,r3
  2869d8:	18800017 	ldw	r2,0(r3)
  2869dc:	10001126 	beq	r2,zero,286a24 <_Balloc+0x7c>
  2869e0:	11000017 	ldw	r4,0(r2)
  2869e4:	19000015 	stw	r4,0(r3)
  2869e8:	10000415 	stw	zero,16(r2)
  2869ec:	10000315 	stw	zero,12(r2)
  2869f0:	dfc00317 	ldw	ra,12(sp)
  2869f4:	dc800217 	ldw	r18,8(sp)
  2869f8:	dc400117 	ldw	r17,4(sp)
  2869fc:	dc000017 	ldw	r16,0(sp)
  286a00:	dec00404 	addi	sp,sp,16
  286a04:	f800283a 	ret
  286a08:	01800844 	movi	r6,33
  286a0c:	01400104 	movi	r5,4
  286a10:	02898e40 	call	2898e4 <_calloc_r>
  286a14:	88801315 	stw	r2,76(r17)
  286a18:	103fec1e 	bne	r2,zero,2869cc <_Balloc+0x24>
  286a1c:	0005883a 	mov	r2,zero
  286a20:	003ff306 	br	2869f0 <_Balloc+0x48>
  286a24:	01400044 	movi	r5,1
  286a28:	2c24983a 	sll	r18,r5,r16
  286a2c:	8809883a 	mov	r4,r17
  286a30:	91800144 	addi	r6,r18,5
  286a34:	318d883a 	add	r6,r6,r6
  286a38:	318d883a 	add	r6,r6,r6
  286a3c:	02898e40 	call	2898e4 <_calloc_r>
  286a40:	103ff626 	beq	r2,zero,286a1c <_Balloc+0x74>
  286a44:	14000115 	stw	r16,4(r2)
  286a48:	14800215 	stw	r18,8(r2)
  286a4c:	003fe606 	br	2869e8 <_Balloc+0x40>

00286a50 <_Bfree>:
  286a50:	28000826 	beq	r5,zero,286a74 <_Bfree+0x24>
  286a54:	28c00117 	ldw	r3,4(r5)
  286a58:	20801317 	ldw	r2,76(r4)
  286a5c:	18c7883a 	add	r3,r3,r3
  286a60:	18c7883a 	add	r3,r3,r3
  286a64:	10c5883a 	add	r2,r2,r3
  286a68:	10c00017 	ldw	r3,0(r2)
  286a6c:	28c00015 	stw	r3,0(r5)
  286a70:	11400015 	stw	r5,0(r2)
  286a74:	f800283a 	ret

00286a78 <__multadd>:
  286a78:	defffa04 	addi	sp,sp,-24
  286a7c:	dc800315 	stw	r18,12(sp)
  286a80:	dc400215 	stw	r17,8(sp)
  286a84:	dc000115 	stw	r16,4(sp)
  286a88:	2823883a 	mov	r17,r5
  286a8c:	2c000417 	ldw	r16,16(r5)
  286a90:	dfc00515 	stw	ra,20(sp)
  286a94:	dcc00415 	stw	r19,16(sp)
  286a98:	2025883a 	mov	r18,r4
  286a9c:	29400504 	addi	r5,r5,20
  286aa0:	0011883a 	mov	r8,zero
  286aa4:	28c00017 	ldw	r3,0(r5)
  286aa8:	29400104 	addi	r5,r5,4
  286aac:	42000044 	addi	r8,r8,1
  286ab0:	18bfffcc 	andi	r2,r3,65535
  286ab4:	1185383a 	mul	r2,r2,r6
  286ab8:	1806d43a 	srli	r3,r3,16
  286abc:	11cf883a 	add	r7,r2,r7
  286ac0:	3808d43a 	srli	r4,r7,16
  286ac4:	1987383a 	mul	r3,r3,r6
  286ac8:	38bfffcc 	andi	r2,r7,65535
  286acc:	1907883a 	add	r3,r3,r4
  286ad0:	1808943a 	slli	r4,r3,16
  286ad4:	180ed43a 	srli	r7,r3,16
  286ad8:	2085883a 	add	r2,r4,r2
  286adc:	28bfff15 	stw	r2,-4(r5)
  286ae0:	443ff016 	blt	r8,r16,286aa4 <__multadd+0x2c>
  286ae4:	38000926 	beq	r7,zero,286b0c <__multadd+0x94>
  286ae8:	88800217 	ldw	r2,8(r17)
  286aec:	80800f0e 	bge	r16,r2,286b2c <__multadd+0xb4>
  286af0:	80800144 	addi	r2,r16,5
  286af4:	1085883a 	add	r2,r2,r2
  286af8:	1085883a 	add	r2,r2,r2
  286afc:	8885883a 	add	r2,r17,r2
  286b00:	11c00015 	stw	r7,0(r2)
  286b04:	84000044 	addi	r16,r16,1
  286b08:	8c000415 	stw	r16,16(r17)
  286b0c:	8805883a 	mov	r2,r17
  286b10:	dfc00517 	ldw	ra,20(sp)
  286b14:	dcc00417 	ldw	r19,16(sp)
  286b18:	dc800317 	ldw	r18,12(sp)
  286b1c:	dc400217 	ldw	r17,8(sp)
  286b20:	dc000117 	ldw	r16,4(sp)
  286b24:	dec00604 	addi	sp,sp,24
  286b28:	f800283a 	ret
  286b2c:	89400117 	ldw	r5,4(r17)
  286b30:	9009883a 	mov	r4,r18
  286b34:	d9c00015 	stw	r7,0(sp)
  286b38:	29400044 	addi	r5,r5,1
  286b3c:	02869a80 	call	2869a8 <_Balloc>
  286b40:	89800417 	ldw	r6,16(r17)
  286b44:	89400304 	addi	r5,r17,12
  286b48:	11000304 	addi	r4,r2,12
  286b4c:	31800084 	addi	r6,r6,2
  286b50:	318d883a 	add	r6,r6,r6
  286b54:	318d883a 	add	r6,r6,r6
  286b58:	1027883a 	mov	r19,r2
  286b5c:	02865dc0 	call	2865dc <memcpy>
  286b60:	d9c00017 	ldw	r7,0(sp)
  286b64:	88000a26 	beq	r17,zero,286b90 <__multadd+0x118>
  286b68:	88c00117 	ldw	r3,4(r17)
  286b6c:	90801317 	ldw	r2,76(r18)
  286b70:	18c7883a 	add	r3,r3,r3
  286b74:	18c7883a 	add	r3,r3,r3
  286b78:	10c5883a 	add	r2,r2,r3
  286b7c:	10c00017 	ldw	r3,0(r2)
  286b80:	88c00015 	stw	r3,0(r17)
  286b84:	14400015 	stw	r17,0(r2)
  286b88:	9823883a 	mov	r17,r19
  286b8c:	003fd806 	br	286af0 <__multadd+0x78>
  286b90:	9823883a 	mov	r17,r19
  286b94:	003fd606 	br	286af0 <__multadd+0x78>

00286b98 <__s2b>:
  286b98:	defff904 	addi	sp,sp,-28
  286b9c:	dc400115 	stw	r17,4(sp)
  286ba0:	dc000015 	stw	r16,0(sp)
  286ba4:	2023883a 	mov	r17,r4
  286ba8:	2821883a 	mov	r16,r5
  286bac:	39000204 	addi	r4,r7,8
  286bb0:	01400244 	movi	r5,9
  286bb4:	dcc00315 	stw	r19,12(sp)
  286bb8:	dc800215 	stw	r18,8(sp)
  286bbc:	dfc00615 	stw	ra,24(sp)
  286bc0:	dd400515 	stw	r21,20(sp)
  286bc4:	dd000415 	stw	r20,16(sp)
  286bc8:	3825883a 	mov	r18,r7
  286bcc:	3027883a 	mov	r19,r6
  286bd0:	028095c0 	call	28095c <__divsi3>
  286bd4:	00c00044 	movi	r3,1
  286bd8:	000b883a 	mov	r5,zero
  286bdc:	1880030e 	bge	r3,r2,286bec <__s2b+0x54>
  286be0:	18c7883a 	add	r3,r3,r3
  286be4:	29400044 	addi	r5,r5,1
  286be8:	18bffd16 	blt	r3,r2,286be0 <__s2b+0x48>
  286bec:	8809883a 	mov	r4,r17
  286bf0:	02869a80 	call	2869a8 <_Balloc>
  286bf4:	d8c00717 	ldw	r3,28(sp)
  286bf8:	10c00515 	stw	r3,20(r2)
  286bfc:	00c00044 	movi	r3,1
  286c00:	10c00415 	stw	r3,16(r2)
  286c04:	00c00244 	movi	r3,9
  286c08:	1cc0210e 	bge	r3,r19,286c90 <__s2b+0xf8>
  286c0c:	80eb883a 	add	r21,r16,r3
  286c10:	a829883a 	mov	r20,r21
  286c14:	84e1883a 	add	r16,r16,r19
  286c18:	a1c00007 	ldb	r7,0(r20)
  286c1c:	01800284 	movi	r6,10
  286c20:	a5000044 	addi	r20,r20,1
  286c24:	100b883a 	mov	r5,r2
  286c28:	39fff404 	addi	r7,r7,-48
  286c2c:	8809883a 	mov	r4,r17
  286c30:	0286a780 	call	286a78 <__multadd>
  286c34:	a43ff81e 	bne	r20,r16,286c18 <__s2b+0x80>
  286c38:	ace1883a 	add	r16,r21,r19
  286c3c:	843ffe04 	addi	r16,r16,-8
  286c40:	9c800a0e 	bge	r19,r18,286c6c <__s2b+0xd4>
  286c44:	94e5c83a 	sub	r18,r18,r19
  286c48:	84a5883a 	add	r18,r16,r18
  286c4c:	81c00007 	ldb	r7,0(r16)
  286c50:	01800284 	movi	r6,10
  286c54:	84000044 	addi	r16,r16,1
  286c58:	100b883a 	mov	r5,r2
  286c5c:	39fff404 	addi	r7,r7,-48
  286c60:	8809883a 	mov	r4,r17
  286c64:	0286a780 	call	286a78 <__multadd>
  286c68:	84bff81e 	bne	r16,r18,286c4c <__s2b+0xb4>
  286c6c:	dfc00617 	ldw	ra,24(sp)
  286c70:	dd400517 	ldw	r21,20(sp)
  286c74:	dd000417 	ldw	r20,16(sp)
  286c78:	dcc00317 	ldw	r19,12(sp)
  286c7c:	dc800217 	ldw	r18,8(sp)
  286c80:	dc400117 	ldw	r17,4(sp)
  286c84:	dc000017 	ldw	r16,0(sp)
  286c88:	dec00704 	addi	sp,sp,28
  286c8c:	f800283a 	ret
  286c90:	84000284 	addi	r16,r16,10
  286c94:	1827883a 	mov	r19,r3
  286c98:	003fe906 	br	286c40 <__s2b+0xa8>

00286c9c <__hi0bits>:
  286c9c:	20bfffec 	andhi	r2,r4,65535
  286ca0:	1000141e 	bne	r2,zero,286cf4 <__hi0bits+0x58>
  286ca4:	2008943a 	slli	r4,r4,16
  286ca8:	00800404 	movi	r2,16
  286cac:	20ffc02c 	andhi	r3,r4,65280
  286cb0:	1800021e 	bne	r3,zero,286cbc <__hi0bits+0x20>
  286cb4:	2008923a 	slli	r4,r4,8
  286cb8:	10800204 	addi	r2,r2,8
  286cbc:	20fc002c 	andhi	r3,r4,61440
  286cc0:	1800021e 	bne	r3,zero,286ccc <__hi0bits+0x30>
  286cc4:	2008913a 	slli	r4,r4,4
  286cc8:	10800104 	addi	r2,r2,4
  286ccc:	20f0002c 	andhi	r3,r4,49152
  286cd0:	1800031e 	bne	r3,zero,286ce0 <__hi0bits+0x44>
  286cd4:	2109883a 	add	r4,r4,r4
  286cd8:	10800084 	addi	r2,r2,2
  286cdc:	2109883a 	add	r4,r4,r4
  286ce0:	20000316 	blt	r4,zero,286cf0 <__hi0bits+0x54>
  286ce4:	2110002c 	andhi	r4,r4,16384
  286ce8:	2000041e 	bne	r4,zero,286cfc <__hi0bits+0x60>
  286cec:	00800804 	movi	r2,32
  286cf0:	f800283a 	ret
  286cf4:	0005883a 	mov	r2,zero
  286cf8:	003fec06 	br	286cac <__hi0bits+0x10>
  286cfc:	10800044 	addi	r2,r2,1
  286d00:	f800283a 	ret

00286d04 <__lo0bits>:
  286d04:	20c00017 	ldw	r3,0(r4)
  286d08:	188001cc 	andi	r2,r3,7
  286d0c:	10000826 	beq	r2,zero,286d30 <__lo0bits+0x2c>
  286d10:	1880004c 	andi	r2,r3,1
  286d14:	1000211e 	bne	r2,zero,286d9c <__lo0bits+0x98>
  286d18:	1880008c 	andi	r2,r3,2
  286d1c:	1000211e 	bne	r2,zero,286da4 <__lo0bits+0xa0>
  286d20:	1806d0ba 	srli	r3,r3,2
  286d24:	00800084 	movi	r2,2
  286d28:	20c00015 	stw	r3,0(r4)
  286d2c:	f800283a 	ret
  286d30:	18bfffcc 	andi	r2,r3,65535
  286d34:	10001326 	beq	r2,zero,286d84 <__lo0bits+0x80>
  286d38:	0005883a 	mov	r2,zero
  286d3c:	19403fcc 	andi	r5,r3,255
  286d40:	2800021e 	bne	r5,zero,286d4c <__lo0bits+0x48>
  286d44:	1806d23a 	srli	r3,r3,8
  286d48:	10800204 	addi	r2,r2,8
  286d4c:	194003cc 	andi	r5,r3,15
  286d50:	2800021e 	bne	r5,zero,286d5c <__lo0bits+0x58>
  286d54:	1806d13a 	srli	r3,r3,4
  286d58:	10800104 	addi	r2,r2,4
  286d5c:	194000cc 	andi	r5,r3,3
  286d60:	2800021e 	bne	r5,zero,286d6c <__lo0bits+0x68>
  286d64:	1806d0ba 	srli	r3,r3,2
  286d68:	10800084 	addi	r2,r2,2
  286d6c:	1940004c 	andi	r5,r3,1
  286d70:	2800081e 	bne	r5,zero,286d94 <__lo0bits+0x90>
  286d74:	1806d07a 	srli	r3,r3,1
  286d78:	1800051e 	bne	r3,zero,286d90 <__lo0bits+0x8c>
  286d7c:	00800804 	movi	r2,32
  286d80:	f800283a 	ret
  286d84:	1806d43a 	srli	r3,r3,16
  286d88:	00800404 	movi	r2,16
  286d8c:	003feb06 	br	286d3c <__lo0bits+0x38>
  286d90:	10800044 	addi	r2,r2,1
  286d94:	20c00015 	stw	r3,0(r4)
  286d98:	f800283a 	ret
  286d9c:	0005883a 	mov	r2,zero
  286da0:	f800283a 	ret
  286da4:	1806d07a 	srli	r3,r3,1
  286da8:	00800044 	movi	r2,1
  286dac:	20c00015 	stw	r3,0(r4)
  286db0:	f800283a 	ret

00286db4 <__i2b>:
  286db4:	defffd04 	addi	sp,sp,-12
  286db8:	dc000015 	stw	r16,0(sp)
  286dbc:	04000044 	movi	r16,1
  286dc0:	dc400115 	stw	r17,4(sp)
  286dc4:	2823883a 	mov	r17,r5
  286dc8:	800b883a 	mov	r5,r16
  286dcc:	dfc00215 	stw	ra,8(sp)
  286dd0:	02869a80 	call	2869a8 <_Balloc>
  286dd4:	14400515 	stw	r17,20(r2)
  286dd8:	14000415 	stw	r16,16(r2)
  286ddc:	dfc00217 	ldw	ra,8(sp)
  286de0:	dc400117 	ldw	r17,4(sp)
  286de4:	dc000017 	ldw	r16,0(sp)
  286de8:	dec00304 	addi	sp,sp,12
  286dec:	f800283a 	ret

00286df0 <__multiply>:
  286df0:	defffa04 	addi	sp,sp,-24
  286df4:	dcc00315 	stw	r19,12(sp)
  286df8:	dc800215 	stw	r18,8(sp)
  286dfc:	34c00417 	ldw	r19,16(r6)
  286e00:	2c800417 	ldw	r18,16(r5)
  286e04:	dd000415 	stw	r20,16(sp)
  286e08:	dc400115 	stw	r17,4(sp)
  286e0c:	dfc00515 	stw	ra,20(sp)
  286e10:	dc000015 	stw	r16,0(sp)
  286e14:	2829883a 	mov	r20,r5
  286e18:	3023883a 	mov	r17,r6
  286e1c:	94c0050e 	bge	r18,r19,286e34 <__multiply+0x44>
  286e20:	9007883a 	mov	r3,r18
  286e24:	3029883a 	mov	r20,r6
  286e28:	9825883a 	mov	r18,r19
  286e2c:	2823883a 	mov	r17,r5
  286e30:	1827883a 	mov	r19,r3
  286e34:	a0800217 	ldw	r2,8(r20)
  286e38:	94e1883a 	add	r16,r18,r19
  286e3c:	a1400117 	ldw	r5,4(r20)
  286e40:	1400010e 	bge	r2,r16,286e48 <__multiply+0x58>
  286e44:	29400044 	addi	r5,r5,1
  286e48:	02869a80 	call	2869a8 <_Balloc>
  286e4c:	8415883a 	add	r10,r16,r16
  286e50:	12c00504 	addi	r11,r2,20
  286e54:	5295883a 	add	r10,r10,r10
  286e58:	5a95883a 	add	r10,r11,r10
  286e5c:	5807883a 	mov	r3,r11
  286e60:	5a80032e 	bgeu	r11,r10,286e70 <__multiply+0x80>
  286e64:	18000015 	stw	zero,0(r3)
  286e68:	18c00104 	addi	r3,r3,4
  286e6c:	1abffd36 	bltu	r3,r10,286e64 <__multiply+0x74>
  286e70:	9ce7883a 	add	r19,r19,r19
  286e74:	94a5883a 	add	r18,r18,r18
  286e78:	89800504 	addi	r6,r17,20
  286e7c:	9ce7883a 	add	r19,r19,r19
  286e80:	a3400504 	addi	r13,r20,20
  286e84:	94a5883a 	add	r18,r18,r18
  286e88:	34d9883a 	add	r12,r6,r19
  286e8c:	6c93883a 	add	r9,r13,r18
  286e90:	3300422e 	bgeu	r6,r12,286f9c <__multiply+0x1ac>
  286e94:	37c00017 	ldw	ra,0(r6)
  286e98:	fbffffcc 	andi	r15,ra,65535
  286e9c:	78001b26 	beq	r15,zero,286f0c <__multiply+0x11c>
  286ea0:	5811883a 	mov	r8,r11
  286ea4:	681d883a 	mov	r14,r13
  286ea8:	000f883a 	mov	r7,zero
  286eac:	71000017 	ldw	r4,0(r14)
  286eb0:	40c00017 	ldw	r3,0(r8)
  286eb4:	73800104 	addi	r14,r14,4
  286eb8:	217fffcc 	andi	r5,r4,65535
  286ebc:	2bcb383a 	mul	r5,r5,r15
  286ec0:	2008d43a 	srli	r4,r4,16
  286ec4:	1c7fffcc 	andi	r17,r3,65535
  286ec8:	2c4b883a 	add	r5,r5,r17
  286ecc:	29cb883a 	add	r5,r5,r7
  286ed0:	23c9383a 	mul	r4,r4,r15
  286ed4:	1806d43a 	srli	r3,r3,16
  286ed8:	280ed43a 	srli	r7,r5,16
  286edc:	297fffcc 	andi	r5,r5,65535
  286ee0:	20c7883a 	add	r3,r4,r3
  286ee4:	19c7883a 	add	r3,r3,r7
  286ee8:	1808943a 	slli	r4,r3,16
  286eec:	4023883a 	mov	r17,r8
  286ef0:	180ed43a 	srli	r7,r3,16
  286ef4:	214ab03a 	or	r5,r4,r5
  286ef8:	41400015 	stw	r5,0(r8)
  286efc:	42000104 	addi	r8,r8,4
  286f00:	727fea36 	bltu	r14,r9,286eac <__multiply+0xbc>
  286f04:	89c00115 	stw	r7,4(r17)
  286f08:	37c00017 	ldw	ra,0(r6)
  286f0c:	f83ed43a 	srli	ra,ra,16
  286f10:	f8001f26 	beq	ra,zero,286f90 <__multiply+0x1a0>
  286f14:	58c00017 	ldw	r3,0(r11)
  286f18:	681d883a 	mov	r14,r13
  286f1c:	581f883a 	mov	r15,r11
  286f20:	1811883a 	mov	r8,r3
  286f24:	5825883a 	mov	r18,r11
  286f28:	000f883a 	mov	r7,zero
  286f2c:	00000106 	br	286f34 <__multiply+0x144>
  286f30:	8825883a 	mov	r18,r17
  286f34:	7140000b 	ldhu	r5,0(r14)
  286f38:	4010d43a 	srli	r8,r8,16
  286f3c:	193fffcc 	andi	r4,r3,65535
  286f40:	2fcb383a 	mul	r5,r5,ra
  286f44:	7bc00104 	addi	r15,r15,4
  286f48:	73800104 	addi	r14,r14,4
  286f4c:	2a0b883a 	add	r5,r5,r8
  286f50:	29cb883a 	add	r5,r5,r7
  286f54:	2806943a 	slli	r3,r5,16
  286f58:	94400104 	addi	r17,r18,4
  286f5c:	280ad43a 	srli	r5,r5,16
  286f60:	1908b03a 	or	r4,r3,r4
  286f64:	793fff15 	stw	r4,-4(r15)
  286f68:	70ffff17 	ldw	r3,-4(r14)
  286f6c:	8a000017 	ldw	r8,0(r17)
  286f70:	1806d43a 	srli	r3,r3,16
  286f74:	413fffcc 	andi	r4,r8,65535
  286f78:	1fc7383a 	mul	r3,r3,ra
  286f7c:	1907883a 	add	r3,r3,r4
  286f80:	1947883a 	add	r3,r3,r5
  286f84:	180ed43a 	srli	r7,r3,16
  286f88:	727fe936 	bltu	r14,r9,286f30 <__multiply+0x140>
  286f8c:	90c00115 	stw	r3,4(r18)
  286f90:	31800104 	addi	r6,r6,4
  286f94:	5ac00104 	addi	r11,r11,4
  286f98:	333fbe36 	bltu	r6,r12,286e94 <__multiply+0xa4>
  286f9c:	0400090e 	bge	zero,r16,286fc4 <__multiply+0x1d4>
  286fa0:	50ffff17 	ldw	r3,-4(r10)
  286fa4:	52bfff04 	addi	r10,r10,-4
  286fa8:	18000326 	beq	r3,zero,286fb8 <__multiply+0x1c8>
  286fac:	00000506 	br	286fc4 <__multiply+0x1d4>
  286fb0:	50c00017 	ldw	r3,0(r10)
  286fb4:	1800031e 	bne	r3,zero,286fc4 <__multiply+0x1d4>
  286fb8:	843fffc4 	addi	r16,r16,-1
  286fbc:	52bfff04 	addi	r10,r10,-4
  286fc0:	803ffb1e 	bne	r16,zero,286fb0 <__multiply+0x1c0>
  286fc4:	14000415 	stw	r16,16(r2)
  286fc8:	dfc00517 	ldw	ra,20(sp)
  286fcc:	dd000417 	ldw	r20,16(sp)
  286fd0:	dcc00317 	ldw	r19,12(sp)
  286fd4:	dc800217 	ldw	r18,8(sp)
  286fd8:	dc400117 	ldw	r17,4(sp)
  286fdc:	dc000017 	ldw	r16,0(sp)
  286fe0:	dec00604 	addi	sp,sp,24
  286fe4:	f800283a 	ret

00286fe8 <__pow5mult>:
  286fe8:	defffa04 	addi	sp,sp,-24
  286fec:	dcc00315 	stw	r19,12(sp)
  286ff0:	dc000015 	stw	r16,0(sp)
  286ff4:	dfc00515 	stw	ra,20(sp)
  286ff8:	dd000415 	stw	r20,16(sp)
  286ffc:	dc800215 	stw	r18,8(sp)
  287000:	dc400115 	stw	r17,4(sp)
  287004:	308000cc 	andi	r2,r6,3
  287008:	3021883a 	mov	r16,r6
  28700c:	2027883a 	mov	r19,r4
  287010:	10002f1e 	bne	r2,zero,2870d0 <__pow5mult+0xe8>
  287014:	2825883a 	mov	r18,r5
  287018:	8021d0ba 	srai	r16,r16,2
  28701c:	80001a26 	beq	r16,zero,287088 <__pow5mult+0xa0>
  287020:	9c401217 	ldw	r17,72(r19)
  287024:	8800061e 	bne	r17,zero,287040 <__pow5mult+0x58>
  287028:	00003406 	br	2870fc <__pow5mult+0x114>
  28702c:	8021d07a 	srai	r16,r16,1
  287030:	80001526 	beq	r16,zero,287088 <__pow5mult+0xa0>
  287034:	88800017 	ldw	r2,0(r17)
  287038:	10001c26 	beq	r2,zero,2870ac <__pow5mult+0xc4>
  28703c:	1023883a 	mov	r17,r2
  287040:	8080004c 	andi	r2,r16,1
  287044:	103ff926 	beq	r2,zero,28702c <__pow5mult+0x44>
  287048:	880d883a 	mov	r6,r17
  28704c:	900b883a 	mov	r5,r18
  287050:	9809883a 	mov	r4,r19
  287054:	0286df00 	call	286df0 <__multiply>
  287058:	90001b26 	beq	r18,zero,2870c8 <__pow5mult+0xe0>
  28705c:	91000117 	ldw	r4,4(r18)
  287060:	98c01317 	ldw	r3,76(r19)
  287064:	8021d07a 	srai	r16,r16,1
  287068:	2109883a 	add	r4,r4,r4
  28706c:	2109883a 	add	r4,r4,r4
  287070:	1907883a 	add	r3,r3,r4
  287074:	19000017 	ldw	r4,0(r3)
  287078:	91000015 	stw	r4,0(r18)
  28707c:	1c800015 	stw	r18,0(r3)
  287080:	1025883a 	mov	r18,r2
  287084:	803feb1e 	bne	r16,zero,287034 <__pow5mult+0x4c>
  287088:	9005883a 	mov	r2,r18
  28708c:	dfc00517 	ldw	ra,20(sp)
  287090:	dd000417 	ldw	r20,16(sp)
  287094:	dcc00317 	ldw	r19,12(sp)
  287098:	dc800217 	ldw	r18,8(sp)
  28709c:	dc400117 	ldw	r17,4(sp)
  2870a0:	dc000017 	ldw	r16,0(sp)
  2870a4:	dec00604 	addi	sp,sp,24
  2870a8:	f800283a 	ret
  2870ac:	880d883a 	mov	r6,r17
  2870b0:	880b883a 	mov	r5,r17
  2870b4:	9809883a 	mov	r4,r19
  2870b8:	0286df00 	call	286df0 <__multiply>
  2870bc:	88800015 	stw	r2,0(r17)
  2870c0:	10000015 	stw	zero,0(r2)
  2870c4:	003fdd06 	br	28703c <__pow5mult+0x54>
  2870c8:	1025883a 	mov	r18,r2
  2870cc:	003fd706 	br	28702c <__pow5mult+0x44>
  2870d0:	10bfffc4 	addi	r2,r2,-1
  2870d4:	1085883a 	add	r2,r2,r2
  2870d8:	00c00a74 	movhi	r3,41
  2870dc:	18c61d04 	addi	r3,r3,6260
  2870e0:	1085883a 	add	r2,r2,r2
  2870e4:	1885883a 	add	r2,r3,r2
  2870e8:	11800017 	ldw	r6,0(r2)
  2870ec:	000f883a 	mov	r7,zero
  2870f0:	0286a780 	call	286a78 <__multadd>
  2870f4:	1025883a 	mov	r18,r2
  2870f8:	003fc706 	br	287018 <__pow5mult+0x30>
  2870fc:	05000044 	movi	r20,1
  287100:	a00b883a 	mov	r5,r20
  287104:	9809883a 	mov	r4,r19
  287108:	02869a80 	call	2869a8 <_Balloc>
  28710c:	1023883a 	mov	r17,r2
  287110:	00809c44 	movi	r2,625
  287114:	88800515 	stw	r2,20(r17)
  287118:	8d000415 	stw	r20,16(r17)
  28711c:	9c401215 	stw	r17,72(r19)
  287120:	88000015 	stw	zero,0(r17)
  287124:	003fc606 	br	287040 <__pow5mult+0x58>

00287128 <__lshift>:
  287128:	defff904 	addi	sp,sp,-28
  28712c:	dd400515 	stw	r21,20(sp)
  287130:	dcc00315 	stw	r19,12(sp)
  287134:	302bd17a 	srai	r21,r6,5
  287138:	2cc00417 	ldw	r19,16(r5)
  28713c:	28800217 	ldw	r2,8(r5)
  287140:	dd000415 	stw	r20,16(sp)
  287144:	ace7883a 	add	r19,r21,r19
  287148:	dc800215 	stw	r18,8(sp)
  28714c:	dc400115 	stw	r17,4(sp)
  287150:	dc000015 	stw	r16,0(sp)
  287154:	dfc00615 	stw	ra,24(sp)
  287158:	9c000044 	addi	r16,r19,1
  28715c:	2823883a 	mov	r17,r5
  287160:	3029883a 	mov	r20,r6
  287164:	2025883a 	mov	r18,r4
  287168:	29400117 	ldw	r5,4(r5)
  28716c:	1400030e 	bge	r2,r16,28717c <__lshift+0x54>
  287170:	1085883a 	add	r2,r2,r2
  287174:	29400044 	addi	r5,r5,1
  287178:	143ffd16 	blt	r2,r16,287170 <__lshift+0x48>
  28717c:	9009883a 	mov	r4,r18
  287180:	02869a80 	call	2869a8 <_Balloc>
  287184:	10c00504 	addi	r3,r2,20
  287188:	0540070e 	bge	zero,r21,2871a8 <__lshift+0x80>
  28718c:	ad6b883a 	add	r21,r21,r21
  287190:	ad6b883a 	add	r21,r21,r21
  287194:	1809883a 	mov	r4,r3
  287198:	1d47883a 	add	r3,r3,r21
  28719c:	20000015 	stw	zero,0(r4)
  2871a0:	21000104 	addi	r4,r4,4
  2871a4:	193ffd1e 	bne	r3,r4,28719c <__lshift+0x74>
  2871a8:	8a000417 	ldw	r8,16(r17)
  2871ac:	89000504 	addi	r4,r17,20
  2871b0:	a18007cc 	andi	r6,r20,31
  2871b4:	4211883a 	add	r8,r8,r8
  2871b8:	4211883a 	add	r8,r8,r8
  2871bc:	2211883a 	add	r8,r4,r8
  2871c0:	30002326 	beq	r6,zero,287250 <__lshift+0x128>
  2871c4:	02400804 	movi	r9,32
  2871c8:	4993c83a 	sub	r9,r9,r6
  2871cc:	000b883a 	mov	r5,zero
  2871d0:	21c00017 	ldw	r7,0(r4)
  2871d4:	1815883a 	mov	r10,r3
  2871d8:	18c00104 	addi	r3,r3,4
  2871dc:	398e983a 	sll	r7,r7,r6
  2871e0:	21000104 	addi	r4,r4,4
  2871e4:	394ab03a 	or	r5,r7,r5
  2871e8:	197fff15 	stw	r5,-4(r3)
  2871ec:	217fff17 	ldw	r5,-4(r4)
  2871f0:	2a4ad83a 	srl	r5,r5,r9
  2871f4:	223ff636 	bltu	r4,r8,2871d0 <__lshift+0xa8>
  2871f8:	51400115 	stw	r5,4(r10)
  2871fc:	28001a1e 	bne	r5,zero,287268 <__lshift+0x140>
  287200:	843fffc4 	addi	r16,r16,-1
  287204:	14000415 	stw	r16,16(r2)
  287208:	88000826 	beq	r17,zero,28722c <__lshift+0x104>
  28720c:	89000117 	ldw	r4,4(r17)
  287210:	90c01317 	ldw	r3,76(r18)
  287214:	2109883a 	add	r4,r4,r4
  287218:	2109883a 	add	r4,r4,r4
  28721c:	1907883a 	add	r3,r3,r4
  287220:	19000017 	ldw	r4,0(r3)
  287224:	89000015 	stw	r4,0(r17)
  287228:	1c400015 	stw	r17,0(r3)
  28722c:	dfc00617 	ldw	ra,24(sp)
  287230:	dd400517 	ldw	r21,20(sp)
  287234:	dd000417 	ldw	r20,16(sp)
  287238:	dcc00317 	ldw	r19,12(sp)
  28723c:	dc800217 	ldw	r18,8(sp)
  287240:	dc400117 	ldw	r17,4(sp)
  287244:	dc000017 	ldw	r16,0(sp)
  287248:	dec00704 	addi	sp,sp,28
  28724c:	f800283a 	ret
  287250:	21400017 	ldw	r5,0(r4)
  287254:	18c00104 	addi	r3,r3,4
  287258:	21000104 	addi	r4,r4,4
  28725c:	197fff15 	stw	r5,-4(r3)
  287260:	223ffb36 	bltu	r4,r8,287250 <__lshift+0x128>
  287264:	003fe606 	br	287200 <__lshift+0xd8>
  287268:	9c000084 	addi	r16,r19,2
  28726c:	003fe406 	br	287200 <__lshift+0xd8>

00287270 <__mcmp>:
  287270:	20800417 	ldw	r2,16(r4)
  287274:	28c00417 	ldw	r3,16(r5)
  287278:	10c5c83a 	sub	r2,r2,r3
  28727c:	1000111e 	bne	r2,zero,2872c4 <__mcmp+0x54>
  287280:	18c7883a 	add	r3,r3,r3
  287284:	18c7883a 	add	r3,r3,r3
  287288:	21000504 	addi	r4,r4,20
  28728c:	29400504 	addi	r5,r5,20
  287290:	20c5883a 	add	r2,r4,r3
  287294:	28cb883a 	add	r5,r5,r3
  287298:	00000106 	br	2872a0 <__mcmp+0x30>
  28729c:	20800a2e 	bgeu	r4,r2,2872c8 <__mcmp+0x58>
  2872a0:	10bfff04 	addi	r2,r2,-4
  2872a4:	297fff04 	addi	r5,r5,-4
  2872a8:	11800017 	ldw	r6,0(r2)
  2872ac:	28c00017 	ldw	r3,0(r5)
  2872b0:	30fffa26 	beq	r6,r3,28729c <__mcmp+0x2c>
  2872b4:	30c00236 	bltu	r6,r3,2872c0 <__mcmp+0x50>
  2872b8:	00800044 	movi	r2,1
  2872bc:	f800283a 	ret
  2872c0:	00bfffc4 	movi	r2,-1
  2872c4:	f800283a 	ret
  2872c8:	0005883a 	mov	r2,zero
  2872cc:	f800283a 	ret

002872d0 <__mdiff>:
  2872d0:	28c00417 	ldw	r3,16(r5)
  2872d4:	30800417 	ldw	r2,16(r6)
  2872d8:	defffa04 	addi	sp,sp,-24
  2872dc:	dcc00315 	stw	r19,12(sp)
  2872e0:	dc800215 	stw	r18,8(sp)
  2872e4:	dfc00515 	stw	ra,20(sp)
  2872e8:	dd000415 	stw	r20,16(sp)
  2872ec:	dc400115 	stw	r17,4(sp)
  2872f0:	dc000015 	stw	r16,0(sp)
  2872f4:	1887c83a 	sub	r3,r3,r2
  2872f8:	2825883a 	mov	r18,r5
  2872fc:	3027883a 	mov	r19,r6
  287300:	1800141e 	bne	r3,zero,287354 <__mdiff+0x84>
  287304:	1085883a 	add	r2,r2,r2
  287308:	1085883a 	add	r2,r2,r2
  28730c:	2a000504 	addi	r8,r5,20
  287310:	34000504 	addi	r16,r6,20
  287314:	4087883a 	add	r3,r8,r2
  287318:	8085883a 	add	r2,r16,r2
  28731c:	00000106 	br	287324 <__mdiff+0x54>
  287320:	40c0592e 	bgeu	r8,r3,287488 <__mdiff+0x1b8>
  287324:	18ffff04 	addi	r3,r3,-4
  287328:	10bfff04 	addi	r2,r2,-4
  28732c:	19c00017 	ldw	r7,0(r3)
  287330:	11400017 	ldw	r5,0(r2)
  287334:	397ffa26 	beq	r7,r5,287320 <__mdiff+0x50>
  287338:	3940592e 	bgeu	r7,r5,2874a0 <__mdiff+0x1d0>
  28733c:	9005883a 	mov	r2,r18
  287340:	4023883a 	mov	r17,r8
  287344:	9825883a 	mov	r18,r19
  287348:	05000044 	movi	r20,1
  28734c:	1027883a 	mov	r19,r2
  287350:	00000406 	br	287364 <__mdiff+0x94>
  287354:	18005616 	blt	r3,zero,2874b0 <__mdiff+0x1e0>
  287358:	34400504 	addi	r17,r6,20
  28735c:	2c000504 	addi	r16,r5,20
  287360:	0029883a 	mov	r20,zero
  287364:	91400117 	ldw	r5,4(r18)
  287368:	02869a80 	call	2869a8 <_Balloc>
  28736c:	92400417 	ldw	r9,16(r18)
  287370:	9b000417 	ldw	r12,16(r19)
  287374:	12c00504 	addi	r11,r2,20
  287378:	4a51883a 	add	r8,r9,r9
  28737c:	6319883a 	add	r12,r12,r12
  287380:	4211883a 	add	r8,r8,r8
  287384:	6319883a 	add	r12,r12,r12
  287388:	15000315 	stw	r20,12(r2)
  28738c:	8211883a 	add	r8,r16,r8
  287390:	8b19883a 	add	r12,r17,r12
  287394:	0007883a 	mov	r3,zero
  287398:	81400017 	ldw	r5,0(r16)
  28739c:	89c00017 	ldw	r7,0(r17)
  2873a0:	59800104 	addi	r6,r11,4
  2873a4:	293fffcc 	andi	r4,r5,65535
  2873a8:	20c7883a 	add	r3,r4,r3
  2873ac:	393fffcc 	andi	r4,r7,65535
  2873b0:	1909c83a 	sub	r4,r3,r4
  2873b4:	280ad43a 	srli	r5,r5,16
  2873b8:	380ed43a 	srli	r7,r7,16
  2873bc:	2007d43a 	srai	r3,r4,16
  2873c0:	213fffcc 	andi	r4,r4,65535
  2873c4:	29cbc83a 	sub	r5,r5,r7
  2873c8:	28c7883a 	add	r3,r5,r3
  2873cc:	180a943a 	slli	r5,r3,16
  2873d0:	8c400104 	addi	r17,r17,4
  2873d4:	84000104 	addi	r16,r16,4
  2873d8:	2908b03a 	or	r4,r5,r4
  2873dc:	59000015 	stw	r4,0(r11)
  2873e0:	1807d43a 	srai	r3,r3,16
  2873e4:	3015883a 	mov	r10,r6
  2873e8:	3017883a 	mov	r11,r6
  2873ec:	8b3fea36 	bltu	r17,r12,287398 <__mdiff+0xc8>
  2873f0:	8200162e 	bgeu	r16,r8,28744c <__mdiff+0x17c>
  2873f4:	8017883a 	mov	r11,r16
  2873f8:	59400017 	ldw	r5,0(r11)
  2873fc:	31800104 	addi	r6,r6,4
  287400:	5ac00104 	addi	r11,r11,4
  287404:	293fffcc 	andi	r4,r5,65535
  287408:	20c7883a 	add	r3,r4,r3
  28740c:	280ed43a 	srli	r7,r5,16
  287410:	180bd43a 	srai	r5,r3,16
  287414:	193fffcc 	andi	r4,r3,65535
  287418:	3947883a 	add	r3,r7,r5
  28741c:	180a943a 	slli	r5,r3,16
  287420:	1807d43a 	srai	r3,r3,16
  287424:	2908b03a 	or	r4,r5,r4
  287428:	313fff15 	stw	r4,-4(r6)
  28742c:	5a3ff236 	bltu	r11,r8,2873f8 <__mdiff+0x128>
  287430:	0406303a 	nor	r3,zero,r16
  287434:	1a07883a 	add	r3,r3,r8
  287438:	1806d0ba 	srli	r3,r3,2
  28743c:	18c00044 	addi	r3,r3,1
  287440:	18c7883a 	add	r3,r3,r3
  287444:	18c7883a 	add	r3,r3,r3
  287448:	50d5883a 	add	r10,r10,r3
  28744c:	50ffff04 	addi	r3,r10,-4
  287450:	2000041e 	bne	r4,zero,287464 <__mdiff+0x194>
  287454:	18ffff04 	addi	r3,r3,-4
  287458:	19000017 	ldw	r4,0(r3)
  28745c:	4a7fffc4 	addi	r9,r9,-1
  287460:	203ffc26 	beq	r4,zero,287454 <__mdiff+0x184>
  287464:	12400415 	stw	r9,16(r2)
  287468:	dfc00517 	ldw	ra,20(sp)
  28746c:	dd000417 	ldw	r20,16(sp)
  287470:	dcc00317 	ldw	r19,12(sp)
  287474:	dc800217 	ldw	r18,8(sp)
  287478:	dc400117 	ldw	r17,4(sp)
  28747c:	dc000017 	ldw	r16,0(sp)
  287480:	dec00604 	addi	sp,sp,24
  287484:	f800283a 	ret
  287488:	000b883a 	mov	r5,zero
  28748c:	02869a80 	call	2869a8 <_Balloc>
  287490:	00c00044 	movi	r3,1
  287494:	10c00415 	stw	r3,16(r2)
  287498:	10000515 	stw	zero,20(r2)
  28749c:	003ff206 	br	287468 <__mdiff+0x198>
  2874a0:	8023883a 	mov	r17,r16
  2874a4:	0029883a 	mov	r20,zero
  2874a8:	4021883a 	mov	r16,r8
  2874ac:	003fad06 	br	287364 <__mdiff+0x94>
  2874b0:	9005883a 	mov	r2,r18
  2874b4:	94400504 	addi	r17,r18,20
  2874b8:	9c000504 	addi	r16,r19,20
  2874bc:	9825883a 	mov	r18,r19
  2874c0:	05000044 	movi	r20,1
  2874c4:	1027883a 	mov	r19,r2
  2874c8:	003fa606 	br	287364 <__mdiff+0x94>

002874cc <__ulp>:
  2874cc:	295ffc2c 	andhi	r5,r5,32752
  2874d0:	00bf3034 	movhi	r2,64704
  2874d4:	2887883a 	add	r3,r5,r2
  2874d8:	00c0020e 	bge	zero,r3,2874e4 <__ulp+0x18>
  2874dc:	0005883a 	mov	r2,zero
  2874e0:	f800283a 	ret
  2874e4:	00c7c83a 	sub	r3,zero,r3
  2874e8:	1807d53a 	srai	r3,r3,20
  2874ec:	008004c4 	movi	r2,19
  2874f0:	10c00b0e 	bge	r2,r3,287520 <__ulp+0x54>
  2874f4:	18bffb04 	addi	r2,r3,-20
  2874f8:	01000784 	movi	r4,30
  2874fc:	0007883a 	mov	r3,zero
  287500:	20800516 	blt	r4,r2,287518 <__ulp+0x4c>
  287504:	010007c4 	movi	r4,31
  287508:	2089c83a 	sub	r4,r4,r2
  28750c:	00800044 	movi	r2,1
  287510:	1104983a 	sll	r2,r2,r4
  287514:	f800283a 	ret
  287518:	00800044 	movi	r2,1
  28751c:	f800283a 	ret
  287520:	01400234 	movhi	r5,8
  287524:	28c7d83a 	sra	r3,r5,r3
  287528:	0005883a 	mov	r2,zero
  28752c:	f800283a 	ret

00287530 <__b2d>:
  287530:	defffa04 	addi	sp,sp,-24
  287534:	dc000015 	stw	r16,0(sp)
  287538:	24000417 	ldw	r16,16(r4)
  28753c:	dc400115 	stw	r17,4(sp)
  287540:	24400504 	addi	r17,r4,20
  287544:	8421883a 	add	r16,r16,r16
  287548:	8421883a 	add	r16,r16,r16
  28754c:	8c21883a 	add	r16,r17,r16
  287550:	dc800215 	stw	r18,8(sp)
  287554:	84bfff17 	ldw	r18,-4(r16)
  287558:	dd000415 	stw	r20,16(sp)
  28755c:	dcc00315 	stw	r19,12(sp)
  287560:	9009883a 	mov	r4,r18
  287564:	2829883a 	mov	r20,r5
  287568:	dfc00515 	stw	ra,20(sp)
  28756c:	0286c9c0 	call	286c9c <__hi0bits>
  287570:	00c00804 	movi	r3,32
  287574:	1889c83a 	sub	r4,r3,r2
  287578:	a1000015 	stw	r4,0(r20)
  28757c:	01000284 	movi	r4,10
  287580:	84ffff04 	addi	r19,r16,-4
  287584:	20801216 	blt	r4,r2,2875d0 <__b2d+0xa0>
  287588:	018002c4 	movi	r6,11
  28758c:	308dc83a 	sub	r6,r6,r2
  287590:	9186d83a 	srl	r3,r18,r6
  287594:	18cffc34 	orhi	r3,r3,16368
  287598:	8cc0212e 	bgeu	r17,r19,287620 <__b2d+0xf0>
  28759c:	813ffe17 	ldw	r4,-8(r16)
  2875a0:	218cd83a 	srl	r6,r4,r6
  2875a4:	10800544 	addi	r2,r2,21
  2875a8:	9084983a 	sll	r2,r18,r2
  2875ac:	1184b03a 	or	r2,r2,r6
  2875b0:	dfc00517 	ldw	ra,20(sp)
  2875b4:	dd000417 	ldw	r20,16(sp)
  2875b8:	dcc00317 	ldw	r19,12(sp)
  2875bc:	dc800217 	ldw	r18,8(sp)
  2875c0:	dc400117 	ldw	r17,4(sp)
  2875c4:	dc000017 	ldw	r16,0(sp)
  2875c8:	dec00604 	addi	sp,sp,24
  2875cc:	f800283a 	ret
  2875d0:	8cc00f2e 	bgeu	r17,r19,287610 <__b2d+0xe0>
  2875d4:	117ffd44 	addi	r5,r2,-11
  2875d8:	80bffe17 	ldw	r2,-8(r16)
  2875dc:	28000e26 	beq	r5,zero,287618 <__b2d+0xe8>
  2875e0:	1949c83a 	sub	r4,r3,r5
  2875e4:	9164983a 	sll	r18,r18,r5
  2875e8:	1106d83a 	srl	r3,r2,r4
  2875ec:	81bffe04 	addi	r6,r16,-8
  2875f0:	948ffc34 	orhi	r18,r18,16368
  2875f4:	90c6b03a 	or	r3,r18,r3
  2875f8:	89800e2e 	bgeu	r17,r6,287634 <__b2d+0x104>
  2875fc:	81bffd17 	ldw	r6,-12(r16)
  287600:	1144983a 	sll	r2,r2,r5
  287604:	310ad83a 	srl	r5,r6,r4
  287608:	2884b03a 	or	r2,r5,r2
  28760c:	003fe806 	br	2875b0 <__b2d+0x80>
  287610:	10bffd44 	addi	r2,r2,-11
  287614:	1000041e 	bne	r2,zero,287628 <__b2d+0xf8>
  287618:	90cffc34 	orhi	r3,r18,16368
  28761c:	003fe406 	br	2875b0 <__b2d+0x80>
  287620:	000d883a 	mov	r6,zero
  287624:	003fdf06 	br	2875a4 <__b2d+0x74>
  287628:	90a4983a 	sll	r18,r18,r2
  28762c:	0005883a 	mov	r2,zero
  287630:	003ff906 	br	287618 <__b2d+0xe8>
  287634:	1144983a 	sll	r2,r2,r5
  287638:	003fdd06 	br	2875b0 <__b2d+0x80>

0028763c <__d2b>:
  28763c:	defff804 	addi	sp,sp,-32
  287640:	dc000215 	stw	r16,8(sp)
  287644:	3021883a 	mov	r16,r6
  287648:	dc400315 	stw	r17,12(sp)
  28764c:	8022907a 	slli	r17,r16,1
  287650:	dd000615 	stw	r20,24(sp)
  287654:	2829883a 	mov	r20,r5
  287658:	01400044 	movi	r5,1
  28765c:	dcc00515 	stw	r19,20(sp)
  287660:	dc800415 	stw	r18,16(sp)
  287664:	dfc00715 	stw	ra,28(sp)
  287668:	3825883a 	mov	r18,r7
  28766c:	8822d57a 	srli	r17,r17,21
  287670:	02869a80 	call	2869a8 <_Balloc>
  287674:	1027883a 	mov	r19,r2
  287678:	00800434 	movhi	r2,16
  28767c:	10bfffc4 	addi	r2,r2,-1
  287680:	808c703a 	and	r6,r16,r2
  287684:	88000126 	beq	r17,zero,28768c <__d2b+0x50>
  287688:	31800434 	orhi	r6,r6,16
  28768c:	d9800015 	stw	r6,0(sp)
  287690:	a0002426 	beq	r20,zero,287724 <__d2b+0xe8>
  287694:	d9000104 	addi	r4,sp,4
  287698:	dd000115 	stw	r20,4(sp)
  28769c:	0286d040 	call	286d04 <__lo0bits>
  2876a0:	d8c00017 	ldw	r3,0(sp)
  2876a4:	10002f1e 	bne	r2,zero,287764 <__d2b+0x128>
  2876a8:	d9000117 	ldw	r4,4(sp)
  2876ac:	99000515 	stw	r4,20(r19)
  2876b0:	1821003a 	cmpeq	r16,r3,zero
  2876b4:	01000084 	movi	r4,2
  2876b8:	2421c83a 	sub	r16,r4,r16
  2876bc:	98c00615 	stw	r3,24(r19)
  2876c0:	9c000415 	stw	r16,16(r19)
  2876c4:	88001f1e 	bne	r17,zero,287744 <__d2b+0x108>
  2876c8:	10bef384 	addi	r2,r2,-1074
  2876cc:	90800015 	stw	r2,0(r18)
  2876d0:	00900034 	movhi	r2,16384
  2876d4:	10bfffc4 	addi	r2,r2,-1
  2876d8:	8085883a 	add	r2,r16,r2
  2876dc:	1085883a 	add	r2,r2,r2
  2876e0:	1085883a 	add	r2,r2,r2
  2876e4:	9885883a 	add	r2,r19,r2
  2876e8:	11000517 	ldw	r4,20(r2)
  2876ec:	8020917a 	slli	r16,r16,5
  2876f0:	0286c9c0 	call	286c9c <__hi0bits>
  2876f4:	d8c00817 	ldw	r3,32(sp)
  2876f8:	8085c83a 	sub	r2,r16,r2
  2876fc:	18800015 	stw	r2,0(r3)
  287700:	9805883a 	mov	r2,r19
  287704:	dfc00717 	ldw	ra,28(sp)
  287708:	dd000617 	ldw	r20,24(sp)
  28770c:	dcc00517 	ldw	r19,20(sp)
  287710:	dc800417 	ldw	r18,16(sp)
  287714:	dc400317 	ldw	r17,12(sp)
  287718:	dc000217 	ldw	r16,8(sp)
  28771c:	dec00804 	addi	sp,sp,32
  287720:	f800283a 	ret
  287724:	d809883a 	mov	r4,sp
  287728:	0286d040 	call	286d04 <__lo0bits>
  28772c:	d8c00017 	ldw	r3,0(sp)
  287730:	04000044 	movi	r16,1
  287734:	9c000415 	stw	r16,16(r19)
  287738:	98c00515 	stw	r3,20(r19)
  28773c:	10800804 	addi	r2,r2,32
  287740:	883fe126 	beq	r17,zero,2876c8 <__d2b+0x8c>
  287744:	00c00d44 	movi	r3,53
  287748:	8c7ef344 	addi	r17,r17,-1075
  28774c:	88a3883a 	add	r17,r17,r2
  287750:	1885c83a 	sub	r2,r3,r2
  287754:	d8c00817 	ldw	r3,32(sp)
  287758:	94400015 	stw	r17,0(r18)
  28775c:	18800015 	stw	r2,0(r3)
  287760:	003fe706 	br	287700 <__d2b+0xc4>
  287764:	01000804 	movi	r4,32
  287768:	2089c83a 	sub	r4,r4,r2
  28776c:	1908983a 	sll	r4,r3,r4
  287770:	d9400117 	ldw	r5,4(sp)
  287774:	1886d83a 	srl	r3,r3,r2
  287778:	2148b03a 	or	r4,r4,r5
  28777c:	99000515 	stw	r4,20(r19)
  287780:	d8c00015 	stw	r3,0(sp)
  287784:	003fca06 	br	2876b0 <__d2b+0x74>

00287788 <__ratio>:
  287788:	defff904 	addi	sp,sp,-28
  28778c:	dc400315 	stw	r17,12(sp)
  287790:	2823883a 	mov	r17,r5
  287794:	d9400104 	addi	r5,sp,4
  287798:	dfc00615 	stw	ra,24(sp)
  28779c:	dcc00515 	stw	r19,20(sp)
  2877a0:	dc800415 	stw	r18,16(sp)
  2877a4:	2027883a 	mov	r19,r4
  2877a8:	dc000215 	stw	r16,8(sp)
  2877ac:	02875300 	call	287530 <__b2d>
  2877b0:	d80b883a 	mov	r5,sp
  2877b4:	8809883a 	mov	r4,r17
  2877b8:	1025883a 	mov	r18,r2
  2877bc:	1821883a 	mov	r16,r3
  2877c0:	02875300 	call	287530 <__b2d>
  2877c4:	8a000417 	ldw	r8,16(r17)
  2877c8:	99000417 	ldw	r4,16(r19)
  2877cc:	d9400117 	ldw	r5,4(sp)
  2877d0:	2209c83a 	sub	r4,r4,r8
  2877d4:	2010917a 	slli	r8,r4,5
  2877d8:	d9000017 	ldw	r4,0(sp)
  2877dc:	2909c83a 	sub	r4,r5,r4
  2877e0:	4109883a 	add	r4,r8,r4
  2877e4:	01000e0e 	bge	zero,r4,287820 <__ratio+0x98>
  2877e8:	2008953a 	slli	r4,r4,20
  2877ec:	2421883a 	add	r16,r4,r16
  2877f0:	100d883a 	mov	r6,r2
  2877f4:	180f883a 	mov	r7,r3
  2877f8:	9009883a 	mov	r4,r18
  2877fc:	800b883a 	mov	r5,r16
  287800:	028b4c00 	call	28b4c0 <__divdf3>
  287804:	dfc00617 	ldw	ra,24(sp)
  287808:	dcc00517 	ldw	r19,20(sp)
  28780c:	dc800417 	ldw	r18,16(sp)
  287810:	dc400317 	ldw	r17,12(sp)
  287814:	dc000217 	ldw	r16,8(sp)
  287818:	dec00704 	addi	sp,sp,28
  28781c:	f800283a 	ret
  287820:	2008953a 	slli	r4,r4,20
  287824:	1907c83a 	sub	r3,r3,r4
  287828:	003ff106 	br	2877f0 <__ratio+0x68>

0028782c <_mprec_log10>:
  28782c:	defffe04 	addi	sp,sp,-8
  287830:	dc000015 	stw	r16,0(sp)
  287834:	dfc00115 	stw	ra,4(sp)
  287838:	008005c4 	movi	r2,23
  28783c:	2021883a 	mov	r16,r4
  287840:	11000d0e 	bge	r2,r4,287878 <_mprec_log10+0x4c>
  287844:	0005883a 	mov	r2,zero
  287848:	00cffc34 	movhi	r3,16368
  28784c:	843fffc4 	addi	r16,r16,-1
  287850:	000d883a 	mov	r6,zero
  287854:	01d00934 	movhi	r7,16420
  287858:	1009883a 	mov	r4,r2
  28785c:	180b883a 	mov	r5,r3
  287860:	028c0000 	call	28c000 <__muldf3>
  287864:	803ff91e 	bne	r16,zero,28784c <_mprec_log10+0x20>
  287868:	dfc00117 	ldw	ra,4(sp)
  28786c:	dc000017 	ldw	r16,0(sp)
  287870:	dec00204 	addi	sp,sp,8
  287874:	f800283a 	ret
  287878:	202090fa 	slli	r16,r4,3
  28787c:	00800a74 	movhi	r2,41
  287880:	10863404 	addi	r2,r2,6352
  287884:	1421883a 	add	r16,r2,r16
  287888:	80800017 	ldw	r2,0(r16)
  28788c:	80c00117 	ldw	r3,4(r16)
  287890:	dfc00117 	ldw	ra,4(sp)
  287894:	dc000017 	ldw	r16,0(sp)
  287898:	dec00204 	addi	sp,sp,8
  28789c:	f800283a 	ret

002878a0 <__copybits>:
  2878a0:	297fffc4 	addi	r5,r5,-1
  2878a4:	280fd17a 	srai	r7,r5,5
  2878a8:	30c00417 	ldw	r3,16(r6)
  2878ac:	30800504 	addi	r2,r6,20
  2878b0:	39c00044 	addi	r7,r7,1
  2878b4:	18c7883a 	add	r3,r3,r3
  2878b8:	39cf883a 	add	r7,r7,r7
  2878bc:	18c7883a 	add	r3,r3,r3
  2878c0:	39cf883a 	add	r7,r7,r7
  2878c4:	10c7883a 	add	r3,r2,r3
  2878c8:	21cf883a 	add	r7,r4,r7
  2878cc:	10c00d2e 	bgeu	r2,r3,287904 <__copybits+0x64>
  2878d0:	200b883a 	mov	r5,r4
  2878d4:	12000017 	ldw	r8,0(r2)
  2878d8:	29400104 	addi	r5,r5,4
  2878dc:	10800104 	addi	r2,r2,4
  2878e0:	2a3fff15 	stw	r8,-4(r5)
  2878e4:	10fffb36 	bltu	r2,r3,2878d4 <__copybits+0x34>
  2878e8:	1985c83a 	sub	r2,r3,r6
  2878ec:	10bffac4 	addi	r2,r2,-21
  2878f0:	1004d0ba 	srli	r2,r2,2
  2878f4:	10800044 	addi	r2,r2,1
  2878f8:	1085883a 	add	r2,r2,r2
  2878fc:	1085883a 	add	r2,r2,r2
  287900:	2089883a 	add	r4,r4,r2
  287904:	21c0032e 	bgeu	r4,r7,287914 <__copybits+0x74>
  287908:	20000015 	stw	zero,0(r4)
  28790c:	21000104 	addi	r4,r4,4
  287910:	21fffd36 	bltu	r4,r7,287908 <__copybits+0x68>
  287914:	f800283a 	ret

00287918 <__any_on>:
  287918:	20c00417 	ldw	r3,16(r4)
  28791c:	2805d17a 	srai	r2,r5,5
  287920:	21000504 	addi	r4,r4,20
  287924:	18800d0e 	bge	r3,r2,28795c <__any_on+0x44>
  287928:	18c7883a 	add	r3,r3,r3
  28792c:	18c7883a 	add	r3,r3,r3
  287930:	20c7883a 	add	r3,r4,r3
  287934:	20c0192e 	bgeu	r4,r3,28799c <__any_on+0x84>
  287938:	18bfff17 	ldw	r2,-4(r3)
  28793c:	18ffff04 	addi	r3,r3,-4
  287940:	1000041e 	bne	r2,zero,287954 <__any_on+0x3c>
  287944:	20c0142e 	bgeu	r4,r3,287998 <__any_on+0x80>
  287948:	18ffff04 	addi	r3,r3,-4
  28794c:	19400017 	ldw	r5,0(r3)
  287950:	283ffc26 	beq	r5,zero,287944 <__any_on+0x2c>
  287954:	00800044 	movi	r2,1
  287958:	f800283a 	ret
  28795c:	10c00a0e 	bge	r2,r3,287988 <__any_on+0x70>
  287960:	1085883a 	add	r2,r2,r2
  287964:	1085883a 	add	r2,r2,r2
  287968:	294007cc 	andi	r5,r5,31
  28796c:	2087883a 	add	r3,r4,r2
  287970:	283ff026 	beq	r5,zero,287934 <__any_on+0x1c>
  287974:	19800017 	ldw	r6,0(r3)
  287978:	3144d83a 	srl	r2,r6,r5
  28797c:	114a983a 	sll	r5,r2,r5
  287980:	317ff41e 	bne	r6,r5,287954 <__any_on+0x3c>
  287984:	003feb06 	br	287934 <__any_on+0x1c>
  287988:	1085883a 	add	r2,r2,r2
  28798c:	1085883a 	add	r2,r2,r2
  287990:	2087883a 	add	r3,r4,r2
  287994:	003fe706 	br	287934 <__any_on+0x1c>
  287998:	f800283a 	ret
  28799c:	0005883a 	mov	r2,zero
  2879a0:	f800283a 	ret

002879a4 <_realloc_r>:
  2879a4:	defff604 	addi	sp,sp,-40
  2879a8:	dc800215 	stw	r18,8(sp)
  2879ac:	dfc00915 	stw	ra,36(sp)
  2879b0:	df000815 	stw	fp,32(sp)
  2879b4:	ddc00715 	stw	r23,28(sp)
  2879b8:	dd800615 	stw	r22,24(sp)
  2879bc:	dd400515 	stw	r21,20(sp)
  2879c0:	dd000415 	stw	r20,16(sp)
  2879c4:	dcc00315 	stw	r19,12(sp)
  2879c8:	dc400115 	stw	r17,4(sp)
  2879cc:	dc000015 	stw	r16,0(sp)
  2879d0:	3025883a 	mov	r18,r6
  2879d4:	2800b726 	beq	r5,zero,287cb4 <_realloc_r+0x310>
  2879d8:	282b883a 	mov	r21,r5
  2879dc:	2029883a 	mov	r20,r4
  2879e0:	028d7f80 	call	28d7f8 <__malloc_lock>
  2879e4:	a8bfff17 	ldw	r2,-4(r21)
  2879e8:	043fff04 	movi	r16,-4
  2879ec:	90c002c4 	addi	r3,r18,11
  2879f0:	01000584 	movi	r4,22
  2879f4:	acfffe04 	addi	r19,r21,-8
  2879f8:	1420703a 	and	r16,r2,r16
  2879fc:	20c0332e 	bgeu	r4,r3,287acc <_realloc_r+0x128>
  287a00:	047ffe04 	movi	r17,-8
  287a04:	1c62703a 	and	r17,r3,r17
  287a08:	8807883a 	mov	r3,r17
  287a0c:	88005816 	blt	r17,zero,287b70 <_realloc_r+0x1cc>
  287a10:	8c805736 	bltu	r17,r18,287b70 <_realloc_r+0x1cc>
  287a14:	80c0300e 	bge	r16,r3,287ad8 <_realloc_r+0x134>
  287a18:	07000a74 	movhi	fp,41
  287a1c:	e707f604 	addi	fp,fp,8152
  287a20:	e1c00217 	ldw	r7,8(fp)
  287a24:	9c09883a 	add	r4,r19,r16
  287a28:	22000117 	ldw	r8,4(r4)
  287a2c:	21c06326 	beq	r4,r7,287bbc <_realloc_r+0x218>
  287a30:	017fff84 	movi	r5,-2
  287a34:	414a703a 	and	r5,r8,r5
  287a38:	214b883a 	add	r5,r4,r5
  287a3c:	29800117 	ldw	r6,4(r5)
  287a40:	3180004c 	andi	r6,r6,1
  287a44:	30003f26 	beq	r6,zero,287b44 <_realloc_r+0x1a0>
  287a48:	1080004c 	andi	r2,r2,1
  287a4c:	10008326 	beq	r2,zero,287c5c <_realloc_r+0x2b8>
  287a50:	900b883a 	mov	r5,r18
  287a54:	a009883a 	mov	r4,r20
  287a58:	0285cec0 	call	285cec <_malloc_r>
  287a5c:	1025883a 	mov	r18,r2
  287a60:	10011e26 	beq	r2,zero,287edc <_realloc_r+0x538>
  287a64:	a93fff17 	ldw	r4,-4(r21)
  287a68:	10fffe04 	addi	r3,r2,-8
  287a6c:	00bfff84 	movi	r2,-2
  287a70:	2084703a 	and	r2,r4,r2
  287a74:	9885883a 	add	r2,r19,r2
  287a78:	1880ee26 	beq	r3,r2,287e34 <_realloc_r+0x490>
  287a7c:	81bfff04 	addi	r6,r16,-4
  287a80:	00800904 	movi	r2,36
  287a84:	1180b836 	bltu	r2,r6,287d68 <_realloc_r+0x3c4>
  287a88:	00c004c4 	movi	r3,19
  287a8c:	19809636 	bltu	r3,r6,287ce8 <_realloc_r+0x344>
  287a90:	9005883a 	mov	r2,r18
  287a94:	a807883a 	mov	r3,r21
  287a98:	19000017 	ldw	r4,0(r3)
  287a9c:	11000015 	stw	r4,0(r2)
  287aa0:	19000117 	ldw	r4,4(r3)
  287aa4:	11000115 	stw	r4,4(r2)
  287aa8:	18c00217 	ldw	r3,8(r3)
  287aac:	10c00215 	stw	r3,8(r2)
  287ab0:	a80b883a 	mov	r5,r21
  287ab4:	a009883a 	mov	r4,r20
  287ab8:	02851000 	call	285100 <_free_r>
  287abc:	a009883a 	mov	r4,r20
  287ac0:	028d81c0 	call	28d81c <__malloc_unlock>
  287ac4:	9005883a 	mov	r2,r18
  287ac8:	00001206 	br	287b14 <_realloc_r+0x170>
  287acc:	00c00404 	movi	r3,16
  287ad0:	1823883a 	mov	r17,r3
  287ad4:	003fce06 	br	287a10 <_realloc_r+0x6c>
  287ad8:	a825883a 	mov	r18,r21
  287adc:	8445c83a 	sub	r2,r16,r17
  287ae0:	00c003c4 	movi	r3,15
  287ae4:	18802636 	bltu	r3,r2,287b80 <_realloc_r+0x1dc>
  287ae8:	99800117 	ldw	r6,4(r19)
  287aec:	9c07883a 	add	r3,r19,r16
  287af0:	3180004c 	andi	r6,r6,1
  287af4:	3420b03a 	or	r16,r6,r16
  287af8:	9c000115 	stw	r16,4(r19)
  287afc:	18800117 	ldw	r2,4(r3)
  287b00:	10800054 	ori	r2,r2,1
  287b04:	18800115 	stw	r2,4(r3)
  287b08:	a009883a 	mov	r4,r20
  287b0c:	028d81c0 	call	28d81c <__malloc_unlock>
  287b10:	9005883a 	mov	r2,r18
  287b14:	dfc00917 	ldw	ra,36(sp)
  287b18:	df000817 	ldw	fp,32(sp)
  287b1c:	ddc00717 	ldw	r23,28(sp)
  287b20:	dd800617 	ldw	r22,24(sp)
  287b24:	dd400517 	ldw	r21,20(sp)
  287b28:	dd000417 	ldw	r20,16(sp)
  287b2c:	dcc00317 	ldw	r19,12(sp)
  287b30:	dc800217 	ldw	r18,8(sp)
  287b34:	dc400117 	ldw	r17,4(sp)
  287b38:	dc000017 	ldw	r16,0(sp)
  287b3c:	dec00a04 	addi	sp,sp,40
  287b40:	f800283a 	ret
  287b44:	017fff04 	movi	r5,-4
  287b48:	414a703a 	and	r5,r8,r5
  287b4c:	814d883a 	add	r6,r16,r5
  287b50:	30c01f16 	blt	r6,r3,287bd0 <_realloc_r+0x22c>
  287b54:	20800317 	ldw	r2,12(r4)
  287b58:	20c00217 	ldw	r3,8(r4)
  287b5c:	a825883a 	mov	r18,r21
  287b60:	3021883a 	mov	r16,r6
  287b64:	18800315 	stw	r2,12(r3)
  287b68:	10c00215 	stw	r3,8(r2)
  287b6c:	003fdb06 	br	287adc <_realloc_r+0x138>
  287b70:	00800304 	movi	r2,12
  287b74:	a0800015 	stw	r2,0(r20)
  287b78:	0005883a 	mov	r2,zero
  287b7c:	003fe506 	br	287b14 <_realloc_r+0x170>
  287b80:	98c00117 	ldw	r3,4(r19)
  287b84:	9c4b883a 	add	r5,r19,r17
  287b88:	11000054 	ori	r4,r2,1
  287b8c:	18c0004c 	andi	r3,r3,1
  287b90:	1c62b03a 	or	r17,r3,r17
  287b94:	9c400115 	stw	r17,4(r19)
  287b98:	29000115 	stw	r4,4(r5)
  287b9c:	2885883a 	add	r2,r5,r2
  287ba0:	10c00117 	ldw	r3,4(r2)
  287ba4:	29400204 	addi	r5,r5,8
  287ba8:	a009883a 	mov	r4,r20
  287bac:	18c00054 	ori	r3,r3,1
  287bb0:	10c00115 	stw	r3,4(r2)
  287bb4:	02851000 	call	285100 <_free_r>
  287bb8:	003fd306 	br	287b08 <_realloc_r+0x164>
  287bbc:	017fff04 	movi	r5,-4
  287bc0:	414a703a 	and	r5,r8,r5
  287bc4:	89800404 	addi	r6,r17,16
  287bc8:	8151883a 	add	r8,r16,r5
  287bcc:	4180590e 	bge	r8,r6,287d34 <_realloc_r+0x390>
  287bd0:	1080004c 	andi	r2,r2,1
  287bd4:	103f9e1e 	bne	r2,zero,287a50 <_realloc_r+0xac>
  287bd8:	adbffe17 	ldw	r22,-8(r21)
  287bdc:	00bfff04 	movi	r2,-4
  287be0:	9dadc83a 	sub	r22,r19,r22
  287be4:	b1800117 	ldw	r6,4(r22)
  287be8:	3084703a 	and	r2,r6,r2
  287bec:	20002026 	beq	r4,zero,287c70 <_realloc_r+0x2cc>
  287bf0:	80af883a 	add	r23,r16,r2
  287bf4:	b96f883a 	add	r23,r23,r5
  287bf8:	21c05f26 	beq	r4,r7,287d78 <_realloc_r+0x3d4>
  287bfc:	b8c01c16 	blt	r23,r3,287c70 <_realloc_r+0x2cc>
  287c00:	20800317 	ldw	r2,12(r4)
  287c04:	20c00217 	ldw	r3,8(r4)
  287c08:	81bfff04 	addi	r6,r16,-4
  287c0c:	01000904 	movi	r4,36
  287c10:	18800315 	stw	r2,12(r3)
  287c14:	10c00215 	stw	r3,8(r2)
  287c18:	b0c00217 	ldw	r3,8(r22)
  287c1c:	b0800317 	ldw	r2,12(r22)
  287c20:	b4800204 	addi	r18,r22,8
  287c24:	18800315 	stw	r2,12(r3)
  287c28:	10c00215 	stw	r3,8(r2)
  287c2c:	21801b36 	bltu	r4,r6,287c9c <_realloc_r+0x2f8>
  287c30:	008004c4 	movi	r2,19
  287c34:	1180352e 	bgeu	r2,r6,287d0c <_realloc_r+0x368>
  287c38:	a8800017 	ldw	r2,0(r21)
  287c3c:	b0800215 	stw	r2,8(r22)
  287c40:	a8800117 	ldw	r2,4(r21)
  287c44:	b0800315 	stw	r2,12(r22)
  287c48:	008006c4 	movi	r2,27
  287c4c:	11807f36 	bltu	r2,r6,287e4c <_realloc_r+0x4a8>
  287c50:	b0800404 	addi	r2,r22,16
  287c54:	ad400204 	addi	r21,r21,8
  287c58:	00002d06 	br	287d10 <_realloc_r+0x36c>
  287c5c:	adbffe17 	ldw	r22,-8(r21)
  287c60:	00bfff04 	movi	r2,-4
  287c64:	9dadc83a 	sub	r22,r19,r22
  287c68:	b1000117 	ldw	r4,4(r22)
  287c6c:	2084703a 	and	r2,r4,r2
  287c70:	b03f7726 	beq	r22,zero,287a50 <_realloc_r+0xac>
  287c74:	80af883a 	add	r23,r16,r2
  287c78:	b8ff7516 	blt	r23,r3,287a50 <_realloc_r+0xac>
  287c7c:	b0800317 	ldw	r2,12(r22)
  287c80:	b0c00217 	ldw	r3,8(r22)
  287c84:	81bfff04 	addi	r6,r16,-4
  287c88:	01000904 	movi	r4,36
  287c8c:	18800315 	stw	r2,12(r3)
  287c90:	10c00215 	stw	r3,8(r2)
  287c94:	b4800204 	addi	r18,r22,8
  287c98:	21bfe52e 	bgeu	r4,r6,287c30 <_realloc_r+0x28c>
  287c9c:	a80b883a 	mov	r5,r21
  287ca0:	9009883a 	mov	r4,r18
  287ca4:	02867240 	call	286724 <memmove>
  287ca8:	b821883a 	mov	r16,r23
  287cac:	b027883a 	mov	r19,r22
  287cb0:	003f8a06 	br	287adc <_realloc_r+0x138>
  287cb4:	300b883a 	mov	r5,r6
  287cb8:	dfc00917 	ldw	ra,36(sp)
  287cbc:	df000817 	ldw	fp,32(sp)
  287cc0:	ddc00717 	ldw	r23,28(sp)
  287cc4:	dd800617 	ldw	r22,24(sp)
  287cc8:	dd400517 	ldw	r21,20(sp)
  287ccc:	dd000417 	ldw	r20,16(sp)
  287cd0:	dcc00317 	ldw	r19,12(sp)
  287cd4:	dc800217 	ldw	r18,8(sp)
  287cd8:	dc400117 	ldw	r17,4(sp)
  287cdc:	dc000017 	ldw	r16,0(sp)
  287ce0:	dec00a04 	addi	sp,sp,40
  287ce4:	0285cec1 	jmpi	285cec <_malloc_r>
  287ce8:	a8c00017 	ldw	r3,0(r21)
  287cec:	90c00015 	stw	r3,0(r18)
  287cf0:	a8c00117 	ldw	r3,4(r21)
  287cf4:	90c00115 	stw	r3,4(r18)
  287cf8:	00c006c4 	movi	r3,27
  287cfc:	19804536 	bltu	r3,r6,287e14 <_realloc_r+0x470>
  287d00:	90800204 	addi	r2,r18,8
  287d04:	a8c00204 	addi	r3,r21,8
  287d08:	003f6306 	br	287a98 <_realloc_r+0xf4>
  287d0c:	9005883a 	mov	r2,r18
  287d10:	a8c00017 	ldw	r3,0(r21)
  287d14:	b821883a 	mov	r16,r23
  287d18:	b027883a 	mov	r19,r22
  287d1c:	10c00015 	stw	r3,0(r2)
  287d20:	a8c00117 	ldw	r3,4(r21)
  287d24:	10c00115 	stw	r3,4(r2)
  287d28:	a8c00217 	ldw	r3,8(r21)
  287d2c:	10c00215 	stw	r3,8(r2)
  287d30:	003f6a06 	br	287adc <_realloc_r+0x138>
  287d34:	9c67883a 	add	r19,r19,r17
  287d38:	4445c83a 	sub	r2,r8,r17
  287d3c:	e4c00215 	stw	r19,8(fp)
  287d40:	10800054 	ori	r2,r2,1
  287d44:	98800115 	stw	r2,4(r19)
  287d48:	a8bfff17 	ldw	r2,-4(r21)
  287d4c:	a009883a 	mov	r4,r20
  287d50:	1080004c 	andi	r2,r2,1
  287d54:	1462b03a 	or	r17,r2,r17
  287d58:	ac7fff15 	stw	r17,-4(r21)
  287d5c:	028d81c0 	call	28d81c <__malloc_unlock>
  287d60:	a805883a 	mov	r2,r21
  287d64:	003f6b06 	br	287b14 <_realloc_r+0x170>
  287d68:	a80b883a 	mov	r5,r21
  287d6c:	9009883a 	mov	r4,r18
  287d70:	02867240 	call	286724 <memmove>
  287d74:	003f4e06 	br	287ab0 <_realloc_r+0x10c>
  287d78:	89000404 	addi	r4,r17,16
  287d7c:	b93fbc16 	blt	r23,r4,287c70 <_realloc_r+0x2cc>
  287d80:	b0800317 	ldw	r2,12(r22)
  287d84:	b0c00217 	ldw	r3,8(r22)
  287d88:	81bfff04 	addi	r6,r16,-4
  287d8c:	01000904 	movi	r4,36
  287d90:	18800315 	stw	r2,12(r3)
  287d94:	10c00215 	stw	r3,8(r2)
  287d98:	b4800204 	addi	r18,r22,8
  287d9c:	21804336 	bltu	r4,r6,287eac <_realloc_r+0x508>
  287da0:	008004c4 	movi	r2,19
  287da4:	11803f2e 	bgeu	r2,r6,287ea4 <_realloc_r+0x500>
  287da8:	a8800017 	ldw	r2,0(r21)
  287dac:	b0800215 	stw	r2,8(r22)
  287db0:	a8800117 	ldw	r2,4(r21)
  287db4:	b0800315 	stw	r2,12(r22)
  287db8:	008006c4 	movi	r2,27
  287dbc:	11803f36 	bltu	r2,r6,287ebc <_realloc_r+0x518>
  287dc0:	b0800404 	addi	r2,r22,16
  287dc4:	ad400204 	addi	r21,r21,8
  287dc8:	a8c00017 	ldw	r3,0(r21)
  287dcc:	10c00015 	stw	r3,0(r2)
  287dd0:	a8c00117 	ldw	r3,4(r21)
  287dd4:	10c00115 	stw	r3,4(r2)
  287dd8:	a8c00217 	ldw	r3,8(r21)
  287ddc:	10c00215 	stw	r3,8(r2)
  287de0:	b447883a 	add	r3,r22,r17
  287de4:	bc45c83a 	sub	r2,r23,r17
  287de8:	e0c00215 	stw	r3,8(fp)
  287dec:	10800054 	ori	r2,r2,1
  287df0:	18800115 	stw	r2,4(r3)
  287df4:	b0800117 	ldw	r2,4(r22)
  287df8:	a009883a 	mov	r4,r20
  287dfc:	1080004c 	andi	r2,r2,1
  287e00:	1462b03a 	or	r17,r2,r17
  287e04:	b4400115 	stw	r17,4(r22)
  287e08:	028d81c0 	call	28d81c <__malloc_unlock>
  287e0c:	9005883a 	mov	r2,r18
  287e10:	003f4006 	br	287b14 <_realloc_r+0x170>
  287e14:	a8c00217 	ldw	r3,8(r21)
  287e18:	90c00215 	stw	r3,8(r18)
  287e1c:	a8c00317 	ldw	r3,12(r21)
  287e20:	90c00315 	stw	r3,12(r18)
  287e24:	30801126 	beq	r6,r2,287e6c <_realloc_r+0x4c8>
  287e28:	90800404 	addi	r2,r18,16
  287e2c:	a8c00404 	addi	r3,r21,16
  287e30:	003f1906 	br	287a98 <_realloc_r+0xf4>
  287e34:	90ffff17 	ldw	r3,-4(r18)
  287e38:	00bfff04 	movi	r2,-4
  287e3c:	a825883a 	mov	r18,r21
  287e40:	1884703a 	and	r2,r3,r2
  287e44:	80a1883a 	add	r16,r16,r2
  287e48:	003f2406 	br	287adc <_realloc_r+0x138>
  287e4c:	a8800217 	ldw	r2,8(r21)
  287e50:	b0800415 	stw	r2,16(r22)
  287e54:	a8800317 	ldw	r2,12(r21)
  287e58:	b0800515 	stw	r2,20(r22)
  287e5c:	31000a26 	beq	r6,r4,287e88 <_realloc_r+0x4e4>
  287e60:	b0800604 	addi	r2,r22,24
  287e64:	ad400404 	addi	r21,r21,16
  287e68:	003fa906 	br	287d10 <_realloc_r+0x36c>
  287e6c:	a9000417 	ldw	r4,16(r21)
  287e70:	90800604 	addi	r2,r18,24
  287e74:	a8c00604 	addi	r3,r21,24
  287e78:	91000415 	stw	r4,16(r18)
  287e7c:	a9000517 	ldw	r4,20(r21)
  287e80:	91000515 	stw	r4,20(r18)
  287e84:	003f0406 	br	287a98 <_realloc_r+0xf4>
  287e88:	a8c00417 	ldw	r3,16(r21)
  287e8c:	ad400604 	addi	r21,r21,24
  287e90:	b0800804 	addi	r2,r22,32
  287e94:	b0c00615 	stw	r3,24(r22)
  287e98:	a8ffff17 	ldw	r3,-4(r21)
  287e9c:	b0c00715 	stw	r3,28(r22)
  287ea0:	003f9b06 	br	287d10 <_realloc_r+0x36c>
  287ea4:	9005883a 	mov	r2,r18
  287ea8:	003fc706 	br	287dc8 <_realloc_r+0x424>
  287eac:	a80b883a 	mov	r5,r21
  287eb0:	9009883a 	mov	r4,r18
  287eb4:	02867240 	call	286724 <memmove>
  287eb8:	003fc906 	br	287de0 <_realloc_r+0x43c>
  287ebc:	a8800217 	ldw	r2,8(r21)
  287ec0:	b0800415 	stw	r2,16(r22)
  287ec4:	a8800317 	ldw	r2,12(r21)
  287ec8:	b0800515 	stw	r2,20(r22)
  287ecc:	31000726 	beq	r6,r4,287eec <_realloc_r+0x548>
  287ed0:	b0800604 	addi	r2,r22,24
  287ed4:	ad400404 	addi	r21,r21,16
  287ed8:	003fbb06 	br	287dc8 <_realloc_r+0x424>
  287edc:	a009883a 	mov	r4,r20
  287ee0:	028d81c0 	call	28d81c <__malloc_unlock>
  287ee4:	0005883a 	mov	r2,zero
  287ee8:	003f0a06 	br	287b14 <_realloc_r+0x170>
  287eec:	a8c00417 	ldw	r3,16(r21)
  287ef0:	ad400604 	addi	r21,r21,24
  287ef4:	b0800804 	addi	r2,r22,32
  287ef8:	b0c00615 	stw	r3,24(r22)
  287efc:	a8ffff17 	ldw	r3,-4(r21)
  287f00:	b0c00715 	stw	r3,28(r22)
  287f04:	003fb006 	br	287dc8 <_realloc_r+0x424>

00287f08 <__fpclassifyd>:
  287f08:	00a00034 	movhi	r2,32768
  287f0c:	10bfffc4 	addi	r2,r2,-1
  287f10:	2884703a 	and	r2,r5,r2
  287f14:	10000726 	beq	r2,zero,287f34 <__fpclassifyd+0x2c>
  287f18:	00fffc34 	movhi	r3,65520
  287f1c:	019ff834 	movhi	r6,32736
  287f20:	28c7883a 	add	r3,r5,r3
  287f24:	31bfffc4 	addi	r6,r6,-1
  287f28:	30c00536 	bltu	r6,r3,287f40 <__fpclassifyd+0x38>
  287f2c:	00800104 	movi	r2,4
  287f30:	f800283a 	ret
  287f34:	2000021e 	bne	r4,zero,287f40 <__fpclassifyd+0x38>
  287f38:	00800084 	movi	r2,2
  287f3c:	f800283a 	ret
  287f40:	00dffc34 	movhi	r3,32752
  287f44:	019ff834 	movhi	r6,32736
  287f48:	28cb883a 	add	r5,r5,r3
  287f4c:	31bfffc4 	addi	r6,r6,-1
  287f50:	317ff62e 	bgeu	r6,r5,287f2c <__fpclassifyd+0x24>
  287f54:	01400434 	movhi	r5,16
  287f58:	297fffc4 	addi	r5,r5,-1
  287f5c:	28800236 	bltu	r5,r2,287f68 <__fpclassifyd+0x60>
  287f60:	008000c4 	movi	r2,3
  287f64:	f800283a 	ret
  287f68:	10c00226 	beq	r2,r3,287f74 <__fpclassifyd+0x6c>
  287f6c:	0005883a 	mov	r2,zero
  287f70:	f800283a 	ret
  287f74:	2005003a 	cmpeq	r2,r4,zero
  287f78:	f800283a 	ret

00287f7c <_sbrk_r>:
  287f7c:	defffd04 	addi	sp,sp,-12
  287f80:	dc000015 	stw	r16,0(sp)
  287f84:	04000a74 	movhi	r16,41
  287f88:	dc400115 	stw	r17,4(sp)
  287f8c:	8414a804 	addi	r16,r16,21152
  287f90:	2023883a 	mov	r17,r4
  287f94:	2809883a 	mov	r4,r5
  287f98:	dfc00215 	stw	ra,8(sp)
  287f9c:	80000015 	stw	zero,0(r16)
  287fa0:	028d9dc0 	call	28d9dc <sbrk>
  287fa4:	00ffffc4 	movi	r3,-1
  287fa8:	10c00526 	beq	r2,r3,287fc0 <_sbrk_r+0x44>
  287fac:	dfc00217 	ldw	ra,8(sp)
  287fb0:	dc400117 	ldw	r17,4(sp)
  287fb4:	dc000017 	ldw	r16,0(sp)
  287fb8:	dec00304 	addi	sp,sp,12
  287fbc:	f800283a 	ret
  287fc0:	80c00017 	ldw	r3,0(r16)
  287fc4:	183ff926 	beq	r3,zero,287fac <_sbrk_r+0x30>
  287fc8:	88c00015 	stw	r3,0(r17)
  287fcc:	003ff706 	br	287fac <_sbrk_r+0x30>

00287fd0 <__sread>:
  287fd0:	defffe04 	addi	sp,sp,-8
  287fd4:	dc000015 	stw	r16,0(sp)
  287fd8:	2821883a 	mov	r16,r5
  287fdc:	2940038f 	ldh	r5,14(r5)
  287fe0:	dfc00115 	stw	ra,4(sp)
  287fe4:	0289dc40 	call	289dc4 <_read_r>
  287fe8:	10000716 	blt	r2,zero,288008 <__sread+0x38>
  287fec:	80c01417 	ldw	r3,80(r16)
  287ff0:	1887883a 	add	r3,r3,r2
  287ff4:	80c01415 	stw	r3,80(r16)
  287ff8:	dfc00117 	ldw	ra,4(sp)
  287ffc:	dc000017 	ldw	r16,0(sp)
  288000:	dec00204 	addi	sp,sp,8
  288004:	f800283a 	ret
  288008:	80c0030b 	ldhu	r3,12(r16)
  28800c:	18fbffcc 	andi	r3,r3,61439
  288010:	80c0030d 	sth	r3,12(r16)
  288014:	dfc00117 	ldw	ra,4(sp)
  288018:	dc000017 	ldw	r16,0(sp)
  28801c:	dec00204 	addi	sp,sp,8
  288020:	f800283a 	ret

00288024 <__seofread>:
  288024:	0005883a 	mov	r2,zero
  288028:	f800283a 	ret

0028802c <__swrite>:
  28802c:	2880030b 	ldhu	r2,12(r5)
  288030:	defffb04 	addi	sp,sp,-20
  288034:	dcc00315 	stw	r19,12(sp)
  288038:	dc800215 	stw	r18,8(sp)
  28803c:	dc400115 	stw	r17,4(sp)
  288040:	dc000015 	stw	r16,0(sp)
  288044:	dfc00415 	stw	ra,16(sp)
  288048:	10c0400c 	andi	r3,r2,256
  28804c:	2821883a 	mov	r16,r5
  288050:	2023883a 	mov	r17,r4
  288054:	3025883a 	mov	r18,r6
  288058:	3827883a 	mov	r19,r7
  28805c:	18000526 	beq	r3,zero,288074 <__swrite+0x48>
  288060:	2940038f 	ldh	r5,14(r5)
  288064:	01c00084 	movi	r7,2
  288068:	000d883a 	mov	r6,zero
  28806c:	0289d640 	call	289d64 <_lseek_r>
  288070:	8080030b 	ldhu	r2,12(r16)
  288074:	8140038f 	ldh	r5,14(r16)
  288078:	10bbffcc 	andi	r2,r2,61439
  28807c:	980f883a 	mov	r7,r19
  288080:	900d883a 	mov	r6,r18
  288084:	8809883a 	mov	r4,r17
  288088:	8080030d 	sth	r2,12(r16)
  28808c:	dfc00417 	ldw	ra,16(sp)
  288090:	dcc00317 	ldw	r19,12(sp)
  288094:	dc800217 	ldw	r18,8(sp)
  288098:	dc400117 	ldw	r17,4(sp)
  28809c:	dc000017 	ldw	r16,0(sp)
  2880a0:	dec00504 	addi	sp,sp,20
  2880a4:	02898301 	jmpi	289830 <_write_r>

002880a8 <__sseek>:
  2880a8:	defffe04 	addi	sp,sp,-8
  2880ac:	dc000015 	stw	r16,0(sp)
  2880b0:	2821883a 	mov	r16,r5
  2880b4:	2940038f 	ldh	r5,14(r5)
  2880b8:	dfc00115 	stw	ra,4(sp)
  2880bc:	0289d640 	call	289d64 <_lseek_r>
  2880c0:	00ffffc4 	movi	r3,-1
  2880c4:	10c00826 	beq	r2,r3,2880e8 <__sseek+0x40>
  2880c8:	80c0030b 	ldhu	r3,12(r16)
  2880cc:	80801415 	stw	r2,80(r16)
  2880d0:	18c40014 	ori	r3,r3,4096
  2880d4:	80c0030d 	sth	r3,12(r16)
  2880d8:	dfc00117 	ldw	ra,4(sp)
  2880dc:	dc000017 	ldw	r16,0(sp)
  2880e0:	dec00204 	addi	sp,sp,8
  2880e4:	f800283a 	ret
  2880e8:	80c0030b 	ldhu	r3,12(r16)
  2880ec:	18fbffcc 	andi	r3,r3,61439
  2880f0:	80c0030d 	sth	r3,12(r16)
  2880f4:	dfc00117 	ldw	ra,4(sp)
  2880f8:	dc000017 	ldw	r16,0(sp)
  2880fc:	dec00204 	addi	sp,sp,8
  288100:	f800283a 	ret

00288104 <__sclose>:
  288104:	2940038f 	ldh	r5,14(r5)
  288108:	02898901 	jmpi	289890 <_close_r>

0028810c <strcmp>:
  28810c:	2144b03a 	or	r2,r4,r5
  288110:	108000cc 	andi	r2,r2,3
  288114:	1000171e 	bne	r2,zero,288174 <strcmp+0x68>
  288118:	20800017 	ldw	r2,0(r4)
  28811c:	28c00017 	ldw	r3,0(r5)
  288120:	10c0141e 	bne	r2,r3,288174 <strcmp+0x68>
  288124:	027fbff4 	movhi	r9,65279
  288128:	4a7fbfc4 	addi	r9,r9,-257
  28812c:	0086303a 	nor	r3,zero,r2
  288130:	02202074 	movhi	r8,32897
  288134:	1245883a 	add	r2,r2,r9
  288138:	42202004 	addi	r8,r8,-32640
  28813c:	10c4703a 	and	r2,r2,r3
  288140:	1204703a 	and	r2,r2,r8
  288144:	10000226 	beq	r2,zero,288150 <strcmp+0x44>
  288148:	00002306 	br	2881d8 <strcmp+0xcc>
  28814c:	1000221e 	bne	r2,zero,2881d8 <strcmp+0xcc>
  288150:	21000104 	addi	r4,r4,4
  288154:	20c00017 	ldw	r3,0(r4)
  288158:	29400104 	addi	r5,r5,4
  28815c:	29800017 	ldw	r6,0(r5)
  288160:	1a4f883a 	add	r7,r3,r9
  288164:	00c4303a 	nor	r2,zero,r3
  288168:	3884703a 	and	r2,r7,r2
  28816c:	1204703a 	and	r2,r2,r8
  288170:	19bff626 	beq	r3,r6,28814c <strcmp+0x40>
  288174:	20800003 	ldbu	r2,0(r4)
  288178:	10c03fcc 	andi	r3,r2,255
  28817c:	18c0201c 	xori	r3,r3,128
  288180:	18ffe004 	addi	r3,r3,-128
  288184:	18000c26 	beq	r3,zero,2881b8 <strcmp+0xac>
  288188:	29800007 	ldb	r6,0(r5)
  28818c:	19800326 	beq	r3,r6,28819c <strcmp+0x90>
  288190:	00001306 	br	2881e0 <strcmp+0xd4>
  288194:	29800007 	ldb	r6,0(r5)
  288198:	11800b1e 	bne	r2,r6,2881c8 <strcmp+0xbc>
  28819c:	21000044 	addi	r4,r4,1
  2881a0:	20c00003 	ldbu	r3,0(r4)
  2881a4:	29400044 	addi	r5,r5,1
  2881a8:	18803fcc 	andi	r2,r3,255
  2881ac:	1080201c 	xori	r2,r2,128
  2881b0:	10bfe004 	addi	r2,r2,-128
  2881b4:	103ff71e 	bne	r2,zero,288194 <strcmp+0x88>
  2881b8:	0007883a 	mov	r3,zero
  2881bc:	28800003 	ldbu	r2,0(r5)
  2881c0:	1885c83a 	sub	r2,r3,r2
  2881c4:	f800283a 	ret
  2881c8:	28800003 	ldbu	r2,0(r5)
  2881cc:	18c03fcc 	andi	r3,r3,255
  2881d0:	1885c83a 	sub	r2,r3,r2
  2881d4:	f800283a 	ret
  2881d8:	0005883a 	mov	r2,zero
  2881dc:	f800283a 	ret
  2881e0:	10c03fcc 	andi	r3,r2,255
  2881e4:	003ff506 	br	2881bc <strcmp+0xb0>

002881e8 <__sprint_r.part.0>:
  2881e8:	28801917 	ldw	r2,100(r5)
  2881ec:	defff604 	addi	sp,sp,-40
  2881f0:	dd400515 	stw	r21,20(sp)
  2881f4:	dfc00915 	stw	ra,36(sp)
  2881f8:	df000815 	stw	fp,32(sp)
  2881fc:	ddc00715 	stw	r23,28(sp)
  288200:	dd800615 	stw	r22,24(sp)
  288204:	dd000415 	stw	r20,16(sp)
  288208:	dcc00315 	stw	r19,12(sp)
  28820c:	dc800215 	stw	r18,8(sp)
  288210:	dc400115 	stw	r17,4(sp)
  288214:	dc000015 	stw	r16,0(sp)
  288218:	1088000c 	andi	r2,r2,8192
  28821c:	302b883a 	mov	r21,r6
  288220:	10002e26 	beq	r2,zero,2882dc <__sprint_r.part.0+0xf4>
  288224:	30800217 	ldw	r2,8(r6)
  288228:	35800017 	ldw	r22,0(r6)
  28822c:	10002926 	beq	r2,zero,2882d4 <__sprint_r.part.0+0xec>
  288230:	2827883a 	mov	r19,r5
  288234:	2029883a 	mov	r20,r4
  288238:	b5c00104 	addi	r23,r22,4
  28823c:	04bfffc4 	movi	r18,-1
  288240:	bc400017 	ldw	r17,0(r23)
  288244:	b4000017 	ldw	r16,0(r22)
  288248:	0039883a 	mov	fp,zero
  28824c:	8822d0ba 	srli	r17,r17,2
  288250:	8800031e 	bne	r17,zero,288260 <__sprint_r.part.0+0x78>
  288254:	00001806 	br	2882b8 <__sprint_r.part.0+0xd0>
  288258:	84000104 	addi	r16,r16,4
  28825c:	8f001526 	beq	r17,fp,2882b4 <__sprint_r.part.0+0xcc>
  288260:	81400017 	ldw	r5,0(r16)
  288264:	980d883a 	mov	r6,r19
  288268:	a009883a 	mov	r4,r20
  28826c:	0289c100 	call	289c10 <_fputwc_r>
  288270:	e7000044 	addi	fp,fp,1
  288274:	14bff81e 	bne	r2,r18,288258 <__sprint_r.part.0+0x70>
  288278:	9005883a 	mov	r2,r18
  28827c:	a8000215 	stw	zero,8(r21)
  288280:	a8000115 	stw	zero,4(r21)
  288284:	dfc00917 	ldw	ra,36(sp)
  288288:	df000817 	ldw	fp,32(sp)
  28828c:	ddc00717 	ldw	r23,28(sp)
  288290:	dd800617 	ldw	r22,24(sp)
  288294:	dd400517 	ldw	r21,20(sp)
  288298:	dd000417 	ldw	r20,16(sp)
  28829c:	dcc00317 	ldw	r19,12(sp)
  2882a0:	dc800217 	ldw	r18,8(sp)
  2882a4:	dc400117 	ldw	r17,4(sp)
  2882a8:	dc000017 	ldw	r16,0(sp)
  2882ac:	dec00a04 	addi	sp,sp,40
  2882b0:	f800283a 	ret
  2882b4:	a8800217 	ldw	r2,8(r21)
  2882b8:	8c63883a 	add	r17,r17,r17
  2882bc:	8c63883a 	add	r17,r17,r17
  2882c0:	1445c83a 	sub	r2,r2,r17
  2882c4:	a8800215 	stw	r2,8(r21)
  2882c8:	b5800204 	addi	r22,r22,8
  2882cc:	bdc00204 	addi	r23,r23,8
  2882d0:	103fdb1e 	bne	r2,zero,288240 <__sprint_r.part.0+0x58>
  2882d4:	0005883a 	mov	r2,zero
  2882d8:	003fe806 	br	28827c <__sprint_r.part.0+0x94>
  2882dc:	02854100 	call	285410 <__sfvwrite_r>
  2882e0:	003fe606 	br	28827c <__sprint_r.part.0+0x94>

002882e4 <__sprint_r>:
  2882e4:	30c00217 	ldw	r3,8(r6)
  2882e8:	18000126 	beq	r3,zero,2882f0 <__sprint_r+0xc>
  2882ec:	02881e81 	jmpi	2881e8 <__sprint_r.part.0>
  2882f0:	30000115 	stw	zero,4(r6)
  2882f4:	0005883a 	mov	r2,zero
  2882f8:	f800283a 	ret

002882fc <___vfiprintf_internal_r>:
  2882fc:	deffc904 	addi	sp,sp,-220
  288300:	df003515 	stw	fp,212(sp)
  288304:	dd003115 	stw	r20,196(sp)
  288308:	dfc03615 	stw	ra,216(sp)
  28830c:	ddc03415 	stw	r23,208(sp)
  288310:	dd803315 	stw	r22,204(sp)
  288314:	dd403215 	stw	r21,200(sp)
  288318:	dcc03015 	stw	r19,192(sp)
  28831c:	dc802f15 	stw	r18,188(sp)
  288320:	dc402e15 	stw	r17,184(sp)
  288324:	dc002d15 	stw	r16,180(sp)
  288328:	d9002015 	stw	r4,128(sp)
  28832c:	d9c02215 	stw	r7,136(sp)
  288330:	2829883a 	mov	r20,r5
  288334:	3039883a 	mov	fp,r6
  288338:	20000226 	beq	r4,zero,288344 <___vfiprintf_internal_r+0x48>
  28833c:	20800e17 	ldw	r2,56(r4)
  288340:	1000cf26 	beq	r2,zero,288680 <___vfiprintf_internal_r+0x384>
  288344:	a080030b 	ldhu	r2,12(r20)
  288348:	10c8000c 	andi	r3,r2,8192
  28834c:	1800061e 	bne	r3,zero,288368 <___vfiprintf_internal_r+0x6c>
  288350:	a1001917 	ldw	r4,100(r20)
  288354:	00f7ffc4 	movi	r3,-8193
  288358:	10880014 	ori	r2,r2,8192
  28835c:	20c6703a 	and	r3,r4,r3
  288360:	a080030d 	sth	r2,12(r20)
  288364:	a0c01915 	stw	r3,100(r20)
  288368:	10c0020c 	andi	r3,r2,8
  28836c:	1800a926 	beq	r3,zero,288614 <___vfiprintf_internal_r+0x318>
  288370:	a0c00417 	ldw	r3,16(r20)
  288374:	1800a726 	beq	r3,zero,288614 <___vfiprintf_internal_r+0x318>
  288378:	1080068c 	andi	r2,r2,26
  28837c:	00c00284 	movi	r3,10
  288380:	10c0ac26 	beq	r2,r3,288634 <___vfiprintf_internal_r+0x338>
  288384:	da801a04 	addi	r10,sp,104
  288388:	da801e15 	stw	r10,120(sp)
  28838c:	d8801e17 	ldw	r2,120(sp)
  288390:	da8019c4 	addi	r10,sp,103
  288394:	05800a74 	movhi	r22,41
  288398:	05c00a74 	movhi	r23,41
  28839c:	da801f15 	stw	r10,124(sp)
  2883a0:	1295c83a 	sub	r10,r2,r10
  2883a4:	b5866a04 	addi	r22,r22,6568
  2883a8:	bdc66604 	addi	r23,r23,6552
  2883ac:	dec01a15 	stw	sp,104(sp)
  2883b0:	d8001c15 	stw	zero,112(sp)
  2883b4:	d8001b15 	stw	zero,108(sp)
  2883b8:	d8002615 	stw	zero,152(sp)
  2883bc:	d8002315 	stw	zero,140(sp)
  2883c0:	da802715 	stw	r10,156(sp)
  2883c4:	d811883a 	mov	r8,sp
  2883c8:	dd002115 	stw	r20,132(sp)
  2883cc:	e021883a 	mov	r16,fp
  2883d0:	80800007 	ldb	r2,0(r16)
  2883d4:	1003ea26 	beq	r2,zero,289380 <___vfiprintf_internal_r+0x1084>
  2883d8:	00c00944 	movi	r3,37
  2883dc:	8025883a 	mov	r18,r16
  2883e0:	10c0021e 	bne	r2,r3,2883ec <___vfiprintf_internal_r+0xf0>
  2883e4:	00001606 	br	288440 <___vfiprintf_internal_r+0x144>
  2883e8:	10c00326 	beq	r2,r3,2883f8 <___vfiprintf_internal_r+0xfc>
  2883ec:	94800044 	addi	r18,r18,1
  2883f0:	90800007 	ldb	r2,0(r18)
  2883f4:	103ffc1e 	bne	r2,zero,2883e8 <___vfiprintf_internal_r+0xec>
  2883f8:	9423c83a 	sub	r17,r18,r16
  2883fc:	88001026 	beq	r17,zero,288440 <___vfiprintf_internal_r+0x144>
  288400:	d8c01c17 	ldw	r3,112(sp)
  288404:	d8801b17 	ldw	r2,108(sp)
  288408:	44000015 	stw	r16,0(r8)
  28840c:	88c7883a 	add	r3,r17,r3
  288410:	10800044 	addi	r2,r2,1
  288414:	44400115 	stw	r17,4(r8)
  288418:	d8c01c15 	stw	r3,112(sp)
  28841c:	d8801b15 	stw	r2,108(sp)
  288420:	010001c4 	movi	r4,7
  288424:	2080760e 	bge	r4,r2,288600 <___vfiprintf_internal_r+0x304>
  288428:	1803821e 	bne	r3,zero,289234 <___vfiprintf_internal_r+0xf38>
  28842c:	da802317 	ldw	r10,140(sp)
  288430:	d8001b15 	stw	zero,108(sp)
  288434:	d811883a 	mov	r8,sp
  288438:	5455883a 	add	r10,r10,r17
  28843c:	da802315 	stw	r10,140(sp)
  288440:	90800007 	ldb	r2,0(r18)
  288444:	10044626 	beq	r2,zero,289560 <___vfiprintf_internal_r+0x1264>
  288448:	90c00047 	ldb	r3,1(r18)
  28844c:	94000044 	addi	r16,r18,1
  288450:	d8001d85 	stb	zero,118(sp)
  288454:	0009883a 	mov	r4,zero
  288458:	000f883a 	mov	r7,zero
  28845c:	027fffc4 	movi	r9,-1
  288460:	0023883a 	mov	r17,zero
  288464:	0029883a 	mov	r20,zero
  288468:	01401604 	movi	r5,88
  28846c:	01800244 	movi	r6,9
  288470:	03400a84 	movi	r13,42
  288474:	03001b04 	movi	r12,108
  288478:	84000044 	addi	r16,r16,1
  28847c:	18bff804 	addi	r2,r3,-32
  288480:	28827336 	bltu	r5,r2,288e50 <___vfiprintf_internal_r+0xb54>
  288484:	100490ba 	slli	r2,r2,2
  288488:	02800a74 	movhi	r10,41
  28848c:	52a12704 	addi	r10,r10,-31588
  288490:	1285883a 	add	r2,r2,r10
  288494:	10800017 	ldw	r2,0(r2)
  288498:	1000683a 	jmp	r2
  28849c:	00288b84 	movi	zero,-24018
  2884a0:	00288e50 	cmplti	zero,zero,-24007
  2884a4:	00288e50 	cmplti	zero,zero,-24007
  2884a8:	00288ba4 	muli	zero,zero,-24018
  2884ac:	00288e50 	cmplti	zero,zero,-24007
  2884b0:	00288e50 	cmplti	zero,zero,-24007
  2884b4:	00288e50 	cmplti	zero,zero,-24007
  2884b8:	00288e50 	cmplti	zero,zero,-24007
  2884bc:	00288e50 	cmplti	zero,zero,-24007
  2884c0:	00288e50 	cmplti	zero,zero,-24007
  2884c4:	00288d8c 	andi	zero,zero,41526
  2884c8:	00288da8 	cmpgeui	zero,zero,41526
  2884cc:	00288e50 	cmplti	zero,zero,-24007
  2884d0:	00288690 	cmplti	zero,zero,-24038
  2884d4:	00288db8 	rdprs	zero,zero,-24010
  2884d8:	00288e50 	cmplti	zero,zero,-24007
  2884dc:	00288bb0 	cmpltui	zero,zero,41518
  2884e0:	00288bbc 	xorhi	zero,zero,41518
  2884e4:	00288bbc 	xorhi	zero,zero,41518
  2884e8:	00288bbc 	xorhi	zero,zero,41518
  2884ec:	00288bbc 	xorhi	zero,zero,41518
  2884f0:	00288bbc 	xorhi	zero,zero,41518
  2884f4:	00288bbc 	xorhi	zero,zero,41518
  2884f8:	00288bbc 	xorhi	zero,zero,41518
  2884fc:	00288bbc 	xorhi	zero,zero,41518
  288500:	00288bbc 	xorhi	zero,zero,41518
  288504:	00288e50 	cmplti	zero,zero,-24007
  288508:	00288e50 	cmplti	zero,zero,-24007
  28850c:	00288e50 	cmplti	zero,zero,-24007
  288510:	00288e50 	cmplti	zero,zero,-24007
  288514:	00288e50 	cmplti	zero,zero,-24007
  288518:	00288e50 	cmplti	zero,zero,-24007
  28851c:	00288e50 	cmplti	zero,zero,-24007
  288520:	00288e50 	cmplti	zero,zero,-24007
  288524:	00288e50 	cmplti	zero,zero,-24007
  288528:	00288e50 	cmplti	zero,zero,-24007
  28852c:	00288be8 	cmpgeui	zero,zero,41519
  288530:	00288e50 	cmplti	zero,zero,-24007
  288534:	00288e50 	cmplti	zero,zero,-24007
  288538:	00288e50 	cmplti	zero,zero,-24007
  28853c:	00288e50 	cmplti	zero,zero,-24007
  288540:	00288e50 	cmplti	zero,zero,-24007
  288544:	00288e50 	cmplti	zero,zero,-24007
  288548:	00288e50 	cmplti	zero,zero,-24007
  28854c:	00288e50 	cmplti	zero,zero,-24007
  288550:	00288e50 	cmplti	zero,zero,-24007
  288554:	00288e50 	cmplti	zero,zero,-24007
  288558:	00288c20 	cmpeqi	zero,zero,-24016
  28855c:	00288e50 	cmplti	zero,zero,-24007
  288560:	00288e50 	cmplti	zero,zero,-24007
  288564:	00288e50 	cmplti	zero,zero,-24007
  288568:	00288e50 	cmplti	zero,zero,-24007
  28856c:	00288e50 	cmplti	zero,zero,-24007
  288570:	00288c78 	rdprs	zero,zero,-24015
  288574:	00288e50 	cmplti	zero,zero,-24007
  288578:	00288e50 	cmplti	zero,zero,-24007
  28857c:	00288ce8 	cmpgeui	zero,zero,41523
  288580:	00288e50 	cmplti	zero,zero,-24007
  288584:	00288e50 	cmplti	zero,zero,-24007
  288588:	00288e50 	cmplti	zero,zero,-24007
  28858c:	00288e50 	cmplti	zero,zero,-24007
  288590:	00288e50 	cmplti	zero,zero,-24007
  288594:	00288e50 	cmplti	zero,zero,-24007
  288598:	00288e50 	cmplti	zero,zero,-24007
  28859c:	00288e50 	cmplti	zero,zero,-24007
  2885a0:	00288e50 	cmplti	zero,zero,-24007
  2885a4:	00288e50 	cmplti	zero,zero,-24007
  2885a8:	00288a94 	movui	zero,41514
  2885ac:	00288ac0 	call	288ac <__alt_mem_onchip_memory2_0-0x257754>
  2885b0:	00288e50 	cmplti	zero,zero,-24007
  2885b4:	00288e50 	cmplti	zero,zero,-24007
  2885b8:	00288e50 	cmplti	zero,zero,-24007
  2885bc:	00288df8 	rdprs	zero,zero,-24009
  2885c0:	00288ac0 	call	288ac <__alt_mem_onchip_memory2_0-0x257754>
  2885c4:	00288e50 	cmplti	zero,zero,-24007
  2885c8:	00288e50 	cmplti	zero,zero,-24007
  2885cc:	00288954 	movui	zero,41509
  2885d0:	00288e50 	cmplti	zero,zero,-24007
  2885d4:	00288964 	muli	zero,zero,-24027
  2885d8:	002889a0 	cmpeqi	zero,zero,-24026
  2885dc:	0028869c 	xori	zero,zero,41498
  2885e0:	00288948 	cmpgei	zero,zero,-24027
  2885e4:	00288e50 	cmplti	zero,zero,-24007
  2885e8:	00288d24 	muli	zero,zero,-24012
  2885ec:	00288e50 	cmplti	zero,zero,-24007
  2885f0:	00288d7c 	xorhi	zero,zero,41525
  2885f4:	00288e50 	cmplti	zero,zero,-24007
  2885f8:	00288e50 	cmplti	zero,zero,-24007
  2885fc:	00288a40 	call	288a4 <__alt_mem_onchip_memory2_0-0x25775c>
  288600:	42000204 	addi	r8,r8,8
  288604:	da802317 	ldw	r10,140(sp)
  288608:	5455883a 	add	r10,r10,r17
  28860c:	da802315 	stw	r10,140(sp)
  288610:	003f8b06 	br	288440 <___vfiprintf_internal_r+0x144>
  288614:	d9002017 	ldw	r4,128(sp)
  288618:	a00b883a 	mov	r5,r20
  28861c:	0282fb80 	call	282fb8 <__swsetup_r>
  288620:	1003b11e 	bne	r2,zero,2894e8 <___vfiprintf_internal_r+0x11ec>
  288624:	a080030b 	ldhu	r2,12(r20)
  288628:	00c00284 	movi	r3,10
  28862c:	1080068c 	andi	r2,r2,26
  288630:	10ff541e 	bne	r2,r3,288384 <___vfiprintf_internal_r+0x88>
  288634:	a080038f 	ldh	r2,14(r20)
  288638:	103f5216 	blt	r2,zero,288384 <___vfiprintf_internal_r+0x88>
  28863c:	d9c02217 	ldw	r7,136(sp)
  288640:	d9002017 	ldw	r4,128(sp)
  288644:	e00d883a 	mov	r6,fp
  288648:	a00b883a 	mov	r5,r20
  28864c:	02897740 	call	289774 <__sbprintf>
  288650:	dfc03617 	ldw	ra,216(sp)
  288654:	df003517 	ldw	fp,212(sp)
  288658:	ddc03417 	ldw	r23,208(sp)
  28865c:	dd803317 	ldw	r22,204(sp)
  288660:	dd403217 	ldw	r21,200(sp)
  288664:	dd003117 	ldw	r20,196(sp)
  288668:	dcc03017 	ldw	r19,192(sp)
  28866c:	dc802f17 	ldw	r18,188(sp)
  288670:	dc402e17 	ldw	r17,184(sp)
  288674:	dc002d17 	ldw	r16,180(sp)
  288678:	dec03704 	addi	sp,sp,220
  28867c:	f800283a 	ret
  288680:	0284f8c0 	call	284f8c <__sinit>
  288684:	003f2f06 	br	288344 <___vfiprintf_internal_r+0x48>
  288688:	0463c83a 	sub	r17,zero,r17
  28868c:	d8802215 	stw	r2,136(sp)
  288690:	a5000114 	ori	r20,r20,4
  288694:	80c00007 	ldb	r3,0(r16)
  288698:	003f7706 	br	288478 <___vfiprintf_internal_r+0x17c>
  28869c:	00800c04 	movi	r2,48
  2886a0:	da802217 	ldw	r10,136(sp)
  2886a4:	d8801d05 	stb	r2,116(sp)
  2886a8:	00801e04 	movi	r2,120
  2886ac:	d8801d45 	stb	r2,117(sp)
  2886b0:	d8001d85 	stb	zero,118(sp)
  2886b4:	50c00104 	addi	r3,r10,4
  2886b8:	54800017 	ldw	r18,0(r10)
  2886bc:	0027883a 	mov	r19,zero
  2886c0:	a0800094 	ori	r2,r20,2
  2886c4:	48030b16 	blt	r9,zero,2892f4 <___vfiprintf_internal_r+0xff8>
  2886c8:	00bfdfc4 	movi	r2,-129
  2886cc:	a096703a 	and	r11,r20,r2
  2886d0:	d8c02215 	stw	r3,136(sp)
  2886d4:	5d000094 	ori	r20,r11,2
  2886d8:	90032b1e 	bne	r18,zero,289388 <___vfiprintf_internal_r+0x108c>
  2886dc:	00800a74 	movhi	r2,41
  2886e0:	10860504 	addi	r2,r2,6164
  2886e4:	d8802615 	stw	r2,152(sp)
  2886e8:	0039883a 	mov	fp,zero
  2886ec:	48017b1e 	bne	r9,zero,288cdc <___vfiprintf_internal_r+0x9e0>
  2886f0:	0013883a 	mov	r9,zero
  2886f4:	0027883a 	mov	r19,zero
  2886f8:	dd401a04 	addi	r21,sp,104
  2886fc:	4825883a 	mov	r18,r9
  288700:	4cc0010e 	bge	r9,r19,288708 <___vfiprintf_internal_r+0x40c>
  288704:	9825883a 	mov	r18,r19
  288708:	e7003fcc 	andi	fp,fp,255
  28870c:	e700201c 	xori	fp,fp,128
  288710:	e73fe004 	addi	fp,fp,-128
  288714:	e0000126 	beq	fp,zero,28871c <___vfiprintf_internal_r+0x420>
  288718:	94800044 	addi	r18,r18,1
  28871c:	a380008c 	andi	r14,r20,2
  288720:	70000126 	beq	r14,zero,288728 <___vfiprintf_internal_r+0x42c>
  288724:	94800084 	addi	r18,r18,2
  288728:	a700210c 	andi	fp,r20,132
  28872c:	e001df1e 	bne	fp,zero,288eac <___vfiprintf_internal_r+0xbb0>
  288730:	8c87c83a 	sub	r3,r17,r18
  288734:	00c1dd0e 	bge	zero,r3,288eac <___vfiprintf_internal_r+0xbb0>
  288738:	01c00404 	movi	r7,16
  28873c:	d8801c17 	ldw	r2,112(sp)
  288740:	38c3ad0e 	bge	r7,r3,2895f8 <___vfiprintf_internal_r+0x12fc>
  288744:	02800a74 	movhi	r10,41
  288748:	52866a04 	addi	r10,r10,6568
  28874c:	dc002915 	stw	r16,164(sp)
  288750:	d9801b17 	ldw	r6,108(sp)
  288754:	da802415 	stw	r10,144(sp)
  288758:	03c001c4 	movi	r15,7
  28875c:	da402515 	stw	r9,148(sp)
  288760:	db802815 	stw	r14,160(sp)
  288764:	1821883a 	mov	r16,r3
  288768:	00000506 	br	288780 <___vfiprintf_internal_r+0x484>
  28876c:	31400084 	addi	r5,r6,2
  288770:	42000204 	addi	r8,r8,8
  288774:	200d883a 	mov	r6,r4
  288778:	843ffc04 	addi	r16,r16,-16
  28877c:	3c000d0e 	bge	r7,r16,2887b4 <___vfiprintf_internal_r+0x4b8>
  288780:	10800404 	addi	r2,r2,16
  288784:	31000044 	addi	r4,r6,1
  288788:	45800015 	stw	r22,0(r8)
  28878c:	41c00115 	stw	r7,4(r8)
  288790:	d8801c15 	stw	r2,112(sp)
  288794:	d9001b15 	stw	r4,108(sp)
  288798:	793ff40e 	bge	r15,r4,28876c <___vfiprintf_internal_r+0x470>
  28879c:	1001b51e 	bne	r2,zero,288e74 <___vfiprintf_internal_r+0xb78>
  2887a0:	843ffc04 	addi	r16,r16,-16
  2887a4:	000d883a 	mov	r6,zero
  2887a8:	01400044 	movi	r5,1
  2887ac:	d811883a 	mov	r8,sp
  2887b0:	3c3ff316 	blt	r7,r16,288780 <___vfiprintf_internal_r+0x484>
  2887b4:	8007883a 	mov	r3,r16
  2887b8:	da402517 	ldw	r9,148(sp)
  2887bc:	db802817 	ldw	r14,160(sp)
  2887c0:	dc002917 	ldw	r16,164(sp)
  2887c4:	da802417 	ldw	r10,144(sp)
  2887c8:	1885883a 	add	r2,r3,r2
  2887cc:	40c00115 	stw	r3,4(r8)
  2887d0:	42800015 	stw	r10,0(r8)
  2887d4:	d8801c15 	stw	r2,112(sp)
  2887d8:	d9401b15 	stw	r5,108(sp)
  2887dc:	00c001c4 	movi	r3,7
  2887e0:	19426016 	blt	r3,r5,289164 <___vfiprintf_internal_r+0xe68>
  2887e4:	d8c01d87 	ldb	r3,118(sp)
  2887e8:	42000204 	addi	r8,r8,8
  2887ec:	29000044 	addi	r4,r5,1
  2887f0:	1801b31e 	bne	r3,zero,288ec0 <___vfiprintf_internal_r+0xbc4>
  2887f4:	7001c026 	beq	r14,zero,288ef8 <___vfiprintf_internal_r+0xbfc>
  2887f8:	d8c01d04 	addi	r3,sp,116
  2887fc:	10800084 	addi	r2,r2,2
  288800:	40c00015 	stw	r3,0(r8)
  288804:	00c00084 	movi	r3,2
  288808:	40c00115 	stw	r3,4(r8)
  28880c:	d8801c15 	stw	r2,112(sp)
  288810:	d9001b15 	stw	r4,108(sp)
  288814:	00c001c4 	movi	r3,7
  288818:	1902650e 	bge	r3,r4,2891b0 <___vfiprintf_internal_r+0xeb4>
  28881c:	10029a1e 	bne	r2,zero,289288 <___vfiprintf_internal_r+0xf8c>
  288820:	00c02004 	movi	r3,128
  288824:	01000044 	movi	r4,1
  288828:	000b883a 	mov	r5,zero
  28882c:	d811883a 	mov	r8,sp
  288830:	e0c1b31e 	bne	fp,r3,288f00 <___vfiprintf_internal_r+0xc04>
  288834:	8cb9c83a 	sub	fp,r17,r18
  288838:	0701b10e 	bge	zero,fp,288f00 <___vfiprintf_internal_r+0xc04>
  28883c:	01c00404 	movi	r7,16
  288840:	3f03890e 	bge	r7,fp,289668 <___vfiprintf_internal_r+0x136c>
  288844:	00c00a74 	movhi	r3,41
  288848:	18c66604 	addi	r3,r3,6552
  28884c:	d8c02415 	stw	r3,144(sp)
  288850:	8007883a 	mov	r3,r16
  288854:	034001c4 	movi	r13,7
  288858:	e021883a 	mov	r16,fp
  28885c:	da402515 	stw	r9,148(sp)
  288860:	1839883a 	mov	fp,r3
  288864:	00000506 	br	28887c <___vfiprintf_internal_r+0x580>
  288868:	29800084 	addi	r6,r5,2
  28886c:	42000204 	addi	r8,r8,8
  288870:	180b883a 	mov	r5,r3
  288874:	843ffc04 	addi	r16,r16,-16
  288878:	3c000d0e 	bge	r7,r16,2888b0 <___vfiprintf_internal_r+0x5b4>
  28887c:	10800404 	addi	r2,r2,16
  288880:	28c00044 	addi	r3,r5,1
  288884:	45c00015 	stw	r23,0(r8)
  288888:	41c00115 	stw	r7,4(r8)
  28888c:	d8801c15 	stw	r2,112(sp)
  288890:	d8c01b15 	stw	r3,108(sp)
  288894:	68fff40e 	bge	r13,r3,288868 <___vfiprintf_internal_r+0x56c>
  288898:	1002241e 	bne	r2,zero,28912c <___vfiprintf_internal_r+0xe30>
  28889c:	843ffc04 	addi	r16,r16,-16
  2888a0:	01800044 	movi	r6,1
  2888a4:	000b883a 	mov	r5,zero
  2888a8:	d811883a 	mov	r8,sp
  2888ac:	3c3ff316 	blt	r7,r16,28887c <___vfiprintf_internal_r+0x580>
  2888b0:	da402517 	ldw	r9,148(sp)
  2888b4:	e007883a 	mov	r3,fp
  2888b8:	8039883a 	mov	fp,r16
  2888bc:	1821883a 	mov	r16,r3
  2888c0:	d8c02417 	ldw	r3,144(sp)
  2888c4:	1705883a 	add	r2,r2,fp
  2888c8:	47000115 	stw	fp,4(r8)
  2888cc:	40c00015 	stw	r3,0(r8)
  2888d0:	d8801c15 	stw	r2,112(sp)
  2888d4:	d9801b15 	stw	r6,108(sp)
  2888d8:	00c001c4 	movi	r3,7
  2888dc:	19827616 	blt	r3,r6,2892b8 <___vfiprintf_internal_r+0xfbc>
  2888e0:	4cf9c83a 	sub	fp,r9,r19
  2888e4:	42000204 	addi	r8,r8,8
  2888e8:	31000044 	addi	r4,r6,1
  2888ec:	300b883a 	mov	r5,r6
  2888f0:	07018516 	blt	zero,fp,288f08 <___vfiprintf_internal_r+0xc0c>
  2888f4:	9885883a 	add	r2,r19,r2
  2888f8:	45400015 	stw	r21,0(r8)
  2888fc:	44c00115 	stw	r19,4(r8)
  288900:	d8801c15 	stw	r2,112(sp)
  288904:	d9001b15 	stw	r4,108(sp)
  288908:	00c001c4 	movi	r3,7
  28890c:	1901dd0e 	bge	r3,r4,289084 <___vfiprintf_internal_r+0xd88>
  288910:	1002401e 	bne	r2,zero,289214 <___vfiprintf_internal_r+0xf18>
  288914:	d8001b15 	stw	zero,108(sp)
  288918:	a2c0010c 	andi	r11,r20,4
  28891c:	58000226 	beq	r11,zero,288928 <___vfiprintf_internal_r+0x62c>
  288920:	8ca7c83a 	sub	r19,r17,r18
  288924:	04c2f216 	blt	zero,r19,2894f0 <___vfiprintf_internal_r+0x11f4>
  288928:	8c80010e 	bge	r17,r18,288930 <___vfiprintf_internal_r+0x634>
  28892c:	9023883a 	mov	r17,r18
  288930:	da802317 	ldw	r10,140(sp)
  288934:	5455883a 	add	r10,r10,r17
  288938:	da802315 	stw	r10,140(sp)
  28893c:	d8001b15 	stw	zero,108(sp)
  288940:	d811883a 	mov	r8,sp
  288944:	003ea206 	br	2883d0 <___vfiprintf_internal_r+0xd4>
  288948:	a5000814 	ori	r20,r20,32
  28894c:	80c00007 	ldb	r3,0(r16)
  288950:	003ec906 	br	288478 <___vfiprintf_internal_r+0x17c>
  288954:	80c00007 	ldb	r3,0(r16)
  288958:	1b030926 	beq	r3,r12,289580 <___vfiprintf_internal_r+0x1284>
  28895c:	a5000414 	ori	r20,r20,16
  288960:	003ec506 	br	288478 <___vfiprintf_internal_r+0x17c>
  288964:	21003fcc 	andi	r4,r4,255
  288968:	20035e1e 	bne	r4,zero,2896e4 <___vfiprintf_internal_r+0x13e8>
  28896c:	a080080c 	andi	r2,r20,32
  288970:	1002a526 	beq	r2,zero,289408 <___vfiprintf_internal_r+0x110c>
  288974:	da802217 	ldw	r10,136(sp)
  288978:	50800017 	ldw	r2,0(r10)
  28897c:	da802317 	ldw	r10,140(sp)
  288980:	5007d7fa 	srai	r3,r10,31
  288984:	da802217 	ldw	r10,136(sp)
  288988:	10c00115 	stw	r3,4(r2)
  28898c:	52800104 	addi	r10,r10,4
  288990:	da802215 	stw	r10,136(sp)
  288994:	da802317 	ldw	r10,140(sp)
  288998:	12800015 	stw	r10,0(r2)
  28899c:	003e8c06 	br	2883d0 <___vfiprintf_internal_r+0xd4>
  2889a0:	21003fcc 	andi	r4,r4,255
  2889a4:	2003511e 	bne	r4,zero,2896ec <___vfiprintf_internal_r+0x13f0>
  2889a8:	a080080c 	andi	r2,r20,32
  2889ac:	1000a126 	beq	r2,zero,288c34 <___vfiprintf_internal_r+0x938>
  2889b0:	da802217 	ldw	r10,136(sp)
  2889b4:	d8001d85 	stb	zero,118(sp)
  2889b8:	50800204 	addi	r2,r10,8
  2889bc:	54800017 	ldw	r18,0(r10)
  2889c0:	54c00117 	ldw	r19,4(r10)
  2889c4:	4802b416 	blt	r9,zero,289498 <___vfiprintf_internal_r+0x119c>
  2889c8:	013fdfc4 	movi	r4,-129
  2889cc:	94c6b03a 	or	r3,r18,r19
  2889d0:	d8802215 	stw	r2,136(sp)
  2889d4:	a128703a 	and	r20,r20,r4
  2889d8:	1800a226 	beq	r3,zero,288c64 <___vfiprintf_internal_r+0x968>
  2889dc:	0039883a 	mov	fp,zero
  2889e0:	dd401a04 	addi	r21,sp,104
  2889e4:	9006d0fa 	srli	r3,r18,3
  2889e8:	9808977a 	slli	r4,r19,29
  2889ec:	9826d0fa 	srli	r19,r19,3
  2889f0:	948001cc 	andi	r18,r18,7
  2889f4:	90800c04 	addi	r2,r18,48
  2889f8:	ad7fffc4 	addi	r21,r21,-1
  2889fc:	20e4b03a 	or	r18,r4,r3
  288a00:	a8800005 	stb	r2,0(r21)
  288a04:	94c6b03a 	or	r3,r18,r19
  288a08:	183ff61e 	bne	r3,zero,2889e4 <___vfiprintf_internal_r+0x6e8>
  288a0c:	a0c0004c 	andi	r3,r20,1
  288a10:	18005926 	beq	r3,zero,288b78 <___vfiprintf_internal_r+0x87c>
  288a14:	10803fcc 	andi	r2,r2,255
  288a18:	1080201c 	xori	r2,r2,128
  288a1c:	10bfe004 	addi	r2,r2,-128
  288a20:	00c00c04 	movi	r3,48
  288a24:	10c05426 	beq	r2,r3,288b78 <___vfiprintf_internal_r+0x87c>
  288a28:	da801e17 	ldw	r10,120(sp)
  288a2c:	a8bfffc4 	addi	r2,r21,-1
  288a30:	a8ffffc5 	stb	r3,-1(r21)
  288a34:	50a7c83a 	sub	r19,r10,r2
  288a38:	102b883a 	mov	r21,r2
  288a3c:	003f2f06 	br	2886fc <___vfiprintf_internal_r+0x400>
  288a40:	21003fcc 	andi	r4,r4,255
  288a44:	2003421e 	bne	r4,zero,289750 <___vfiprintf_internal_r+0x1454>
  288a48:	00800a74 	movhi	r2,41
  288a4c:	10860504 	addi	r2,r2,6164
  288a50:	d8802615 	stw	r2,152(sp)
  288a54:	a080080c 	andi	r2,r20,32
  288a58:	1000aa26 	beq	r2,zero,288d04 <___vfiprintf_internal_r+0xa08>
  288a5c:	da802217 	ldw	r10,136(sp)
  288a60:	54800017 	ldw	r18,0(r10)
  288a64:	54c00117 	ldw	r19,4(r10)
  288a68:	52800204 	addi	r10,r10,8
  288a6c:	da802215 	stw	r10,136(sp)
  288a70:	a080004c 	andi	r2,r20,1
  288a74:	1001d226 	beq	r2,zero,2891c0 <___vfiprintf_internal_r+0xec4>
  288a78:	94c4b03a 	or	r2,r18,r19
  288a7c:	1002351e 	bne	r2,zero,289354 <___vfiprintf_internal_r+0x1058>
  288a80:	d8001d85 	stb	zero,118(sp)
  288a84:	48022216 	blt	r9,zero,289310 <___vfiprintf_internal_r+0x1014>
  288a88:	00bfdfc4 	movi	r2,-129
  288a8c:	a0a8703a 	and	r20,r20,r2
  288a90:	003f1506 	br	2886e8 <___vfiprintf_internal_r+0x3ec>
  288a94:	da802217 	ldw	r10,136(sp)
  288a98:	04800044 	movi	r18,1
  288a9c:	d8001d85 	stb	zero,118(sp)
  288aa0:	50800017 	ldw	r2,0(r10)
  288aa4:	52800104 	addi	r10,r10,4
  288aa8:	da802215 	stw	r10,136(sp)
  288aac:	d8801005 	stb	r2,64(sp)
  288ab0:	9027883a 	mov	r19,r18
  288ab4:	dd401004 	addi	r21,sp,64
  288ab8:	0013883a 	mov	r9,zero
  288abc:	003f1706 	br	28871c <___vfiprintf_internal_r+0x420>
  288ac0:	21003fcc 	andi	r4,r4,255
  288ac4:	2003201e 	bne	r4,zero,289748 <___vfiprintf_internal_r+0x144c>
  288ac8:	a080080c 	andi	r2,r20,32
  288acc:	10004b26 	beq	r2,zero,288bfc <___vfiprintf_internal_r+0x900>
  288ad0:	da802217 	ldw	r10,136(sp)
  288ad4:	50800117 	ldw	r2,4(r10)
  288ad8:	54800017 	ldw	r18,0(r10)
  288adc:	52800204 	addi	r10,r10,8
  288ae0:	da802215 	stw	r10,136(sp)
  288ae4:	1027883a 	mov	r19,r2
  288ae8:	10022c16 	blt	r2,zero,28939c <___vfiprintf_internal_r+0x10a0>
  288aec:	df001d83 	ldbu	fp,118(sp)
  288af0:	48007216 	blt	r9,zero,288cbc <___vfiprintf_internal_r+0x9c0>
  288af4:	00ffdfc4 	movi	r3,-129
  288af8:	94c4b03a 	or	r2,r18,r19
  288afc:	a0e8703a 	and	r20,r20,r3
  288b00:	1000cc26 	beq	r2,zero,288e34 <___vfiprintf_internal_r+0xb38>
  288b04:	98021026 	beq	r19,zero,289348 <___vfiprintf_internal_r+0x104c>
  288b08:	dc402415 	stw	r17,144(sp)
  288b0c:	dc002515 	stw	r16,148(sp)
  288b10:	9823883a 	mov	r17,r19
  288b14:	9021883a 	mov	r16,r18
  288b18:	dd401a04 	addi	r21,sp,104
  288b1c:	4825883a 	mov	r18,r9
  288b20:	4027883a 	mov	r19,r8
  288b24:	8009883a 	mov	r4,r16
  288b28:	880b883a 	mov	r5,r17
  288b2c:	01800284 	movi	r6,10
  288b30:	000f883a 	mov	r7,zero
  288b34:	028a6dc0 	call	28a6dc <__umoddi3>
  288b38:	10800c04 	addi	r2,r2,48
  288b3c:	ad7fffc4 	addi	r21,r21,-1
  288b40:	8009883a 	mov	r4,r16
  288b44:	880b883a 	mov	r5,r17
  288b48:	a8800005 	stb	r2,0(r21)
  288b4c:	01800284 	movi	r6,10
  288b50:	000f883a 	mov	r7,zero
  288b54:	028a1640 	call	28a164 <__udivdi3>
  288b58:	1021883a 	mov	r16,r2
  288b5c:	10c4b03a 	or	r2,r2,r3
  288b60:	1823883a 	mov	r17,r3
  288b64:	103fef1e 	bne	r2,zero,288b24 <___vfiprintf_internal_r+0x828>
  288b68:	dc402417 	ldw	r17,144(sp)
  288b6c:	dc002517 	ldw	r16,148(sp)
  288b70:	9013883a 	mov	r9,r18
  288b74:	9811883a 	mov	r8,r19
  288b78:	da801e17 	ldw	r10,120(sp)
  288b7c:	5567c83a 	sub	r19,r10,r21
  288b80:	003ede06 	br	2886fc <___vfiprintf_internal_r+0x400>
  288b84:	38803fcc 	andi	r2,r7,255
  288b88:	1080201c 	xori	r2,r2,128
  288b8c:	10bfe004 	addi	r2,r2,-128
  288b90:	1002371e 	bne	r2,zero,289470 <___vfiprintf_internal_r+0x1174>
  288b94:	01000044 	movi	r4,1
  288b98:	01c00804 	movi	r7,32
  288b9c:	80c00007 	ldb	r3,0(r16)
  288ba0:	003e3506 	br	288478 <___vfiprintf_internal_r+0x17c>
  288ba4:	a5000054 	ori	r20,r20,1
  288ba8:	80c00007 	ldb	r3,0(r16)
  288bac:	003e3206 	br	288478 <___vfiprintf_internal_r+0x17c>
  288bb0:	a5002014 	ori	r20,r20,128
  288bb4:	80c00007 	ldb	r3,0(r16)
  288bb8:	003e2f06 	br	288478 <___vfiprintf_internal_r+0x17c>
  288bbc:	8015883a 	mov	r10,r16
  288bc0:	0023883a 	mov	r17,zero
  288bc4:	18bff404 	addi	r2,r3,-48
  288bc8:	50c00007 	ldb	r3,0(r10)
  288bcc:	8c4002a4 	muli	r17,r17,10
  288bd0:	84000044 	addi	r16,r16,1
  288bd4:	8015883a 	mov	r10,r16
  288bd8:	1463883a 	add	r17,r2,r17
  288bdc:	18bff404 	addi	r2,r3,-48
  288be0:	30bff92e 	bgeu	r6,r2,288bc8 <___vfiprintf_internal_r+0x8cc>
  288be4:	003e2506 	br	28847c <___vfiprintf_internal_r+0x180>
  288be8:	21003fcc 	andi	r4,r4,255
  288bec:	2002d41e 	bne	r4,zero,289740 <___vfiprintf_internal_r+0x1444>
  288bf0:	a5000414 	ori	r20,r20,16
  288bf4:	a080080c 	andi	r2,r20,32
  288bf8:	103fb51e 	bne	r2,zero,288ad0 <___vfiprintf_internal_r+0x7d4>
  288bfc:	a080040c 	andi	r2,r20,16
  288c00:	1001f826 	beq	r2,zero,2893e4 <___vfiprintf_internal_r+0x10e8>
  288c04:	da802217 	ldw	r10,136(sp)
  288c08:	54800017 	ldw	r18,0(r10)
  288c0c:	52800104 	addi	r10,r10,4
  288c10:	da802215 	stw	r10,136(sp)
  288c14:	9027d7fa 	srai	r19,r18,31
  288c18:	9805883a 	mov	r2,r19
  288c1c:	003fb206 	br	288ae8 <___vfiprintf_internal_r+0x7ec>
  288c20:	21003fcc 	andi	r4,r4,255
  288c24:	2002c41e 	bne	r4,zero,289738 <___vfiprintf_internal_r+0x143c>
  288c28:	a5000414 	ori	r20,r20,16
  288c2c:	a080080c 	andi	r2,r20,32
  288c30:	103f5f1e 	bne	r2,zero,2889b0 <___vfiprintf_internal_r+0x6b4>
  288c34:	a080040c 	andi	r2,r20,16
  288c38:	10020f26 	beq	r2,zero,289478 <___vfiprintf_internal_r+0x117c>
  288c3c:	da802217 	ldw	r10,136(sp)
  288c40:	d8001d85 	stb	zero,118(sp)
  288c44:	0027883a 	mov	r19,zero
  288c48:	50800104 	addi	r2,r10,4
  288c4c:	54800017 	ldw	r18,0(r10)
  288c50:	48021116 	blt	r9,zero,289498 <___vfiprintf_internal_r+0x119c>
  288c54:	00ffdfc4 	movi	r3,-129
  288c58:	d8802215 	stw	r2,136(sp)
  288c5c:	a0e8703a 	and	r20,r20,r3
  288c60:	903f5e1e 	bne	r18,zero,2889dc <___vfiprintf_internal_r+0x6e0>
  288c64:	0039883a 	mov	fp,zero
  288c68:	4802a626 	beq	r9,zero,289704 <___vfiprintf_internal_r+0x1408>
  288c6c:	0025883a 	mov	r18,zero
  288c70:	0027883a 	mov	r19,zero
  288c74:	003f5a06 	br	2889e0 <___vfiprintf_internal_r+0x6e4>
  288c78:	21003fcc 	andi	r4,r4,255
  288c7c:	20029f1e 	bne	r4,zero,2896fc <___vfiprintf_internal_r+0x1400>
  288c80:	a5000414 	ori	r20,r20,16
  288c84:	a080080c 	andi	r2,r20,32
  288c88:	10005e1e 	bne	r2,zero,288e04 <___vfiprintf_internal_r+0xb08>
  288c8c:	a080040c 	andi	r2,r20,16
  288c90:	1001a21e 	bne	r2,zero,28931c <___vfiprintf_internal_r+0x1020>
  288c94:	a080100c 	andi	r2,r20,64
  288c98:	d8001d85 	stb	zero,118(sp)
  288c9c:	da802217 	ldw	r10,136(sp)
  288ca0:	1002231e 	bne	r2,zero,289530 <___vfiprintf_internal_r+0x1234>
  288ca4:	50800104 	addi	r2,r10,4
  288ca8:	54800017 	ldw	r18,0(r10)
  288cac:	0027883a 	mov	r19,zero
  288cb0:	4801a00e 	bge	r9,zero,289334 <___vfiprintf_internal_r+0x1038>
  288cb4:	d8802215 	stw	r2,136(sp)
  288cb8:	0039883a 	mov	fp,zero
  288cbc:	94c4b03a 	or	r2,r18,r19
  288cc0:	103f901e 	bne	r2,zero,288b04 <___vfiprintf_internal_r+0x808>
  288cc4:	00800044 	movi	r2,1
  288cc8:	10803fcc 	andi	r2,r2,255
  288ccc:	00c00044 	movi	r3,1
  288cd0:	10c05926 	beq	r2,r3,288e38 <___vfiprintf_internal_r+0xb3c>
  288cd4:	00c00084 	movi	r3,2
  288cd8:	10ffe41e 	bne	r2,r3,288c6c <___vfiprintf_internal_r+0x970>
  288cdc:	0025883a 	mov	r18,zero
  288ce0:	0027883a 	mov	r19,zero
  288ce4:	00013d06 	br	2891dc <___vfiprintf_internal_r+0xee0>
  288ce8:	21003fcc 	andi	r4,r4,255
  288cec:	2002811e 	bne	r4,zero,2896f4 <___vfiprintf_internal_r+0x13f8>
  288cf0:	00800a74 	movhi	r2,41
  288cf4:	10860004 	addi	r2,r2,6144
  288cf8:	d8802615 	stw	r2,152(sp)
  288cfc:	a080080c 	andi	r2,r20,32
  288d00:	103f561e 	bne	r2,zero,288a5c <___vfiprintf_internal_r+0x760>
  288d04:	a080040c 	andi	r2,r20,16
  288d08:	1001d126 	beq	r2,zero,289450 <___vfiprintf_internal_r+0x1154>
  288d0c:	da802217 	ldw	r10,136(sp)
  288d10:	0027883a 	mov	r19,zero
  288d14:	54800017 	ldw	r18,0(r10)
  288d18:	52800104 	addi	r10,r10,4
  288d1c:	da802215 	stw	r10,136(sp)
  288d20:	003f5306 	br	288a70 <___vfiprintf_internal_r+0x774>
  288d24:	da802217 	ldw	r10,136(sp)
  288d28:	d8001d85 	stb	zero,118(sp)
  288d2c:	55400017 	ldw	r21,0(r10)
  288d30:	50c00104 	addi	r3,r10,4
  288d34:	a8024226 	beq	r21,zero,289640 <___vfiprintf_internal_r+0x1344>
  288d38:	48021816 	blt	r9,zero,28959c <___vfiprintf_internal_r+0x12a0>
  288d3c:	480d883a 	mov	r6,r9
  288d40:	000b883a 	mov	r5,zero
  288d44:	a809883a 	mov	r4,r21
  288d48:	d8c02a15 	stw	r3,168(sp)
  288d4c:	da002b15 	stw	r8,172(sp)
  288d50:	da402c15 	stw	r9,176(sp)
  288d54:	02864f80 	call	2864f8 <memchr>
  288d58:	d8c02a17 	ldw	r3,168(sp)
  288d5c:	da002b17 	ldw	r8,172(sp)
  288d60:	da402c17 	ldw	r9,176(sp)
  288d64:	10024826 	beq	r2,zero,289688 <___vfiprintf_internal_r+0x138c>
  288d68:	1567c83a 	sub	r19,r2,r21
  288d6c:	df001d83 	ldbu	fp,118(sp)
  288d70:	d8c02215 	stw	r3,136(sp)
  288d74:	0013883a 	mov	r9,zero
  288d78:	003e6006 	br	2886fc <___vfiprintf_internal_r+0x400>
  288d7c:	21003fcc 	andi	r4,r4,255
  288d80:	203fc026 	beq	r4,zero,288c84 <___vfiprintf_internal_r+0x988>
  288d84:	d9c01d85 	stb	r7,118(sp)
  288d88:	003fbe06 	br	288c84 <___vfiprintf_internal_r+0x988>
  288d8c:	da802217 	ldw	r10,136(sp)
  288d90:	54400017 	ldw	r17,0(r10)
  288d94:	50800104 	addi	r2,r10,4
  288d98:	883e3b16 	blt	r17,zero,288688 <___vfiprintf_internal_r+0x38c>
  288d9c:	d8802215 	stw	r2,136(sp)
  288da0:	80c00007 	ldb	r3,0(r16)
  288da4:	003db406 	br	288478 <___vfiprintf_internal_r+0x17c>
  288da8:	01000044 	movi	r4,1
  288dac:	01c00ac4 	movi	r7,43
  288db0:	80c00007 	ldb	r3,0(r16)
  288db4:	003db006 	br	288478 <___vfiprintf_internal_r+0x17c>
  288db8:	80c00007 	ldb	r3,0(r16)
  288dbc:	82800044 	addi	r10,r16,1
  288dc0:	1b423c26 	beq	r3,r13,2896b4 <___vfiprintf_internal_r+0x13b8>
  288dc4:	18bff404 	addi	r2,r3,-48
  288dc8:	0013883a 	mov	r9,zero
  288dcc:	30822b36 	bltu	r6,r2,28967c <___vfiprintf_internal_r+0x1380>
  288dd0:	50c00007 	ldb	r3,0(r10)
  288dd4:	4a4002a4 	muli	r9,r9,10
  288dd8:	54000044 	addi	r16,r10,1
  288ddc:	8015883a 	mov	r10,r16
  288de0:	4893883a 	add	r9,r9,r2
  288de4:	18bff404 	addi	r2,r3,-48
  288de8:	30bff92e 	bgeu	r6,r2,288dd0 <___vfiprintf_internal_r+0xad4>
  288dec:	483da30e 	bge	r9,zero,28847c <___vfiprintf_internal_r+0x180>
  288df0:	027fffc4 	movi	r9,-1
  288df4:	003da106 	br	28847c <___vfiprintf_internal_r+0x180>
  288df8:	a5001014 	ori	r20,r20,64
  288dfc:	80c00007 	ldb	r3,0(r16)
  288e00:	003d9d06 	br	288478 <___vfiprintf_internal_r+0x17c>
  288e04:	da802217 	ldw	r10,136(sp)
  288e08:	d8001d85 	stb	zero,118(sp)
  288e0c:	50c00204 	addi	r3,r10,8
  288e10:	54800017 	ldw	r18,0(r10)
  288e14:	54c00117 	ldw	r19,4(r10)
  288e18:	4801ca16 	blt	r9,zero,289544 <___vfiprintf_internal_r+0x1248>
  288e1c:	013fdfc4 	movi	r4,-129
  288e20:	94c4b03a 	or	r2,r18,r19
  288e24:	d8c02215 	stw	r3,136(sp)
  288e28:	a128703a 	and	r20,r20,r4
  288e2c:	0039883a 	mov	fp,zero
  288e30:	103f341e 	bne	r2,zero,288b04 <___vfiprintf_internal_r+0x808>
  288e34:	483e2e26 	beq	r9,zero,2886f0 <___vfiprintf_internal_r+0x3f4>
  288e38:	0025883a 	mov	r18,zero
  288e3c:	94800c04 	addi	r18,r18,48
  288e40:	dc8019c5 	stb	r18,103(sp)
  288e44:	dcc02717 	ldw	r19,156(sp)
  288e48:	dd4019c4 	addi	r21,sp,103
  288e4c:	003e2b06 	br	2886fc <___vfiprintf_internal_r+0x400>
  288e50:	21003fcc 	andi	r4,r4,255
  288e54:	2002361e 	bne	r4,zero,289730 <___vfiprintf_internal_r+0x1434>
  288e58:	1801c126 	beq	r3,zero,289560 <___vfiprintf_internal_r+0x1264>
  288e5c:	04800044 	movi	r18,1
  288e60:	d8c01005 	stb	r3,64(sp)
  288e64:	d8001d85 	stb	zero,118(sp)
  288e68:	9027883a 	mov	r19,r18
  288e6c:	dd401004 	addi	r21,sp,64
  288e70:	003f1106 	br	288ab8 <___vfiprintf_internal_r+0x7bc>
  288e74:	d9402117 	ldw	r5,132(sp)
  288e78:	d9002017 	ldw	r4,128(sp)
  288e7c:	d9801a04 	addi	r6,sp,104
  288e80:	d9c02b15 	stw	r7,172(sp)
  288e84:	dbc02a15 	stw	r15,168(sp)
  288e88:	02881e80 	call	2881e8 <__sprint_r.part.0>
  288e8c:	d9c02b17 	ldw	r7,172(sp)
  288e90:	dbc02a17 	ldw	r15,168(sp)
  288e94:	10006d1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  288e98:	d9801b17 	ldw	r6,108(sp)
  288e9c:	d8801c17 	ldw	r2,112(sp)
  288ea0:	d811883a 	mov	r8,sp
  288ea4:	31400044 	addi	r5,r6,1
  288ea8:	003e3306 	br	288778 <___vfiprintf_internal_r+0x47c>
  288eac:	d9401b17 	ldw	r5,108(sp)
  288eb0:	d8801c17 	ldw	r2,112(sp)
  288eb4:	29000044 	addi	r4,r5,1
  288eb8:	d8c01d87 	ldb	r3,118(sp)
  288ebc:	183e4d26 	beq	r3,zero,2887f4 <___vfiprintf_internal_r+0x4f8>
  288ec0:	00c00044 	movi	r3,1
  288ec4:	d9401d84 	addi	r5,sp,118
  288ec8:	10c5883a 	add	r2,r2,r3
  288ecc:	41400015 	stw	r5,0(r8)
  288ed0:	40c00115 	stw	r3,4(r8)
  288ed4:	d8801c15 	stw	r2,112(sp)
  288ed8:	d9001b15 	stw	r4,108(sp)
  288edc:	014001c4 	movi	r5,7
  288ee0:	2900a90e 	bge	r5,r4,289188 <___vfiprintf_internal_r+0xe8c>
  288ee4:	1000da1e 	bne	r2,zero,289250 <___vfiprintf_internal_r+0xf54>
  288ee8:	7000ab1e 	bne	r14,zero,289198 <___vfiprintf_internal_r+0xe9c>
  288eec:	000b883a 	mov	r5,zero
  288ef0:	1809883a 	mov	r4,r3
  288ef4:	d811883a 	mov	r8,sp
  288ef8:	00c02004 	movi	r3,128
  288efc:	e0fe4d26 	beq	fp,r3,288834 <___vfiprintf_internal_r+0x538>
  288f00:	4cf9c83a 	sub	fp,r9,r19
  288f04:	073e7b0e 	bge	zero,fp,2888f4 <___vfiprintf_internal_r+0x5f8>
  288f08:	01c00404 	movi	r7,16
  288f0c:	3f01900e 	bge	r7,fp,289550 <___vfiprintf_internal_r+0x1254>
  288f10:	00c00a74 	movhi	r3,41
  288f14:	18c66604 	addi	r3,r3,6552
  288f18:	d8c02415 	stw	r3,144(sp)
  288f1c:	034001c4 	movi	r13,7
  288f20:	00000506 	br	288f38 <___vfiprintf_internal_r+0xc3c>
  288f24:	29000084 	addi	r4,r5,2
  288f28:	42000204 	addi	r8,r8,8
  288f2c:	180b883a 	mov	r5,r3
  288f30:	e73ffc04 	addi	fp,fp,-16
  288f34:	3f000d0e 	bge	r7,fp,288f6c <___vfiprintf_internal_r+0xc70>
  288f38:	10800404 	addi	r2,r2,16
  288f3c:	28c00044 	addi	r3,r5,1
  288f40:	45c00015 	stw	r23,0(r8)
  288f44:	41c00115 	stw	r7,4(r8)
  288f48:	d8801c15 	stw	r2,112(sp)
  288f4c:	d8c01b15 	stw	r3,108(sp)
  288f50:	68fff40e 	bge	r13,r3,288f24 <___vfiprintf_internal_r+0xc28>
  288f54:	1000101e 	bne	r2,zero,288f98 <___vfiprintf_internal_r+0xc9c>
  288f58:	e73ffc04 	addi	fp,fp,-16
  288f5c:	01000044 	movi	r4,1
  288f60:	000b883a 	mov	r5,zero
  288f64:	d811883a 	mov	r8,sp
  288f68:	3f3ff316 	blt	r7,fp,288f38 <___vfiprintf_internal_r+0xc3c>
  288f6c:	da802417 	ldw	r10,144(sp)
  288f70:	1705883a 	add	r2,r2,fp
  288f74:	47000115 	stw	fp,4(r8)
  288f78:	42800015 	stw	r10,0(r8)
  288f7c:	d8801c15 	stw	r2,112(sp)
  288f80:	d9001b15 	stw	r4,108(sp)
  288f84:	00c001c4 	movi	r3,7
  288f88:	19003616 	blt	r3,r4,289064 <___vfiprintf_internal_r+0xd68>
  288f8c:	42000204 	addi	r8,r8,8
  288f90:	21000044 	addi	r4,r4,1
  288f94:	003e5706 	br	2888f4 <___vfiprintf_internal_r+0x5f8>
  288f98:	d9402117 	ldw	r5,132(sp)
  288f9c:	d9002017 	ldw	r4,128(sp)
  288fa0:	d9801a04 	addi	r6,sp,104
  288fa4:	d9c02b15 	stw	r7,172(sp)
  288fa8:	db402a15 	stw	r13,168(sp)
  288fac:	02881e80 	call	2881e8 <__sprint_r.part.0>
  288fb0:	d9c02b17 	ldw	r7,172(sp)
  288fb4:	db402a17 	ldw	r13,168(sp)
  288fb8:	1000241e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  288fbc:	d9401b17 	ldw	r5,108(sp)
  288fc0:	d8801c17 	ldw	r2,112(sp)
  288fc4:	d811883a 	mov	r8,sp
  288fc8:	29000044 	addi	r4,r5,1
  288fcc:	003fd806 	br	288f30 <___vfiprintf_internal_r+0xc34>
  288fd0:	d9401b17 	ldw	r5,108(sp)
  288fd4:	00c00a74 	movhi	r3,41
  288fd8:	18c66a04 	addi	r3,r3,6568
  288fdc:	d8c02415 	stw	r3,144(sp)
  288fe0:	29400044 	addi	r5,r5,1
  288fe4:	d8c02417 	ldw	r3,144(sp)
  288fe8:	14c5883a 	add	r2,r2,r19
  288fec:	44c00115 	stw	r19,4(r8)
  288ff0:	40c00015 	stw	r3,0(r8)
  288ff4:	d8801c15 	stw	r2,112(sp)
  288ff8:	d9401b15 	stw	r5,108(sp)
  288ffc:	00c001c4 	movi	r3,7
  289000:	1940070e 	bge	r3,r5,289020 <___vfiprintf_internal_r+0xd24>
  289004:	103e4826 	beq	r2,zero,288928 <___vfiprintf_internal_r+0x62c>
  289008:	d9402117 	ldw	r5,132(sp)
  28900c:	d9002017 	ldw	r4,128(sp)
  289010:	d9801a04 	addi	r6,sp,104
  289014:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289018:	10000c1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  28901c:	d8801c17 	ldw	r2,112(sp)
  289020:	8c80010e 	bge	r17,r18,289028 <___vfiprintf_internal_r+0xd2c>
  289024:	9023883a 	mov	r17,r18
  289028:	da802317 	ldw	r10,140(sp)
  28902c:	5455883a 	add	r10,r10,r17
  289030:	da802315 	stw	r10,140(sp)
  289034:	103e4126 	beq	r2,zero,28893c <___vfiprintf_internal_r+0x640>
  289038:	d9402117 	ldw	r5,132(sp)
  28903c:	d9002017 	ldw	r4,128(sp)
  289040:	d9801a04 	addi	r6,sp,104
  289044:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289048:	103e3c26 	beq	r2,zero,28893c <___vfiprintf_internal_r+0x640>
  28904c:	dd002117 	ldw	r20,132(sp)
  289050:	a080030b 	ldhu	r2,12(r20)
  289054:	1080100c 	andi	r2,r2,64
  289058:	1001231e 	bne	r2,zero,2894e8 <___vfiprintf_internal_r+0x11ec>
  28905c:	d8802317 	ldw	r2,140(sp)
  289060:	003d7b06 	br	288650 <___vfiprintf_internal_r+0x354>
  289064:	1000991e 	bne	r2,zero,2892cc <___vfiprintf_internal_r+0xfd0>
  289068:	00c00044 	movi	r3,1
  28906c:	9805883a 	mov	r2,r19
  289070:	dd400015 	stw	r21,0(sp)
  289074:	dcc00115 	stw	r19,4(sp)
  289078:	dcc01c15 	stw	r19,112(sp)
  28907c:	d8c01b15 	stw	r3,108(sp)
  289080:	d811883a 	mov	r8,sp
  289084:	42000204 	addi	r8,r8,8
  289088:	a2c0010c 	andi	r11,r20,4
  28908c:	583fe426 	beq	r11,zero,289020 <___vfiprintf_internal_r+0xd24>
  289090:	8ca7c83a 	sub	r19,r17,r18
  289094:	04ffe20e 	bge	zero,r19,289020 <___vfiprintf_internal_r+0xd24>
  289098:	01c00404 	movi	r7,16
  28909c:	3cffcc0e 	bge	r7,r19,288fd0 <___vfiprintf_internal_r+0xcd4>
  2890a0:	02800a74 	movhi	r10,41
  2890a4:	52866a04 	addi	r10,r10,6568
  2890a8:	d9001b17 	ldw	r4,108(sp)
  2890ac:	da802415 	stw	r10,144(sp)
  2890b0:	382b883a 	mov	r21,r7
  2890b4:	050001c4 	movi	r20,7
  2890b8:	df002017 	ldw	fp,128(sp)
  2890bc:	00000506 	br	2890d4 <___vfiprintf_internal_r+0xdd8>
  2890c0:	21400084 	addi	r5,r4,2
  2890c4:	42000204 	addi	r8,r8,8
  2890c8:	1809883a 	mov	r4,r3
  2890cc:	9cfffc04 	addi	r19,r19,-16
  2890d0:	acffc40e 	bge	r21,r19,288fe4 <___vfiprintf_internal_r+0xce8>
  2890d4:	10800404 	addi	r2,r2,16
  2890d8:	20c00044 	addi	r3,r4,1
  2890dc:	45800015 	stw	r22,0(r8)
  2890e0:	45400115 	stw	r21,4(r8)
  2890e4:	d8801c15 	stw	r2,112(sp)
  2890e8:	d8c01b15 	stw	r3,108(sp)
  2890ec:	a0fff40e 	bge	r20,r3,2890c0 <___vfiprintf_internal_r+0xdc4>
  2890f0:	1000041e 	bne	r2,zero,289104 <___vfiprintf_internal_r+0xe08>
  2890f4:	01400044 	movi	r5,1
  2890f8:	0009883a 	mov	r4,zero
  2890fc:	d811883a 	mov	r8,sp
  289100:	003ff206 	br	2890cc <___vfiprintf_internal_r+0xdd0>
  289104:	d9402117 	ldw	r5,132(sp)
  289108:	d9801a04 	addi	r6,sp,104
  28910c:	e009883a 	mov	r4,fp
  289110:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289114:	103fcd1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  289118:	d9001b17 	ldw	r4,108(sp)
  28911c:	d8801c17 	ldw	r2,112(sp)
  289120:	d811883a 	mov	r8,sp
  289124:	21400044 	addi	r5,r4,1
  289128:	003fe806 	br	2890cc <___vfiprintf_internal_r+0xdd0>
  28912c:	d9402117 	ldw	r5,132(sp)
  289130:	d9002017 	ldw	r4,128(sp)
  289134:	d9801a04 	addi	r6,sp,104
  289138:	d9c02b15 	stw	r7,172(sp)
  28913c:	db402a15 	stw	r13,168(sp)
  289140:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289144:	d9c02b17 	ldw	r7,172(sp)
  289148:	db402a17 	ldw	r13,168(sp)
  28914c:	103fbf1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  289150:	d9401b17 	ldw	r5,108(sp)
  289154:	d8801c17 	ldw	r2,112(sp)
  289158:	d811883a 	mov	r8,sp
  28915c:	29800044 	addi	r6,r5,1
  289160:	003dc406 	br	288874 <___vfiprintf_internal_r+0x578>
  289164:	1000d21e 	bne	r2,zero,2894b0 <___vfiprintf_internal_r+0x11b4>
  289168:	d8c01d87 	ldb	r3,118(sp)
  28916c:	18009526 	beq	r3,zero,2893c4 <___vfiprintf_internal_r+0x10c8>
  289170:	00800044 	movi	r2,1
  289174:	d8c01d84 	addi	r3,sp,118
  289178:	1009883a 	mov	r4,r2
  28917c:	d8c00015 	stw	r3,0(sp)
  289180:	d8800115 	stw	r2,4(sp)
  289184:	d811883a 	mov	r8,sp
  289188:	200b883a 	mov	r5,r4
  28918c:	42000204 	addi	r8,r8,8
  289190:	21000044 	addi	r4,r4,1
  289194:	003d9706 	br	2887f4 <___vfiprintf_internal_r+0x4f8>
  289198:	d9001d04 	addi	r4,sp,116
  28919c:	00800084 	movi	r2,2
  2891a0:	d9000015 	stw	r4,0(sp)
  2891a4:	d8800115 	stw	r2,4(sp)
  2891a8:	1809883a 	mov	r4,r3
  2891ac:	d811883a 	mov	r8,sp
  2891b0:	200b883a 	mov	r5,r4
  2891b4:	42000204 	addi	r8,r8,8
  2891b8:	21000044 	addi	r4,r4,1
  2891bc:	003f4e06 	br	288ef8 <___vfiprintf_internal_r+0xbfc>
  2891c0:	d8001d85 	stb	zero,118(sp)
  2891c4:	48005016 	blt	r9,zero,289308 <___vfiprintf_internal_r+0x100c>
  2891c8:	00ffdfc4 	movi	r3,-129
  2891cc:	94c4b03a 	or	r2,r18,r19
  2891d0:	a0e8703a 	and	r20,r20,r3
  2891d4:	103d4426 	beq	r2,zero,2886e8 <___vfiprintf_internal_r+0x3ec>
  2891d8:	0039883a 	mov	fp,zero
  2891dc:	d9002617 	ldw	r4,152(sp)
  2891e0:	dd401a04 	addi	r21,sp,104
  2891e4:	908003cc 	andi	r2,r18,15
  2891e8:	9806973a 	slli	r3,r19,28
  2891ec:	2085883a 	add	r2,r4,r2
  2891f0:	9024d13a 	srli	r18,r18,4
  2891f4:	10800003 	ldbu	r2,0(r2)
  2891f8:	9826d13a 	srli	r19,r19,4
  2891fc:	ad7fffc4 	addi	r21,r21,-1
  289200:	1ca4b03a 	or	r18,r3,r18
  289204:	a8800005 	stb	r2,0(r21)
  289208:	94c4b03a 	or	r2,r18,r19
  28920c:	103ff51e 	bne	r2,zero,2891e4 <___vfiprintf_internal_r+0xee8>
  289210:	003e5906 	br	288b78 <___vfiprintf_internal_r+0x87c>
  289214:	d9402117 	ldw	r5,132(sp)
  289218:	d9002017 	ldw	r4,128(sp)
  28921c:	d9801a04 	addi	r6,sp,104
  289220:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289224:	103f891e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  289228:	d8801c17 	ldw	r2,112(sp)
  28922c:	d811883a 	mov	r8,sp
  289230:	003f9506 	br	289088 <___vfiprintf_internal_r+0xd8c>
  289234:	d9402117 	ldw	r5,132(sp)
  289238:	d9002017 	ldw	r4,128(sp)
  28923c:	d9801a04 	addi	r6,sp,104
  289240:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289244:	103f811e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  289248:	d811883a 	mov	r8,sp
  28924c:	003ced06 	br	288604 <___vfiprintf_internal_r+0x308>
  289250:	d9402117 	ldw	r5,132(sp)
  289254:	d9002017 	ldw	r4,128(sp)
  289258:	d9801a04 	addi	r6,sp,104
  28925c:	da402c15 	stw	r9,176(sp)
  289260:	db802a15 	stw	r14,168(sp)
  289264:	02881e80 	call	2881e8 <__sprint_r.part.0>
  289268:	da402c17 	ldw	r9,176(sp)
  28926c:	db802a17 	ldw	r14,168(sp)
  289270:	103f761e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  289274:	d9401b17 	ldw	r5,108(sp)
  289278:	d8801c17 	ldw	r2,112(sp)
  28927c:	d811883a 	mov	r8,sp
  289280:	29000044 	addi	r4,r5,1
  289284:	003d5b06 	br	2887f4 <___vfiprintf_internal_r+0x4f8>
  289288:	d9402117 	ldw	r5,132(sp)
  28928c:	d9002017 	ldw	r4,128(sp)
  289290:	d9801a04 	addi	r6,sp,104
  289294:	da402c15 	stw	r9,176(sp)
  289298:	02881e80 	call	2881e8 <__sprint_r.part.0>
  28929c:	da402c17 	ldw	r9,176(sp)
  2892a0:	103f6a1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  2892a4:	d9401b17 	ldw	r5,108(sp)
  2892a8:	d8801c17 	ldw	r2,112(sp)
  2892ac:	d811883a 	mov	r8,sp
  2892b0:	29000044 	addi	r4,r5,1
  2892b4:	003f1006 	br	288ef8 <___vfiprintf_internal_r+0xbfc>
  2892b8:	1000c31e 	bne	r2,zero,2895c8 <___vfiprintf_internal_r+0x12cc>
  2892bc:	01000044 	movi	r4,1
  2892c0:	000b883a 	mov	r5,zero
  2892c4:	d811883a 	mov	r8,sp
  2892c8:	003f0d06 	br	288f00 <___vfiprintf_internal_r+0xc04>
  2892cc:	d9402117 	ldw	r5,132(sp)
  2892d0:	d9002017 	ldw	r4,128(sp)
  2892d4:	d9801a04 	addi	r6,sp,104
  2892d8:	02881e80 	call	2881e8 <__sprint_r.part.0>
  2892dc:	103f5b1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  2892e0:	d9001b17 	ldw	r4,108(sp)
  2892e4:	d8801c17 	ldw	r2,112(sp)
  2892e8:	d811883a 	mov	r8,sp
  2892ec:	21000044 	addi	r4,r4,1
  2892f0:	003d8006 	br	2888f4 <___vfiprintf_internal_r+0x5f8>
  2892f4:	01000a74 	movhi	r4,41
  2892f8:	21060504 	addi	r4,r4,6164
  2892fc:	d9002615 	stw	r4,152(sp)
  289300:	d8c02215 	stw	r3,136(sp)
  289304:	1029883a 	mov	r20,r2
  289308:	94c4b03a 	or	r2,r18,r19
  28930c:	103fb21e 	bne	r2,zero,2891d8 <___vfiprintf_internal_r+0xedc>
  289310:	0039883a 	mov	fp,zero
  289314:	00800084 	movi	r2,2
  289318:	003e6b06 	br	288cc8 <___vfiprintf_internal_r+0x9cc>
  28931c:	da802217 	ldw	r10,136(sp)
  289320:	d8001d85 	stb	zero,118(sp)
  289324:	0027883a 	mov	r19,zero
  289328:	50800104 	addi	r2,r10,4
  28932c:	54800017 	ldw	r18,0(r10)
  289330:	483e6016 	blt	r9,zero,288cb4 <___vfiprintf_internal_r+0x9b8>
  289334:	00ffdfc4 	movi	r3,-129
  289338:	d8802215 	stw	r2,136(sp)
  28933c:	a0e8703a 	and	r20,r20,r3
  289340:	0039883a 	mov	fp,zero
  289344:	903ebb26 	beq	r18,zero,288e34 <___vfiprintf_internal_r+0xb38>
  289348:	00800244 	movi	r2,9
  28934c:	14bdee36 	bltu	r2,r18,288b08 <___vfiprintf_internal_r+0x80c>
  289350:	003eba06 	br	288e3c <___vfiprintf_internal_r+0xb40>
  289354:	00800c04 	movi	r2,48
  289358:	d8c01d45 	stb	r3,117(sp)
  28935c:	d8801d05 	stb	r2,116(sp)
  289360:	d8001d85 	stb	zero,118(sp)
  289364:	a0c00094 	ori	r3,r20,2
  289368:	4800a916 	blt	r9,zero,289610 <___vfiprintf_internal_r+0x1314>
  28936c:	00bfdfc4 	movi	r2,-129
  289370:	a096703a 	and	r11,r20,r2
  289374:	5d000094 	ori	r20,r11,2
  289378:	0039883a 	mov	fp,zero
  28937c:	003f9706 	br	2891dc <___vfiprintf_internal_r+0xee0>
  289380:	8025883a 	mov	r18,r16
  289384:	003c2e06 	br	288440 <___vfiprintf_internal_r+0x144>
  289388:	00800a74 	movhi	r2,41
  28938c:	10860504 	addi	r2,r2,6164
  289390:	0039883a 	mov	fp,zero
  289394:	d8802615 	stw	r2,152(sp)
  289398:	003f9006 	br	2891dc <___vfiprintf_internal_r+0xee0>
  28939c:	04a5c83a 	sub	r18,zero,r18
  2893a0:	07000b44 	movi	fp,45
  2893a4:	9004c03a 	cmpne	r2,r18,zero
  2893a8:	04e7c83a 	sub	r19,zero,r19
  2893ac:	df001d85 	stb	fp,118(sp)
  2893b0:	98a7c83a 	sub	r19,r19,r2
  2893b4:	48009f16 	blt	r9,zero,289634 <___vfiprintf_internal_r+0x1338>
  2893b8:	00bfdfc4 	movi	r2,-129
  2893bc:	a0a8703a 	and	r20,r20,r2
  2893c0:	003dd006 	br	288b04 <___vfiprintf_internal_r+0x808>
  2893c4:	70004c26 	beq	r14,zero,2894f8 <___vfiprintf_internal_r+0x11fc>
  2893c8:	00800084 	movi	r2,2
  2893cc:	d8c01d04 	addi	r3,sp,116
  2893d0:	d8c00015 	stw	r3,0(sp)
  2893d4:	d8800115 	stw	r2,4(sp)
  2893d8:	01000044 	movi	r4,1
  2893dc:	d811883a 	mov	r8,sp
  2893e0:	003f7306 	br	2891b0 <___vfiprintf_internal_r+0xeb4>
  2893e4:	a080100c 	andi	r2,r20,64
  2893e8:	da802217 	ldw	r10,136(sp)
  2893ec:	103e0626 	beq	r2,zero,288c08 <___vfiprintf_internal_r+0x90c>
  2893f0:	5480000f 	ldh	r18,0(r10)
  2893f4:	52800104 	addi	r10,r10,4
  2893f8:	da802215 	stw	r10,136(sp)
  2893fc:	9027d7fa 	srai	r19,r18,31
  289400:	9805883a 	mov	r2,r19
  289404:	003db806 	br	288ae8 <___vfiprintf_internal_r+0x7ec>
  289408:	a080040c 	andi	r2,r20,16
  28940c:	1000091e 	bne	r2,zero,289434 <___vfiprintf_internal_r+0x1138>
  289410:	a2c0100c 	andi	r11,r20,64
  289414:	58000726 	beq	r11,zero,289434 <___vfiprintf_internal_r+0x1138>
  289418:	da802217 	ldw	r10,136(sp)
  28941c:	50800017 	ldw	r2,0(r10)
  289420:	52800104 	addi	r10,r10,4
  289424:	da802215 	stw	r10,136(sp)
  289428:	da802317 	ldw	r10,140(sp)
  28942c:	1280000d 	sth	r10,0(r2)
  289430:	003be706 	br	2883d0 <___vfiprintf_internal_r+0xd4>
  289434:	da802217 	ldw	r10,136(sp)
  289438:	50800017 	ldw	r2,0(r10)
  28943c:	52800104 	addi	r10,r10,4
  289440:	da802215 	stw	r10,136(sp)
  289444:	da802317 	ldw	r10,140(sp)
  289448:	12800015 	stw	r10,0(r2)
  28944c:	003be006 	br	2883d0 <___vfiprintf_internal_r+0xd4>
  289450:	a080100c 	andi	r2,r20,64
  289454:	da802217 	ldw	r10,136(sp)
  289458:	10003026 	beq	r2,zero,28951c <___vfiprintf_internal_r+0x1220>
  28945c:	5480000b 	ldhu	r18,0(r10)
  289460:	52800104 	addi	r10,r10,4
  289464:	0027883a 	mov	r19,zero
  289468:	da802215 	stw	r10,136(sp)
  28946c:	003d8006 	br	288a70 <___vfiprintf_internal_r+0x774>
  289470:	80c00007 	ldb	r3,0(r16)
  289474:	003c0006 	br	288478 <___vfiprintf_internal_r+0x17c>
  289478:	a080100c 	andi	r2,r20,64
  28947c:	d8001d85 	stb	zero,118(sp)
  289480:	da802217 	ldw	r10,136(sp)
  289484:	1000201e 	bne	r2,zero,289508 <___vfiprintf_internal_r+0x120c>
  289488:	50800104 	addi	r2,r10,4
  28948c:	54800017 	ldw	r18,0(r10)
  289490:	0027883a 	mov	r19,zero
  289494:	483def0e 	bge	r9,zero,288c54 <___vfiprintf_internal_r+0x958>
  289498:	94c6b03a 	or	r3,r18,r19
  28949c:	d8802215 	stw	r2,136(sp)
  2894a0:	183d4e1e 	bne	r3,zero,2889dc <___vfiprintf_internal_r+0x6e0>
  2894a4:	0039883a 	mov	fp,zero
  2894a8:	0005883a 	mov	r2,zero
  2894ac:	003e0606 	br	288cc8 <___vfiprintf_internal_r+0x9cc>
  2894b0:	d9402117 	ldw	r5,132(sp)
  2894b4:	d9002017 	ldw	r4,128(sp)
  2894b8:	d9801a04 	addi	r6,sp,104
  2894bc:	da402c15 	stw	r9,176(sp)
  2894c0:	db802a15 	stw	r14,168(sp)
  2894c4:	02881e80 	call	2881e8 <__sprint_r.part.0>
  2894c8:	da402c17 	ldw	r9,176(sp)
  2894cc:	db802a17 	ldw	r14,168(sp)
  2894d0:	103ede1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  2894d4:	d9401b17 	ldw	r5,108(sp)
  2894d8:	d8801c17 	ldw	r2,112(sp)
  2894dc:	d811883a 	mov	r8,sp
  2894e0:	29000044 	addi	r4,r5,1
  2894e4:	003e7406 	br	288eb8 <___vfiprintf_internal_r+0xbbc>
  2894e8:	00bfffc4 	movi	r2,-1
  2894ec:	003c5806 	br	288650 <___vfiprintf_internal_r+0x354>
  2894f0:	d811883a 	mov	r8,sp
  2894f4:	003ee806 	br	289098 <___vfiprintf_internal_r+0xd9c>
  2894f8:	000b883a 	mov	r5,zero
  2894fc:	01000044 	movi	r4,1
  289500:	d811883a 	mov	r8,sp
  289504:	003e7c06 	br	288ef8 <___vfiprintf_internal_r+0xbfc>
  289508:	50800104 	addi	r2,r10,4
  28950c:	5480000b 	ldhu	r18,0(r10)
  289510:	0027883a 	mov	r19,zero
  289514:	483dcf0e 	bge	r9,zero,288c54 <___vfiprintf_internal_r+0x958>
  289518:	003fdf06 	br	289498 <___vfiprintf_internal_r+0x119c>
  28951c:	54800017 	ldw	r18,0(r10)
  289520:	52800104 	addi	r10,r10,4
  289524:	0027883a 	mov	r19,zero
  289528:	da802215 	stw	r10,136(sp)
  28952c:	003d5006 	br	288a70 <___vfiprintf_internal_r+0x774>
  289530:	50800104 	addi	r2,r10,4
  289534:	5480000b 	ldhu	r18,0(r10)
  289538:	0027883a 	mov	r19,zero
  28953c:	483f7d0e 	bge	r9,zero,289334 <___vfiprintf_internal_r+0x1038>
  289540:	003ddc06 	br	288cb4 <___vfiprintf_internal_r+0x9b8>
  289544:	d8c02215 	stw	r3,136(sp)
  289548:	0039883a 	mov	fp,zero
  28954c:	003ddb06 	br	288cbc <___vfiprintf_internal_r+0x9c0>
  289550:	02800a74 	movhi	r10,41
  289554:	52866604 	addi	r10,r10,6552
  289558:	da802415 	stw	r10,144(sp)
  28955c:	003e8306 	br	288f6c <___vfiprintf_internal_r+0xc70>
  289560:	d8801c17 	ldw	r2,112(sp)
  289564:	dd002117 	ldw	r20,132(sp)
  289568:	103eb926 	beq	r2,zero,289050 <___vfiprintf_internal_r+0xd54>
  28956c:	d9002017 	ldw	r4,128(sp)
  289570:	d9801a04 	addi	r6,sp,104
  289574:	a00b883a 	mov	r5,r20
  289578:	02881e80 	call	2881e8 <__sprint_r.part.0>
  28957c:	003eb406 	br	289050 <___vfiprintf_internal_r+0xd54>
  289580:	80c00043 	ldbu	r3,1(r16)
  289584:	a5000814 	ori	r20,r20,32
  289588:	84000044 	addi	r16,r16,1
  28958c:	18c03fcc 	andi	r3,r3,255
  289590:	18c0201c 	xori	r3,r3,128
  289594:	18ffe004 	addi	r3,r3,-128
  289598:	003bb706 	br	288478 <___vfiprintf_internal_r+0x17c>
  28959c:	a809883a 	mov	r4,r21
  2895a0:	d8c02a15 	stw	r3,168(sp)
  2895a4:	da002b15 	stw	r8,172(sp)
  2895a8:	0280c500 	call	280c50 <strlen>
  2895ac:	d8c02a17 	ldw	r3,168(sp)
  2895b0:	1027883a 	mov	r19,r2
  2895b4:	df001d83 	ldbu	fp,118(sp)
  2895b8:	d8c02215 	stw	r3,136(sp)
  2895bc:	0013883a 	mov	r9,zero
  2895c0:	da002b17 	ldw	r8,172(sp)
  2895c4:	003c4d06 	br	2886fc <___vfiprintf_internal_r+0x400>
  2895c8:	d9402117 	ldw	r5,132(sp)
  2895cc:	d9002017 	ldw	r4,128(sp)
  2895d0:	d9801a04 	addi	r6,sp,104
  2895d4:	da402c15 	stw	r9,176(sp)
  2895d8:	02881e80 	call	2881e8 <__sprint_r.part.0>
  2895dc:	da402c17 	ldw	r9,176(sp)
  2895e0:	103e9a1e 	bne	r2,zero,28904c <___vfiprintf_internal_r+0xd50>
  2895e4:	d9401b17 	ldw	r5,108(sp)
  2895e8:	d8801c17 	ldw	r2,112(sp)
  2895ec:	d811883a 	mov	r8,sp
  2895f0:	29000044 	addi	r4,r5,1
  2895f4:	003e4206 	br	288f00 <___vfiprintf_internal_r+0xc04>
  2895f8:	d9401b17 	ldw	r5,108(sp)
  2895fc:	01000a74 	movhi	r4,41
  289600:	21066a04 	addi	r4,r4,6568
  289604:	d9002415 	stw	r4,144(sp)
  289608:	29400044 	addi	r5,r5,1
  28960c:	003c6d06 	br	2887c4 <___vfiprintf_internal_r+0x4c8>
  289610:	0039883a 	mov	fp,zero
  289614:	00800084 	movi	r2,2
  289618:	10803fcc 	andi	r2,r2,255
  28961c:	01000044 	movi	r4,1
  289620:	11001e26 	beq	r2,r4,28969c <___vfiprintf_internal_r+0x13a0>
  289624:	01000084 	movi	r4,2
  289628:	11001e1e 	bne	r2,r4,2896a4 <___vfiprintf_internal_r+0x13a8>
  28962c:	1829883a 	mov	r20,r3
  289630:	003eea06 	br	2891dc <___vfiprintf_internal_r+0xee0>
  289634:	a007883a 	mov	r3,r20
  289638:	00800044 	movi	r2,1
  28963c:	003ff606 	br	289618 <___vfiprintf_internal_r+0x131c>
  289640:	00800184 	movi	r2,6
  289644:	1240012e 	bgeu	r2,r9,28964c <___vfiprintf_internal_r+0x1350>
  289648:	1013883a 	mov	r9,r2
  28964c:	4827883a 	mov	r19,r9
  289650:	4825883a 	mov	r18,r9
  289654:	48001516 	blt	r9,zero,2896ac <___vfiprintf_internal_r+0x13b0>
  289658:	05400a74 	movhi	r21,41
  28965c:	d8c02215 	stw	r3,136(sp)
  289660:	ad460a04 	addi	r21,r21,6184
  289664:	003d1406 	br	288ab8 <___vfiprintf_internal_r+0x7bc>
  289668:	02800a74 	movhi	r10,41
  28966c:	52866604 	addi	r10,r10,6552
  289670:	da802415 	stw	r10,144(sp)
  289674:	200d883a 	mov	r6,r4
  289678:	003c9106 	br	2888c0 <___vfiprintf_internal_r+0x5c4>
  28967c:	5021883a 	mov	r16,r10
  289680:	0013883a 	mov	r9,zero
  289684:	003b7d06 	br	28847c <___vfiprintf_internal_r+0x180>
  289688:	4827883a 	mov	r19,r9
  28968c:	df001d83 	ldbu	fp,118(sp)
  289690:	d8c02215 	stw	r3,136(sp)
  289694:	0013883a 	mov	r9,zero
  289698:	003c1806 	br	2886fc <___vfiprintf_internal_r+0x400>
  28969c:	1829883a 	mov	r20,r3
  2896a0:	003d1806 	br	288b04 <___vfiprintf_internal_r+0x808>
  2896a4:	1829883a 	mov	r20,r3
  2896a8:	003ccd06 	br	2889e0 <___vfiprintf_internal_r+0x6e4>
  2896ac:	0025883a 	mov	r18,zero
  2896b0:	003fe906 	br	289658 <___vfiprintf_internal_r+0x135c>
  2896b4:	d8802217 	ldw	r2,136(sp)
  2896b8:	80c00043 	ldbu	r3,1(r16)
  2896bc:	5021883a 	mov	r16,r10
  2896c0:	12400017 	ldw	r9,0(r2)
  2896c4:	10800104 	addi	r2,r2,4
  2896c8:	d8802215 	stw	r2,136(sp)
  2896cc:	483faf0e 	bge	r9,zero,28958c <___vfiprintf_internal_r+0x1290>
  2896d0:	18c03fcc 	andi	r3,r3,255
  2896d4:	18c0201c 	xori	r3,r3,128
  2896d8:	027fffc4 	movi	r9,-1
  2896dc:	18ffe004 	addi	r3,r3,-128
  2896e0:	003b6506 	br	288478 <___vfiprintf_internal_r+0x17c>
  2896e4:	d9c01d85 	stb	r7,118(sp)
  2896e8:	003ca006 	br	28896c <___vfiprintf_internal_r+0x670>
  2896ec:	d9c01d85 	stb	r7,118(sp)
  2896f0:	003cad06 	br	2889a8 <___vfiprintf_internal_r+0x6ac>
  2896f4:	d9c01d85 	stb	r7,118(sp)
  2896f8:	003d7d06 	br	288cf0 <___vfiprintf_internal_r+0x9f4>
  2896fc:	d9c01d85 	stb	r7,118(sp)
  289700:	003d5f06 	br	288c80 <___vfiprintf_internal_r+0x984>
  289704:	a080004c 	andi	r2,r20,1
  289708:	0039883a 	mov	fp,zero
  28970c:	10000526 	beq	r2,zero,289724 <___vfiprintf_internal_r+0x1428>
  289710:	00800c04 	movi	r2,48
  289714:	d88019c5 	stb	r2,103(sp)
  289718:	dcc02717 	ldw	r19,156(sp)
  28971c:	dd4019c4 	addi	r21,sp,103
  289720:	003bf606 	br	2886fc <___vfiprintf_internal_r+0x400>
  289724:	0027883a 	mov	r19,zero
  289728:	dd401a04 	addi	r21,sp,104
  28972c:	003bf306 	br	2886fc <___vfiprintf_internal_r+0x400>
  289730:	d9c01d85 	stb	r7,118(sp)
  289734:	003dc806 	br	288e58 <___vfiprintf_internal_r+0xb5c>
  289738:	d9c01d85 	stb	r7,118(sp)
  28973c:	003d3a06 	br	288c28 <___vfiprintf_internal_r+0x92c>
  289740:	d9c01d85 	stb	r7,118(sp)
  289744:	003d2a06 	br	288bf0 <___vfiprintf_internal_r+0x8f4>
  289748:	d9c01d85 	stb	r7,118(sp)
  28974c:	003cde06 	br	288ac8 <___vfiprintf_internal_r+0x7cc>
  289750:	d9c01d85 	stb	r7,118(sp)
  289754:	003cbc06 	br	288a48 <___vfiprintf_internal_r+0x74c>

00289758 <__vfiprintf_internal>:
  289758:	00800a74 	movhi	r2,41
  28975c:	108da904 	addi	r2,r2,13988
  289760:	300f883a 	mov	r7,r6
  289764:	280d883a 	mov	r6,r5
  289768:	200b883a 	mov	r5,r4
  28976c:	11000017 	ldw	r4,0(r2)
  289770:	02882fc1 	jmpi	2882fc <___vfiprintf_internal_r>

00289774 <__sbprintf>:
  289774:	2880030b 	ldhu	r2,12(r5)
  289778:	2ac01917 	ldw	r11,100(r5)
  28977c:	2a80038b 	ldhu	r10,14(r5)
  289780:	2a400717 	ldw	r9,28(r5)
  289784:	2a000917 	ldw	r8,36(r5)
  289788:	defee204 	addi	sp,sp,-1144
  28978c:	00c10004 	movi	r3,1024
  289790:	dc011a15 	stw	r16,1128(sp)
  289794:	10bfff4c 	andi	r2,r2,65533
  289798:	2821883a 	mov	r16,r5
  28979c:	d8cb883a 	add	r5,sp,r3
  2897a0:	dc811c15 	stw	r18,1136(sp)
  2897a4:	dc411b15 	stw	r17,1132(sp)
  2897a8:	dfc11d15 	stw	ra,1140(sp)
  2897ac:	2025883a 	mov	r18,r4
  2897b0:	d881030d 	sth	r2,1036(sp)
  2897b4:	dac11915 	stw	r11,1124(sp)
  2897b8:	da81038d 	sth	r10,1038(sp)
  2897bc:	da410715 	stw	r9,1052(sp)
  2897c0:	da010915 	stw	r8,1060(sp)
  2897c4:	dec10015 	stw	sp,1024(sp)
  2897c8:	dec10415 	stw	sp,1040(sp)
  2897cc:	d8c10215 	stw	r3,1032(sp)
  2897d0:	d8c10515 	stw	r3,1044(sp)
  2897d4:	d8010615 	stw	zero,1048(sp)
  2897d8:	02882fc0 	call	2882fc <___vfiprintf_internal_r>
  2897dc:	1023883a 	mov	r17,r2
  2897e0:	10000416 	blt	r2,zero,2897f4 <__sbprintf+0x80>
  2897e4:	d9410004 	addi	r5,sp,1024
  2897e8:	9009883a 	mov	r4,r18
  2897ec:	0284bb00 	call	284bb0 <_fflush_r>
  2897f0:	10000d1e 	bne	r2,zero,289828 <__sbprintf+0xb4>
  2897f4:	d881030b 	ldhu	r2,1036(sp)
  2897f8:	1080100c 	andi	r2,r2,64
  2897fc:	10000326 	beq	r2,zero,28980c <__sbprintf+0x98>
  289800:	8080030b 	ldhu	r2,12(r16)
  289804:	10801014 	ori	r2,r2,64
  289808:	8080030d 	sth	r2,12(r16)
  28980c:	8805883a 	mov	r2,r17
  289810:	dfc11d17 	ldw	ra,1140(sp)
  289814:	dc811c17 	ldw	r18,1136(sp)
  289818:	dc411b17 	ldw	r17,1132(sp)
  28981c:	dc011a17 	ldw	r16,1128(sp)
  289820:	dec11e04 	addi	sp,sp,1144
  289824:	f800283a 	ret
  289828:	047fffc4 	movi	r17,-1
  28982c:	003ff106 	br	2897f4 <__sbprintf+0x80>

00289830 <_write_r>:
  289830:	defffd04 	addi	sp,sp,-12
  289834:	2805883a 	mov	r2,r5
  289838:	dc000015 	stw	r16,0(sp)
  28983c:	04000a74 	movhi	r16,41
  289840:	dc400115 	stw	r17,4(sp)
  289844:	300b883a 	mov	r5,r6
  289848:	8414a804 	addi	r16,r16,21152
  28984c:	2023883a 	mov	r17,r4
  289850:	380d883a 	mov	r6,r7
  289854:	1009883a 	mov	r4,r2
  289858:	dfc00215 	stw	ra,8(sp)
  28985c:	80000015 	stw	zero,0(r16)
  289860:	028dac80 	call	28dac8 <write>
  289864:	00ffffc4 	movi	r3,-1
  289868:	10c00526 	beq	r2,r3,289880 <_write_r+0x50>
  28986c:	dfc00217 	ldw	ra,8(sp)
  289870:	dc400117 	ldw	r17,4(sp)
  289874:	dc000017 	ldw	r16,0(sp)
  289878:	dec00304 	addi	sp,sp,12
  28987c:	f800283a 	ret
  289880:	80c00017 	ldw	r3,0(r16)
  289884:	183ff926 	beq	r3,zero,28986c <_write_r+0x3c>
  289888:	88c00015 	stw	r3,0(r17)
  28988c:	003ff706 	br	28986c <_write_r+0x3c>

00289890 <_close_r>:
  289890:	defffd04 	addi	sp,sp,-12
  289894:	dc000015 	stw	r16,0(sp)
  289898:	04000a74 	movhi	r16,41
  28989c:	dc400115 	stw	r17,4(sp)
  2898a0:	8414a804 	addi	r16,r16,21152
  2898a4:	2023883a 	mov	r17,r4
  2898a8:	2809883a 	mov	r4,r5
  2898ac:	dfc00215 	stw	ra,8(sp)
  2898b0:	80000015 	stw	zero,0(r16)
  2898b4:	028d2b80 	call	28d2b8 <close>
  2898b8:	00ffffc4 	movi	r3,-1
  2898bc:	10c00526 	beq	r2,r3,2898d4 <_close_r+0x44>
  2898c0:	dfc00217 	ldw	ra,8(sp)
  2898c4:	dc400117 	ldw	r17,4(sp)
  2898c8:	dc000017 	ldw	r16,0(sp)
  2898cc:	dec00304 	addi	sp,sp,12
  2898d0:	f800283a 	ret
  2898d4:	80c00017 	ldw	r3,0(r16)
  2898d8:	183ff926 	beq	r3,zero,2898c0 <_close_r+0x30>
  2898dc:	88c00015 	stw	r3,0(r17)
  2898e0:	003ff706 	br	2898c0 <_close_r+0x30>

002898e4 <_calloc_r>:
  2898e4:	298b383a 	mul	r5,r5,r6
  2898e8:	defffe04 	addi	sp,sp,-8
  2898ec:	dfc00115 	stw	ra,4(sp)
  2898f0:	dc000015 	stw	r16,0(sp)
  2898f4:	0285cec0 	call	285cec <_malloc_r>
  2898f8:	10002926 	beq	r2,zero,2899a0 <_calloc_r+0xbc>
  2898fc:	11bfff17 	ldw	r6,-4(r2)
  289900:	1021883a 	mov	r16,r2
  289904:	00bfff04 	movi	r2,-4
  289908:	308c703a 	and	r6,r6,r2
  28990c:	00c00904 	movi	r3,36
  289910:	308d883a 	add	r6,r6,r2
  289914:	19801636 	bltu	r3,r6,289970 <_calloc_r+0x8c>
  289918:	008004c4 	movi	r2,19
  28991c:	11800b2e 	bgeu	r2,r6,28994c <_calloc_r+0x68>
  289920:	80000015 	stw	zero,0(r16)
  289924:	80000115 	stw	zero,4(r16)
  289928:	008006c4 	movi	r2,27
  28992c:	11801a2e 	bgeu	r2,r6,289998 <_calloc_r+0xb4>
  289930:	80000215 	stw	zero,8(r16)
  289934:	80000315 	stw	zero,12(r16)
  289938:	30c0151e 	bne	r6,r3,289990 <_calloc_r+0xac>
  28993c:	80000415 	stw	zero,16(r16)
  289940:	80800604 	addi	r2,r16,24
  289944:	80000515 	stw	zero,20(r16)
  289948:	00000106 	br	289950 <_calloc_r+0x6c>
  28994c:	8005883a 	mov	r2,r16
  289950:	10000015 	stw	zero,0(r2)
  289954:	10000115 	stw	zero,4(r2)
  289958:	10000215 	stw	zero,8(r2)
  28995c:	8005883a 	mov	r2,r16
  289960:	dfc00117 	ldw	ra,4(sp)
  289964:	dc000017 	ldw	r16,0(sp)
  289968:	dec00204 	addi	sp,sp,8
  28996c:	f800283a 	ret
  289970:	000b883a 	mov	r5,zero
  289974:	8009883a 	mov	r4,r16
  289978:	02868800 	call	286880 <memset>
  28997c:	8005883a 	mov	r2,r16
  289980:	dfc00117 	ldw	ra,4(sp)
  289984:	dc000017 	ldw	r16,0(sp)
  289988:	dec00204 	addi	sp,sp,8
  28998c:	f800283a 	ret
  289990:	80800404 	addi	r2,r16,16
  289994:	003fee06 	br	289950 <_calloc_r+0x6c>
  289998:	80800204 	addi	r2,r16,8
  28999c:	003fec06 	br	289950 <_calloc_r+0x6c>
  2899a0:	0005883a 	mov	r2,zero
  2899a4:	003fee06 	br	289960 <_calloc_r+0x7c>

002899a8 <_fclose_r>:
  2899a8:	28003926 	beq	r5,zero,289a90 <_fclose_r+0xe8>
  2899ac:	defffc04 	addi	sp,sp,-16
  2899b0:	dc400115 	stw	r17,4(sp)
  2899b4:	dc000015 	stw	r16,0(sp)
  2899b8:	dfc00315 	stw	ra,12(sp)
  2899bc:	dc800215 	stw	r18,8(sp)
  2899c0:	2023883a 	mov	r17,r4
  2899c4:	2821883a 	mov	r16,r5
  2899c8:	20000226 	beq	r4,zero,2899d4 <_fclose_r+0x2c>
  2899cc:	20800e17 	ldw	r2,56(r4)
  2899d0:	10002726 	beq	r2,zero,289a70 <_fclose_r+0xc8>
  2899d4:	8080030f 	ldh	r2,12(r16)
  2899d8:	1000071e 	bne	r2,zero,2899f8 <_fclose_r+0x50>
  2899dc:	0005883a 	mov	r2,zero
  2899e0:	dfc00317 	ldw	ra,12(sp)
  2899e4:	dc800217 	ldw	r18,8(sp)
  2899e8:	dc400117 	ldw	r17,4(sp)
  2899ec:	dc000017 	ldw	r16,0(sp)
  2899f0:	dec00404 	addi	sp,sp,16
  2899f4:	f800283a 	ret
  2899f8:	800b883a 	mov	r5,r16
  2899fc:	8809883a 	mov	r4,r17
  289a00:	02849940 	call	284994 <__sflush_r>
  289a04:	1025883a 	mov	r18,r2
  289a08:	80800b17 	ldw	r2,44(r16)
  289a0c:	10000426 	beq	r2,zero,289a20 <_fclose_r+0x78>
  289a10:	81400717 	ldw	r5,28(r16)
  289a14:	8809883a 	mov	r4,r17
  289a18:	103ee83a 	callr	r2
  289a1c:	10001616 	blt	r2,zero,289a78 <_fclose_r+0xd0>
  289a20:	8080030b 	ldhu	r2,12(r16)
  289a24:	1080200c 	andi	r2,r2,128
  289a28:	1000151e 	bne	r2,zero,289a80 <_fclose_r+0xd8>
  289a2c:	81400c17 	ldw	r5,48(r16)
  289a30:	28000526 	beq	r5,zero,289a48 <_fclose_r+0xa0>
  289a34:	80801004 	addi	r2,r16,64
  289a38:	28800226 	beq	r5,r2,289a44 <_fclose_r+0x9c>
  289a3c:	8809883a 	mov	r4,r17
  289a40:	02851000 	call	285100 <_free_r>
  289a44:	80000c15 	stw	zero,48(r16)
  289a48:	81401117 	ldw	r5,68(r16)
  289a4c:	28000326 	beq	r5,zero,289a5c <_fclose_r+0xb4>
  289a50:	8809883a 	mov	r4,r17
  289a54:	02851000 	call	285100 <_free_r>
  289a58:	80001115 	stw	zero,68(r16)
  289a5c:	0284f9c0 	call	284f9c <__sfp_lock_acquire>
  289a60:	8000030d 	sth	zero,12(r16)
  289a64:	0284fa00 	call	284fa0 <__sfp_lock_release>
  289a68:	9005883a 	mov	r2,r18
  289a6c:	003fdc06 	br	2899e0 <_fclose_r+0x38>
  289a70:	0284f8c0 	call	284f8c <__sinit>
  289a74:	003fd706 	br	2899d4 <_fclose_r+0x2c>
  289a78:	04bfffc4 	movi	r18,-1
  289a7c:	003fe806 	br	289a20 <_fclose_r+0x78>
  289a80:	81400417 	ldw	r5,16(r16)
  289a84:	8809883a 	mov	r4,r17
  289a88:	02851000 	call	285100 <_free_r>
  289a8c:	003fe706 	br	289a2c <_fclose_r+0x84>
  289a90:	0005883a 	mov	r2,zero
  289a94:	f800283a 	ret

00289a98 <fclose>:
  289a98:	00800a74 	movhi	r2,41
  289a9c:	108da904 	addi	r2,r2,13988
  289aa0:	200b883a 	mov	r5,r4
  289aa4:	11000017 	ldw	r4,0(r2)
  289aa8:	02899a81 	jmpi	2899a8 <_fclose_r>

00289aac <__fputwc>:
  289aac:	defff804 	addi	sp,sp,-32
  289ab0:	dcc00415 	stw	r19,16(sp)
  289ab4:	dc800315 	stw	r18,12(sp)
  289ab8:	dc000115 	stw	r16,4(sp)
  289abc:	dfc00715 	stw	ra,28(sp)
  289ac0:	dd400615 	stw	r21,24(sp)
  289ac4:	dd000515 	stw	r20,20(sp)
  289ac8:	dc400215 	stw	r17,8(sp)
  289acc:	2027883a 	mov	r19,r4
  289ad0:	2825883a 	mov	r18,r5
  289ad4:	3021883a 	mov	r16,r6
  289ad8:	0285adc0 	call	285adc <__locale_mb_cur_max>
  289adc:	00c00044 	movi	r3,1
  289ae0:	10c03e26 	beq	r2,r3,289bdc <__fputwc+0x130>
  289ae4:	81c01704 	addi	r7,r16,92
  289ae8:	900d883a 	mov	r6,r18
  289aec:	d80b883a 	mov	r5,sp
  289af0:	9809883a 	mov	r4,r19
  289af4:	0289f7c0 	call	289f7c <_wcrtomb_r>
  289af8:	1029883a 	mov	r20,r2
  289afc:	00bfffc4 	movi	r2,-1
  289b00:	a0802026 	beq	r20,r2,289b84 <__fputwc+0xd8>
  289b04:	d9400003 	ldbu	r5,0(sp)
  289b08:	a0001c26 	beq	r20,zero,289b7c <__fputwc+0xd0>
  289b0c:	0023883a 	mov	r17,zero
  289b10:	05400284 	movi	r21,10
  289b14:	00000906 	br	289b3c <__fputwc+0x90>
  289b18:	80800017 	ldw	r2,0(r16)
  289b1c:	11400005 	stb	r5,0(r2)
  289b20:	80c00017 	ldw	r3,0(r16)
  289b24:	18c00044 	addi	r3,r3,1
  289b28:	80c00015 	stw	r3,0(r16)
  289b2c:	8c400044 	addi	r17,r17,1
  289b30:	dc45883a 	add	r2,sp,r17
  289b34:	8d00112e 	bgeu	r17,r20,289b7c <__fputwc+0xd0>
  289b38:	11400003 	ldbu	r5,0(r2)
  289b3c:	80c00217 	ldw	r3,8(r16)
  289b40:	18ffffc4 	addi	r3,r3,-1
  289b44:	80c00215 	stw	r3,8(r16)
  289b48:	183ff30e 	bge	r3,zero,289b18 <__fputwc+0x6c>
  289b4c:	80800617 	ldw	r2,24(r16)
  289b50:	18801916 	blt	r3,r2,289bb8 <__fputwc+0x10c>
  289b54:	80800017 	ldw	r2,0(r16)
  289b58:	11400005 	stb	r5,0(r2)
  289b5c:	80800017 	ldw	r2,0(r16)
  289b60:	10c00003 	ldbu	r3,0(r2)
  289b64:	10800044 	addi	r2,r2,1
  289b68:	1d402326 	beq	r3,r21,289bf8 <__fputwc+0x14c>
  289b6c:	80800015 	stw	r2,0(r16)
  289b70:	8c400044 	addi	r17,r17,1
  289b74:	dc45883a 	add	r2,sp,r17
  289b78:	8d3fef36 	bltu	r17,r20,289b38 <__fputwc+0x8c>
  289b7c:	9005883a 	mov	r2,r18
  289b80:	00000406 	br	289b94 <__fputwc+0xe8>
  289b84:	80c0030b 	ldhu	r3,12(r16)
  289b88:	a005883a 	mov	r2,r20
  289b8c:	18c01014 	ori	r3,r3,64
  289b90:	80c0030d 	sth	r3,12(r16)
  289b94:	dfc00717 	ldw	ra,28(sp)
  289b98:	dd400617 	ldw	r21,24(sp)
  289b9c:	dd000517 	ldw	r20,20(sp)
  289ba0:	dcc00417 	ldw	r19,16(sp)
  289ba4:	dc800317 	ldw	r18,12(sp)
  289ba8:	dc400217 	ldw	r17,8(sp)
  289bac:	dc000117 	ldw	r16,4(sp)
  289bb0:	dec00804 	addi	sp,sp,32
  289bb4:	f800283a 	ret
  289bb8:	800d883a 	mov	r6,r16
  289bbc:	29403fcc 	andi	r5,r5,255
  289bc0:	9809883a 	mov	r4,r19
  289bc4:	0289e240 	call	289e24 <__swbuf_r>
  289bc8:	10bfffe0 	cmpeqi	r2,r2,-1
  289bcc:	10803fcc 	andi	r2,r2,255
  289bd0:	103fd626 	beq	r2,zero,289b2c <__fputwc+0x80>
  289bd4:	00bfffc4 	movi	r2,-1
  289bd8:	003fee06 	br	289b94 <__fputwc+0xe8>
  289bdc:	90ffffc4 	addi	r3,r18,-1
  289be0:	01003f84 	movi	r4,254
  289be4:	20ffbf36 	bltu	r4,r3,289ae4 <__fputwc+0x38>
  289be8:	900b883a 	mov	r5,r18
  289bec:	dc800005 	stb	r18,0(sp)
  289bf0:	1029883a 	mov	r20,r2
  289bf4:	003fc506 	br	289b0c <__fputwc+0x60>
  289bf8:	800d883a 	mov	r6,r16
  289bfc:	a80b883a 	mov	r5,r21
  289c00:	9809883a 	mov	r4,r19
  289c04:	0289e240 	call	289e24 <__swbuf_r>
  289c08:	10bfffe0 	cmpeqi	r2,r2,-1
  289c0c:	003fef06 	br	289bcc <__fputwc+0x120>

00289c10 <_fputwc_r>:
  289c10:	3080030b 	ldhu	r2,12(r6)
  289c14:	10c8000c 	andi	r3,r2,8192
  289c18:	1800051e 	bne	r3,zero,289c30 <_fputwc_r+0x20>
  289c1c:	30c01917 	ldw	r3,100(r6)
  289c20:	10880014 	ori	r2,r2,8192
  289c24:	3080030d 	sth	r2,12(r6)
  289c28:	18880014 	ori	r2,r3,8192
  289c2c:	30801915 	stw	r2,100(r6)
  289c30:	0289aac1 	jmpi	289aac <__fputwc>

00289c34 <fputwc>:
  289c34:	00800a74 	movhi	r2,41
  289c38:	defffc04 	addi	sp,sp,-16
  289c3c:	108da904 	addi	r2,r2,13988
  289c40:	dc000115 	stw	r16,4(sp)
  289c44:	14000017 	ldw	r16,0(r2)
  289c48:	dc400215 	stw	r17,8(sp)
  289c4c:	dfc00315 	stw	ra,12(sp)
  289c50:	2023883a 	mov	r17,r4
  289c54:	80000226 	beq	r16,zero,289c60 <fputwc+0x2c>
  289c58:	80800e17 	ldw	r2,56(r16)
  289c5c:	10001026 	beq	r2,zero,289ca0 <fputwc+0x6c>
  289c60:	2880030b 	ldhu	r2,12(r5)
  289c64:	10c8000c 	andi	r3,r2,8192
  289c68:	1800051e 	bne	r3,zero,289c80 <fputwc+0x4c>
  289c6c:	28c01917 	ldw	r3,100(r5)
  289c70:	10880014 	ori	r2,r2,8192
  289c74:	2880030d 	sth	r2,12(r5)
  289c78:	18880014 	ori	r2,r3,8192
  289c7c:	28801915 	stw	r2,100(r5)
  289c80:	280d883a 	mov	r6,r5
  289c84:	8009883a 	mov	r4,r16
  289c88:	880b883a 	mov	r5,r17
  289c8c:	dfc00317 	ldw	ra,12(sp)
  289c90:	dc400217 	ldw	r17,8(sp)
  289c94:	dc000117 	ldw	r16,4(sp)
  289c98:	dec00404 	addi	sp,sp,16
  289c9c:	0289aac1 	jmpi	289aac <__fputwc>
  289ca0:	8009883a 	mov	r4,r16
  289ca4:	d9400015 	stw	r5,0(sp)
  289ca8:	0284f8c0 	call	284f8c <__sinit>
  289cac:	d9400017 	ldw	r5,0(sp)
  289cb0:	003feb06 	br	289c60 <fputwc+0x2c>

00289cb4 <_fstat_r>:
  289cb4:	defffd04 	addi	sp,sp,-12
  289cb8:	2805883a 	mov	r2,r5
  289cbc:	dc000015 	stw	r16,0(sp)
  289cc0:	04000a74 	movhi	r16,41
  289cc4:	dc400115 	stw	r17,4(sp)
  289cc8:	8414a804 	addi	r16,r16,21152
  289ccc:	2023883a 	mov	r17,r4
  289cd0:	300b883a 	mov	r5,r6
  289cd4:	1009883a 	mov	r4,r2
  289cd8:	dfc00215 	stw	ra,8(sp)
  289cdc:	80000015 	stw	zero,0(r16)
  289ce0:	028d3f00 	call	28d3f0 <fstat>
  289ce4:	00ffffc4 	movi	r3,-1
  289ce8:	10c00526 	beq	r2,r3,289d00 <_fstat_r+0x4c>
  289cec:	dfc00217 	ldw	ra,8(sp)
  289cf0:	dc400117 	ldw	r17,4(sp)
  289cf4:	dc000017 	ldw	r16,0(sp)
  289cf8:	dec00304 	addi	sp,sp,12
  289cfc:	f800283a 	ret
  289d00:	80c00017 	ldw	r3,0(r16)
  289d04:	183ff926 	beq	r3,zero,289cec <_fstat_r+0x38>
  289d08:	88c00015 	stw	r3,0(r17)
  289d0c:	003ff706 	br	289cec <_fstat_r+0x38>

00289d10 <_isatty_r>:
  289d10:	defffd04 	addi	sp,sp,-12
  289d14:	dc000015 	stw	r16,0(sp)
  289d18:	04000a74 	movhi	r16,41
  289d1c:	dc400115 	stw	r17,4(sp)
  289d20:	8414a804 	addi	r16,r16,21152
  289d24:	2023883a 	mov	r17,r4
  289d28:	2809883a 	mov	r4,r5
  289d2c:	dfc00215 	stw	ra,8(sp)
  289d30:	80000015 	stw	zero,0(r16)
  289d34:	028d4dc0 	call	28d4dc <isatty>
  289d38:	00ffffc4 	movi	r3,-1
  289d3c:	10c00526 	beq	r2,r3,289d54 <_isatty_r+0x44>
  289d40:	dfc00217 	ldw	ra,8(sp)
  289d44:	dc400117 	ldw	r17,4(sp)
  289d48:	dc000017 	ldw	r16,0(sp)
  289d4c:	dec00304 	addi	sp,sp,12
  289d50:	f800283a 	ret
  289d54:	80c00017 	ldw	r3,0(r16)
  289d58:	183ff926 	beq	r3,zero,289d40 <_isatty_r+0x30>
  289d5c:	88c00015 	stw	r3,0(r17)
  289d60:	003ff706 	br	289d40 <_isatty_r+0x30>

00289d64 <_lseek_r>:
  289d64:	defffd04 	addi	sp,sp,-12
  289d68:	2805883a 	mov	r2,r5
  289d6c:	dc000015 	stw	r16,0(sp)
  289d70:	04000a74 	movhi	r16,41
  289d74:	dc400115 	stw	r17,4(sp)
  289d78:	300b883a 	mov	r5,r6
  289d7c:	8414a804 	addi	r16,r16,21152
  289d80:	2023883a 	mov	r17,r4
  289d84:	380d883a 	mov	r6,r7
  289d88:	1009883a 	mov	r4,r2
  289d8c:	dfc00215 	stw	ra,8(sp)
  289d90:	80000015 	stw	zero,0(r16)
  289d94:	028d6a80 	call	28d6a8 <lseek>
  289d98:	00ffffc4 	movi	r3,-1
  289d9c:	10c00526 	beq	r2,r3,289db4 <_lseek_r+0x50>
  289da0:	dfc00217 	ldw	ra,8(sp)
  289da4:	dc400117 	ldw	r17,4(sp)
  289da8:	dc000017 	ldw	r16,0(sp)
  289dac:	dec00304 	addi	sp,sp,12
  289db0:	f800283a 	ret
  289db4:	80c00017 	ldw	r3,0(r16)
  289db8:	183ff926 	beq	r3,zero,289da0 <_lseek_r+0x3c>
  289dbc:	88c00015 	stw	r3,0(r17)
  289dc0:	003ff706 	br	289da0 <_lseek_r+0x3c>

00289dc4 <_read_r>:
  289dc4:	defffd04 	addi	sp,sp,-12
  289dc8:	2805883a 	mov	r2,r5
  289dcc:	dc000015 	stw	r16,0(sp)
  289dd0:	04000a74 	movhi	r16,41
  289dd4:	dc400115 	stw	r17,4(sp)
  289dd8:	300b883a 	mov	r5,r6
  289ddc:	8414a804 	addi	r16,r16,21152
  289de0:	2023883a 	mov	r17,r4
  289de4:	380d883a 	mov	r6,r7
  289de8:	1009883a 	mov	r4,r2
  289dec:	dfc00215 	stw	ra,8(sp)
  289df0:	80000015 	stw	zero,0(r16)
  289df4:	028d87c0 	call	28d87c <read>
  289df8:	00ffffc4 	movi	r3,-1
  289dfc:	10c00526 	beq	r2,r3,289e14 <_read_r+0x50>
  289e00:	dfc00217 	ldw	ra,8(sp)
  289e04:	dc400117 	ldw	r17,4(sp)
  289e08:	dc000017 	ldw	r16,0(sp)
  289e0c:	dec00304 	addi	sp,sp,12
  289e10:	f800283a 	ret
  289e14:	80c00017 	ldw	r3,0(r16)
  289e18:	183ff926 	beq	r3,zero,289e00 <_read_r+0x3c>
  289e1c:	88c00015 	stw	r3,0(r17)
  289e20:	003ff706 	br	289e00 <_read_r+0x3c>

00289e24 <__swbuf_r>:
  289e24:	defffb04 	addi	sp,sp,-20
  289e28:	dcc00315 	stw	r19,12(sp)
  289e2c:	dc800215 	stw	r18,8(sp)
  289e30:	dc000015 	stw	r16,0(sp)
  289e34:	dfc00415 	stw	ra,16(sp)
  289e38:	dc400115 	stw	r17,4(sp)
  289e3c:	2025883a 	mov	r18,r4
  289e40:	2827883a 	mov	r19,r5
  289e44:	3021883a 	mov	r16,r6
  289e48:	20000226 	beq	r4,zero,289e54 <__swbuf_r+0x30>
  289e4c:	20800e17 	ldw	r2,56(r4)
  289e50:	10004226 	beq	r2,zero,289f5c <__swbuf_r+0x138>
  289e54:	80800617 	ldw	r2,24(r16)
  289e58:	8100030b 	ldhu	r4,12(r16)
  289e5c:	80800215 	stw	r2,8(r16)
  289e60:	2080020c 	andi	r2,r4,8
  289e64:	10003626 	beq	r2,zero,289f40 <__swbuf_r+0x11c>
  289e68:	80c00417 	ldw	r3,16(r16)
  289e6c:	18003426 	beq	r3,zero,289f40 <__swbuf_r+0x11c>
  289e70:	2088000c 	andi	r2,r4,8192
  289e74:	9c403fcc 	andi	r17,r19,255
  289e78:	10001a26 	beq	r2,zero,289ee4 <__swbuf_r+0xc0>
  289e7c:	80800017 	ldw	r2,0(r16)
  289e80:	81000517 	ldw	r4,20(r16)
  289e84:	10c7c83a 	sub	r3,r2,r3
  289e88:	1900200e 	bge	r3,r4,289f0c <__swbuf_r+0xe8>
  289e8c:	18c00044 	addi	r3,r3,1
  289e90:	81000217 	ldw	r4,8(r16)
  289e94:	11400044 	addi	r5,r2,1
  289e98:	81400015 	stw	r5,0(r16)
  289e9c:	213fffc4 	addi	r4,r4,-1
  289ea0:	81000215 	stw	r4,8(r16)
  289ea4:	14c00005 	stb	r19,0(r2)
  289ea8:	80800517 	ldw	r2,20(r16)
  289eac:	10c01e26 	beq	r2,r3,289f28 <__swbuf_r+0x104>
  289eb0:	8080030b 	ldhu	r2,12(r16)
  289eb4:	1080004c 	andi	r2,r2,1
  289eb8:	10000226 	beq	r2,zero,289ec4 <__swbuf_r+0xa0>
  289ebc:	00800284 	movi	r2,10
  289ec0:	88801926 	beq	r17,r2,289f28 <__swbuf_r+0x104>
  289ec4:	8805883a 	mov	r2,r17
  289ec8:	dfc00417 	ldw	ra,16(sp)
  289ecc:	dcc00317 	ldw	r19,12(sp)
  289ed0:	dc800217 	ldw	r18,8(sp)
  289ed4:	dc400117 	ldw	r17,4(sp)
  289ed8:	dc000017 	ldw	r16,0(sp)
  289edc:	dec00504 	addi	sp,sp,20
  289ee0:	f800283a 	ret
  289ee4:	81401917 	ldw	r5,100(r16)
  289ee8:	00b7ffc4 	movi	r2,-8193
  289eec:	21080014 	ori	r4,r4,8192
  289ef0:	2884703a 	and	r2,r5,r2
  289ef4:	80801915 	stw	r2,100(r16)
  289ef8:	80800017 	ldw	r2,0(r16)
  289efc:	8100030d 	sth	r4,12(r16)
  289f00:	81000517 	ldw	r4,20(r16)
  289f04:	10c7c83a 	sub	r3,r2,r3
  289f08:	193fe016 	blt	r3,r4,289e8c <__swbuf_r+0x68>
  289f0c:	800b883a 	mov	r5,r16
  289f10:	9009883a 	mov	r4,r18
  289f14:	0284bb00 	call	284bb0 <_fflush_r>
  289f18:	1000071e 	bne	r2,zero,289f38 <__swbuf_r+0x114>
  289f1c:	80800017 	ldw	r2,0(r16)
  289f20:	00c00044 	movi	r3,1
  289f24:	003fda06 	br	289e90 <__swbuf_r+0x6c>
  289f28:	800b883a 	mov	r5,r16
  289f2c:	9009883a 	mov	r4,r18
  289f30:	0284bb00 	call	284bb0 <_fflush_r>
  289f34:	103fe326 	beq	r2,zero,289ec4 <__swbuf_r+0xa0>
  289f38:	00bfffc4 	movi	r2,-1
  289f3c:	003fe206 	br	289ec8 <__swbuf_r+0xa4>
  289f40:	800b883a 	mov	r5,r16
  289f44:	9009883a 	mov	r4,r18
  289f48:	0282fb80 	call	282fb8 <__swsetup_r>
  289f4c:	103ffa1e 	bne	r2,zero,289f38 <__swbuf_r+0x114>
  289f50:	8100030b 	ldhu	r4,12(r16)
  289f54:	80c00417 	ldw	r3,16(r16)
  289f58:	003fc506 	br	289e70 <__swbuf_r+0x4c>
  289f5c:	0284f8c0 	call	284f8c <__sinit>
  289f60:	003fbc06 	br	289e54 <__swbuf_r+0x30>

00289f64 <__swbuf>:
  289f64:	00800a74 	movhi	r2,41
  289f68:	108da904 	addi	r2,r2,13988
  289f6c:	280d883a 	mov	r6,r5
  289f70:	200b883a 	mov	r5,r4
  289f74:	11000017 	ldw	r4,0(r2)
  289f78:	0289e241 	jmpi	289e24 <__swbuf_r>

00289f7c <_wcrtomb_r>:
  289f7c:	defff604 	addi	sp,sp,-40
  289f80:	00800a74 	movhi	r2,41
  289f84:	dc800815 	stw	r18,32(sp)
  289f88:	dc400715 	stw	r17,28(sp)
  289f8c:	dc000615 	stw	r16,24(sp)
  289f90:	108dad04 	addi	r2,r2,14004
  289f94:	dfc00915 	stw	ra,36(sp)
  289f98:	2021883a 	mov	r16,r4
  289f9c:	3823883a 	mov	r17,r7
  289fa0:	14800017 	ldw	r18,0(r2)
  289fa4:	28001426 	beq	r5,zero,289ff8 <_wcrtomb_r+0x7c>
  289fa8:	d9400415 	stw	r5,16(sp)
  289fac:	d9800515 	stw	r6,20(sp)
  289fb0:	0285ad00 	call	285ad0 <__locale_charset>
  289fb4:	d9800517 	ldw	r6,20(sp)
  289fb8:	d9400417 	ldw	r5,16(sp)
  289fbc:	100f883a 	mov	r7,r2
  289fc0:	dc400015 	stw	r17,0(sp)
  289fc4:	8009883a 	mov	r4,r16
  289fc8:	903ee83a 	callr	r18
  289fcc:	00ffffc4 	movi	r3,-1
  289fd0:	10c0031e 	bne	r2,r3,289fe0 <_wcrtomb_r+0x64>
  289fd4:	88000015 	stw	zero,0(r17)
  289fd8:	00c02284 	movi	r3,138
  289fdc:	80c00015 	stw	r3,0(r16)
  289fe0:	dfc00917 	ldw	ra,36(sp)
  289fe4:	dc800817 	ldw	r18,32(sp)
  289fe8:	dc400717 	ldw	r17,28(sp)
  289fec:	dc000617 	ldw	r16,24(sp)
  289ff0:	dec00a04 	addi	sp,sp,40
  289ff4:	f800283a 	ret
  289ff8:	0285ad00 	call	285ad0 <__locale_charset>
  289ffc:	100f883a 	mov	r7,r2
  28a000:	dc400015 	stw	r17,0(sp)
  28a004:	000d883a 	mov	r6,zero
  28a008:	d9400104 	addi	r5,sp,4
  28a00c:	8009883a 	mov	r4,r16
  28a010:	903ee83a 	callr	r18
  28a014:	003fed06 	br	289fcc <_wcrtomb_r+0x50>

0028a018 <wcrtomb>:
  28a018:	defff604 	addi	sp,sp,-40
  28a01c:	00800a74 	movhi	r2,41
  28a020:	dc800615 	stw	r18,24(sp)
  28a024:	dc400515 	stw	r17,20(sp)
  28a028:	108da904 	addi	r2,r2,13988
  28a02c:	dfc00915 	stw	ra,36(sp)
  28a030:	dd000815 	stw	r20,32(sp)
  28a034:	dcc00715 	stw	r19,28(sp)
  28a038:	dc000415 	stw	r16,16(sp)
  28a03c:	3025883a 	mov	r18,r6
  28a040:	14400017 	ldw	r17,0(r2)
  28a044:	20001926 	beq	r4,zero,28a0ac <wcrtomb+0x94>
  28a048:	00800a74 	movhi	r2,41
  28a04c:	108dad04 	addi	r2,r2,14004
  28a050:	15000017 	ldw	r20,0(r2)
  28a054:	2021883a 	mov	r16,r4
  28a058:	2827883a 	mov	r19,r5
  28a05c:	0285ad00 	call	285ad0 <__locale_charset>
  28a060:	100f883a 	mov	r7,r2
  28a064:	dc800015 	stw	r18,0(sp)
  28a068:	980d883a 	mov	r6,r19
  28a06c:	800b883a 	mov	r5,r16
  28a070:	8809883a 	mov	r4,r17
  28a074:	a03ee83a 	callr	r20
  28a078:	00ffffc4 	movi	r3,-1
  28a07c:	10c0031e 	bne	r2,r3,28a08c <wcrtomb+0x74>
  28a080:	90000015 	stw	zero,0(r18)
  28a084:	00c02284 	movi	r3,138
  28a088:	88c00015 	stw	r3,0(r17)
  28a08c:	dfc00917 	ldw	ra,36(sp)
  28a090:	dd000817 	ldw	r20,32(sp)
  28a094:	dcc00717 	ldw	r19,28(sp)
  28a098:	dc800617 	ldw	r18,24(sp)
  28a09c:	dc400517 	ldw	r17,20(sp)
  28a0a0:	dc000417 	ldw	r16,16(sp)
  28a0a4:	dec00a04 	addi	sp,sp,40
  28a0a8:	f800283a 	ret
  28a0ac:	00800a74 	movhi	r2,41
  28a0b0:	108dad04 	addi	r2,r2,14004
  28a0b4:	14000017 	ldw	r16,0(r2)
  28a0b8:	0285ad00 	call	285ad0 <__locale_charset>
  28a0bc:	100f883a 	mov	r7,r2
  28a0c0:	dc800015 	stw	r18,0(sp)
  28a0c4:	000d883a 	mov	r6,zero
  28a0c8:	d9400104 	addi	r5,sp,4
  28a0cc:	8809883a 	mov	r4,r17
  28a0d0:	803ee83a 	callr	r16
  28a0d4:	003fe806 	br	28a078 <wcrtomb+0x60>

0028a0d8 <__ascii_wctomb>:
  28a0d8:	28000526 	beq	r5,zero,28a0f0 <__ascii_wctomb+0x18>
  28a0dc:	00803fc4 	movi	r2,255
  28a0e0:	11800536 	bltu	r2,r6,28a0f8 <__ascii_wctomb+0x20>
  28a0e4:	29800005 	stb	r6,0(r5)
  28a0e8:	00800044 	movi	r2,1
  28a0ec:	f800283a 	ret
  28a0f0:	0005883a 	mov	r2,zero
  28a0f4:	f800283a 	ret
  28a0f8:	00802284 	movi	r2,138
  28a0fc:	20800015 	stw	r2,0(r4)
  28a100:	00bfffc4 	movi	r2,-1
  28a104:	f800283a 	ret

0028a108 <_wctomb_r>:
  28a108:	00800a74 	movhi	r2,41
  28a10c:	defff904 	addi	sp,sp,-28
  28a110:	108dad04 	addi	r2,r2,14004
  28a114:	dfc00615 	stw	ra,24(sp)
  28a118:	dc400515 	stw	r17,20(sp)
  28a11c:	dc000415 	stw	r16,16(sp)
  28a120:	3823883a 	mov	r17,r7
  28a124:	14000017 	ldw	r16,0(r2)
  28a128:	d9000115 	stw	r4,4(sp)
  28a12c:	d9400215 	stw	r5,8(sp)
  28a130:	d9800315 	stw	r6,12(sp)
  28a134:	0285ad00 	call	285ad0 <__locale_charset>
  28a138:	d9800317 	ldw	r6,12(sp)
  28a13c:	d9400217 	ldw	r5,8(sp)
  28a140:	d9000117 	ldw	r4,4(sp)
  28a144:	100f883a 	mov	r7,r2
  28a148:	dc400015 	stw	r17,0(sp)
  28a14c:	803ee83a 	callr	r16
  28a150:	dfc00617 	ldw	ra,24(sp)
  28a154:	dc400517 	ldw	r17,20(sp)
  28a158:	dc000417 	ldw	r16,16(sp)
  28a15c:	dec00704 	addi	sp,sp,28
  28a160:	f800283a 	ret

0028a164 <__udivdi3>:
  28a164:	defff504 	addi	sp,sp,-44
  28a168:	dcc00415 	stw	r19,16(sp)
  28a16c:	dc000115 	stw	r16,4(sp)
  28a170:	dfc00a15 	stw	ra,40(sp)
  28a174:	df000915 	stw	fp,36(sp)
  28a178:	ddc00815 	stw	r23,32(sp)
  28a17c:	dd800715 	stw	r22,28(sp)
  28a180:	dd400615 	stw	r21,24(sp)
  28a184:	dd000515 	stw	r20,20(sp)
  28a188:	dc800315 	stw	r18,12(sp)
  28a18c:	dc400215 	stw	r17,8(sp)
  28a190:	2027883a 	mov	r19,r4
  28a194:	2821883a 	mov	r16,r5
  28a198:	3800411e 	bne	r7,zero,28a2a0 <__udivdi3+0x13c>
  28a19c:	3023883a 	mov	r17,r6
  28a1a0:	2025883a 	mov	r18,r4
  28a1a4:	2980522e 	bgeu	r5,r6,28a2f0 <__udivdi3+0x18c>
  28a1a8:	00bfffd4 	movui	r2,65535
  28a1ac:	282d883a 	mov	r22,r5
  28a1b0:	1180a836 	bltu	r2,r6,28a454 <__udivdi3+0x2f0>
  28a1b4:	00803fc4 	movi	r2,255
  28a1b8:	1185803a 	cmpltu	r2,r2,r6
  28a1bc:	100490fa 	slli	r2,r2,3
  28a1c0:	3086d83a 	srl	r3,r6,r2
  28a1c4:	01000a74 	movhi	r4,41
  28a1c8:	21066e04 	addi	r4,r4,6584
  28a1cc:	20c7883a 	add	r3,r4,r3
  28a1d0:	18c00003 	ldbu	r3,0(r3)
  28a1d4:	1885883a 	add	r2,r3,r2
  28a1d8:	00c00804 	movi	r3,32
  28a1dc:	1887c83a 	sub	r3,r3,r2
  28a1e0:	18000526 	beq	r3,zero,28a1f8 <__udivdi3+0x94>
  28a1e4:	80e0983a 	sll	r16,r16,r3
  28a1e8:	9884d83a 	srl	r2,r19,r2
  28a1ec:	30e2983a 	sll	r17,r6,r3
  28a1f0:	98e4983a 	sll	r18,r19,r3
  28a1f4:	142cb03a 	or	r22,r2,r16
  28a1f8:	882ad43a 	srli	r21,r17,16
  28a1fc:	b009883a 	mov	r4,r22
  28a200:	8d3fffcc 	andi	r20,r17,65535
  28a204:	a80b883a 	mov	r5,r21
  28a208:	0280ab80 	call	280ab8 <__umodsi3>
  28a20c:	b009883a 	mov	r4,r22
  28a210:	a80b883a 	mov	r5,r21
  28a214:	1027883a 	mov	r19,r2
  28a218:	0280a540 	call	280a54 <__udivsi3>
  28a21c:	102d883a 	mov	r22,r2
  28a220:	9826943a 	slli	r19,r19,16
  28a224:	9004d43a 	srli	r2,r18,16
  28a228:	a5a1383a 	mul	r16,r20,r22
  28a22c:	14c4b03a 	or	r2,r2,r19
  28a230:	1400052e 	bgeu	r2,r16,28a248 <__udivdi3+0xe4>
  28a234:	1445883a 	add	r2,r2,r17
  28a238:	b0ffffc4 	addi	r3,r22,-1
  28a23c:	14400136 	bltu	r2,r17,28a244 <__udivdi3+0xe0>
  28a240:	14012336 	bltu	r2,r16,28a6d0 <__udivdi3+0x56c>
  28a244:	182d883a 	mov	r22,r3
  28a248:	1421c83a 	sub	r16,r2,r16
  28a24c:	a80b883a 	mov	r5,r21
  28a250:	8009883a 	mov	r4,r16
  28a254:	0280ab80 	call	280ab8 <__umodsi3>
  28a258:	1027883a 	mov	r19,r2
  28a25c:	a80b883a 	mov	r5,r21
  28a260:	8009883a 	mov	r4,r16
  28a264:	0280a540 	call	280a54 <__udivsi3>
  28a268:	9826943a 	slli	r19,r19,16
  28a26c:	a0a9383a 	mul	r20,r20,r2
  28a270:	94bfffcc 	andi	r18,r18,65535
  28a274:	94e4b03a 	or	r18,r18,r19
  28a278:	9500052e 	bgeu	r18,r20,28a290 <__udivdi3+0x12c>
  28a27c:	8ca5883a 	add	r18,r17,r18
  28a280:	10ffffc4 	addi	r3,r2,-1
  28a284:	9440f136 	bltu	r18,r17,28a64c <__udivdi3+0x4e8>
  28a288:	9500f02e 	bgeu	r18,r20,28a64c <__udivdi3+0x4e8>
  28a28c:	10bfff84 	addi	r2,r2,-2
  28a290:	b00c943a 	slli	r6,r22,16
  28a294:	0007883a 	mov	r3,zero
  28a298:	3084b03a 	or	r2,r6,r2
  28a29c:	00005906 	br	28a404 <__udivdi3+0x2a0>
  28a2a0:	29c05636 	bltu	r5,r7,28a3fc <__udivdi3+0x298>
  28a2a4:	00bfffd4 	movui	r2,65535
  28a2a8:	11c0622e 	bgeu	r2,r7,28a434 <__udivdi3+0x2d0>
  28a2ac:	00804034 	movhi	r2,256
  28a2b0:	10bfffc4 	addi	r2,r2,-1
  28a2b4:	11c0ee36 	bltu	r2,r7,28a670 <__udivdi3+0x50c>
  28a2b8:	00800404 	movi	r2,16
  28a2bc:	3886d83a 	srl	r3,r7,r2
  28a2c0:	01000a74 	movhi	r4,41
  28a2c4:	21066e04 	addi	r4,r4,6584
  28a2c8:	20c7883a 	add	r3,r4,r3
  28a2cc:	18c00003 	ldbu	r3,0(r3)
  28a2d0:	05400804 	movi	r21,32
  28a2d4:	1885883a 	add	r2,r3,r2
  28a2d8:	a8abc83a 	sub	r21,r21,r2
  28a2dc:	a800621e 	bne	r21,zero,28a468 <__udivdi3+0x304>
  28a2e0:	3c00e936 	bltu	r7,r16,28a688 <__udivdi3+0x524>
  28a2e4:	9985403a 	cmpgeu	r2,r19,r6
  28a2e8:	0007883a 	mov	r3,zero
  28a2ec:	00004506 	br	28a404 <__udivdi3+0x2a0>
  28a2f0:	3000041e 	bne	r6,zero,28a304 <__udivdi3+0x1a0>
  28a2f4:	000b883a 	mov	r5,zero
  28a2f8:	01000044 	movi	r4,1
  28a2fc:	0280a540 	call	280a54 <__udivsi3>
  28a300:	1023883a 	mov	r17,r2
  28a304:	00bfffd4 	movui	r2,65535
  28a308:	14404e2e 	bgeu	r2,r17,28a444 <__udivdi3+0x2e0>
  28a30c:	00804034 	movhi	r2,256
  28a310:	10bfffc4 	addi	r2,r2,-1
  28a314:	1440d836 	bltu	r2,r17,28a678 <__udivdi3+0x514>
  28a318:	00800404 	movi	r2,16
  28a31c:	8886d83a 	srl	r3,r17,r2
  28a320:	01000a74 	movhi	r4,41
  28a324:	21066e04 	addi	r4,r4,6584
  28a328:	20c7883a 	add	r3,r4,r3
  28a32c:	18c00003 	ldbu	r3,0(r3)
  28a330:	1885883a 	add	r2,r3,r2
  28a334:	00c00804 	movi	r3,32
  28a338:	1887c83a 	sub	r3,r3,r2
  28a33c:	18008f1e 	bne	r3,zero,28a57c <__udivdi3+0x418>
  28a340:	882ad43a 	srli	r21,r17,16
  28a344:	8461c83a 	sub	r16,r16,r17
  28a348:	8d3fffcc 	andi	r20,r17,65535
  28a34c:	00c00044 	movi	r3,1
  28a350:	8009883a 	mov	r4,r16
  28a354:	a80b883a 	mov	r5,r21
  28a358:	d8c00015 	stw	r3,0(sp)
  28a35c:	0280ab80 	call	280ab8 <__umodsi3>
  28a360:	8009883a 	mov	r4,r16
  28a364:	a80b883a 	mov	r5,r21
  28a368:	1027883a 	mov	r19,r2
  28a36c:	0280a540 	call	280a54 <__udivsi3>
  28a370:	9826943a 	slli	r19,r19,16
  28a374:	9008d43a 	srli	r4,r18,16
  28a378:	1521383a 	mul	r16,r2,r20
  28a37c:	102d883a 	mov	r22,r2
  28a380:	24c8b03a 	or	r4,r4,r19
  28a384:	d8c00017 	ldw	r3,0(sp)
  28a388:	2400052e 	bgeu	r4,r16,28a3a0 <__udivdi3+0x23c>
  28a38c:	2449883a 	add	r4,r4,r17
  28a390:	b0bfffc4 	addi	r2,r22,-1
  28a394:	24400136 	bltu	r4,r17,28a39c <__udivdi3+0x238>
  28a398:	2400ca36 	bltu	r4,r16,28a6c4 <__udivdi3+0x560>
  28a39c:	102d883a 	mov	r22,r2
  28a3a0:	2421c83a 	sub	r16,r4,r16
  28a3a4:	a80b883a 	mov	r5,r21
  28a3a8:	8009883a 	mov	r4,r16
  28a3ac:	d8c00015 	stw	r3,0(sp)
  28a3b0:	0280ab80 	call	280ab8 <__umodsi3>
  28a3b4:	1027883a 	mov	r19,r2
  28a3b8:	a80b883a 	mov	r5,r21
  28a3bc:	8009883a 	mov	r4,r16
  28a3c0:	0280a540 	call	280a54 <__udivsi3>
  28a3c4:	9826943a 	slli	r19,r19,16
  28a3c8:	1529383a 	mul	r20,r2,r20
  28a3cc:	94bfffcc 	andi	r18,r18,65535
  28a3d0:	94e4b03a 	or	r18,r18,r19
  28a3d4:	d8c00017 	ldw	r3,0(sp)
  28a3d8:	9500052e 	bgeu	r18,r20,28a3f0 <__udivdi3+0x28c>
  28a3dc:	8ca5883a 	add	r18,r17,r18
  28a3e0:	113fffc4 	addi	r4,r2,-1
  28a3e4:	94409736 	bltu	r18,r17,28a644 <__udivdi3+0x4e0>
  28a3e8:	9500962e 	bgeu	r18,r20,28a644 <__udivdi3+0x4e0>
  28a3ec:	10bfff84 	addi	r2,r2,-2
  28a3f0:	b00c943a 	slli	r6,r22,16
  28a3f4:	3084b03a 	or	r2,r6,r2
  28a3f8:	00000206 	br	28a404 <__udivdi3+0x2a0>
  28a3fc:	0007883a 	mov	r3,zero
  28a400:	0005883a 	mov	r2,zero
  28a404:	dfc00a17 	ldw	ra,40(sp)
  28a408:	df000917 	ldw	fp,36(sp)
  28a40c:	ddc00817 	ldw	r23,32(sp)
  28a410:	dd800717 	ldw	r22,28(sp)
  28a414:	dd400617 	ldw	r21,24(sp)
  28a418:	dd000517 	ldw	r20,20(sp)
  28a41c:	dcc00417 	ldw	r19,16(sp)
  28a420:	dc800317 	ldw	r18,12(sp)
  28a424:	dc400217 	ldw	r17,8(sp)
  28a428:	dc000117 	ldw	r16,4(sp)
  28a42c:	dec00b04 	addi	sp,sp,44
  28a430:	f800283a 	ret
  28a434:	00803fc4 	movi	r2,255
  28a438:	11c5803a 	cmpltu	r2,r2,r7
  28a43c:	100490fa 	slli	r2,r2,3
  28a440:	003f9e06 	br	28a2bc <__udivdi3+0x158>
  28a444:	00803fc4 	movi	r2,255
  28a448:	1445803a 	cmpltu	r2,r2,r17
  28a44c:	100490fa 	slli	r2,r2,3
  28a450:	003fb206 	br	28a31c <__udivdi3+0x1b8>
  28a454:	00804034 	movhi	r2,256
  28a458:	10bfffc4 	addi	r2,r2,-1
  28a45c:	11808836 	bltu	r2,r6,28a680 <__udivdi3+0x51c>
  28a460:	00800404 	movi	r2,16
  28a464:	003f5606 	br	28a1c0 <__udivdi3+0x5c>
  28a468:	30aed83a 	srl	r23,r6,r2
  28a46c:	3d4e983a 	sll	r7,r7,r21
  28a470:	80acd83a 	srl	r22,r16,r2
  28a474:	9884d83a 	srl	r2,r19,r2
  28a478:	3deeb03a 	or	r23,r7,r23
  28a47c:	b824d43a 	srli	r18,r23,16
  28a480:	8560983a 	sll	r16,r16,r21
  28a484:	b009883a 	mov	r4,r22
  28a488:	900b883a 	mov	r5,r18
  28a48c:	3568983a 	sll	r20,r6,r21
  28a490:	1420b03a 	or	r16,r2,r16
  28a494:	0280ab80 	call	280ab8 <__umodsi3>
  28a498:	b009883a 	mov	r4,r22
  28a49c:	900b883a 	mov	r5,r18
  28a4a0:	1023883a 	mov	r17,r2
  28a4a4:	0280a540 	call	280a54 <__udivsi3>
  28a4a8:	8808943a 	slli	r4,r17,16
  28a4ac:	bf3fffcc 	andi	fp,r23,65535
  28a4b0:	8006d43a 	srli	r3,r16,16
  28a4b4:	e0a3383a 	mul	r17,fp,r2
  28a4b8:	100d883a 	mov	r6,r2
  28a4bc:	1906b03a 	or	r3,r3,r4
  28a4c0:	1c40042e 	bgeu	r3,r17,28a4d4 <__udivdi3+0x370>
  28a4c4:	1dc7883a 	add	r3,r3,r23
  28a4c8:	10bfffc4 	addi	r2,r2,-1
  28a4cc:	1dc0752e 	bgeu	r3,r23,28a6a4 <__udivdi3+0x540>
  28a4d0:	100d883a 	mov	r6,r2
  28a4d4:	1c63c83a 	sub	r17,r3,r17
  28a4d8:	900b883a 	mov	r5,r18
  28a4dc:	8809883a 	mov	r4,r17
  28a4e0:	d9800015 	stw	r6,0(sp)
  28a4e4:	0280ab80 	call	280ab8 <__umodsi3>
  28a4e8:	102d883a 	mov	r22,r2
  28a4ec:	8809883a 	mov	r4,r17
  28a4f0:	900b883a 	mov	r5,r18
  28a4f4:	0280a540 	call	280a54 <__udivsi3>
  28a4f8:	b02c943a 	slli	r22,r22,16
  28a4fc:	e089383a 	mul	r4,fp,r2
  28a500:	843fffcc 	andi	r16,r16,65535
  28a504:	85a0b03a 	or	r16,r16,r22
  28a508:	d9800017 	ldw	r6,0(sp)
  28a50c:	8100042e 	bgeu	r16,r4,28a520 <__udivdi3+0x3bc>
  28a510:	85e1883a 	add	r16,r16,r23
  28a514:	10ffffc4 	addi	r3,r2,-1
  28a518:	85c05e2e 	bgeu	r16,r23,28a694 <__udivdi3+0x530>
  28a51c:	1805883a 	mov	r2,r3
  28a520:	300c943a 	slli	r6,r6,16
  28a524:	a17fffcc 	andi	r5,r20,65535
  28a528:	a028d43a 	srli	r20,r20,16
  28a52c:	3084b03a 	or	r2,r6,r2
  28a530:	10ffffcc 	andi	r3,r2,65535
  28a534:	100cd43a 	srli	r6,r2,16
  28a538:	194f383a 	mul	r7,r3,r5
  28a53c:	1d07383a 	mul	r3,r3,r20
  28a540:	314b383a 	mul	r5,r6,r5
  28a544:	3810d43a 	srli	r8,r7,16
  28a548:	8121c83a 	sub	r16,r16,r4
  28a54c:	1947883a 	add	r3,r3,r5
  28a550:	40c7883a 	add	r3,r8,r3
  28a554:	350d383a 	mul	r6,r6,r20
  28a558:	1940022e 	bgeu	r3,r5,28a564 <__udivdi3+0x400>
  28a55c:	01000074 	movhi	r4,1
  28a560:	310d883a 	add	r6,r6,r4
  28a564:	1828d43a 	srli	r20,r3,16
  28a568:	a18d883a 	add	r6,r20,r6
  28a56c:	81803e36 	bltu	r16,r6,28a668 <__udivdi3+0x504>
  28a570:	81803826 	beq	r16,r6,28a654 <__udivdi3+0x4f0>
  28a574:	0007883a 	mov	r3,zero
  28a578:	003fa206 	br	28a404 <__udivdi3+0x2a0>
  28a57c:	88e2983a 	sll	r17,r17,r3
  28a580:	80a8d83a 	srl	r20,r16,r2
  28a584:	80e0983a 	sll	r16,r16,r3
  28a588:	882ad43a 	srli	r21,r17,16
  28a58c:	9884d83a 	srl	r2,r19,r2
  28a590:	a009883a 	mov	r4,r20
  28a594:	a80b883a 	mov	r5,r21
  28a598:	142eb03a 	or	r23,r2,r16
  28a59c:	98e4983a 	sll	r18,r19,r3
  28a5a0:	0280ab80 	call	280ab8 <__umodsi3>
  28a5a4:	a009883a 	mov	r4,r20
  28a5a8:	a80b883a 	mov	r5,r21
  28a5ac:	1021883a 	mov	r16,r2
  28a5b0:	0280a540 	call	280a54 <__udivsi3>
  28a5b4:	1039883a 	mov	fp,r2
  28a5b8:	8d3fffcc 	andi	r20,r17,65535
  28a5bc:	8020943a 	slli	r16,r16,16
  28a5c0:	b804d43a 	srli	r2,r23,16
  28a5c4:	a72d383a 	mul	r22,r20,fp
  28a5c8:	1404b03a 	or	r2,r2,r16
  28a5cc:	1580062e 	bgeu	r2,r22,28a5e8 <__udivdi3+0x484>
  28a5d0:	1445883a 	add	r2,r2,r17
  28a5d4:	e0ffffc4 	addi	r3,fp,-1
  28a5d8:	14403836 	bltu	r2,r17,28a6bc <__udivdi3+0x558>
  28a5dc:	1580372e 	bgeu	r2,r22,28a6bc <__udivdi3+0x558>
  28a5e0:	e73fff84 	addi	fp,fp,-2
  28a5e4:	1445883a 	add	r2,r2,r17
  28a5e8:	15adc83a 	sub	r22,r2,r22
  28a5ec:	a80b883a 	mov	r5,r21
  28a5f0:	b009883a 	mov	r4,r22
  28a5f4:	0280ab80 	call	280ab8 <__umodsi3>
  28a5f8:	1027883a 	mov	r19,r2
  28a5fc:	b009883a 	mov	r4,r22
  28a600:	a80b883a 	mov	r5,r21
  28a604:	0280a540 	call	280a54 <__udivsi3>
  28a608:	9826943a 	slli	r19,r19,16
  28a60c:	a0a1383a 	mul	r16,r20,r2
  28a610:	b93fffcc 	andi	r4,r23,65535
  28a614:	24c8b03a 	or	r4,r4,r19
  28a618:	2400062e 	bgeu	r4,r16,28a634 <__udivdi3+0x4d0>
  28a61c:	2449883a 	add	r4,r4,r17
  28a620:	10ffffc4 	addi	r3,r2,-1
  28a624:	24402336 	bltu	r4,r17,28a6b4 <__udivdi3+0x550>
  28a628:	2400222e 	bgeu	r4,r16,28a6b4 <__udivdi3+0x550>
  28a62c:	10bfff84 	addi	r2,r2,-2
  28a630:	2449883a 	add	r4,r4,r17
  28a634:	e038943a 	slli	fp,fp,16
  28a638:	2421c83a 	sub	r16,r4,r16
  28a63c:	e086b03a 	or	r3,fp,r2
  28a640:	003f4306 	br	28a350 <__udivdi3+0x1ec>
  28a644:	2005883a 	mov	r2,r4
  28a648:	003f6906 	br	28a3f0 <__udivdi3+0x28c>
  28a64c:	1805883a 	mov	r2,r3
  28a650:	003f0f06 	br	28a290 <__udivdi3+0x12c>
  28a654:	1806943a 	slli	r3,r3,16
  28a658:	9d66983a 	sll	r19,r19,r21
  28a65c:	39ffffcc 	andi	r7,r7,65535
  28a660:	19c7883a 	add	r3,r3,r7
  28a664:	98ffc32e 	bgeu	r19,r3,28a574 <__udivdi3+0x410>
  28a668:	10bfffc4 	addi	r2,r2,-1
  28a66c:	003fc106 	br	28a574 <__udivdi3+0x410>
  28a670:	00800604 	movi	r2,24
  28a674:	003f1106 	br	28a2bc <__udivdi3+0x158>
  28a678:	00800604 	movi	r2,24
  28a67c:	003f2706 	br	28a31c <__udivdi3+0x1b8>
  28a680:	00800604 	movi	r2,24
  28a684:	003ece06 	br	28a1c0 <__udivdi3+0x5c>
  28a688:	0007883a 	mov	r3,zero
  28a68c:	00800044 	movi	r2,1
  28a690:	003f5c06 	br	28a404 <__udivdi3+0x2a0>
  28a694:	813fa12e 	bgeu	r16,r4,28a51c <__udivdi3+0x3b8>
  28a698:	10bfff84 	addi	r2,r2,-2
  28a69c:	85e1883a 	add	r16,r16,r23
  28a6a0:	003f9f06 	br	28a520 <__udivdi3+0x3bc>
  28a6a4:	1c7f8a2e 	bgeu	r3,r17,28a4d0 <__udivdi3+0x36c>
  28a6a8:	31bfff84 	addi	r6,r6,-2
  28a6ac:	1dc7883a 	add	r3,r3,r23
  28a6b0:	003f8806 	br	28a4d4 <__udivdi3+0x370>
  28a6b4:	1805883a 	mov	r2,r3
  28a6b8:	003fde06 	br	28a634 <__udivdi3+0x4d0>
  28a6bc:	1839883a 	mov	fp,r3
  28a6c0:	003fc906 	br	28a5e8 <__udivdi3+0x484>
  28a6c4:	b5bfff84 	addi	r22,r22,-2
  28a6c8:	2449883a 	add	r4,r4,r17
  28a6cc:	003f3406 	br	28a3a0 <__udivdi3+0x23c>
  28a6d0:	b5bfff84 	addi	r22,r22,-2
  28a6d4:	1445883a 	add	r2,r2,r17
  28a6d8:	003edb06 	br	28a248 <__udivdi3+0xe4>

0028a6dc <__umoddi3>:
  28a6dc:	defff404 	addi	sp,sp,-48
  28a6e0:	df000a15 	stw	fp,40(sp)
  28a6e4:	dc400315 	stw	r17,12(sp)
  28a6e8:	dc000215 	stw	r16,8(sp)
  28a6ec:	dfc00b15 	stw	ra,44(sp)
  28a6f0:	ddc00915 	stw	r23,36(sp)
  28a6f4:	dd800815 	stw	r22,32(sp)
  28a6f8:	dd400715 	stw	r21,28(sp)
  28a6fc:	dd000615 	stw	r20,24(sp)
  28a700:	dcc00515 	stw	r19,20(sp)
  28a704:	dc800415 	stw	r18,16(sp)
  28a708:	2021883a 	mov	r16,r4
  28a70c:	2823883a 	mov	r17,r5
  28a710:	2839883a 	mov	fp,r5
  28a714:	38003c1e 	bne	r7,zero,28a808 <__umoddi3+0x12c>
  28a718:	3027883a 	mov	r19,r6
  28a71c:	2029883a 	mov	r20,r4
  28a720:	2980512e 	bgeu	r5,r6,28a868 <__umoddi3+0x18c>
  28a724:	00bfffd4 	movui	r2,65535
  28a728:	11809a36 	bltu	r2,r6,28a994 <__umoddi3+0x2b8>
  28a72c:	01003fc4 	movi	r4,255
  28a730:	2189803a 	cmpltu	r4,r4,r6
  28a734:	200890fa 	slli	r4,r4,3
  28a738:	3104d83a 	srl	r2,r6,r4
  28a73c:	00c00a74 	movhi	r3,41
  28a740:	18c66e04 	addi	r3,r3,6584
  28a744:	1885883a 	add	r2,r3,r2
  28a748:	10c00003 	ldbu	r3,0(r2)
  28a74c:	00800804 	movi	r2,32
  28a750:	1909883a 	add	r4,r3,r4
  28a754:	1125c83a 	sub	r18,r2,r4
  28a758:	90000526 	beq	r18,zero,28a770 <__umoddi3+0x94>
  28a75c:	8ca2983a 	sll	r17,r17,r18
  28a760:	8108d83a 	srl	r4,r16,r4
  28a764:	34a6983a 	sll	r19,r6,r18
  28a768:	84a8983a 	sll	r20,r16,r18
  28a76c:	2478b03a 	or	fp,r4,r17
  28a770:	982ed43a 	srli	r23,r19,16
  28a774:	e009883a 	mov	r4,fp
  28a778:	9dbfffcc 	andi	r22,r19,65535
  28a77c:	b80b883a 	mov	r5,r23
  28a780:	0280ab80 	call	280ab8 <__umodsi3>
  28a784:	e009883a 	mov	r4,fp
  28a788:	b80b883a 	mov	r5,r23
  28a78c:	102b883a 	mov	r21,r2
  28a790:	0280a540 	call	280a54 <__udivsi3>
  28a794:	a806943a 	slli	r3,r21,16
  28a798:	a008d43a 	srli	r4,r20,16
  28a79c:	b085383a 	mul	r2,r22,r2
  28a7a0:	20c8b03a 	or	r4,r4,r3
  28a7a4:	2080032e 	bgeu	r4,r2,28a7b4 <__umoddi3+0xd8>
  28a7a8:	24c9883a 	add	r4,r4,r19
  28a7ac:	24c00136 	bltu	r4,r19,28a7b4 <__umoddi3+0xd8>
  28a7b0:	20811036 	bltu	r4,r2,28abf4 <__umoddi3+0x518>
  28a7b4:	20abc83a 	sub	r21,r4,r2
  28a7b8:	b80b883a 	mov	r5,r23
  28a7bc:	a809883a 	mov	r4,r21
  28a7c0:	0280ab80 	call	280ab8 <__umodsi3>
  28a7c4:	1023883a 	mov	r17,r2
  28a7c8:	b80b883a 	mov	r5,r23
  28a7cc:	a809883a 	mov	r4,r21
  28a7d0:	0280a540 	call	280a54 <__udivsi3>
  28a7d4:	8822943a 	slli	r17,r17,16
  28a7d8:	b085383a 	mul	r2,r22,r2
  28a7dc:	a0ffffcc 	andi	r3,r20,65535
  28a7e0:	1c46b03a 	or	r3,r3,r17
  28a7e4:	1880042e 	bgeu	r3,r2,28a7f8 <__umoddi3+0x11c>
  28a7e8:	1cc7883a 	add	r3,r3,r19
  28a7ec:	1cc00236 	bltu	r3,r19,28a7f8 <__umoddi3+0x11c>
  28a7f0:	1880012e 	bgeu	r3,r2,28a7f8 <__umoddi3+0x11c>
  28a7f4:	1cc7883a 	add	r3,r3,r19
  28a7f8:	1885c83a 	sub	r2,r3,r2
  28a7fc:	1484d83a 	srl	r2,r2,r18
  28a800:	0007883a 	mov	r3,zero
  28a804:	00004f06 	br	28a944 <__umoddi3+0x268>
  28a808:	29c04c36 	bltu	r5,r7,28a93c <__umoddi3+0x260>
  28a80c:	00bfffd4 	movui	r2,65535
  28a810:	11c0582e 	bgeu	r2,r7,28a974 <__umoddi3+0x298>
  28a814:	00804034 	movhi	r2,256
  28a818:	10bfffc4 	addi	r2,r2,-1
  28a81c:	11c0e736 	bltu	r2,r7,28abbc <__umoddi3+0x4e0>
  28a820:	01000404 	movi	r4,16
  28a824:	3904d83a 	srl	r2,r7,r4
  28a828:	00c00a74 	movhi	r3,41
  28a82c:	18c66e04 	addi	r3,r3,6584
  28a830:	1885883a 	add	r2,r3,r2
  28a834:	14c00003 	ldbu	r19,0(r2)
  28a838:	00c00804 	movi	r3,32
  28a83c:	9927883a 	add	r19,r19,r4
  28a840:	1ce9c83a 	sub	r20,r3,r19
  28a844:	a000581e 	bne	r20,zero,28a9a8 <__umoddi3+0x2cc>
  28a848:	3c400136 	bltu	r7,r17,28a850 <__umoddi3+0x174>
  28a84c:	8180eb36 	bltu	r16,r6,28abfc <__umoddi3+0x520>
  28a850:	8185c83a 	sub	r2,r16,r6
  28a854:	89e3c83a 	sub	r17,r17,r7
  28a858:	8089803a 	cmpltu	r4,r16,r2
  28a85c:	8939c83a 	sub	fp,r17,r4
  28a860:	e007883a 	mov	r3,fp
  28a864:	00003706 	br	28a944 <__umoddi3+0x268>
  28a868:	3000041e 	bne	r6,zero,28a87c <__umoddi3+0x1a0>
  28a86c:	000b883a 	mov	r5,zero
  28a870:	01000044 	movi	r4,1
  28a874:	0280a540 	call	280a54 <__udivsi3>
  28a878:	1027883a 	mov	r19,r2
  28a87c:	00bfffd4 	movui	r2,65535
  28a880:	14c0402e 	bgeu	r2,r19,28a984 <__umoddi3+0x2a8>
  28a884:	00804034 	movhi	r2,256
  28a888:	10bfffc4 	addi	r2,r2,-1
  28a88c:	14c0cd36 	bltu	r2,r19,28abc4 <__umoddi3+0x4e8>
  28a890:	00800404 	movi	r2,16
  28a894:	9886d83a 	srl	r3,r19,r2
  28a898:	01000a74 	movhi	r4,41
  28a89c:	21066e04 	addi	r4,r4,6584
  28a8a0:	20c7883a 	add	r3,r4,r3
  28a8a4:	18c00003 	ldbu	r3,0(r3)
  28a8a8:	1887883a 	add	r3,r3,r2
  28a8ac:	00800804 	movi	r2,32
  28a8b0:	10e5c83a 	sub	r18,r2,r3
  28a8b4:	9000901e 	bne	r18,zero,28aaf8 <__umoddi3+0x41c>
  28a8b8:	982cd43a 	srli	r22,r19,16
  28a8bc:	8ce3c83a 	sub	r17,r17,r19
  28a8c0:	9d7fffcc 	andi	r21,r19,65535
  28a8c4:	b00b883a 	mov	r5,r22
  28a8c8:	8809883a 	mov	r4,r17
  28a8cc:	0280ab80 	call	280ab8 <__umodsi3>
  28a8d0:	8809883a 	mov	r4,r17
  28a8d4:	b00b883a 	mov	r5,r22
  28a8d8:	1021883a 	mov	r16,r2
  28a8dc:	0280a540 	call	280a54 <__udivsi3>
  28a8e0:	8006943a 	slli	r3,r16,16
  28a8e4:	a008d43a 	srli	r4,r20,16
  28a8e8:	1545383a 	mul	r2,r2,r21
  28a8ec:	20c8b03a 	or	r4,r4,r3
  28a8f0:	2080042e 	bgeu	r4,r2,28a904 <__umoddi3+0x228>
  28a8f4:	24c9883a 	add	r4,r4,r19
  28a8f8:	24c00236 	bltu	r4,r19,28a904 <__umoddi3+0x228>
  28a8fc:	2080012e 	bgeu	r4,r2,28a904 <__umoddi3+0x228>
  28a900:	24c9883a 	add	r4,r4,r19
  28a904:	20a1c83a 	sub	r16,r4,r2
  28a908:	b00b883a 	mov	r5,r22
  28a90c:	8009883a 	mov	r4,r16
  28a910:	0280ab80 	call	280ab8 <__umodsi3>
  28a914:	1023883a 	mov	r17,r2
  28a918:	b00b883a 	mov	r5,r22
  28a91c:	8009883a 	mov	r4,r16
  28a920:	0280a540 	call	280a54 <__udivsi3>
  28a924:	8822943a 	slli	r17,r17,16
  28a928:	1545383a 	mul	r2,r2,r21
  28a92c:	a53fffcc 	andi	r20,r20,65535
  28a930:	a446b03a 	or	r3,r20,r17
  28a934:	18bfb02e 	bgeu	r3,r2,28a7f8 <__umoddi3+0x11c>
  28a938:	003fab06 	br	28a7e8 <__umoddi3+0x10c>
  28a93c:	2005883a 	mov	r2,r4
  28a940:	2807883a 	mov	r3,r5
  28a944:	dfc00b17 	ldw	ra,44(sp)
  28a948:	df000a17 	ldw	fp,40(sp)
  28a94c:	ddc00917 	ldw	r23,36(sp)
  28a950:	dd800817 	ldw	r22,32(sp)
  28a954:	dd400717 	ldw	r21,28(sp)
  28a958:	dd000617 	ldw	r20,24(sp)
  28a95c:	dcc00517 	ldw	r19,20(sp)
  28a960:	dc800417 	ldw	r18,16(sp)
  28a964:	dc400317 	ldw	r17,12(sp)
  28a968:	dc000217 	ldw	r16,8(sp)
  28a96c:	dec00c04 	addi	sp,sp,48
  28a970:	f800283a 	ret
  28a974:	04c03fc4 	movi	r19,255
  28a978:	99c9803a 	cmpltu	r4,r19,r7
  28a97c:	200890fa 	slli	r4,r4,3
  28a980:	003fa806 	br	28a824 <__umoddi3+0x148>
  28a984:	00803fc4 	movi	r2,255
  28a988:	14c5803a 	cmpltu	r2,r2,r19
  28a98c:	100490fa 	slli	r2,r2,3
  28a990:	003fc006 	br	28a894 <__umoddi3+0x1b8>
  28a994:	00804034 	movhi	r2,256
  28a998:	10bfffc4 	addi	r2,r2,-1
  28a99c:	11808b36 	bltu	r2,r6,28abcc <__umoddi3+0x4f0>
  28a9a0:	01000404 	movi	r4,16
  28a9a4:	003f6406 	br	28a738 <__umoddi3+0x5c>
  28a9a8:	34c4d83a 	srl	r2,r6,r19
  28a9ac:	3d0e983a 	sll	r7,r7,r20
  28a9b0:	8cf8d83a 	srl	fp,r17,r19
  28a9b4:	8d10983a 	sll	r8,r17,r20
  28a9b8:	38aab03a 	or	r21,r7,r2
  28a9bc:	a82cd43a 	srli	r22,r21,16
  28a9c0:	84e2d83a 	srl	r17,r16,r19
  28a9c4:	e009883a 	mov	r4,fp
  28a9c8:	b00b883a 	mov	r5,r22
  28a9cc:	8a22b03a 	or	r17,r17,r8
  28a9d0:	3524983a 	sll	r18,r6,r20
  28a9d4:	0280ab80 	call	280ab8 <__umodsi3>
  28a9d8:	e009883a 	mov	r4,fp
  28a9dc:	b00b883a 	mov	r5,r22
  28a9e0:	102f883a 	mov	r23,r2
  28a9e4:	0280a540 	call	280a54 <__udivsi3>
  28a9e8:	100d883a 	mov	r6,r2
  28a9ec:	b808943a 	slli	r4,r23,16
  28a9f0:	aa3fffcc 	andi	r8,r21,65535
  28a9f4:	8804d43a 	srli	r2,r17,16
  28a9f8:	41af383a 	mul	r23,r8,r6
  28a9fc:	8520983a 	sll	r16,r16,r20
  28aa00:	1104b03a 	or	r2,r2,r4
  28aa04:	15c0042e 	bgeu	r2,r23,28aa18 <__umoddi3+0x33c>
  28aa08:	1545883a 	add	r2,r2,r21
  28aa0c:	30ffffc4 	addi	r3,r6,-1
  28aa10:	1540742e 	bgeu	r2,r21,28abe4 <__umoddi3+0x508>
  28aa14:	180d883a 	mov	r6,r3
  28aa18:	15efc83a 	sub	r23,r2,r23
  28aa1c:	b00b883a 	mov	r5,r22
  28aa20:	b809883a 	mov	r4,r23
  28aa24:	d9800115 	stw	r6,4(sp)
  28aa28:	da000015 	stw	r8,0(sp)
  28aa2c:	0280ab80 	call	280ab8 <__umodsi3>
  28aa30:	b00b883a 	mov	r5,r22
  28aa34:	b809883a 	mov	r4,r23
  28aa38:	1039883a 	mov	fp,r2
  28aa3c:	0280a540 	call	280a54 <__udivsi3>
  28aa40:	da000017 	ldw	r8,0(sp)
  28aa44:	e038943a 	slli	fp,fp,16
  28aa48:	100b883a 	mov	r5,r2
  28aa4c:	4089383a 	mul	r4,r8,r2
  28aa50:	8a3fffcc 	andi	r8,r17,65535
  28aa54:	4710b03a 	or	r8,r8,fp
  28aa58:	d9800117 	ldw	r6,4(sp)
  28aa5c:	4100042e 	bgeu	r8,r4,28aa70 <__umoddi3+0x394>
  28aa60:	4551883a 	add	r8,r8,r21
  28aa64:	10bfffc4 	addi	r2,r2,-1
  28aa68:	45405a2e 	bgeu	r8,r21,28abd4 <__umoddi3+0x4f8>
  28aa6c:	100b883a 	mov	r5,r2
  28aa70:	300c943a 	slli	r6,r6,16
  28aa74:	91ffffcc 	andi	r7,r18,65535
  28aa78:	9004d43a 	srli	r2,r18,16
  28aa7c:	314cb03a 	or	r6,r6,r5
  28aa80:	317fffcc 	andi	r5,r6,65535
  28aa84:	300cd43a 	srli	r6,r6,16
  28aa88:	29d3383a 	mul	r9,r5,r7
  28aa8c:	288b383a 	mul	r5,r5,r2
  28aa90:	31cf383a 	mul	r7,r6,r7
  28aa94:	4806d43a 	srli	r3,r9,16
  28aa98:	4111c83a 	sub	r8,r8,r4
  28aa9c:	29cb883a 	add	r5,r5,r7
  28aaa0:	194b883a 	add	r5,r3,r5
  28aaa4:	3085383a 	mul	r2,r6,r2
  28aaa8:	29c0022e 	bgeu	r5,r7,28aab4 <__umoddi3+0x3d8>
  28aaac:	00c00074 	movhi	r3,1
  28aab0:	10c5883a 	add	r2,r2,r3
  28aab4:	2808d43a 	srli	r4,r5,16
  28aab8:	280a943a 	slli	r5,r5,16
  28aabc:	4a7fffcc 	andi	r9,r9,65535
  28aac0:	2085883a 	add	r2,r4,r2
  28aac4:	2a4b883a 	add	r5,r5,r9
  28aac8:	40803636 	bltu	r8,r2,28aba4 <__umoddi3+0x4c8>
  28aacc:	40804d26 	beq	r8,r2,28ac04 <__umoddi3+0x528>
  28aad0:	4089c83a 	sub	r4,r8,r2
  28aad4:	280f883a 	mov	r7,r5
  28aad8:	81cfc83a 	sub	r7,r16,r7
  28aadc:	81c7803a 	cmpltu	r3,r16,r7
  28aae0:	20c7c83a 	sub	r3,r4,r3
  28aae4:	1cc4983a 	sll	r2,r3,r19
  28aae8:	3d0ed83a 	srl	r7,r7,r20
  28aaec:	1d06d83a 	srl	r3,r3,r20
  28aaf0:	11c4b03a 	or	r2,r2,r7
  28aaf4:	003f9306 	br	28a944 <__umoddi3+0x268>
  28aaf8:	9ca6983a 	sll	r19,r19,r18
  28aafc:	88e8d83a 	srl	r20,r17,r3
  28ab00:	80c4d83a 	srl	r2,r16,r3
  28ab04:	982cd43a 	srli	r22,r19,16
  28ab08:	8ca2983a 	sll	r17,r17,r18
  28ab0c:	a009883a 	mov	r4,r20
  28ab10:	b00b883a 	mov	r5,r22
  28ab14:	1478b03a 	or	fp,r2,r17
  28ab18:	0280ab80 	call	280ab8 <__umodsi3>
  28ab1c:	a009883a 	mov	r4,r20
  28ab20:	b00b883a 	mov	r5,r22
  28ab24:	1023883a 	mov	r17,r2
  28ab28:	0280a540 	call	280a54 <__udivsi3>
  28ab2c:	9d7fffcc 	andi	r21,r19,65535
  28ab30:	880a943a 	slli	r5,r17,16
  28ab34:	e008d43a 	srli	r4,fp,16
  28ab38:	a885383a 	mul	r2,r21,r2
  28ab3c:	84a8983a 	sll	r20,r16,r18
  28ab40:	2148b03a 	or	r4,r4,r5
  28ab44:	2080042e 	bgeu	r4,r2,28ab58 <__umoddi3+0x47c>
  28ab48:	24c9883a 	add	r4,r4,r19
  28ab4c:	24c00236 	bltu	r4,r19,28ab58 <__umoddi3+0x47c>
  28ab50:	2080012e 	bgeu	r4,r2,28ab58 <__umoddi3+0x47c>
  28ab54:	24c9883a 	add	r4,r4,r19
  28ab58:	20a3c83a 	sub	r17,r4,r2
  28ab5c:	b00b883a 	mov	r5,r22
  28ab60:	8809883a 	mov	r4,r17
  28ab64:	0280ab80 	call	280ab8 <__umodsi3>
  28ab68:	102f883a 	mov	r23,r2
  28ab6c:	8809883a 	mov	r4,r17
  28ab70:	b00b883a 	mov	r5,r22
  28ab74:	0280a540 	call	280a54 <__udivsi3>
  28ab78:	b82e943a 	slli	r23,r23,16
  28ab7c:	a885383a 	mul	r2,r21,r2
  28ab80:	e13fffcc 	andi	r4,fp,65535
  28ab84:	25c8b03a 	or	r4,r4,r23
  28ab88:	2080042e 	bgeu	r4,r2,28ab9c <__umoddi3+0x4c0>
  28ab8c:	24c9883a 	add	r4,r4,r19
  28ab90:	24c00236 	bltu	r4,r19,28ab9c <__umoddi3+0x4c0>
  28ab94:	2080012e 	bgeu	r4,r2,28ab9c <__umoddi3+0x4c0>
  28ab98:	24c9883a 	add	r4,r4,r19
  28ab9c:	20a3c83a 	sub	r17,r4,r2
  28aba0:	003f4806 	br	28a8c4 <__umoddi3+0x1e8>
  28aba4:	2c8fc83a 	sub	r7,r5,r18
  28aba8:	1545c83a 	sub	r2,r2,r21
  28abac:	29cb803a 	cmpltu	r5,r5,r7
  28abb0:	1145c83a 	sub	r2,r2,r5
  28abb4:	4089c83a 	sub	r4,r8,r2
  28abb8:	003fc706 	br	28aad8 <__umoddi3+0x3fc>
  28abbc:	01000604 	movi	r4,24
  28abc0:	003f1806 	br	28a824 <__umoddi3+0x148>
  28abc4:	00800604 	movi	r2,24
  28abc8:	003f3206 	br	28a894 <__umoddi3+0x1b8>
  28abcc:	01000604 	movi	r4,24
  28abd0:	003ed906 	br	28a738 <__umoddi3+0x5c>
  28abd4:	413fa52e 	bgeu	r8,r4,28aa6c <__umoddi3+0x390>
  28abd8:	297fff84 	addi	r5,r5,-2
  28abdc:	4551883a 	add	r8,r8,r21
  28abe0:	003fa306 	br	28aa70 <__umoddi3+0x394>
  28abe4:	15ff8b2e 	bgeu	r2,r23,28aa14 <__umoddi3+0x338>
  28abe8:	31bfff84 	addi	r6,r6,-2
  28abec:	1545883a 	add	r2,r2,r21
  28abf0:	003f8906 	br	28aa18 <__umoddi3+0x33c>
  28abf4:	24c9883a 	add	r4,r4,r19
  28abf8:	003eee06 	br	28a7b4 <__umoddi3+0xd8>
  28abfc:	8005883a 	mov	r2,r16
  28ac00:	003f1706 	br	28a860 <__umoddi3+0x184>
  28ac04:	817fe736 	bltu	r16,r5,28aba4 <__umoddi3+0x4c8>
  28ac08:	280f883a 	mov	r7,r5
  28ac0c:	0009883a 	mov	r4,zero
  28ac10:	003fb106 	br	28aad8 <__umoddi3+0x3fc>

0028ac14 <__adddf3>:
  28ac14:	02c00434 	movhi	r11,16
  28ac18:	5affffc4 	addi	r11,r11,-1
  28ac1c:	2806d7fa 	srli	r3,r5,31
  28ac20:	2ad4703a 	and	r10,r5,r11
  28ac24:	3ad2703a 	and	r9,r7,r11
  28ac28:	3804d53a 	srli	r2,r7,20
  28ac2c:	3018d77a 	srli	r12,r6,29
  28ac30:	280ad53a 	srli	r5,r5,20
  28ac34:	501490fa 	slli	r10,r10,3
  28ac38:	2010d77a 	srli	r8,r4,29
  28ac3c:	481290fa 	slli	r9,r9,3
  28ac40:	380ed7fa 	srli	r7,r7,31
  28ac44:	defffb04 	addi	sp,sp,-20
  28ac48:	dc800215 	stw	r18,8(sp)
  28ac4c:	dc400115 	stw	r17,4(sp)
  28ac50:	dc000015 	stw	r16,0(sp)
  28ac54:	dfc00415 	stw	ra,16(sp)
  28ac58:	dcc00315 	stw	r19,12(sp)
  28ac5c:	1c803fcc 	andi	r18,r3,255
  28ac60:	2c01ffcc 	andi	r16,r5,2047
  28ac64:	5210b03a 	or	r8,r10,r8
  28ac68:	202290fa 	slli	r17,r4,3
  28ac6c:	1081ffcc 	andi	r2,r2,2047
  28ac70:	4b12b03a 	or	r9,r9,r12
  28ac74:	300c90fa 	slli	r6,r6,3
  28ac78:	91c07526 	beq	r18,r7,28ae50 <__adddf3+0x23c>
  28ac7c:	8087c83a 	sub	r3,r16,r2
  28ac80:	00c0ab0e 	bge	zero,r3,28af30 <__adddf3+0x31c>
  28ac84:	10002a1e 	bne	r2,zero,28ad30 <__adddf3+0x11c>
  28ac88:	4984b03a 	or	r2,r9,r6
  28ac8c:	1000961e 	bne	r2,zero,28aee8 <__adddf3+0x2d4>
  28ac90:	888001cc 	andi	r2,r17,7
  28ac94:	10000726 	beq	r2,zero,28acb4 <__adddf3+0xa0>
  28ac98:	888003cc 	andi	r2,r17,15
  28ac9c:	00c00104 	movi	r3,4
  28aca0:	10c00426 	beq	r2,r3,28acb4 <__adddf3+0xa0>
  28aca4:	88c7883a 	add	r3,r17,r3
  28aca8:	1c63803a 	cmpltu	r17,r3,r17
  28acac:	4451883a 	add	r8,r8,r17
  28acb0:	1823883a 	mov	r17,r3
  28acb4:	4080202c 	andhi	r2,r8,128
  28acb8:	10005926 	beq	r2,zero,28ae20 <__adddf3+0x20c>
  28acbc:	84000044 	addi	r16,r16,1
  28acc0:	0081ffc4 	movi	r2,2047
  28acc4:	8080ba26 	beq	r16,r2,28afb0 <__adddf3+0x39c>
  28acc8:	00bfe034 	movhi	r2,65408
  28accc:	10bfffc4 	addi	r2,r2,-1
  28acd0:	4090703a 	and	r8,r8,r2
  28acd4:	4004977a 	slli	r2,r8,29
  28acd8:	4010927a 	slli	r8,r8,9
  28acdc:	8822d0fa 	srli	r17,r17,3
  28ace0:	8401ffcc 	andi	r16,r16,2047
  28ace4:	4010d33a 	srli	r8,r8,12
  28ace8:	9007883a 	mov	r3,r18
  28acec:	1444b03a 	or	r2,r2,r17
  28acf0:	8401ffcc 	andi	r16,r16,2047
  28acf4:	8020953a 	slli	r16,r16,20
  28acf8:	18c03fcc 	andi	r3,r3,255
  28acfc:	01000434 	movhi	r4,16
  28ad00:	213fffc4 	addi	r4,r4,-1
  28ad04:	180697fa 	slli	r3,r3,31
  28ad08:	4110703a 	and	r8,r8,r4
  28ad0c:	4410b03a 	or	r8,r8,r16
  28ad10:	40c6b03a 	or	r3,r8,r3
  28ad14:	dfc00417 	ldw	ra,16(sp)
  28ad18:	dcc00317 	ldw	r19,12(sp)
  28ad1c:	dc800217 	ldw	r18,8(sp)
  28ad20:	dc400117 	ldw	r17,4(sp)
  28ad24:	dc000017 	ldw	r16,0(sp)
  28ad28:	dec00504 	addi	sp,sp,20
  28ad2c:	f800283a 	ret
  28ad30:	0081ffc4 	movi	r2,2047
  28ad34:	80bfd626 	beq	r16,r2,28ac90 <__adddf3+0x7c>
  28ad38:	4a402034 	orhi	r9,r9,128
  28ad3c:	00800e04 	movi	r2,56
  28ad40:	10c09f16 	blt	r2,r3,28afc0 <__adddf3+0x3ac>
  28ad44:	008007c4 	movi	r2,31
  28ad48:	10c0c216 	blt	r2,r3,28b054 <__adddf3+0x440>
  28ad4c:	00800804 	movi	r2,32
  28ad50:	10c5c83a 	sub	r2,r2,r3
  28ad54:	488a983a 	sll	r5,r9,r2
  28ad58:	30c8d83a 	srl	r4,r6,r3
  28ad5c:	3084983a 	sll	r2,r6,r2
  28ad60:	48c6d83a 	srl	r3,r9,r3
  28ad64:	290cb03a 	or	r6,r5,r4
  28ad68:	1004c03a 	cmpne	r2,r2,zero
  28ad6c:	308cb03a 	or	r6,r6,r2
  28ad70:	898dc83a 	sub	r6,r17,r6
  28ad74:	89a3803a 	cmpltu	r17,r17,r6
  28ad78:	40d1c83a 	sub	r8,r8,r3
  28ad7c:	4451c83a 	sub	r8,r8,r17
  28ad80:	3023883a 	mov	r17,r6
  28ad84:	4080202c 	andhi	r2,r8,128
  28ad88:	10002326 	beq	r2,zero,28ae18 <__adddf3+0x204>
  28ad8c:	04c02034 	movhi	r19,128
  28ad90:	9cffffc4 	addi	r19,r19,-1
  28ad94:	44e6703a 	and	r19,r8,r19
  28ad98:	98007626 	beq	r19,zero,28af74 <__adddf3+0x360>
  28ad9c:	9809883a 	mov	r4,r19
  28ada0:	028d2180 	call	28d218 <__clzsi2>
  28ada4:	10fffe04 	addi	r3,r2,-8
  28ada8:	010007c4 	movi	r4,31
  28adac:	20c07716 	blt	r4,r3,28af8c <__adddf3+0x378>
  28adb0:	00800804 	movi	r2,32
  28adb4:	10c5c83a 	sub	r2,r2,r3
  28adb8:	8884d83a 	srl	r2,r17,r2
  28adbc:	98d0983a 	sll	r8,r19,r3
  28adc0:	88e2983a 	sll	r17,r17,r3
  28adc4:	1204b03a 	or	r2,r2,r8
  28adc8:	1c007416 	blt	r3,r16,28af9c <__adddf3+0x388>
  28adcc:	1c21c83a 	sub	r16,r3,r16
  28add0:	82000044 	addi	r8,r16,1
  28add4:	00c007c4 	movi	r3,31
  28add8:	1a009116 	blt	r3,r8,28b020 <__adddf3+0x40c>
  28addc:	00c00804 	movi	r3,32
  28ade0:	1a07c83a 	sub	r3,r3,r8
  28ade4:	8a08d83a 	srl	r4,r17,r8
  28ade8:	88e2983a 	sll	r17,r17,r3
  28adec:	10c6983a 	sll	r3,r2,r3
  28adf0:	1210d83a 	srl	r8,r2,r8
  28adf4:	8804c03a 	cmpne	r2,r17,zero
  28adf8:	1906b03a 	or	r3,r3,r4
  28adfc:	18a2b03a 	or	r17,r3,r2
  28ae00:	0021883a 	mov	r16,zero
  28ae04:	003fa206 	br	28ac90 <__adddf3+0x7c>
  28ae08:	1890b03a 	or	r8,r3,r2
  28ae0c:	40017d26 	beq	r8,zero,28b404 <__adddf3+0x7f0>
  28ae10:	1011883a 	mov	r8,r2
  28ae14:	1823883a 	mov	r17,r3
  28ae18:	888001cc 	andi	r2,r17,7
  28ae1c:	103f9e1e 	bne	r2,zero,28ac98 <__adddf3+0x84>
  28ae20:	4004977a 	slli	r2,r8,29
  28ae24:	8822d0fa 	srli	r17,r17,3
  28ae28:	4010d0fa 	srli	r8,r8,3
  28ae2c:	9007883a 	mov	r3,r18
  28ae30:	1444b03a 	or	r2,r2,r17
  28ae34:	0101ffc4 	movi	r4,2047
  28ae38:	81002426 	beq	r16,r4,28aecc <__adddf3+0x2b8>
  28ae3c:	8120703a 	and	r16,r16,r4
  28ae40:	01000434 	movhi	r4,16
  28ae44:	213fffc4 	addi	r4,r4,-1
  28ae48:	4110703a 	and	r8,r8,r4
  28ae4c:	003fa806 	br	28acf0 <__adddf3+0xdc>
  28ae50:	8089c83a 	sub	r4,r16,r2
  28ae54:	01005e0e 	bge	zero,r4,28afd0 <__adddf3+0x3bc>
  28ae58:	10002b26 	beq	r2,zero,28af08 <__adddf3+0x2f4>
  28ae5c:	0081ffc4 	movi	r2,2047
  28ae60:	80bf8b26 	beq	r16,r2,28ac90 <__adddf3+0x7c>
  28ae64:	4a402034 	orhi	r9,r9,128
  28ae68:	00800e04 	movi	r2,56
  28ae6c:	1100a40e 	bge	r2,r4,28b100 <__adddf3+0x4ec>
  28ae70:	498cb03a 	or	r6,r9,r6
  28ae74:	300ac03a 	cmpne	r5,r6,zero
  28ae78:	0013883a 	mov	r9,zero
  28ae7c:	2c4b883a 	add	r5,r5,r17
  28ae80:	2c63803a 	cmpltu	r17,r5,r17
  28ae84:	4a11883a 	add	r8,r9,r8
  28ae88:	8a11883a 	add	r8,r17,r8
  28ae8c:	2823883a 	mov	r17,r5
  28ae90:	4080202c 	andhi	r2,r8,128
  28ae94:	103fe026 	beq	r2,zero,28ae18 <__adddf3+0x204>
  28ae98:	84000044 	addi	r16,r16,1
  28ae9c:	0081ffc4 	movi	r2,2047
  28aea0:	8080d226 	beq	r16,r2,28b1ec <__adddf3+0x5d8>
  28aea4:	00bfe034 	movhi	r2,65408
  28aea8:	10bfffc4 	addi	r2,r2,-1
  28aeac:	4090703a 	and	r8,r8,r2
  28aeb0:	880ad07a 	srli	r5,r17,1
  28aeb4:	400897fa 	slli	r4,r8,31
  28aeb8:	88c0004c 	andi	r3,r17,1
  28aebc:	28e2b03a 	or	r17,r5,r3
  28aec0:	4010d07a 	srli	r8,r8,1
  28aec4:	2462b03a 	or	r17,r4,r17
  28aec8:	003f7106 	br	28ac90 <__adddf3+0x7c>
  28aecc:	4088b03a 	or	r4,r8,r2
  28aed0:	20014526 	beq	r4,zero,28b3e8 <__adddf3+0x7d4>
  28aed4:	01000434 	movhi	r4,16
  28aed8:	42000234 	orhi	r8,r8,8
  28aedc:	213fffc4 	addi	r4,r4,-1
  28aee0:	4110703a 	and	r8,r8,r4
  28aee4:	003f8206 	br	28acf0 <__adddf3+0xdc>
  28aee8:	18ffffc4 	addi	r3,r3,-1
  28aeec:	1800491e 	bne	r3,zero,28b014 <__adddf3+0x400>
  28aef0:	898bc83a 	sub	r5,r17,r6
  28aef4:	8963803a 	cmpltu	r17,r17,r5
  28aef8:	4251c83a 	sub	r8,r8,r9
  28aefc:	4451c83a 	sub	r8,r8,r17
  28af00:	2823883a 	mov	r17,r5
  28af04:	003f9f06 	br	28ad84 <__adddf3+0x170>
  28af08:	4984b03a 	or	r2,r9,r6
  28af0c:	103f6026 	beq	r2,zero,28ac90 <__adddf3+0x7c>
  28af10:	213fffc4 	addi	r4,r4,-1
  28af14:	2000931e 	bne	r4,zero,28b164 <__adddf3+0x550>
  28af18:	898d883a 	add	r6,r17,r6
  28af1c:	3463803a 	cmpltu	r17,r6,r17
  28af20:	4251883a 	add	r8,r8,r9
  28af24:	8a11883a 	add	r8,r17,r8
  28af28:	3023883a 	mov	r17,r6
  28af2c:	003fd806 	br	28ae90 <__adddf3+0x27c>
  28af30:	1800541e 	bne	r3,zero,28b084 <__adddf3+0x470>
  28af34:	80800044 	addi	r2,r16,1
  28af38:	1081ffcc 	andi	r2,r2,2047
  28af3c:	00c00044 	movi	r3,1
  28af40:	1880a00e 	bge	r3,r2,28b1c4 <__adddf3+0x5b0>
  28af44:	8989c83a 	sub	r4,r17,r6
  28af48:	8905803a 	cmpltu	r2,r17,r4
  28af4c:	4267c83a 	sub	r19,r8,r9
  28af50:	98a7c83a 	sub	r19,r19,r2
  28af54:	9880202c 	andhi	r2,r19,128
  28af58:	10006326 	beq	r2,zero,28b0e8 <__adddf3+0x4d4>
  28af5c:	3463c83a 	sub	r17,r6,r17
  28af60:	4a07c83a 	sub	r3,r9,r8
  28af64:	344d803a 	cmpltu	r6,r6,r17
  28af68:	19a7c83a 	sub	r19,r3,r6
  28af6c:	3825883a 	mov	r18,r7
  28af70:	983f8a1e 	bne	r19,zero,28ad9c <__adddf3+0x188>
  28af74:	8809883a 	mov	r4,r17
  28af78:	028d2180 	call	28d218 <__clzsi2>
  28af7c:	10800804 	addi	r2,r2,32
  28af80:	10fffe04 	addi	r3,r2,-8
  28af84:	010007c4 	movi	r4,31
  28af88:	20ff890e 	bge	r4,r3,28adb0 <__adddf3+0x19c>
  28af8c:	10bff604 	addi	r2,r2,-40
  28af90:	8884983a 	sll	r2,r17,r2
  28af94:	0023883a 	mov	r17,zero
  28af98:	1c3f8c0e 	bge	r3,r16,28adcc <__adddf3+0x1b8>
  28af9c:	023fe034 	movhi	r8,65408
  28afa0:	423fffc4 	addi	r8,r8,-1
  28afa4:	80e1c83a 	sub	r16,r16,r3
  28afa8:	1210703a 	and	r8,r2,r8
  28afac:	003f3806 	br	28ac90 <__adddf3+0x7c>
  28afb0:	9007883a 	mov	r3,r18
  28afb4:	0011883a 	mov	r8,zero
  28afb8:	0005883a 	mov	r2,zero
  28afbc:	003f4c06 	br	28acf0 <__adddf3+0xdc>
  28afc0:	498cb03a 	or	r6,r9,r6
  28afc4:	300cc03a 	cmpne	r6,r6,zero
  28afc8:	0007883a 	mov	r3,zero
  28afcc:	003f6806 	br	28ad70 <__adddf3+0x15c>
  28afd0:	20009c1e 	bne	r4,zero,28b244 <__adddf3+0x630>
  28afd4:	80800044 	addi	r2,r16,1
  28afd8:	1141ffcc 	andi	r5,r2,2047
  28afdc:	01000044 	movi	r4,1
  28afe0:	2140670e 	bge	r4,r5,28b180 <__adddf3+0x56c>
  28afe4:	0101ffc4 	movi	r4,2047
  28afe8:	11007f26 	beq	r2,r4,28b1e8 <__adddf3+0x5d4>
  28afec:	898d883a 	add	r6,r17,r6
  28aff0:	4247883a 	add	r3,r8,r9
  28aff4:	3451803a 	cmpltu	r8,r6,r17
  28aff8:	40d1883a 	add	r8,r8,r3
  28affc:	402297fa 	slli	r17,r8,31
  28b000:	300cd07a 	srli	r6,r6,1
  28b004:	4010d07a 	srli	r8,r8,1
  28b008:	1021883a 	mov	r16,r2
  28b00c:	89a2b03a 	or	r17,r17,r6
  28b010:	003f1f06 	br	28ac90 <__adddf3+0x7c>
  28b014:	0081ffc4 	movi	r2,2047
  28b018:	80bf481e 	bne	r16,r2,28ad3c <__adddf3+0x128>
  28b01c:	003f1c06 	br	28ac90 <__adddf3+0x7c>
  28b020:	843ff844 	addi	r16,r16,-31
  28b024:	01000804 	movi	r4,32
  28b028:	1406d83a 	srl	r3,r2,r16
  28b02c:	41005026 	beq	r8,r4,28b170 <__adddf3+0x55c>
  28b030:	01001004 	movi	r4,64
  28b034:	2211c83a 	sub	r8,r4,r8
  28b038:	1204983a 	sll	r2,r2,r8
  28b03c:	88a2b03a 	or	r17,r17,r2
  28b040:	8822c03a 	cmpne	r17,r17,zero
  28b044:	1c62b03a 	or	r17,r3,r17
  28b048:	0011883a 	mov	r8,zero
  28b04c:	0021883a 	mov	r16,zero
  28b050:	003f7106 	br	28ae18 <__adddf3+0x204>
  28b054:	193ff804 	addi	r4,r3,-32
  28b058:	00800804 	movi	r2,32
  28b05c:	4908d83a 	srl	r4,r9,r4
  28b060:	18804526 	beq	r3,r2,28b178 <__adddf3+0x564>
  28b064:	00801004 	movi	r2,64
  28b068:	10c5c83a 	sub	r2,r2,r3
  28b06c:	4886983a 	sll	r3,r9,r2
  28b070:	198cb03a 	or	r6,r3,r6
  28b074:	300cc03a 	cmpne	r6,r6,zero
  28b078:	218cb03a 	or	r6,r4,r6
  28b07c:	0007883a 	mov	r3,zero
  28b080:	003f3b06 	br	28ad70 <__adddf3+0x15c>
  28b084:	80002a26 	beq	r16,zero,28b130 <__adddf3+0x51c>
  28b088:	0101ffc4 	movi	r4,2047
  28b08c:	11006826 	beq	r2,r4,28b230 <__adddf3+0x61c>
  28b090:	00c7c83a 	sub	r3,zero,r3
  28b094:	42002034 	orhi	r8,r8,128
  28b098:	01000e04 	movi	r4,56
  28b09c:	20c07c16 	blt	r4,r3,28b290 <__adddf3+0x67c>
  28b0a0:	010007c4 	movi	r4,31
  28b0a4:	20c0da16 	blt	r4,r3,28b410 <__adddf3+0x7fc>
  28b0a8:	01000804 	movi	r4,32
  28b0ac:	20c9c83a 	sub	r4,r4,r3
  28b0b0:	4114983a 	sll	r10,r8,r4
  28b0b4:	88cad83a 	srl	r5,r17,r3
  28b0b8:	8908983a 	sll	r4,r17,r4
  28b0bc:	40c6d83a 	srl	r3,r8,r3
  28b0c0:	5162b03a 	or	r17,r10,r5
  28b0c4:	2008c03a 	cmpne	r4,r4,zero
  28b0c8:	8922b03a 	or	r17,r17,r4
  28b0cc:	3463c83a 	sub	r17,r6,r17
  28b0d0:	48c7c83a 	sub	r3,r9,r3
  28b0d4:	344d803a 	cmpltu	r6,r6,r17
  28b0d8:	1991c83a 	sub	r8,r3,r6
  28b0dc:	1021883a 	mov	r16,r2
  28b0e0:	3825883a 	mov	r18,r7
  28b0e4:	003f2706 	br	28ad84 <__adddf3+0x170>
  28b0e8:	24d0b03a 	or	r8,r4,r19
  28b0ec:	40001b1e 	bne	r8,zero,28b15c <__adddf3+0x548>
  28b0f0:	0005883a 	mov	r2,zero
  28b0f4:	0007883a 	mov	r3,zero
  28b0f8:	0021883a 	mov	r16,zero
  28b0fc:	003f4d06 	br	28ae34 <__adddf3+0x220>
  28b100:	008007c4 	movi	r2,31
  28b104:	11003c16 	blt	r2,r4,28b1f8 <__adddf3+0x5e4>
  28b108:	00800804 	movi	r2,32
  28b10c:	1105c83a 	sub	r2,r2,r4
  28b110:	488e983a 	sll	r7,r9,r2
  28b114:	310ad83a 	srl	r5,r6,r4
  28b118:	3084983a 	sll	r2,r6,r2
  28b11c:	4912d83a 	srl	r9,r9,r4
  28b120:	394ab03a 	or	r5,r7,r5
  28b124:	1004c03a 	cmpne	r2,r2,zero
  28b128:	288ab03a 	or	r5,r5,r2
  28b12c:	003f5306 	br	28ae7c <__adddf3+0x268>
  28b130:	4448b03a 	or	r4,r8,r17
  28b134:	20003e26 	beq	r4,zero,28b230 <__adddf3+0x61c>
  28b138:	00c6303a 	nor	r3,zero,r3
  28b13c:	18003a1e 	bne	r3,zero,28b228 <__adddf3+0x614>
  28b140:	3463c83a 	sub	r17,r6,r17
  28b144:	4a07c83a 	sub	r3,r9,r8
  28b148:	344d803a 	cmpltu	r6,r6,r17
  28b14c:	1991c83a 	sub	r8,r3,r6
  28b150:	1021883a 	mov	r16,r2
  28b154:	3825883a 	mov	r18,r7
  28b158:	003f0a06 	br	28ad84 <__adddf3+0x170>
  28b15c:	2023883a 	mov	r17,r4
  28b160:	003f0d06 	br	28ad98 <__adddf3+0x184>
  28b164:	0081ffc4 	movi	r2,2047
  28b168:	80bf3f1e 	bne	r16,r2,28ae68 <__adddf3+0x254>
  28b16c:	003ec806 	br	28ac90 <__adddf3+0x7c>
  28b170:	0005883a 	mov	r2,zero
  28b174:	003fb106 	br	28b03c <__adddf3+0x428>
  28b178:	0007883a 	mov	r3,zero
  28b17c:	003fbc06 	br	28b070 <__adddf3+0x45c>
  28b180:	4444b03a 	or	r2,r8,r17
  28b184:	8000871e 	bne	r16,zero,28b3a4 <__adddf3+0x790>
  28b188:	1000ba26 	beq	r2,zero,28b474 <__adddf3+0x860>
  28b18c:	4984b03a 	or	r2,r9,r6
  28b190:	103ebf26 	beq	r2,zero,28ac90 <__adddf3+0x7c>
  28b194:	8985883a 	add	r2,r17,r6
  28b198:	4247883a 	add	r3,r8,r9
  28b19c:	1451803a 	cmpltu	r8,r2,r17
  28b1a0:	40d1883a 	add	r8,r8,r3
  28b1a4:	40c0202c 	andhi	r3,r8,128
  28b1a8:	1023883a 	mov	r17,r2
  28b1ac:	183f1a26 	beq	r3,zero,28ae18 <__adddf3+0x204>
  28b1b0:	00bfe034 	movhi	r2,65408
  28b1b4:	10bfffc4 	addi	r2,r2,-1
  28b1b8:	2021883a 	mov	r16,r4
  28b1bc:	4090703a 	and	r8,r8,r2
  28b1c0:	003eb306 	br	28ac90 <__adddf3+0x7c>
  28b1c4:	4444b03a 	or	r2,r8,r17
  28b1c8:	8000291e 	bne	r16,zero,28b270 <__adddf3+0x65c>
  28b1cc:	10004b1e 	bne	r2,zero,28b2fc <__adddf3+0x6e8>
  28b1d0:	4990b03a 	or	r8,r9,r6
  28b1d4:	40008b26 	beq	r8,zero,28b404 <__adddf3+0x7f0>
  28b1d8:	4811883a 	mov	r8,r9
  28b1dc:	3023883a 	mov	r17,r6
  28b1e0:	3825883a 	mov	r18,r7
  28b1e4:	003eaa06 	br	28ac90 <__adddf3+0x7c>
  28b1e8:	1021883a 	mov	r16,r2
  28b1ec:	0011883a 	mov	r8,zero
  28b1f0:	0005883a 	mov	r2,zero
  28b1f4:	003f0f06 	br	28ae34 <__adddf3+0x220>
  28b1f8:	217ff804 	addi	r5,r4,-32
  28b1fc:	00800804 	movi	r2,32
  28b200:	494ad83a 	srl	r5,r9,r5
  28b204:	20807d26 	beq	r4,r2,28b3fc <__adddf3+0x7e8>
  28b208:	00801004 	movi	r2,64
  28b20c:	1109c83a 	sub	r4,r2,r4
  28b210:	4912983a 	sll	r9,r9,r4
  28b214:	498cb03a 	or	r6,r9,r6
  28b218:	300cc03a 	cmpne	r6,r6,zero
  28b21c:	298ab03a 	or	r5,r5,r6
  28b220:	0013883a 	mov	r9,zero
  28b224:	003f1506 	br	28ae7c <__adddf3+0x268>
  28b228:	0101ffc4 	movi	r4,2047
  28b22c:	113f9a1e 	bne	r2,r4,28b098 <__adddf3+0x484>
  28b230:	4811883a 	mov	r8,r9
  28b234:	3023883a 	mov	r17,r6
  28b238:	1021883a 	mov	r16,r2
  28b23c:	3825883a 	mov	r18,r7
  28b240:	003e9306 	br	28ac90 <__adddf3+0x7c>
  28b244:	8000161e 	bne	r16,zero,28b2a0 <__adddf3+0x68c>
  28b248:	444ab03a 	or	r5,r8,r17
  28b24c:	28005126 	beq	r5,zero,28b394 <__adddf3+0x780>
  28b250:	0108303a 	nor	r4,zero,r4
  28b254:	20004d1e 	bne	r4,zero,28b38c <__adddf3+0x778>
  28b258:	89a3883a 	add	r17,r17,r6
  28b25c:	4253883a 	add	r9,r8,r9
  28b260:	898d803a 	cmpltu	r6,r17,r6
  28b264:	3251883a 	add	r8,r6,r9
  28b268:	1021883a 	mov	r16,r2
  28b26c:	003f0806 	br	28ae90 <__adddf3+0x27c>
  28b270:	1000301e 	bne	r2,zero,28b334 <__adddf3+0x720>
  28b274:	4984b03a 	or	r2,r9,r6
  28b278:	10007126 	beq	r2,zero,28b440 <__adddf3+0x82c>
  28b27c:	4811883a 	mov	r8,r9
  28b280:	3023883a 	mov	r17,r6
  28b284:	3825883a 	mov	r18,r7
  28b288:	0401ffc4 	movi	r16,2047
  28b28c:	003e8006 	br	28ac90 <__adddf3+0x7c>
  28b290:	4462b03a 	or	r17,r8,r17
  28b294:	8822c03a 	cmpne	r17,r17,zero
  28b298:	0007883a 	mov	r3,zero
  28b29c:	003f8b06 	br	28b0cc <__adddf3+0x4b8>
  28b2a0:	0141ffc4 	movi	r5,2047
  28b2a4:	11403b26 	beq	r2,r5,28b394 <__adddf3+0x780>
  28b2a8:	0109c83a 	sub	r4,zero,r4
  28b2ac:	42002034 	orhi	r8,r8,128
  28b2b0:	01400e04 	movi	r5,56
  28b2b4:	29006716 	blt	r5,r4,28b454 <__adddf3+0x840>
  28b2b8:	014007c4 	movi	r5,31
  28b2bc:	29007016 	blt	r5,r4,28b480 <__adddf3+0x86c>
  28b2c0:	01400804 	movi	r5,32
  28b2c4:	290bc83a 	sub	r5,r5,r4
  28b2c8:	4154983a 	sll	r10,r8,r5
  28b2cc:	890ed83a 	srl	r7,r17,r4
  28b2d0:	894a983a 	sll	r5,r17,r5
  28b2d4:	4108d83a 	srl	r4,r8,r4
  28b2d8:	51e2b03a 	or	r17,r10,r7
  28b2dc:	280ac03a 	cmpne	r5,r5,zero
  28b2e0:	8962b03a 	or	r17,r17,r5
  28b2e4:	89a3883a 	add	r17,r17,r6
  28b2e8:	2253883a 	add	r9,r4,r9
  28b2ec:	898d803a 	cmpltu	r6,r17,r6
  28b2f0:	3251883a 	add	r8,r6,r9
  28b2f4:	1021883a 	mov	r16,r2
  28b2f8:	003ee506 	br	28ae90 <__adddf3+0x27c>
  28b2fc:	4984b03a 	or	r2,r9,r6
  28b300:	103e6326 	beq	r2,zero,28ac90 <__adddf3+0x7c>
  28b304:	8987c83a 	sub	r3,r17,r6
  28b308:	88c9803a 	cmpltu	r4,r17,r3
  28b30c:	4245c83a 	sub	r2,r8,r9
  28b310:	1105c83a 	sub	r2,r2,r4
  28b314:	1100202c 	andhi	r4,r2,128
  28b318:	203ebb26 	beq	r4,zero,28ae08 <__adddf3+0x1f4>
  28b31c:	3463c83a 	sub	r17,r6,r17
  28b320:	4a07c83a 	sub	r3,r9,r8
  28b324:	344d803a 	cmpltu	r6,r6,r17
  28b328:	1991c83a 	sub	r8,r3,r6
  28b32c:	3825883a 	mov	r18,r7
  28b330:	003e5706 	br	28ac90 <__adddf3+0x7c>
  28b334:	4984b03a 	or	r2,r9,r6
  28b338:	10002e26 	beq	r2,zero,28b3f4 <__adddf3+0x7e0>
  28b33c:	4004d0fa 	srli	r2,r8,3
  28b340:	8822d0fa 	srli	r17,r17,3
  28b344:	4010977a 	slli	r8,r8,29
  28b348:	10c0022c 	andhi	r3,r2,8
  28b34c:	4462b03a 	or	r17,r8,r17
  28b350:	18000826 	beq	r3,zero,28b374 <__adddf3+0x760>
  28b354:	4808d0fa 	srli	r4,r9,3
  28b358:	20c0022c 	andhi	r3,r4,8
  28b35c:	1800051e 	bne	r3,zero,28b374 <__adddf3+0x760>
  28b360:	300cd0fa 	srli	r6,r6,3
  28b364:	4806977a 	slli	r3,r9,29
  28b368:	2005883a 	mov	r2,r4
  28b36c:	3825883a 	mov	r18,r7
  28b370:	19a2b03a 	or	r17,r3,r6
  28b374:	8810d77a 	srli	r8,r17,29
  28b378:	100490fa 	slli	r2,r2,3
  28b37c:	882290fa 	slli	r17,r17,3
  28b380:	0401ffc4 	movi	r16,2047
  28b384:	4090b03a 	or	r8,r8,r2
  28b388:	003e4106 	br	28ac90 <__adddf3+0x7c>
  28b38c:	0141ffc4 	movi	r5,2047
  28b390:	117fc71e 	bne	r2,r5,28b2b0 <__adddf3+0x69c>
  28b394:	4811883a 	mov	r8,r9
  28b398:	3023883a 	mov	r17,r6
  28b39c:	1021883a 	mov	r16,r2
  28b3a0:	003e3b06 	br	28ac90 <__adddf3+0x7c>
  28b3a4:	10002f26 	beq	r2,zero,28b464 <__adddf3+0x850>
  28b3a8:	4984b03a 	or	r2,r9,r6
  28b3ac:	10001126 	beq	r2,zero,28b3f4 <__adddf3+0x7e0>
  28b3b0:	4004d0fa 	srli	r2,r8,3
  28b3b4:	8822d0fa 	srli	r17,r17,3
  28b3b8:	4010977a 	slli	r8,r8,29
  28b3bc:	10c0022c 	andhi	r3,r2,8
  28b3c0:	4462b03a 	or	r17,r8,r17
  28b3c4:	183feb26 	beq	r3,zero,28b374 <__adddf3+0x760>
  28b3c8:	4808d0fa 	srli	r4,r9,3
  28b3cc:	20c0022c 	andhi	r3,r4,8
  28b3d0:	183fe81e 	bne	r3,zero,28b374 <__adddf3+0x760>
  28b3d4:	300cd0fa 	srli	r6,r6,3
  28b3d8:	4806977a 	slli	r3,r9,29
  28b3dc:	2005883a 	mov	r2,r4
  28b3e0:	19a2b03a 	or	r17,r3,r6
  28b3e4:	003fe306 	br	28b374 <__adddf3+0x760>
  28b3e8:	0011883a 	mov	r8,zero
  28b3ec:	0005883a 	mov	r2,zero
  28b3f0:	003e3f06 	br	28acf0 <__adddf3+0xdc>
  28b3f4:	0401ffc4 	movi	r16,2047
  28b3f8:	003e2506 	br	28ac90 <__adddf3+0x7c>
  28b3fc:	0013883a 	mov	r9,zero
  28b400:	003f8406 	br	28b214 <__adddf3+0x600>
  28b404:	0005883a 	mov	r2,zero
  28b408:	0007883a 	mov	r3,zero
  28b40c:	003e8906 	br	28ae34 <__adddf3+0x220>
  28b410:	197ff804 	addi	r5,r3,-32
  28b414:	01000804 	movi	r4,32
  28b418:	414ad83a 	srl	r5,r8,r5
  28b41c:	19002426 	beq	r3,r4,28b4b0 <__adddf3+0x89c>
  28b420:	01001004 	movi	r4,64
  28b424:	20c7c83a 	sub	r3,r4,r3
  28b428:	40c6983a 	sll	r3,r8,r3
  28b42c:	1c46b03a 	or	r3,r3,r17
  28b430:	1806c03a 	cmpne	r3,r3,zero
  28b434:	28e2b03a 	or	r17,r5,r3
  28b438:	0007883a 	mov	r3,zero
  28b43c:	003f2306 	br	28b0cc <__adddf3+0x4b8>
  28b440:	0007883a 	mov	r3,zero
  28b444:	5811883a 	mov	r8,r11
  28b448:	00bfffc4 	movi	r2,-1
  28b44c:	0401ffc4 	movi	r16,2047
  28b450:	003e7806 	br	28ae34 <__adddf3+0x220>
  28b454:	4462b03a 	or	r17,r8,r17
  28b458:	8822c03a 	cmpne	r17,r17,zero
  28b45c:	0009883a 	mov	r4,zero
  28b460:	003fa006 	br	28b2e4 <__adddf3+0x6d0>
  28b464:	4811883a 	mov	r8,r9
  28b468:	3023883a 	mov	r17,r6
  28b46c:	0401ffc4 	movi	r16,2047
  28b470:	003e0706 	br	28ac90 <__adddf3+0x7c>
  28b474:	4811883a 	mov	r8,r9
  28b478:	3023883a 	mov	r17,r6
  28b47c:	003e0406 	br	28ac90 <__adddf3+0x7c>
  28b480:	21fff804 	addi	r7,r4,-32
  28b484:	01400804 	movi	r5,32
  28b488:	41ced83a 	srl	r7,r8,r7
  28b48c:	21400a26 	beq	r4,r5,28b4b8 <__adddf3+0x8a4>
  28b490:	01401004 	movi	r5,64
  28b494:	2909c83a 	sub	r4,r5,r4
  28b498:	4108983a 	sll	r4,r8,r4
  28b49c:	2448b03a 	or	r4,r4,r17
  28b4a0:	2008c03a 	cmpne	r4,r4,zero
  28b4a4:	3922b03a 	or	r17,r7,r4
  28b4a8:	0009883a 	mov	r4,zero
  28b4ac:	003f8d06 	br	28b2e4 <__adddf3+0x6d0>
  28b4b0:	0007883a 	mov	r3,zero
  28b4b4:	003fdd06 	br	28b42c <__adddf3+0x818>
  28b4b8:	0009883a 	mov	r4,zero
  28b4bc:	003ff706 	br	28b49c <__adddf3+0x888>

0028b4c0 <__divdf3>:
  28b4c0:	defff204 	addi	sp,sp,-56
  28b4c4:	dd400915 	stw	r21,36(sp)
  28b4c8:	282ad53a 	srli	r21,r5,20
  28b4cc:	dd000815 	stw	r20,32(sp)
  28b4d0:	2828d7fa 	srli	r20,r5,31
  28b4d4:	dc000415 	stw	r16,16(sp)
  28b4d8:	04000434 	movhi	r16,16
  28b4dc:	df000c15 	stw	fp,48(sp)
  28b4e0:	843fffc4 	addi	r16,r16,-1
  28b4e4:	dfc00d15 	stw	ra,52(sp)
  28b4e8:	ddc00b15 	stw	r23,44(sp)
  28b4ec:	dd800a15 	stw	r22,40(sp)
  28b4f0:	dcc00715 	stw	r19,28(sp)
  28b4f4:	dc800615 	stw	r18,24(sp)
  28b4f8:	dc400515 	stw	r17,20(sp)
  28b4fc:	ad41ffcc 	andi	r21,r21,2047
  28b500:	2c20703a 	and	r16,r5,r16
  28b504:	a7003fcc 	andi	fp,r20,255
  28b508:	a8006126 	beq	r21,zero,28b690 <__divdf3+0x1d0>
  28b50c:	0081ffc4 	movi	r2,2047
  28b510:	2025883a 	mov	r18,r4
  28b514:	a8803726 	beq	r21,r2,28b5f4 <__divdf3+0x134>
  28b518:	80800434 	orhi	r2,r16,16
  28b51c:	100490fa 	slli	r2,r2,3
  28b520:	2020d77a 	srli	r16,r4,29
  28b524:	202490fa 	slli	r18,r4,3
  28b528:	ad7f0044 	addi	r21,r21,-1023
  28b52c:	80a0b03a 	or	r16,r16,r2
  28b530:	0027883a 	mov	r19,zero
  28b534:	0013883a 	mov	r9,zero
  28b538:	3804d53a 	srli	r2,r7,20
  28b53c:	382cd7fa 	srli	r22,r7,31
  28b540:	04400434 	movhi	r17,16
  28b544:	8c7fffc4 	addi	r17,r17,-1
  28b548:	1081ffcc 	andi	r2,r2,2047
  28b54c:	3011883a 	mov	r8,r6
  28b550:	3c62703a 	and	r17,r7,r17
  28b554:	b5c03fcc 	andi	r23,r22,255
  28b558:	10006c26 	beq	r2,zero,28b70c <__divdf3+0x24c>
  28b55c:	00c1ffc4 	movi	r3,2047
  28b560:	10c06426 	beq	r2,r3,28b6f4 <__divdf3+0x234>
  28b564:	88c00434 	orhi	r3,r17,16
  28b568:	180690fa 	slli	r3,r3,3
  28b56c:	3022d77a 	srli	r17,r6,29
  28b570:	301090fa 	slli	r8,r6,3
  28b574:	10bf0044 	addi	r2,r2,-1023
  28b578:	88e2b03a 	or	r17,r17,r3
  28b57c:	000f883a 	mov	r7,zero
  28b580:	a58cf03a 	xor	r6,r20,r22
  28b584:	3cc8b03a 	or	r4,r7,r19
  28b588:	a8abc83a 	sub	r21,r21,r2
  28b58c:	008003c4 	movi	r2,15
  28b590:	3007883a 	mov	r3,r6
  28b594:	34c03fcc 	andi	r19,r6,255
  28b598:	11009036 	bltu	r2,r4,28b7dc <__divdf3+0x31c>
  28b59c:	200890ba 	slli	r4,r4,2
  28b5a0:	00800a74 	movhi	r2,41
  28b5a4:	10ad6d04 	addi	r2,r2,-19020
  28b5a8:	2089883a 	add	r4,r4,r2
  28b5ac:	20800017 	ldw	r2,0(r4)
  28b5b0:	1000683a 	jmp	r2
  28b5b4:	0028b7dc 	xori	zero,zero,41695
  28b5b8:	0028b62c 	andhi	zero,zero,41688
  28b5bc:	0028b7cc 	andi	zero,zero,41695
  28b5c0:	0028b620 	cmpeqi	zero,zero,-23848
  28b5c4:	0028b7cc 	andi	zero,zero,41695
  28b5c8:	0028b7a0 	cmpeqi	zero,zero,-23842
  28b5cc:	0028b7cc 	andi	zero,zero,41695
  28b5d0:	0028b620 	cmpeqi	zero,zero,-23848
  28b5d4:	0028b62c 	andhi	zero,zero,41688
  28b5d8:	0028b62c 	andhi	zero,zero,41688
  28b5dc:	0028b7a0 	cmpeqi	zero,zero,-23842
  28b5e0:	0028b620 	cmpeqi	zero,zero,-23848
  28b5e4:	0028b610 	cmplti	zero,zero,-23848
  28b5e8:	0028b610 	cmplti	zero,zero,-23848
  28b5ec:	0028b610 	cmplti	zero,zero,-23848
  28b5f0:	0028bac0 	call	28bac <__alt_mem_onchip_memory2_0-0x257454>
  28b5f4:	2404b03a 	or	r2,r4,r16
  28b5f8:	1000661e 	bne	r2,zero,28b794 <__divdf3+0x2d4>
  28b5fc:	04c00204 	movi	r19,8
  28b600:	0021883a 	mov	r16,zero
  28b604:	0025883a 	mov	r18,zero
  28b608:	02400084 	movi	r9,2
  28b60c:	003fca06 	br	28b538 <__divdf3+0x78>
  28b610:	8023883a 	mov	r17,r16
  28b614:	9011883a 	mov	r8,r18
  28b618:	e02f883a 	mov	r23,fp
  28b61c:	480f883a 	mov	r7,r9
  28b620:	00800084 	movi	r2,2
  28b624:	3881311e 	bne	r7,r2,28baec <__divdf3+0x62c>
  28b628:	b827883a 	mov	r19,r23
  28b62c:	98c0004c 	andi	r3,r19,1
  28b630:	0081ffc4 	movi	r2,2047
  28b634:	000b883a 	mov	r5,zero
  28b638:	0025883a 	mov	r18,zero
  28b63c:	1004953a 	slli	r2,r2,20
  28b640:	18c03fcc 	andi	r3,r3,255
  28b644:	04400434 	movhi	r17,16
  28b648:	8c7fffc4 	addi	r17,r17,-1
  28b64c:	180697fa 	slli	r3,r3,31
  28b650:	2c4a703a 	and	r5,r5,r17
  28b654:	288ab03a 	or	r5,r5,r2
  28b658:	28c6b03a 	or	r3,r5,r3
  28b65c:	9005883a 	mov	r2,r18
  28b660:	dfc00d17 	ldw	ra,52(sp)
  28b664:	df000c17 	ldw	fp,48(sp)
  28b668:	ddc00b17 	ldw	r23,44(sp)
  28b66c:	dd800a17 	ldw	r22,40(sp)
  28b670:	dd400917 	ldw	r21,36(sp)
  28b674:	dd000817 	ldw	r20,32(sp)
  28b678:	dcc00717 	ldw	r19,28(sp)
  28b67c:	dc800617 	ldw	r18,24(sp)
  28b680:	dc400517 	ldw	r17,20(sp)
  28b684:	dc000417 	ldw	r16,16(sp)
  28b688:	dec00e04 	addi	sp,sp,56
  28b68c:	f800283a 	ret
  28b690:	2404b03a 	or	r2,r4,r16
  28b694:	2027883a 	mov	r19,r4
  28b698:	10003926 	beq	r2,zero,28b780 <__divdf3+0x2c0>
  28b69c:	80012e26 	beq	r16,zero,28bb58 <__divdf3+0x698>
  28b6a0:	8009883a 	mov	r4,r16
  28b6a4:	d9800315 	stw	r6,12(sp)
  28b6a8:	d9c00215 	stw	r7,8(sp)
  28b6ac:	028d2180 	call	28d218 <__clzsi2>
  28b6b0:	d9800317 	ldw	r6,12(sp)
  28b6b4:	d9c00217 	ldw	r7,8(sp)
  28b6b8:	113ffd44 	addi	r4,r2,-11
  28b6bc:	00c00704 	movi	r3,28
  28b6c0:	19012116 	blt	r3,r4,28bb48 <__divdf3+0x688>
  28b6c4:	00c00744 	movi	r3,29
  28b6c8:	147ffe04 	addi	r17,r2,-8
  28b6cc:	1907c83a 	sub	r3,r3,r4
  28b6d0:	8460983a 	sll	r16,r16,r17
  28b6d4:	98c6d83a 	srl	r3,r19,r3
  28b6d8:	9c64983a 	sll	r18,r19,r17
  28b6dc:	1c20b03a 	or	r16,r3,r16
  28b6e0:	1080fcc4 	addi	r2,r2,1011
  28b6e4:	00abc83a 	sub	r21,zero,r2
  28b6e8:	0027883a 	mov	r19,zero
  28b6ec:	0013883a 	mov	r9,zero
  28b6f0:	003f9106 	br	28b538 <__divdf3+0x78>
  28b6f4:	3446b03a 	or	r3,r6,r17
  28b6f8:	18001f1e 	bne	r3,zero,28b778 <__divdf3+0x2b8>
  28b6fc:	0023883a 	mov	r17,zero
  28b700:	0011883a 	mov	r8,zero
  28b704:	01c00084 	movi	r7,2
  28b708:	003f9d06 	br	28b580 <__divdf3+0xc0>
  28b70c:	3446b03a 	or	r3,r6,r17
  28b710:	18001526 	beq	r3,zero,28b768 <__divdf3+0x2a8>
  28b714:	88011b26 	beq	r17,zero,28bb84 <__divdf3+0x6c4>
  28b718:	8809883a 	mov	r4,r17
  28b71c:	d9800315 	stw	r6,12(sp)
  28b720:	da400115 	stw	r9,4(sp)
  28b724:	028d2180 	call	28d218 <__clzsi2>
  28b728:	d9800317 	ldw	r6,12(sp)
  28b72c:	da400117 	ldw	r9,4(sp)
  28b730:	113ffd44 	addi	r4,r2,-11
  28b734:	00c00704 	movi	r3,28
  28b738:	19010e16 	blt	r3,r4,28bb74 <__divdf3+0x6b4>
  28b73c:	00c00744 	movi	r3,29
  28b740:	123ffe04 	addi	r8,r2,-8
  28b744:	1907c83a 	sub	r3,r3,r4
  28b748:	8a22983a 	sll	r17,r17,r8
  28b74c:	30c6d83a 	srl	r3,r6,r3
  28b750:	3210983a 	sll	r8,r6,r8
  28b754:	1c62b03a 	or	r17,r3,r17
  28b758:	1080fcc4 	addi	r2,r2,1011
  28b75c:	0085c83a 	sub	r2,zero,r2
  28b760:	000f883a 	mov	r7,zero
  28b764:	003f8606 	br	28b580 <__divdf3+0xc0>
  28b768:	0023883a 	mov	r17,zero
  28b76c:	0011883a 	mov	r8,zero
  28b770:	01c00044 	movi	r7,1
  28b774:	003f8206 	br	28b580 <__divdf3+0xc0>
  28b778:	01c000c4 	movi	r7,3
  28b77c:	003f8006 	br	28b580 <__divdf3+0xc0>
  28b780:	04c00104 	movi	r19,4
  28b784:	0021883a 	mov	r16,zero
  28b788:	0025883a 	mov	r18,zero
  28b78c:	02400044 	movi	r9,1
  28b790:	003f6906 	br	28b538 <__divdf3+0x78>
  28b794:	04c00304 	movi	r19,12
  28b798:	024000c4 	movi	r9,3
  28b79c:	003f6606 	br	28b538 <__divdf3+0x78>
  28b7a0:	01400434 	movhi	r5,16
  28b7a4:	0007883a 	mov	r3,zero
  28b7a8:	297fffc4 	addi	r5,r5,-1
  28b7ac:	04bfffc4 	movi	r18,-1
  28b7b0:	0081ffc4 	movi	r2,2047
  28b7b4:	003fa106 	br	28b63c <__divdf3+0x17c>
  28b7b8:	00c00044 	movi	r3,1
  28b7bc:	1887c83a 	sub	r3,r3,r2
  28b7c0:	01000e04 	movi	r4,56
  28b7c4:	20c1210e 	bge	r4,r3,28bc4c <__divdf3+0x78c>
  28b7c8:	98c0004c 	andi	r3,r19,1
  28b7cc:	0005883a 	mov	r2,zero
  28b7d0:	000b883a 	mov	r5,zero
  28b7d4:	0025883a 	mov	r18,zero
  28b7d8:	003f9806 	br	28b63c <__divdf3+0x17c>
  28b7dc:	8c00fd36 	bltu	r17,r16,28bbd4 <__divdf3+0x714>
  28b7e0:	8440fb26 	beq	r16,r17,28bbd0 <__divdf3+0x710>
  28b7e4:	8007883a 	mov	r3,r16
  28b7e8:	ad7fffc4 	addi	r21,r21,-1
  28b7ec:	0021883a 	mov	r16,zero
  28b7f0:	4004d63a 	srli	r2,r8,24
  28b7f4:	8822923a 	slli	r17,r17,8
  28b7f8:	1809883a 	mov	r4,r3
  28b7fc:	402c923a 	slli	r22,r8,8
  28b800:	88b8b03a 	or	fp,r17,r2
  28b804:	e028d43a 	srli	r20,fp,16
  28b808:	d8c00015 	stw	r3,0(sp)
  28b80c:	e5ffffcc 	andi	r23,fp,65535
  28b810:	a00b883a 	mov	r5,r20
  28b814:	0280a540 	call	280a54 <__udivsi3>
  28b818:	d8c00017 	ldw	r3,0(sp)
  28b81c:	a00b883a 	mov	r5,r20
  28b820:	d8800315 	stw	r2,12(sp)
  28b824:	1809883a 	mov	r4,r3
  28b828:	0280ab80 	call	280ab8 <__umodsi3>
  28b82c:	d9800317 	ldw	r6,12(sp)
  28b830:	1006943a 	slli	r3,r2,16
  28b834:	9004d43a 	srli	r2,r18,16
  28b838:	b9a3383a 	mul	r17,r23,r6
  28b83c:	10c4b03a 	or	r2,r2,r3
  28b840:	1440062e 	bgeu	r2,r17,28b85c <__divdf3+0x39c>
  28b844:	1705883a 	add	r2,r2,fp
  28b848:	30ffffc4 	addi	r3,r6,-1
  28b84c:	1700ee36 	bltu	r2,fp,28bc08 <__divdf3+0x748>
  28b850:	1440ed2e 	bgeu	r2,r17,28bc08 <__divdf3+0x748>
  28b854:	31bfff84 	addi	r6,r6,-2
  28b858:	1705883a 	add	r2,r2,fp
  28b85c:	1463c83a 	sub	r17,r2,r17
  28b860:	a00b883a 	mov	r5,r20
  28b864:	8809883a 	mov	r4,r17
  28b868:	d9800315 	stw	r6,12(sp)
  28b86c:	0280a540 	call	280a54 <__udivsi3>
  28b870:	a00b883a 	mov	r5,r20
  28b874:	8809883a 	mov	r4,r17
  28b878:	d8800215 	stw	r2,8(sp)
  28b87c:	0280ab80 	call	280ab8 <__umodsi3>
  28b880:	d9c00217 	ldw	r7,8(sp)
  28b884:	1004943a 	slli	r2,r2,16
  28b888:	94bfffcc 	andi	r18,r18,65535
  28b88c:	b9d1383a 	mul	r8,r23,r7
  28b890:	90a4b03a 	or	r18,r18,r2
  28b894:	d9800317 	ldw	r6,12(sp)
  28b898:	9200062e 	bgeu	r18,r8,28b8b4 <__divdf3+0x3f4>
  28b89c:	9725883a 	add	r18,r18,fp
  28b8a0:	38bfffc4 	addi	r2,r7,-1
  28b8a4:	9700d636 	bltu	r18,fp,28bc00 <__divdf3+0x740>
  28b8a8:	9200d52e 	bgeu	r18,r8,28bc00 <__divdf3+0x740>
  28b8ac:	39ffff84 	addi	r7,r7,-2
  28b8b0:	9725883a 	add	r18,r18,fp
  28b8b4:	3004943a 	slli	r2,r6,16
  28b8b8:	b012d43a 	srli	r9,r22,16
  28b8bc:	b1bfffcc 	andi	r6,r22,65535
  28b8c0:	11e2b03a 	or	r17,r2,r7
  28b8c4:	8806d43a 	srli	r3,r17,16
  28b8c8:	893fffcc 	andi	r4,r17,65535
  28b8cc:	218b383a 	mul	r5,r4,r6
  28b8d0:	30c5383a 	mul	r2,r6,r3
  28b8d4:	2249383a 	mul	r4,r4,r9
  28b8d8:	280ed43a 	srli	r7,r5,16
  28b8dc:	9225c83a 	sub	r18,r18,r8
  28b8e0:	2089883a 	add	r4,r4,r2
  28b8e4:	3909883a 	add	r4,r7,r4
  28b8e8:	1a47383a 	mul	r3,r3,r9
  28b8ec:	2080022e 	bgeu	r4,r2,28b8f8 <__divdf3+0x438>
  28b8f0:	00800074 	movhi	r2,1
  28b8f4:	1887883a 	add	r3,r3,r2
  28b8f8:	2004d43a 	srli	r2,r4,16
  28b8fc:	2008943a 	slli	r4,r4,16
  28b900:	297fffcc 	andi	r5,r5,65535
  28b904:	10c7883a 	add	r3,r2,r3
  28b908:	2149883a 	add	r4,r4,r5
  28b90c:	90c0a536 	bltu	r18,r3,28bba4 <__divdf3+0x6e4>
  28b910:	90c0bf26 	beq	r18,r3,28bc10 <__divdf3+0x750>
  28b914:	90c7c83a 	sub	r3,r18,r3
  28b918:	810fc83a 	sub	r7,r16,r4
  28b91c:	81e5803a 	cmpltu	r18,r16,r7
  28b920:	1ca5c83a 	sub	r18,r3,r18
  28b924:	e480c126 	beq	fp,r18,28bc2c <__divdf3+0x76c>
  28b928:	a00b883a 	mov	r5,r20
  28b92c:	9009883a 	mov	r4,r18
  28b930:	d9800315 	stw	r6,12(sp)
  28b934:	d9c00215 	stw	r7,8(sp)
  28b938:	da400115 	stw	r9,4(sp)
  28b93c:	0280a540 	call	280a54 <__udivsi3>
  28b940:	a00b883a 	mov	r5,r20
  28b944:	9009883a 	mov	r4,r18
  28b948:	d8800015 	stw	r2,0(sp)
  28b94c:	0280ab80 	call	280ab8 <__umodsi3>
  28b950:	d9c00217 	ldw	r7,8(sp)
  28b954:	da000017 	ldw	r8,0(sp)
  28b958:	1006943a 	slli	r3,r2,16
  28b95c:	3804d43a 	srli	r2,r7,16
  28b960:	ba21383a 	mul	r16,r23,r8
  28b964:	d9800317 	ldw	r6,12(sp)
  28b968:	10c4b03a 	or	r2,r2,r3
  28b96c:	da400117 	ldw	r9,4(sp)
  28b970:	1400062e 	bgeu	r2,r16,28b98c <__divdf3+0x4cc>
  28b974:	1705883a 	add	r2,r2,fp
  28b978:	40ffffc4 	addi	r3,r8,-1
  28b97c:	1700ad36 	bltu	r2,fp,28bc34 <__divdf3+0x774>
  28b980:	1400ac2e 	bgeu	r2,r16,28bc34 <__divdf3+0x774>
  28b984:	423fff84 	addi	r8,r8,-2
  28b988:	1705883a 	add	r2,r2,fp
  28b98c:	1421c83a 	sub	r16,r2,r16
  28b990:	a00b883a 	mov	r5,r20
  28b994:	8009883a 	mov	r4,r16
  28b998:	d9800315 	stw	r6,12(sp)
  28b99c:	d9c00215 	stw	r7,8(sp)
  28b9a0:	da000015 	stw	r8,0(sp)
  28b9a4:	da400115 	stw	r9,4(sp)
  28b9a8:	0280a540 	call	280a54 <__udivsi3>
  28b9ac:	8009883a 	mov	r4,r16
  28b9b0:	a00b883a 	mov	r5,r20
  28b9b4:	1025883a 	mov	r18,r2
  28b9b8:	0280ab80 	call	280ab8 <__umodsi3>
  28b9bc:	d9c00217 	ldw	r7,8(sp)
  28b9c0:	1004943a 	slli	r2,r2,16
  28b9c4:	bcaf383a 	mul	r23,r23,r18
  28b9c8:	393fffcc 	andi	r4,r7,65535
  28b9cc:	2088b03a 	or	r4,r4,r2
  28b9d0:	d9800317 	ldw	r6,12(sp)
  28b9d4:	da000017 	ldw	r8,0(sp)
  28b9d8:	da400117 	ldw	r9,4(sp)
  28b9dc:	25c0062e 	bgeu	r4,r23,28b9f8 <__divdf3+0x538>
  28b9e0:	2709883a 	add	r4,r4,fp
  28b9e4:	90bfffc4 	addi	r2,r18,-1
  28b9e8:	27009436 	bltu	r4,fp,28bc3c <__divdf3+0x77c>
  28b9ec:	25c0932e 	bgeu	r4,r23,28bc3c <__divdf3+0x77c>
  28b9f0:	94bfff84 	addi	r18,r18,-2
  28b9f4:	2709883a 	add	r4,r4,fp
  28b9f8:	4004943a 	slli	r2,r8,16
  28b9fc:	25efc83a 	sub	r23,r4,r23
  28ba00:	1490b03a 	or	r8,r2,r18
  28ba04:	4008d43a 	srli	r4,r8,16
  28ba08:	40ffffcc 	andi	r3,r8,65535
  28ba0c:	30c5383a 	mul	r2,r6,r3
  28ba10:	1a47383a 	mul	r3,r3,r9
  28ba14:	310d383a 	mul	r6,r6,r4
  28ba18:	100ad43a 	srli	r5,r2,16
  28ba1c:	4913383a 	mul	r9,r9,r4
  28ba20:	1987883a 	add	r3,r3,r6
  28ba24:	28c7883a 	add	r3,r5,r3
  28ba28:	1980022e 	bgeu	r3,r6,28ba34 <__divdf3+0x574>
  28ba2c:	01000074 	movhi	r4,1
  28ba30:	4913883a 	add	r9,r9,r4
  28ba34:	1808d43a 	srli	r4,r3,16
  28ba38:	1806943a 	slli	r3,r3,16
  28ba3c:	10bfffcc 	andi	r2,r2,65535
  28ba40:	2253883a 	add	r9,r4,r9
  28ba44:	1887883a 	add	r3,r3,r2
  28ba48:	ba403836 	bltu	r23,r9,28bb2c <__divdf3+0x66c>
  28ba4c:	ba403626 	beq	r23,r9,28bb28 <__divdf3+0x668>
  28ba50:	42000054 	ori	r8,r8,1
  28ba54:	a880ffc4 	addi	r2,r21,1023
  28ba58:	00bf570e 	bge	zero,r2,28b7b8 <__divdf3+0x2f8>
  28ba5c:	40c001cc 	andi	r3,r8,7
  28ba60:	18000726 	beq	r3,zero,28ba80 <__divdf3+0x5c0>
  28ba64:	40c003cc 	andi	r3,r8,15
  28ba68:	01000104 	movi	r4,4
  28ba6c:	19000426 	beq	r3,r4,28ba80 <__divdf3+0x5c0>
  28ba70:	4107883a 	add	r3,r8,r4
  28ba74:	1a11803a 	cmpltu	r8,r3,r8
  28ba78:	8a23883a 	add	r17,r17,r8
  28ba7c:	1811883a 	mov	r8,r3
  28ba80:	88c0402c 	andhi	r3,r17,256
  28ba84:	18000426 	beq	r3,zero,28ba98 <__divdf3+0x5d8>
  28ba88:	00ffc034 	movhi	r3,65280
  28ba8c:	18ffffc4 	addi	r3,r3,-1
  28ba90:	a8810004 	addi	r2,r21,1024
  28ba94:	88e2703a 	and	r17,r17,r3
  28ba98:	00c1ff84 	movi	r3,2046
  28ba9c:	18bee316 	blt	r3,r2,28b62c <__divdf3+0x16c>
  28baa0:	8824977a 	slli	r18,r17,29
  28baa4:	4010d0fa 	srli	r8,r8,3
  28baa8:	8822927a 	slli	r17,r17,9
  28baac:	1081ffcc 	andi	r2,r2,2047
  28bab0:	9224b03a 	or	r18,r18,r8
  28bab4:	880ad33a 	srli	r5,r17,12
  28bab8:	98c0004c 	andi	r3,r19,1
  28babc:	003edf06 	br	28b63c <__divdf3+0x17c>
  28bac0:	8080022c 	andhi	r2,r16,8
  28bac4:	10001226 	beq	r2,zero,28bb10 <__divdf3+0x650>
  28bac8:	8880022c 	andhi	r2,r17,8
  28bacc:	1000101e 	bne	r2,zero,28bb10 <__divdf3+0x650>
  28bad0:	00800434 	movhi	r2,16
  28bad4:	89400234 	orhi	r5,r17,8
  28bad8:	10bfffc4 	addi	r2,r2,-1
  28badc:	b007883a 	mov	r3,r22
  28bae0:	288a703a 	and	r5,r5,r2
  28bae4:	4025883a 	mov	r18,r8
  28bae8:	003f3106 	br	28b7b0 <__divdf3+0x2f0>
  28baec:	008000c4 	movi	r2,3
  28baf0:	3880a626 	beq	r7,r2,28bd8c <__divdf3+0x8cc>
  28baf4:	00800044 	movi	r2,1
  28baf8:	3880521e 	bne	r7,r2,28bc44 <__divdf3+0x784>
  28bafc:	b807883a 	mov	r3,r23
  28bb00:	0005883a 	mov	r2,zero
  28bb04:	000b883a 	mov	r5,zero
  28bb08:	0025883a 	mov	r18,zero
  28bb0c:	003ecb06 	br	28b63c <__divdf3+0x17c>
  28bb10:	00800434 	movhi	r2,16
  28bb14:	81400234 	orhi	r5,r16,8
  28bb18:	10bfffc4 	addi	r2,r2,-1
  28bb1c:	a007883a 	mov	r3,r20
  28bb20:	288a703a 	and	r5,r5,r2
  28bb24:	003f2206 	br	28b7b0 <__divdf3+0x2f0>
  28bb28:	183fca26 	beq	r3,zero,28ba54 <__divdf3+0x594>
  28bb2c:	e5ef883a 	add	r23,fp,r23
  28bb30:	40bfffc4 	addi	r2,r8,-1
  28bb34:	bf00392e 	bgeu	r23,fp,28bc1c <__divdf3+0x75c>
  28bb38:	1011883a 	mov	r8,r2
  28bb3c:	ba7fc41e 	bne	r23,r9,28ba50 <__divdf3+0x590>
  28bb40:	b0ffc31e 	bne	r22,r3,28ba50 <__divdf3+0x590>
  28bb44:	003fc306 	br	28ba54 <__divdf3+0x594>
  28bb48:	143ff604 	addi	r16,r2,-40
  28bb4c:	9c20983a 	sll	r16,r19,r16
  28bb50:	0025883a 	mov	r18,zero
  28bb54:	003ee206 	br	28b6e0 <__divdf3+0x220>
  28bb58:	d9800315 	stw	r6,12(sp)
  28bb5c:	d9c00215 	stw	r7,8(sp)
  28bb60:	028d2180 	call	28d218 <__clzsi2>
  28bb64:	10800804 	addi	r2,r2,32
  28bb68:	d9c00217 	ldw	r7,8(sp)
  28bb6c:	d9800317 	ldw	r6,12(sp)
  28bb70:	003ed106 	br	28b6b8 <__divdf3+0x1f8>
  28bb74:	147ff604 	addi	r17,r2,-40
  28bb78:	3462983a 	sll	r17,r6,r17
  28bb7c:	0011883a 	mov	r8,zero
  28bb80:	003ef506 	br	28b758 <__divdf3+0x298>
  28bb84:	3009883a 	mov	r4,r6
  28bb88:	d9800315 	stw	r6,12(sp)
  28bb8c:	da400115 	stw	r9,4(sp)
  28bb90:	028d2180 	call	28d218 <__clzsi2>
  28bb94:	10800804 	addi	r2,r2,32
  28bb98:	da400117 	ldw	r9,4(sp)
  28bb9c:	d9800317 	ldw	r6,12(sp)
  28bba0:	003ee306 	br	28b730 <__divdf3+0x270>
  28bba4:	85a1883a 	add	r16,r16,r22
  28bba8:	8585803a 	cmpltu	r2,r16,r22
  28bbac:	1705883a 	add	r2,r2,fp
  28bbb0:	14a5883a 	add	r18,r2,r18
  28bbb4:	88bfffc4 	addi	r2,r17,-1
  28bbb8:	e4800c2e 	bgeu	fp,r18,28bbec <__divdf3+0x72c>
  28bbbc:	90c03e36 	bltu	r18,r3,28bcb8 <__divdf3+0x7f8>
  28bbc0:	1c806926 	beq	r3,r18,28bd68 <__divdf3+0x8a8>
  28bbc4:	90c7c83a 	sub	r3,r18,r3
  28bbc8:	1023883a 	mov	r17,r2
  28bbcc:	003f5206 	br	28b918 <__divdf3+0x458>
  28bbd0:	923f0436 	bltu	r18,r8,28b7e4 <__divdf3+0x324>
  28bbd4:	800897fa 	slli	r4,r16,31
  28bbd8:	9004d07a 	srli	r2,r18,1
  28bbdc:	8006d07a 	srli	r3,r16,1
  28bbe0:	902097fa 	slli	r16,r18,31
  28bbe4:	20a4b03a 	or	r18,r4,r2
  28bbe8:	003f0106 	br	28b7f0 <__divdf3+0x330>
  28bbec:	e4bff51e 	bne	fp,r18,28bbc4 <__divdf3+0x704>
  28bbf0:	85bff22e 	bgeu	r16,r22,28bbbc <__divdf3+0x6fc>
  28bbf4:	e0c7c83a 	sub	r3,fp,r3
  28bbf8:	1023883a 	mov	r17,r2
  28bbfc:	003f4606 	br	28b918 <__divdf3+0x458>
  28bc00:	100f883a 	mov	r7,r2
  28bc04:	003f2b06 	br	28b8b4 <__divdf3+0x3f4>
  28bc08:	180d883a 	mov	r6,r3
  28bc0c:	003f1306 	br	28b85c <__divdf3+0x39c>
  28bc10:	813fe436 	bltu	r16,r4,28bba4 <__divdf3+0x6e4>
  28bc14:	0007883a 	mov	r3,zero
  28bc18:	003f3f06 	br	28b918 <__divdf3+0x458>
  28bc1c:	ba402c36 	bltu	r23,r9,28bcd0 <__divdf3+0x810>
  28bc20:	4dc05426 	beq	r9,r23,28bd74 <__divdf3+0x8b4>
  28bc24:	1011883a 	mov	r8,r2
  28bc28:	003f8906 	br	28ba50 <__divdf3+0x590>
  28bc2c:	023fffc4 	movi	r8,-1
  28bc30:	003f8806 	br	28ba54 <__divdf3+0x594>
  28bc34:	1811883a 	mov	r8,r3
  28bc38:	003f5406 	br	28b98c <__divdf3+0x4cc>
  28bc3c:	1025883a 	mov	r18,r2
  28bc40:	003f6d06 	br	28b9f8 <__divdf3+0x538>
  28bc44:	b827883a 	mov	r19,r23
  28bc48:	003f8206 	br	28ba54 <__divdf3+0x594>
  28bc4c:	010007c4 	movi	r4,31
  28bc50:	20c02616 	blt	r4,r3,28bcec <__divdf3+0x82c>
  28bc54:	00800804 	movi	r2,32
  28bc58:	10c5c83a 	sub	r2,r2,r3
  28bc5c:	888a983a 	sll	r5,r17,r2
  28bc60:	40c8d83a 	srl	r4,r8,r3
  28bc64:	4084983a 	sll	r2,r8,r2
  28bc68:	88e2d83a 	srl	r17,r17,r3
  28bc6c:	2906b03a 	or	r3,r5,r4
  28bc70:	1004c03a 	cmpne	r2,r2,zero
  28bc74:	1886b03a 	or	r3,r3,r2
  28bc78:	188001cc 	andi	r2,r3,7
  28bc7c:	10000726 	beq	r2,zero,28bc9c <__divdf3+0x7dc>
  28bc80:	188003cc 	andi	r2,r3,15
  28bc84:	01000104 	movi	r4,4
  28bc88:	11000426 	beq	r2,r4,28bc9c <__divdf3+0x7dc>
  28bc8c:	1805883a 	mov	r2,r3
  28bc90:	10c00104 	addi	r3,r2,4
  28bc94:	1885803a 	cmpltu	r2,r3,r2
  28bc98:	88a3883a 	add	r17,r17,r2
  28bc9c:	8880202c 	andhi	r2,r17,128
  28bca0:	10002726 	beq	r2,zero,28bd40 <__divdf3+0x880>
  28bca4:	98c0004c 	andi	r3,r19,1
  28bca8:	00800044 	movi	r2,1
  28bcac:	000b883a 	mov	r5,zero
  28bcb0:	0025883a 	mov	r18,zero
  28bcb4:	003e6106 	br	28b63c <__divdf3+0x17c>
  28bcb8:	85a1883a 	add	r16,r16,r22
  28bcbc:	8585803a 	cmpltu	r2,r16,r22
  28bcc0:	1705883a 	add	r2,r2,fp
  28bcc4:	14a5883a 	add	r18,r2,r18
  28bcc8:	8c7fff84 	addi	r17,r17,-2
  28bccc:	003f1106 	br	28b914 <__divdf3+0x454>
  28bcd0:	b589883a 	add	r4,r22,r22
  28bcd4:	25ad803a 	cmpltu	r22,r4,r22
  28bcd8:	b739883a 	add	fp,r22,fp
  28bcdc:	40bfff84 	addi	r2,r8,-2
  28bce0:	bf2f883a 	add	r23,r23,fp
  28bce4:	202d883a 	mov	r22,r4
  28bce8:	003f9306 	br	28bb38 <__divdf3+0x678>
  28bcec:	013ff844 	movi	r4,-31
  28bcf0:	2085c83a 	sub	r2,r4,r2
  28bcf4:	8888d83a 	srl	r4,r17,r2
  28bcf8:	00800804 	movi	r2,32
  28bcfc:	18802126 	beq	r3,r2,28bd84 <__divdf3+0x8c4>
  28bd00:	00801004 	movi	r2,64
  28bd04:	10c5c83a 	sub	r2,r2,r3
  28bd08:	8884983a 	sll	r2,r17,r2
  28bd0c:	1204b03a 	or	r2,r2,r8
  28bd10:	1004c03a 	cmpne	r2,r2,zero
  28bd14:	2084b03a 	or	r2,r4,r2
  28bd18:	144001cc 	andi	r17,r2,7
  28bd1c:	88000d1e 	bne	r17,zero,28bd54 <__divdf3+0x894>
  28bd20:	000b883a 	mov	r5,zero
  28bd24:	1024d0fa 	srli	r18,r2,3
  28bd28:	98c0004c 	andi	r3,r19,1
  28bd2c:	0005883a 	mov	r2,zero
  28bd30:	9464b03a 	or	r18,r18,r17
  28bd34:	003e4106 	br	28b63c <__divdf3+0x17c>
  28bd38:	1007883a 	mov	r3,r2
  28bd3c:	0023883a 	mov	r17,zero
  28bd40:	880a927a 	slli	r5,r17,9
  28bd44:	1805883a 	mov	r2,r3
  28bd48:	8822977a 	slli	r17,r17,29
  28bd4c:	280ad33a 	srli	r5,r5,12
  28bd50:	003ff406 	br	28bd24 <__divdf3+0x864>
  28bd54:	10c003cc 	andi	r3,r2,15
  28bd58:	01000104 	movi	r4,4
  28bd5c:	193ff626 	beq	r3,r4,28bd38 <__divdf3+0x878>
  28bd60:	0023883a 	mov	r17,zero
  28bd64:	003fca06 	br	28bc90 <__divdf3+0x7d0>
  28bd68:	813fd336 	bltu	r16,r4,28bcb8 <__divdf3+0x7f8>
  28bd6c:	1023883a 	mov	r17,r2
  28bd70:	003fa806 	br	28bc14 <__divdf3+0x754>
  28bd74:	b0ffd636 	bltu	r22,r3,28bcd0 <__divdf3+0x810>
  28bd78:	1011883a 	mov	r8,r2
  28bd7c:	b0ff341e 	bne	r22,r3,28ba50 <__divdf3+0x590>
  28bd80:	003f3406 	br	28ba54 <__divdf3+0x594>
  28bd84:	0005883a 	mov	r2,zero
  28bd88:	003fe006 	br	28bd0c <__divdf3+0x84c>
  28bd8c:	00800434 	movhi	r2,16
  28bd90:	89400234 	orhi	r5,r17,8
  28bd94:	10bfffc4 	addi	r2,r2,-1
  28bd98:	b807883a 	mov	r3,r23
  28bd9c:	288a703a 	and	r5,r5,r2
  28bda0:	4025883a 	mov	r18,r8
  28bda4:	003e8206 	br	28b7b0 <__divdf3+0x2f0>

0028bda8 <__eqdf2>:
  28bda8:	2804d53a 	srli	r2,r5,20
  28bdac:	3806d53a 	srli	r3,r7,20
  28bdb0:	02000434 	movhi	r8,16
  28bdb4:	423fffc4 	addi	r8,r8,-1
  28bdb8:	1081ffcc 	andi	r2,r2,2047
  28bdbc:	0281ffc4 	movi	r10,2047
  28bdc0:	2a12703a 	and	r9,r5,r8
  28bdc4:	18c1ffcc 	andi	r3,r3,2047
  28bdc8:	3a10703a 	and	r8,r7,r8
  28bdcc:	280ad7fa 	srli	r5,r5,31
  28bdd0:	380ed7fa 	srli	r7,r7,31
  28bdd4:	12801026 	beq	r2,r10,28be18 <__eqdf2+0x70>
  28bdd8:	0281ffc4 	movi	r10,2047
  28bddc:	1a800a26 	beq	r3,r10,28be08 <__eqdf2+0x60>
  28bde0:	10c00226 	beq	r2,r3,28bdec <__eqdf2+0x44>
  28bde4:	00800044 	movi	r2,1
  28bde8:	f800283a 	ret
  28bdec:	4a3ffd1e 	bne	r9,r8,28bde4 <__eqdf2+0x3c>
  28bdf0:	21bffc1e 	bne	r4,r6,28bde4 <__eqdf2+0x3c>
  28bdf4:	29c00c26 	beq	r5,r7,28be28 <__eqdf2+0x80>
  28bdf8:	103ffa1e 	bne	r2,zero,28bde4 <__eqdf2+0x3c>
  28bdfc:	2244b03a 	or	r2,r4,r9
  28be00:	1004c03a 	cmpne	r2,r2,zero
  28be04:	f800283a 	ret
  28be08:	3214b03a 	or	r10,r6,r8
  28be0c:	503ff426 	beq	r10,zero,28bde0 <__eqdf2+0x38>
  28be10:	00800044 	movi	r2,1
  28be14:	f800283a 	ret
  28be18:	2254b03a 	or	r10,r4,r9
  28be1c:	503fee26 	beq	r10,zero,28bdd8 <__eqdf2+0x30>
  28be20:	00800044 	movi	r2,1
  28be24:	f800283a 	ret
  28be28:	0005883a 	mov	r2,zero
  28be2c:	f800283a 	ret

0028be30 <__gedf2>:
  28be30:	2804d53a 	srli	r2,r5,20
  28be34:	3806d53a 	srli	r3,r7,20
  28be38:	02000434 	movhi	r8,16
  28be3c:	423fffc4 	addi	r8,r8,-1
  28be40:	1081ffcc 	andi	r2,r2,2047
  28be44:	0241ffc4 	movi	r9,2047
  28be48:	2a14703a 	and	r10,r5,r8
  28be4c:	18c1ffcc 	andi	r3,r3,2047
  28be50:	3a10703a 	and	r8,r7,r8
  28be54:	280ad7fa 	srli	r5,r5,31
  28be58:	380ed7fa 	srli	r7,r7,31
  28be5c:	12401d26 	beq	r2,r9,28bed4 <__gedf2+0xa4>
  28be60:	0241ffc4 	movi	r9,2047
  28be64:	1a401226 	beq	r3,r9,28beb0 <__gedf2+0x80>
  28be68:	1000081e 	bne	r2,zero,28be8c <__gedf2+0x5c>
  28be6c:	2296b03a 	or	r11,r4,r10
  28be70:	5813003a 	cmpeq	r9,r11,zero
  28be74:	1800091e 	bne	r3,zero,28be9c <__gedf2+0x6c>
  28be78:	3218b03a 	or	r12,r6,r8
  28be7c:	6000071e 	bne	r12,zero,28be9c <__gedf2+0x6c>
  28be80:	0005883a 	mov	r2,zero
  28be84:	5800101e 	bne	r11,zero,28bec8 <__gedf2+0x98>
  28be88:	f800283a 	ret
  28be8c:	18000c1e 	bne	r3,zero,28bec0 <__gedf2+0x90>
  28be90:	3212b03a 	or	r9,r6,r8
  28be94:	48000c26 	beq	r9,zero,28bec8 <__gedf2+0x98>
  28be98:	0013883a 	mov	r9,zero
  28be9c:	39c03fcc 	andi	r7,r7,255
  28bea0:	48000826 	beq	r9,zero,28bec4 <__gedf2+0x94>
  28bea4:	38000926 	beq	r7,zero,28becc <__gedf2+0x9c>
  28bea8:	00800044 	movi	r2,1
  28beac:	f800283a 	ret
  28beb0:	3212b03a 	or	r9,r6,r8
  28beb4:	483fec26 	beq	r9,zero,28be68 <__gedf2+0x38>
  28beb8:	00bfff84 	movi	r2,-2
  28bebc:	f800283a 	ret
  28bec0:	39c03fcc 	andi	r7,r7,255
  28bec4:	29c00626 	beq	r5,r7,28bee0 <__gedf2+0xb0>
  28bec8:	283ff726 	beq	r5,zero,28bea8 <__gedf2+0x78>
  28becc:	00bfffc4 	movi	r2,-1
  28bed0:	f800283a 	ret
  28bed4:	2292b03a 	or	r9,r4,r10
  28bed8:	483fe126 	beq	r9,zero,28be60 <__gedf2+0x30>
  28bedc:	003ff606 	br	28beb8 <__gedf2+0x88>
  28bee0:	18bff916 	blt	r3,r2,28bec8 <__gedf2+0x98>
  28bee4:	10c00316 	blt	r2,r3,28bef4 <__gedf2+0xc4>
  28bee8:	42bff736 	bltu	r8,r10,28bec8 <__gedf2+0x98>
  28beec:	52000326 	beq	r10,r8,28befc <__gedf2+0xcc>
  28bef0:	5200042e 	bgeu	r10,r8,28bf04 <__gedf2+0xd4>
  28bef4:	283fec1e 	bne	r5,zero,28bea8 <__gedf2+0x78>
  28bef8:	003ff406 	br	28becc <__gedf2+0x9c>
  28befc:	313ff236 	bltu	r6,r4,28bec8 <__gedf2+0x98>
  28bf00:	21bffc36 	bltu	r4,r6,28bef4 <__gedf2+0xc4>
  28bf04:	0005883a 	mov	r2,zero
  28bf08:	f800283a 	ret

0028bf0c <__ledf2>:
  28bf0c:	2804d53a 	srli	r2,r5,20
  28bf10:	3810d53a 	srli	r8,r7,20
  28bf14:	00c00434 	movhi	r3,16
  28bf18:	18ffffc4 	addi	r3,r3,-1
  28bf1c:	1081ffcc 	andi	r2,r2,2047
  28bf20:	0241ffc4 	movi	r9,2047
  28bf24:	28d4703a 	and	r10,r5,r3
  28bf28:	4201ffcc 	andi	r8,r8,2047
  28bf2c:	38c6703a 	and	r3,r7,r3
  28bf30:	280ad7fa 	srli	r5,r5,31
  28bf34:	380ed7fa 	srli	r7,r7,31
  28bf38:	12401f26 	beq	r2,r9,28bfb8 <__ledf2+0xac>
  28bf3c:	0241ffc4 	movi	r9,2047
  28bf40:	42401426 	beq	r8,r9,28bf94 <__ledf2+0x88>
  28bf44:	1000091e 	bne	r2,zero,28bf6c <__ledf2+0x60>
  28bf48:	2296b03a 	or	r11,r4,r10
  28bf4c:	5813003a 	cmpeq	r9,r11,zero
  28bf50:	29403fcc 	andi	r5,r5,255
  28bf54:	40000a1e 	bne	r8,zero,28bf80 <__ledf2+0x74>
  28bf58:	30d8b03a 	or	r12,r6,r3
  28bf5c:	6000081e 	bne	r12,zero,28bf80 <__ledf2+0x74>
  28bf60:	0005883a 	mov	r2,zero
  28bf64:	5800111e 	bne	r11,zero,28bfac <__ledf2+0xa0>
  28bf68:	f800283a 	ret
  28bf6c:	29403fcc 	andi	r5,r5,255
  28bf70:	40000c1e 	bne	r8,zero,28bfa4 <__ledf2+0x98>
  28bf74:	30d2b03a 	or	r9,r6,r3
  28bf78:	48000c26 	beq	r9,zero,28bfac <__ledf2+0xa0>
  28bf7c:	0013883a 	mov	r9,zero
  28bf80:	39c03fcc 	andi	r7,r7,255
  28bf84:	48000826 	beq	r9,zero,28bfa8 <__ledf2+0x9c>
  28bf88:	38001126 	beq	r7,zero,28bfd0 <__ledf2+0xc4>
  28bf8c:	00800044 	movi	r2,1
  28bf90:	f800283a 	ret
  28bf94:	30d2b03a 	or	r9,r6,r3
  28bf98:	483fea26 	beq	r9,zero,28bf44 <__ledf2+0x38>
  28bf9c:	00800084 	movi	r2,2
  28bfa0:	f800283a 	ret
  28bfa4:	39c03fcc 	andi	r7,r7,255
  28bfa8:	39400726 	beq	r7,r5,28bfc8 <__ledf2+0xbc>
  28bfac:	2800081e 	bne	r5,zero,28bfd0 <__ledf2+0xc4>
  28bfb0:	00800044 	movi	r2,1
  28bfb4:	f800283a 	ret
  28bfb8:	2292b03a 	or	r9,r4,r10
  28bfbc:	483fdf26 	beq	r9,zero,28bf3c <__ledf2+0x30>
  28bfc0:	00800084 	movi	r2,2
  28bfc4:	f800283a 	ret
  28bfc8:	4080030e 	bge	r8,r2,28bfd8 <__ledf2+0xcc>
  28bfcc:	383fef26 	beq	r7,zero,28bf8c <__ledf2+0x80>
  28bfd0:	00bfffc4 	movi	r2,-1
  28bfd4:	f800283a 	ret
  28bfd8:	123feb16 	blt	r2,r8,28bf88 <__ledf2+0x7c>
  28bfdc:	1abff336 	bltu	r3,r10,28bfac <__ledf2+0xa0>
  28bfe0:	50c00326 	beq	r10,r3,28bff0 <__ledf2+0xe4>
  28bfe4:	50c0042e 	bgeu	r10,r3,28bff8 <__ledf2+0xec>
  28bfe8:	283fe81e 	bne	r5,zero,28bf8c <__ledf2+0x80>
  28bfec:	003ff806 	br	28bfd0 <__ledf2+0xc4>
  28bff0:	313fee36 	bltu	r6,r4,28bfac <__ledf2+0xa0>
  28bff4:	21bffc36 	bltu	r4,r6,28bfe8 <__ledf2+0xdc>
  28bff8:	0005883a 	mov	r2,zero
  28bffc:	f800283a 	ret

0028c000 <__muldf3>:
  28c000:	defff304 	addi	sp,sp,-52
  28c004:	2804d53a 	srli	r2,r5,20
  28c008:	dd800915 	stw	r22,36(sp)
  28c00c:	282cd7fa 	srli	r22,r5,31
  28c010:	dc000315 	stw	r16,12(sp)
  28c014:	04000434 	movhi	r16,16
  28c018:	dd400815 	stw	r21,32(sp)
  28c01c:	dc800515 	stw	r18,20(sp)
  28c020:	843fffc4 	addi	r16,r16,-1
  28c024:	dfc00c15 	stw	ra,48(sp)
  28c028:	df000b15 	stw	fp,44(sp)
  28c02c:	ddc00a15 	stw	r23,40(sp)
  28c030:	dd000715 	stw	r20,28(sp)
  28c034:	dcc00615 	stw	r19,24(sp)
  28c038:	dc400415 	stw	r17,16(sp)
  28c03c:	1481ffcc 	andi	r18,r2,2047
  28c040:	2c20703a 	and	r16,r5,r16
  28c044:	b02b883a 	mov	r21,r22
  28c048:	b2403fcc 	andi	r9,r22,255
  28c04c:	90006026 	beq	r18,zero,28c1d0 <__muldf3+0x1d0>
  28c050:	0081ffc4 	movi	r2,2047
  28c054:	2029883a 	mov	r20,r4
  28c058:	90803626 	beq	r18,r2,28c134 <__muldf3+0x134>
  28c05c:	80800434 	orhi	r2,r16,16
  28c060:	100490fa 	slli	r2,r2,3
  28c064:	2020d77a 	srli	r16,r4,29
  28c068:	202890fa 	slli	r20,r4,3
  28c06c:	94bf0044 	addi	r18,r18,-1023
  28c070:	80a0b03a 	or	r16,r16,r2
  28c074:	0027883a 	mov	r19,zero
  28c078:	0039883a 	mov	fp,zero
  28c07c:	3804d53a 	srli	r2,r7,20
  28c080:	382ed7fa 	srli	r23,r7,31
  28c084:	04400434 	movhi	r17,16
  28c088:	8c7fffc4 	addi	r17,r17,-1
  28c08c:	1081ffcc 	andi	r2,r2,2047
  28c090:	3011883a 	mov	r8,r6
  28c094:	3c62703a 	and	r17,r7,r17
  28c098:	ba803fcc 	andi	r10,r23,255
  28c09c:	10006d26 	beq	r2,zero,28c254 <__muldf3+0x254>
  28c0a0:	00c1ffc4 	movi	r3,2047
  28c0a4:	10c06526 	beq	r2,r3,28c23c <__muldf3+0x23c>
  28c0a8:	88c00434 	orhi	r3,r17,16
  28c0ac:	180690fa 	slli	r3,r3,3
  28c0b0:	3022d77a 	srli	r17,r6,29
  28c0b4:	301090fa 	slli	r8,r6,3
  28c0b8:	10bf0044 	addi	r2,r2,-1023
  28c0bc:	88e2b03a 	or	r17,r17,r3
  28c0c0:	000b883a 	mov	r5,zero
  28c0c4:	9085883a 	add	r2,r18,r2
  28c0c8:	2cc8b03a 	or	r4,r5,r19
  28c0cc:	00c003c4 	movi	r3,15
  28c0d0:	bdacf03a 	xor	r22,r23,r22
  28c0d4:	12c00044 	addi	r11,r2,1
  28c0d8:	19009936 	bltu	r3,r4,28c340 <__muldf3+0x340>
  28c0dc:	200890ba 	slli	r4,r4,2
  28c0e0:	00c00a74 	movhi	r3,41
  28c0e4:	18f03d04 	addi	r3,r3,-16140
  28c0e8:	20c9883a 	add	r4,r4,r3
  28c0ec:	20c00017 	ldw	r3,0(r4)
  28c0f0:	1800683a 	jmp	r3
  28c0f4:	0028c340 	call	28c34 <__alt_mem_onchip_memory2_0-0x2573cc>
  28c0f8:	0028c154 	movui	zero,41733
  28c0fc:	0028c154 	movui	zero,41733
  28c100:	0028c150 	cmplti	zero,zero,-23803
  28c104:	0028c31c 	xori	zero,zero,41740
  28c108:	0028c31c 	xori	zero,zero,41740
  28c10c:	0028c304 	movi	zero,-23796
  28c110:	0028c150 	cmplti	zero,zero,-23803
  28c114:	0028c31c 	xori	zero,zero,41740
  28c118:	0028c304 	movi	zero,-23796
  28c11c:	0028c31c 	xori	zero,zero,41740
  28c120:	0028c150 	cmplti	zero,zero,-23803
  28c124:	0028c32c 	andhi	zero,zero,41740
  28c128:	0028c32c 	andhi	zero,zero,41740
  28c12c:	0028c32c 	andhi	zero,zero,41740
  28c130:	0028c548 	cmpgei	zero,zero,-23787
  28c134:	2404b03a 	or	r2,r4,r16
  28c138:	10006f1e 	bne	r2,zero,28c2f8 <__muldf3+0x2f8>
  28c13c:	04c00204 	movi	r19,8
  28c140:	0021883a 	mov	r16,zero
  28c144:	0029883a 	mov	r20,zero
  28c148:	07000084 	movi	fp,2
  28c14c:	003fcb06 	br	28c07c <__muldf3+0x7c>
  28c150:	502d883a 	mov	r22,r10
  28c154:	00800084 	movi	r2,2
  28c158:	28805726 	beq	r5,r2,28c2b8 <__muldf3+0x2b8>
  28c15c:	008000c4 	movi	r2,3
  28c160:	28816626 	beq	r5,r2,28c6fc <__muldf3+0x6fc>
  28c164:	00800044 	movi	r2,1
  28c168:	2881411e 	bne	r5,r2,28c670 <__muldf3+0x670>
  28c16c:	b02b883a 	mov	r21,r22
  28c170:	0005883a 	mov	r2,zero
  28c174:	000b883a 	mov	r5,zero
  28c178:	0029883a 	mov	r20,zero
  28c17c:	1004953a 	slli	r2,r2,20
  28c180:	a8c03fcc 	andi	r3,r21,255
  28c184:	04400434 	movhi	r17,16
  28c188:	8c7fffc4 	addi	r17,r17,-1
  28c18c:	180697fa 	slli	r3,r3,31
  28c190:	2c4a703a 	and	r5,r5,r17
  28c194:	288ab03a 	or	r5,r5,r2
  28c198:	28c6b03a 	or	r3,r5,r3
  28c19c:	a005883a 	mov	r2,r20
  28c1a0:	dfc00c17 	ldw	ra,48(sp)
  28c1a4:	df000b17 	ldw	fp,44(sp)
  28c1a8:	ddc00a17 	ldw	r23,40(sp)
  28c1ac:	dd800917 	ldw	r22,36(sp)
  28c1b0:	dd400817 	ldw	r21,32(sp)
  28c1b4:	dd000717 	ldw	r20,28(sp)
  28c1b8:	dcc00617 	ldw	r19,24(sp)
  28c1bc:	dc800517 	ldw	r18,20(sp)
  28c1c0:	dc400417 	ldw	r17,16(sp)
  28c1c4:	dc000317 	ldw	r16,12(sp)
  28c1c8:	dec00d04 	addi	sp,sp,52
  28c1cc:	f800283a 	ret
  28c1d0:	2404b03a 	or	r2,r4,r16
  28c1d4:	2027883a 	mov	r19,r4
  28c1d8:	10004226 	beq	r2,zero,28c2e4 <__muldf3+0x2e4>
  28c1dc:	8000fc26 	beq	r16,zero,28c5d0 <__muldf3+0x5d0>
  28c1e0:	8009883a 	mov	r4,r16
  28c1e4:	d9800215 	stw	r6,8(sp)
  28c1e8:	d9c00015 	stw	r7,0(sp)
  28c1ec:	da400115 	stw	r9,4(sp)
  28c1f0:	028d2180 	call	28d218 <__clzsi2>
  28c1f4:	d9800217 	ldw	r6,8(sp)
  28c1f8:	d9c00017 	ldw	r7,0(sp)
  28c1fc:	da400117 	ldw	r9,4(sp)
  28c200:	113ffd44 	addi	r4,r2,-11
  28c204:	00c00704 	movi	r3,28
  28c208:	1900ed16 	blt	r3,r4,28c5c0 <__muldf3+0x5c0>
  28c20c:	00c00744 	movi	r3,29
  28c210:	147ffe04 	addi	r17,r2,-8
  28c214:	1907c83a 	sub	r3,r3,r4
  28c218:	8460983a 	sll	r16,r16,r17
  28c21c:	98c6d83a 	srl	r3,r19,r3
  28c220:	9c68983a 	sll	r20,r19,r17
  28c224:	1c20b03a 	or	r16,r3,r16
  28c228:	1080fcc4 	addi	r2,r2,1011
  28c22c:	00a5c83a 	sub	r18,zero,r2
  28c230:	0027883a 	mov	r19,zero
  28c234:	0039883a 	mov	fp,zero
  28c238:	003f9006 	br	28c07c <__muldf3+0x7c>
  28c23c:	3446b03a 	or	r3,r6,r17
  28c240:	1800261e 	bne	r3,zero,28c2dc <__muldf3+0x2dc>
  28c244:	0023883a 	mov	r17,zero
  28c248:	0011883a 	mov	r8,zero
  28c24c:	01400084 	movi	r5,2
  28c250:	003f9c06 	br	28c0c4 <__muldf3+0xc4>
  28c254:	3446b03a 	or	r3,r6,r17
  28c258:	18001c26 	beq	r3,zero,28c2cc <__muldf3+0x2cc>
  28c25c:	8800ce26 	beq	r17,zero,28c598 <__muldf3+0x598>
  28c260:	8809883a 	mov	r4,r17
  28c264:	d9800215 	stw	r6,8(sp)
  28c268:	da400115 	stw	r9,4(sp)
  28c26c:	da800015 	stw	r10,0(sp)
  28c270:	028d2180 	call	28d218 <__clzsi2>
  28c274:	d9800217 	ldw	r6,8(sp)
  28c278:	da400117 	ldw	r9,4(sp)
  28c27c:	da800017 	ldw	r10,0(sp)
  28c280:	113ffd44 	addi	r4,r2,-11
  28c284:	00c00704 	movi	r3,28
  28c288:	1900bf16 	blt	r3,r4,28c588 <__muldf3+0x588>
  28c28c:	00c00744 	movi	r3,29
  28c290:	123ffe04 	addi	r8,r2,-8
  28c294:	1907c83a 	sub	r3,r3,r4
  28c298:	8a22983a 	sll	r17,r17,r8
  28c29c:	30c6d83a 	srl	r3,r6,r3
  28c2a0:	3210983a 	sll	r8,r6,r8
  28c2a4:	1c62b03a 	or	r17,r3,r17
  28c2a8:	1080fcc4 	addi	r2,r2,1011
  28c2ac:	0085c83a 	sub	r2,zero,r2
  28c2b0:	000b883a 	mov	r5,zero
  28c2b4:	003f8306 	br	28c0c4 <__muldf3+0xc4>
  28c2b8:	b02b883a 	mov	r21,r22
  28c2bc:	0081ffc4 	movi	r2,2047
  28c2c0:	000b883a 	mov	r5,zero
  28c2c4:	0029883a 	mov	r20,zero
  28c2c8:	003fac06 	br	28c17c <__muldf3+0x17c>
  28c2cc:	0023883a 	mov	r17,zero
  28c2d0:	0011883a 	mov	r8,zero
  28c2d4:	01400044 	movi	r5,1
  28c2d8:	003f7a06 	br	28c0c4 <__muldf3+0xc4>
  28c2dc:	014000c4 	movi	r5,3
  28c2e0:	003f7806 	br	28c0c4 <__muldf3+0xc4>
  28c2e4:	04c00104 	movi	r19,4
  28c2e8:	0021883a 	mov	r16,zero
  28c2ec:	0029883a 	mov	r20,zero
  28c2f0:	07000044 	movi	fp,1
  28c2f4:	003f6106 	br	28c07c <__muldf3+0x7c>
  28c2f8:	04c00304 	movi	r19,12
  28c2fc:	070000c4 	movi	fp,3
  28c300:	003f5e06 	br	28c07c <__muldf3+0x7c>
  28c304:	01400434 	movhi	r5,16
  28c308:	002b883a 	mov	r21,zero
  28c30c:	297fffc4 	addi	r5,r5,-1
  28c310:	053fffc4 	movi	r20,-1
  28c314:	0081ffc4 	movi	r2,2047
  28c318:	003f9806 	br	28c17c <__muldf3+0x17c>
  28c31c:	8023883a 	mov	r17,r16
  28c320:	a011883a 	mov	r8,r20
  28c324:	e00b883a 	mov	r5,fp
  28c328:	003f8a06 	br	28c154 <__muldf3+0x154>
  28c32c:	8023883a 	mov	r17,r16
  28c330:	a011883a 	mov	r8,r20
  28c334:	482d883a 	mov	r22,r9
  28c338:	e00b883a 	mov	r5,fp
  28c33c:	003f8506 	br	28c154 <__muldf3+0x154>
  28c340:	a00ad43a 	srli	r5,r20,16
  28c344:	401ad43a 	srli	r13,r8,16
  28c348:	a53fffcc 	andi	r20,r20,65535
  28c34c:	423fffcc 	andi	r8,r8,65535
  28c350:	4519383a 	mul	r12,r8,r20
  28c354:	4147383a 	mul	r3,r8,r5
  28c358:	6d09383a 	mul	r4,r13,r20
  28c35c:	600cd43a 	srli	r6,r12,16
  28c360:	2b5d383a 	mul	r14,r5,r13
  28c364:	20c9883a 	add	r4,r4,r3
  28c368:	310d883a 	add	r6,r6,r4
  28c36c:	30c0022e 	bgeu	r6,r3,28c378 <__muldf3+0x378>
  28c370:	00c00074 	movhi	r3,1
  28c374:	70dd883a 	add	r14,r14,r3
  28c378:	8826d43a 	srli	r19,r17,16
  28c37c:	8bffffcc 	andi	r15,r17,65535
  28c380:	7d23383a 	mul	r17,r15,r20
  28c384:	7949383a 	mul	r4,r15,r5
  28c388:	9d29383a 	mul	r20,r19,r20
  28c38c:	8814d43a 	srli	r10,r17,16
  28c390:	3012943a 	slli	r9,r6,16
  28c394:	a129883a 	add	r20,r20,r4
  28c398:	633fffcc 	andi	r12,r12,65535
  28c39c:	5515883a 	add	r10,r10,r20
  28c3a0:	3006d43a 	srli	r3,r6,16
  28c3a4:	4b13883a 	add	r9,r9,r12
  28c3a8:	2ccb383a 	mul	r5,r5,r19
  28c3ac:	5100022e 	bgeu	r10,r4,28c3b8 <__muldf3+0x3b8>
  28c3b0:	01000074 	movhi	r4,1
  28c3b4:	290b883a 	add	r5,r5,r4
  28c3b8:	802ad43a 	srli	r21,r16,16
  28c3bc:	843fffcc 	andi	r16,r16,65535
  28c3c0:	440d383a 	mul	r6,r8,r16
  28c3c4:	4565383a 	mul	r18,r8,r21
  28c3c8:	8349383a 	mul	r4,r16,r13
  28c3cc:	500e943a 	slli	r7,r10,16
  28c3d0:	3010d43a 	srli	r8,r6,16
  28c3d4:	5028d43a 	srli	r20,r10,16
  28c3d8:	2489883a 	add	r4,r4,r18
  28c3dc:	8abfffcc 	andi	r10,r17,65535
  28c3e0:	3a95883a 	add	r10,r7,r10
  28c3e4:	4119883a 	add	r12,r8,r4
  28c3e8:	a169883a 	add	r20,r20,r5
  28c3ec:	1a87883a 	add	r3,r3,r10
  28c3f0:	6d5b383a 	mul	r13,r13,r21
  28c3f4:	6480022e 	bgeu	r12,r18,28c400 <__muldf3+0x400>
  28c3f8:	01000074 	movhi	r4,1
  28c3fc:	691b883a 	add	r13,r13,r4
  28c400:	7c25383a 	mul	r18,r15,r16
  28c404:	7d4b383a 	mul	r5,r15,r21
  28c408:	84cf383a 	mul	r7,r16,r19
  28c40c:	901ed43a 	srli	r15,r18,16
  28c410:	6008d43a 	srli	r4,r12,16
  28c414:	6010943a 	slli	r8,r12,16
  28c418:	394f883a 	add	r7,r7,r5
  28c41c:	333fffcc 	andi	r12,r6,65535
  28c420:	79df883a 	add	r15,r15,r7
  28c424:	235b883a 	add	r13,r4,r13
  28c428:	9d63383a 	mul	r17,r19,r21
  28c42c:	4309883a 	add	r4,r8,r12
  28c430:	7940022e 	bgeu	r15,r5,28c43c <__muldf3+0x43c>
  28c434:	01400074 	movhi	r5,1
  28c438:	8963883a 	add	r17,r17,r5
  28c43c:	780a943a 	slli	r5,r15,16
  28c440:	91bfffcc 	andi	r6,r18,65535
  28c444:	70c7883a 	add	r3,r14,r3
  28c448:	298d883a 	add	r6,r5,r6
  28c44c:	1a8f803a 	cmpltu	r7,r3,r10
  28c450:	350b883a 	add	r5,r6,r20
  28c454:	20c7883a 	add	r3,r4,r3
  28c458:	3955883a 	add	r10,r7,r5
  28c45c:	1909803a 	cmpltu	r4,r3,r4
  28c460:	6a91883a 	add	r8,r13,r10
  28c464:	780cd43a 	srli	r6,r15,16
  28c468:	2219883a 	add	r12,r4,r8
  28c46c:	2d0b803a 	cmpltu	r5,r5,r20
  28c470:	51cf803a 	cmpltu	r7,r10,r7
  28c474:	29ceb03a 	or	r7,r5,r7
  28c478:	4351803a 	cmpltu	r8,r8,r13
  28c47c:	610b803a 	cmpltu	r5,r12,r4
  28c480:	4148b03a 	or	r4,r8,r5
  28c484:	398f883a 	add	r7,r7,r6
  28c488:	3909883a 	add	r4,r7,r4
  28c48c:	1810927a 	slli	r8,r3,9
  28c490:	2449883a 	add	r4,r4,r17
  28c494:	2008927a 	slli	r4,r4,9
  28c498:	6022d5fa 	srli	r17,r12,23
  28c49c:	1806d5fa 	srli	r3,r3,23
  28c4a0:	4252b03a 	or	r9,r8,r9
  28c4a4:	600a927a 	slli	r5,r12,9
  28c4a8:	4810c03a 	cmpne	r8,r9,zero
  28c4ac:	2462b03a 	or	r17,r4,r17
  28c4b0:	40c6b03a 	or	r3,r8,r3
  28c4b4:	8900402c 	andhi	r4,r17,256
  28c4b8:	1950b03a 	or	r8,r3,r5
  28c4bc:	20000726 	beq	r4,zero,28c4dc <__muldf3+0x4dc>
  28c4c0:	4006d07a 	srli	r3,r8,1
  28c4c4:	880497fa 	slli	r2,r17,31
  28c4c8:	4200004c 	andi	r8,r8,1
  28c4cc:	8822d07a 	srli	r17,r17,1
  28c4d0:	1a10b03a 	or	r8,r3,r8
  28c4d4:	1210b03a 	or	r8,r2,r8
  28c4d8:	5805883a 	mov	r2,r11
  28c4dc:	1140ffc4 	addi	r5,r2,1023
  28c4e0:	0140440e 	bge	zero,r5,28c5f4 <__muldf3+0x5f4>
  28c4e4:	40c001cc 	andi	r3,r8,7
  28c4e8:	18000726 	beq	r3,zero,28c508 <__muldf3+0x508>
  28c4ec:	40c003cc 	andi	r3,r8,15
  28c4f0:	01000104 	movi	r4,4
  28c4f4:	19000426 	beq	r3,r4,28c508 <__muldf3+0x508>
  28c4f8:	4107883a 	add	r3,r8,r4
  28c4fc:	1a11803a 	cmpltu	r8,r3,r8
  28c500:	8a23883a 	add	r17,r17,r8
  28c504:	1811883a 	mov	r8,r3
  28c508:	88c0402c 	andhi	r3,r17,256
  28c50c:	18000426 	beq	r3,zero,28c520 <__muldf3+0x520>
  28c510:	11410004 	addi	r5,r2,1024
  28c514:	00bfc034 	movhi	r2,65280
  28c518:	10bfffc4 	addi	r2,r2,-1
  28c51c:	88a2703a 	and	r17,r17,r2
  28c520:	0081ff84 	movi	r2,2046
  28c524:	117f6416 	blt	r2,r5,28c2b8 <__muldf3+0x2b8>
  28c528:	8828977a 	slli	r20,r17,29
  28c52c:	4010d0fa 	srli	r8,r8,3
  28c530:	8822927a 	slli	r17,r17,9
  28c534:	2881ffcc 	andi	r2,r5,2047
  28c538:	a228b03a 	or	r20,r20,r8
  28c53c:	880ad33a 	srli	r5,r17,12
  28c540:	b02b883a 	mov	r21,r22
  28c544:	003f0d06 	br	28c17c <__muldf3+0x17c>
  28c548:	8080022c 	andhi	r2,r16,8
  28c54c:	10000926 	beq	r2,zero,28c574 <__muldf3+0x574>
  28c550:	8880022c 	andhi	r2,r17,8
  28c554:	1000071e 	bne	r2,zero,28c574 <__muldf3+0x574>
  28c558:	00800434 	movhi	r2,16
  28c55c:	89400234 	orhi	r5,r17,8
  28c560:	10bfffc4 	addi	r2,r2,-1
  28c564:	b82b883a 	mov	r21,r23
  28c568:	288a703a 	and	r5,r5,r2
  28c56c:	4029883a 	mov	r20,r8
  28c570:	003f6806 	br	28c314 <__muldf3+0x314>
  28c574:	00800434 	movhi	r2,16
  28c578:	81400234 	orhi	r5,r16,8
  28c57c:	10bfffc4 	addi	r2,r2,-1
  28c580:	288a703a 	and	r5,r5,r2
  28c584:	003f6306 	br	28c314 <__muldf3+0x314>
  28c588:	147ff604 	addi	r17,r2,-40
  28c58c:	3462983a 	sll	r17,r6,r17
  28c590:	0011883a 	mov	r8,zero
  28c594:	003f4406 	br	28c2a8 <__muldf3+0x2a8>
  28c598:	3009883a 	mov	r4,r6
  28c59c:	d9800215 	stw	r6,8(sp)
  28c5a0:	da400115 	stw	r9,4(sp)
  28c5a4:	da800015 	stw	r10,0(sp)
  28c5a8:	028d2180 	call	28d218 <__clzsi2>
  28c5ac:	10800804 	addi	r2,r2,32
  28c5b0:	da800017 	ldw	r10,0(sp)
  28c5b4:	da400117 	ldw	r9,4(sp)
  28c5b8:	d9800217 	ldw	r6,8(sp)
  28c5bc:	003f3006 	br	28c280 <__muldf3+0x280>
  28c5c0:	143ff604 	addi	r16,r2,-40
  28c5c4:	9c20983a 	sll	r16,r19,r16
  28c5c8:	0029883a 	mov	r20,zero
  28c5cc:	003f1606 	br	28c228 <__muldf3+0x228>
  28c5d0:	d9800215 	stw	r6,8(sp)
  28c5d4:	d9c00015 	stw	r7,0(sp)
  28c5d8:	da400115 	stw	r9,4(sp)
  28c5dc:	028d2180 	call	28d218 <__clzsi2>
  28c5e0:	10800804 	addi	r2,r2,32
  28c5e4:	da400117 	ldw	r9,4(sp)
  28c5e8:	d9c00017 	ldw	r7,0(sp)
  28c5ec:	d9800217 	ldw	r6,8(sp)
  28c5f0:	003f0306 	br	28c200 <__muldf3+0x200>
  28c5f4:	00c00044 	movi	r3,1
  28c5f8:	1947c83a 	sub	r3,r3,r5
  28c5fc:	00800e04 	movi	r2,56
  28c600:	10feda16 	blt	r2,r3,28c16c <__muldf3+0x16c>
  28c604:	008007c4 	movi	r2,31
  28c608:	10c01b16 	blt	r2,r3,28c678 <__muldf3+0x678>
  28c60c:	00800804 	movi	r2,32
  28c610:	10c5c83a 	sub	r2,r2,r3
  28c614:	888a983a 	sll	r5,r17,r2
  28c618:	40c8d83a 	srl	r4,r8,r3
  28c61c:	4084983a 	sll	r2,r8,r2
  28c620:	88e2d83a 	srl	r17,r17,r3
  28c624:	2906b03a 	or	r3,r5,r4
  28c628:	1004c03a 	cmpne	r2,r2,zero
  28c62c:	1886b03a 	or	r3,r3,r2
  28c630:	188001cc 	andi	r2,r3,7
  28c634:	10000726 	beq	r2,zero,28c654 <__muldf3+0x654>
  28c638:	188003cc 	andi	r2,r3,15
  28c63c:	01000104 	movi	r4,4
  28c640:	11000426 	beq	r2,r4,28c654 <__muldf3+0x654>
  28c644:	1805883a 	mov	r2,r3
  28c648:	10c00104 	addi	r3,r2,4
  28c64c:	1885803a 	cmpltu	r2,r3,r2
  28c650:	88a3883a 	add	r17,r17,r2
  28c654:	8880202c 	andhi	r2,r17,128
  28c658:	10001c26 	beq	r2,zero,28c6cc <__muldf3+0x6cc>
  28c65c:	b02b883a 	mov	r21,r22
  28c660:	00800044 	movi	r2,1
  28c664:	000b883a 	mov	r5,zero
  28c668:	0029883a 	mov	r20,zero
  28c66c:	003ec306 	br	28c17c <__muldf3+0x17c>
  28c670:	5805883a 	mov	r2,r11
  28c674:	003f9906 	br	28c4dc <__muldf3+0x4dc>
  28c678:	00bff844 	movi	r2,-31
  28c67c:	1145c83a 	sub	r2,r2,r5
  28c680:	8888d83a 	srl	r4,r17,r2
  28c684:	00800804 	movi	r2,32
  28c688:	18801a26 	beq	r3,r2,28c6f4 <__muldf3+0x6f4>
  28c68c:	00801004 	movi	r2,64
  28c690:	10c5c83a 	sub	r2,r2,r3
  28c694:	8884983a 	sll	r2,r17,r2
  28c698:	1204b03a 	or	r2,r2,r8
  28c69c:	1004c03a 	cmpne	r2,r2,zero
  28c6a0:	2084b03a 	or	r2,r4,r2
  28c6a4:	144001cc 	andi	r17,r2,7
  28c6a8:	88000d1e 	bne	r17,zero,28c6e0 <__muldf3+0x6e0>
  28c6ac:	000b883a 	mov	r5,zero
  28c6b0:	1028d0fa 	srli	r20,r2,3
  28c6b4:	b02b883a 	mov	r21,r22
  28c6b8:	0005883a 	mov	r2,zero
  28c6bc:	a468b03a 	or	r20,r20,r17
  28c6c0:	003eae06 	br	28c17c <__muldf3+0x17c>
  28c6c4:	1007883a 	mov	r3,r2
  28c6c8:	0023883a 	mov	r17,zero
  28c6cc:	880a927a 	slli	r5,r17,9
  28c6d0:	1805883a 	mov	r2,r3
  28c6d4:	8822977a 	slli	r17,r17,29
  28c6d8:	280ad33a 	srli	r5,r5,12
  28c6dc:	003ff406 	br	28c6b0 <__muldf3+0x6b0>
  28c6e0:	10c003cc 	andi	r3,r2,15
  28c6e4:	01000104 	movi	r4,4
  28c6e8:	193ff626 	beq	r3,r4,28c6c4 <__muldf3+0x6c4>
  28c6ec:	0023883a 	mov	r17,zero
  28c6f0:	003fd506 	br	28c648 <__muldf3+0x648>
  28c6f4:	0005883a 	mov	r2,zero
  28c6f8:	003fe706 	br	28c698 <__muldf3+0x698>
  28c6fc:	00800434 	movhi	r2,16
  28c700:	89400234 	orhi	r5,r17,8
  28c704:	10bfffc4 	addi	r2,r2,-1
  28c708:	b02b883a 	mov	r21,r22
  28c70c:	288a703a 	and	r5,r5,r2
  28c710:	4029883a 	mov	r20,r8
  28c714:	003eff06 	br	28c314 <__muldf3+0x314>

0028c718 <__subdf3>:
  28c718:	02000434 	movhi	r8,16
  28c71c:	423fffc4 	addi	r8,r8,-1
  28c720:	defffb04 	addi	sp,sp,-20
  28c724:	2a14703a 	and	r10,r5,r8
  28c728:	3812d53a 	srli	r9,r7,20
  28c72c:	3a10703a 	and	r8,r7,r8
  28c730:	2006d77a 	srli	r3,r4,29
  28c734:	3004d77a 	srli	r2,r6,29
  28c738:	dc000015 	stw	r16,0(sp)
  28c73c:	501490fa 	slli	r10,r10,3
  28c740:	2820d53a 	srli	r16,r5,20
  28c744:	401090fa 	slli	r8,r8,3
  28c748:	dc800215 	stw	r18,8(sp)
  28c74c:	dc400115 	stw	r17,4(sp)
  28c750:	dfc00415 	stw	ra,16(sp)
  28c754:	202290fa 	slli	r17,r4,3
  28c758:	dcc00315 	stw	r19,12(sp)
  28c75c:	4a41ffcc 	andi	r9,r9,2047
  28c760:	0101ffc4 	movi	r4,2047
  28c764:	2824d7fa 	srli	r18,r5,31
  28c768:	8401ffcc 	andi	r16,r16,2047
  28c76c:	50c6b03a 	or	r3,r10,r3
  28c770:	380ed7fa 	srli	r7,r7,31
  28c774:	408ab03a 	or	r5,r8,r2
  28c778:	300c90fa 	slli	r6,r6,3
  28c77c:	49009626 	beq	r9,r4,28c9d8 <__subdf3+0x2c0>
  28c780:	39c0005c 	xori	r7,r7,1
  28c784:	8245c83a 	sub	r2,r16,r9
  28c788:	3c807426 	beq	r7,r18,28c95c <__subdf3+0x244>
  28c78c:	0080af0e 	bge	zero,r2,28ca4c <__subdf3+0x334>
  28c790:	48002a1e 	bne	r9,zero,28c83c <__subdf3+0x124>
  28c794:	2988b03a 	or	r4,r5,r6
  28c798:	20009a1e 	bne	r4,zero,28ca04 <__subdf3+0x2ec>
  28c79c:	888001cc 	andi	r2,r17,7
  28c7a0:	10000726 	beq	r2,zero,28c7c0 <__subdf3+0xa8>
  28c7a4:	888003cc 	andi	r2,r17,15
  28c7a8:	01000104 	movi	r4,4
  28c7ac:	11000426 	beq	r2,r4,28c7c0 <__subdf3+0xa8>
  28c7b0:	890b883a 	add	r5,r17,r4
  28c7b4:	2c63803a 	cmpltu	r17,r5,r17
  28c7b8:	1c47883a 	add	r3,r3,r17
  28c7bc:	2823883a 	mov	r17,r5
  28c7c0:	1880202c 	andhi	r2,r3,128
  28c7c4:	10005926 	beq	r2,zero,28c92c <__subdf3+0x214>
  28c7c8:	84000044 	addi	r16,r16,1
  28c7cc:	0081ffc4 	movi	r2,2047
  28c7d0:	8080be26 	beq	r16,r2,28cacc <__subdf3+0x3b4>
  28c7d4:	017fe034 	movhi	r5,65408
  28c7d8:	297fffc4 	addi	r5,r5,-1
  28c7dc:	1946703a 	and	r3,r3,r5
  28c7e0:	1804977a 	slli	r2,r3,29
  28c7e4:	1806927a 	slli	r3,r3,9
  28c7e8:	8822d0fa 	srli	r17,r17,3
  28c7ec:	8401ffcc 	andi	r16,r16,2047
  28c7f0:	180ad33a 	srli	r5,r3,12
  28c7f4:	9100004c 	andi	r4,r18,1
  28c7f8:	1444b03a 	or	r2,r2,r17
  28c7fc:	80c1ffcc 	andi	r3,r16,2047
  28c800:	1820953a 	slli	r16,r3,20
  28c804:	20c03fcc 	andi	r3,r4,255
  28c808:	180897fa 	slli	r4,r3,31
  28c80c:	00c00434 	movhi	r3,16
  28c810:	18ffffc4 	addi	r3,r3,-1
  28c814:	28c6703a 	and	r3,r5,r3
  28c818:	1c06b03a 	or	r3,r3,r16
  28c81c:	1906b03a 	or	r3,r3,r4
  28c820:	dfc00417 	ldw	ra,16(sp)
  28c824:	dcc00317 	ldw	r19,12(sp)
  28c828:	dc800217 	ldw	r18,8(sp)
  28c82c:	dc400117 	ldw	r17,4(sp)
  28c830:	dc000017 	ldw	r16,0(sp)
  28c834:	dec00504 	addi	sp,sp,20
  28c838:	f800283a 	ret
  28c83c:	0101ffc4 	movi	r4,2047
  28c840:	813fd626 	beq	r16,r4,28c79c <__subdf3+0x84>
  28c844:	29402034 	orhi	r5,r5,128
  28c848:	01000e04 	movi	r4,56
  28c84c:	2080a316 	blt	r4,r2,28cadc <__subdf3+0x3c4>
  28c850:	010007c4 	movi	r4,31
  28c854:	2080c616 	blt	r4,r2,28cb70 <__subdf3+0x458>
  28c858:	01000804 	movi	r4,32
  28c85c:	2089c83a 	sub	r4,r4,r2
  28c860:	2910983a 	sll	r8,r5,r4
  28c864:	308ed83a 	srl	r7,r6,r2
  28c868:	3108983a 	sll	r4,r6,r4
  28c86c:	2884d83a 	srl	r2,r5,r2
  28c870:	41ccb03a 	or	r6,r8,r7
  28c874:	2008c03a 	cmpne	r4,r4,zero
  28c878:	310cb03a 	or	r6,r6,r4
  28c87c:	898dc83a 	sub	r6,r17,r6
  28c880:	89a3803a 	cmpltu	r17,r17,r6
  28c884:	1887c83a 	sub	r3,r3,r2
  28c888:	1c47c83a 	sub	r3,r3,r17
  28c88c:	3023883a 	mov	r17,r6
  28c890:	1880202c 	andhi	r2,r3,128
  28c894:	10002326 	beq	r2,zero,28c924 <__subdf3+0x20c>
  28c898:	04c02034 	movhi	r19,128
  28c89c:	9cffffc4 	addi	r19,r19,-1
  28c8a0:	1ce6703a 	and	r19,r3,r19
  28c8a4:	98007a26 	beq	r19,zero,28ca90 <__subdf3+0x378>
  28c8a8:	9809883a 	mov	r4,r19
  28c8ac:	028d2180 	call	28d218 <__clzsi2>
  28c8b0:	113ffe04 	addi	r4,r2,-8
  28c8b4:	00c007c4 	movi	r3,31
  28c8b8:	19007b16 	blt	r3,r4,28caa8 <__subdf3+0x390>
  28c8bc:	00800804 	movi	r2,32
  28c8c0:	1105c83a 	sub	r2,r2,r4
  28c8c4:	8884d83a 	srl	r2,r17,r2
  28c8c8:	9906983a 	sll	r3,r19,r4
  28c8cc:	8922983a 	sll	r17,r17,r4
  28c8d0:	10c4b03a 	or	r2,r2,r3
  28c8d4:	24007816 	blt	r4,r16,28cab8 <__subdf3+0x3a0>
  28c8d8:	2421c83a 	sub	r16,r4,r16
  28c8dc:	80c00044 	addi	r3,r16,1
  28c8e0:	010007c4 	movi	r4,31
  28c8e4:	20c09516 	blt	r4,r3,28cb3c <__subdf3+0x424>
  28c8e8:	01400804 	movi	r5,32
  28c8ec:	28cbc83a 	sub	r5,r5,r3
  28c8f0:	88c8d83a 	srl	r4,r17,r3
  28c8f4:	8962983a 	sll	r17,r17,r5
  28c8f8:	114a983a 	sll	r5,r2,r5
  28c8fc:	10c6d83a 	srl	r3,r2,r3
  28c900:	8804c03a 	cmpne	r2,r17,zero
  28c904:	290ab03a 	or	r5,r5,r4
  28c908:	28a2b03a 	or	r17,r5,r2
  28c90c:	0021883a 	mov	r16,zero
  28c910:	003fa206 	br	28c79c <__subdf3+0x84>
  28c914:	2090b03a 	or	r8,r4,r2
  28c918:	40018e26 	beq	r8,zero,28cf54 <__subdf3+0x83c>
  28c91c:	1007883a 	mov	r3,r2
  28c920:	2023883a 	mov	r17,r4
  28c924:	888001cc 	andi	r2,r17,7
  28c928:	103f9e1e 	bne	r2,zero,28c7a4 <__subdf3+0x8c>
  28c92c:	1804977a 	slli	r2,r3,29
  28c930:	8822d0fa 	srli	r17,r17,3
  28c934:	1810d0fa 	srli	r8,r3,3
  28c938:	9100004c 	andi	r4,r18,1
  28c93c:	1444b03a 	or	r2,r2,r17
  28c940:	00c1ffc4 	movi	r3,2047
  28c944:	80c02826 	beq	r16,r3,28c9e8 <__subdf3+0x2d0>
  28c948:	01400434 	movhi	r5,16
  28c94c:	297fffc4 	addi	r5,r5,-1
  28c950:	80e0703a 	and	r16,r16,r3
  28c954:	414a703a 	and	r5,r8,r5
  28c958:	003fa806 	br	28c7fc <__subdf3+0xe4>
  28c95c:	0080630e 	bge	zero,r2,28caec <__subdf3+0x3d4>
  28c960:	48003026 	beq	r9,zero,28ca24 <__subdf3+0x30c>
  28c964:	0101ffc4 	movi	r4,2047
  28c968:	813f8c26 	beq	r16,r4,28c79c <__subdf3+0x84>
  28c96c:	29402034 	orhi	r5,r5,128
  28c970:	01000e04 	movi	r4,56
  28c974:	2080a90e 	bge	r4,r2,28cc1c <__subdf3+0x504>
  28c978:	298cb03a 	or	r6,r5,r6
  28c97c:	3012c03a 	cmpne	r9,r6,zero
  28c980:	0005883a 	mov	r2,zero
  28c984:	4c53883a 	add	r9,r9,r17
  28c988:	4c63803a 	cmpltu	r17,r9,r17
  28c98c:	10c7883a 	add	r3,r2,r3
  28c990:	88c7883a 	add	r3,r17,r3
  28c994:	4823883a 	mov	r17,r9
  28c998:	1880202c 	andhi	r2,r3,128
  28c99c:	1000d026 	beq	r2,zero,28cce0 <__subdf3+0x5c8>
  28c9a0:	84000044 	addi	r16,r16,1
  28c9a4:	0081ffc4 	movi	r2,2047
  28c9a8:	8080fe26 	beq	r16,r2,28cda4 <__subdf3+0x68c>
  28c9ac:	00bfe034 	movhi	r2,65408
  28c9b0:	10bfffc4 	addi	r2,r2,-1
  28c9b4:	1886703a 	and	r3,r3,r2
  28c9b8:	880ad07a 	srli	r5,r17,1
  28c9bc:	180497fa 	slli	r2,r3,31
  28c9c0:	8900004c 	andi	r4,r17,1
  28c9c4:	2922b03a 	or	r17,r5,r4
  28c9c8:	1806d07a 	srli	r3,r3,1
  28c9cc:	1462b03a 	or	r17,r2,r17
  28c9d0:	3825883a 	mov	r18,r7
  28c9d4:	003f7106 	br	28c79c <__subdf3+0x84>
  28c9d8:	2984b03a 	or	r2,r5,r6
  28c9dc:	103f6826 	beq	r2,zero,28c780 <__subdf3+0x68>
  28c9e0:	39c03fcc 	andi	r7,r7,255
  28c9e4:	003f6706 	br	28c784 <__subdf3+0x6c>
  28c9e8:	4086b03a 	or	r3,r8,r2
  28c9ec:	18015226 	beq	r3,zero,28cf38 <__subdf3+0x820>
  28c9f0:	00c00434 	movhi	r3,16
  28c9f4:	41400234 	orhi	r5,r8,8
  28c9f8:	18ffffc4 	addi	r3,r3,-1
  28c9fc:	28ca703a 	and	r5,r5,r3
  28ca00:	003f7e06 	br	28c7fc <__subdf3+0xe4>
  28ca04:	10bfffc4 	addi	r2,r2,-1
  28ca08:	1000491e 	bne	r2,zero,28cb30 <__subdf3+0x418>
  28ca0c:	898fc83a 	sub	r7,r17,r6
  28ca10:	89e3803a 	cmpltu	r17,r17,r7
  28ca14:	1947c83a 	sub	r3,r3,r5
  28ca18:	1c47c83a 	sub	r3,r3,r17
  28ca1c:	3823883a 	mov	r17,r7
  28ca20:	003f9b06 	br	28c890 <__subdf3+0x178>
  28ca24:	2988b03a 	or	r4,r5,r6
  28ca28:	203f5c26 	beq	r4,zero,28c79c <__subdf3+0x84>
  28ca2c:	10bfffc4 	addi	r2,r2,-1
  28ca30:	1000931e 	bne	r2,zero,28cc80 <__subdf3+0x568>
  28ca34:	898d883a 	add	r6,r17,r6
  28ca38:	3463803a 	cmpltu	r17,r6,r17
  28ca3c:	1947883a 	add	r3,r3,r5
  28ca40:	88c7883a 	add	r3,r17,r3
  28ca44:	3023883a 	mov	r17,r6
  28ca48:	003fd306 	br	28c998 <__subdf3+0x280>
  28ca4c:	1000541e 	bne	r2,zero,28cba0 <__subdf3+0x488>
  28ca50:	80800044 	addi	r2,r16,1
  28ca54:	1081ffcc 	andi	r2,r2,2047
  28ca58:	01000044 	movi	r4,1
  28ca5c:	2080a20e 	bge	r4,r2,28cce8 <__subdf3+0x5d0>
  28ca60:	8989c83a 	sub	r4,r17,r6
  28ca64:	8905803a 	cmpltu	r2,r17,r4
  28ca68:	1967c83a 	sub	r19,r3,r5
  28ca6c:	98a7c83a 	sub	r19,r19,r2
  28ca70:	9880202c 	andhi	r2,r19,128
  28ca74:	10006326 	beq	r2,zero,28cc04 <__subdf3+0x4ec>
  28ca78:	3463c83a 	sub	r17,r6,r17
  28ca7c:	28c7c83a 	sub	r3,r5,r3
  28ca80:	344d803a 	cmpltu	r6,r6,r17
  28ca84:	19a7c83a 	sub	r19,r3,r6
  28ca88:	3825883a 	mov	r18,r7
  28ca8c:	983f861e 	bne	r19,zero,28c8a8 <__subdf3+0x190>
  28ca90:	8809883a 	mov	r4,r17
  28ca94:	028d2180 	call	28d218 <__clzsi2>
  28ca98:	10800804 	addi	r2,r2,32
  28ca9c:	113ffe04 	addi	r4,r2,-8
  28caa0:	00c007c4 	movi	r3,31
  28caa4:	193f850e 	bge	r3,r4,28c8bc <__subdf3+0x1a4>
  28caa8:	10bff604 	addi	r2,r2,-40
  28caac:	8884983a 	sll	r2,r17,r2
  28cab0:	0023883a 	mov	r17,zero
  28cab4:	243f880e 	bge	r4,r16,28c8d8 <__subdf3+0x1c0>
  28cab8:	00ffe034 	movhi	r3,65408
  28cabc:	18ffffc4 	addi	r3,r3,-1
  28cac0:	8121c83a 	sub	r16,r16,r4
  28cac4:	10c6703a 	and	r3,r2,r3
  28cac8:	003f3406 	br	28c79c <__subdf3+0x84>
  28cacc:	9100004c 	andi	r4,r18,1
  28cad0:	000b883a 	mov	r5,zero
  28cad4:	0005883a 	mov	r2,zero
  28cad8:	003f4806 	br	28c7fc <__subdf3+0xe4>
  28cadc:	298cb03a 	or	r6,r5,r6
  28cae0:	300cc03a 	cmpne	r6,r6,zero
  28cae4:	0005883a 	mov	r2,zero
  28cae8:	003f6406 	br	28c87c <__subdf3+0x164>
  28caec:	10009a1e 	bne	r2,zero,28cd58 <__subdf3+0x640>
  28caf0:	82400044 	addi	r9,r16,1
  28caf4:	4881ffcc 	andi	r2,r9,2047
  28caf8:	02800044 	movi	r10,1
  28cafc:	5080670e 	bge	r10,r2,28cc9c <__subdf3+0x584>
  28cb00:	0081ffc4 	movi	r2,2047
  28cb04:	4880af26 	beq	r9,r2,28cdc4 <__subdf3+0x6ac>
  28cb08:	898d883a 	add	r6,r17,r6
  28cb0c:	1945883a 	add	r2,r3,r5
  28cb10:	3447803a 	cmpltu	r3,r6,r17
  28cb14:	1887883a 	add	r3,r3,r2
  28cb18:	182297fa 	slli	r17,r3,31
  28cb1c:	300cd07a 	srli	r6,r6,1
  28cb20:	1806d07a 	srli	r3,r3,1
  28cb24:	4821883a 	mov	r16,r9
  28cb28:	89a2b03a 	or	r17,r17,r6
  28cb2c:	003f1b06 	br	28c79c <__subdf3+0x84>
  28cb30:	0101ffc4 	movi	r4,2047
  28cb34:	813f441e 	bne	r16,r4,28c848 <__subdf3+0x130>
  28cb38:	003f1806 	br	28c79c <__subdf3+0x84>
  28cb3c:	843ff844 	addi	r16,r16,-31
  28cb40:	01400804 	movi	r5,32
  28cb44:	1408d83a 	srl	r4,r2,r16
  28cb48:	19405026 	beq	r3,r5,28cc8c <__subdf3+0x574>
  28cb4c:	01401004 	movi	r5,64
  28cb50:	28c7c83a 	sub	r3,r5,r3
  28cb54:	10c4983a 	sll	r2,r2,r3
  28cb58:	88a2b03a 	or	r17,r17,r2
  28cb5c:	8822c03a 	cmpne	r17,r17,zero
  28cb60:	2462b03a 	or	r17,r4,r17
  28cb64:	0007883a 	mov	r3,zero
  28cb68:	0021883a 	mov	r16,zero
  28cb6c:	003f6d06 	br	28c924 <__subdf3+0x20c>
  28cb70:	11fff804 	addi	r7,r2,-32
  28cb74:	01000804 	movi	r4,32
  28cb78:	29ced83a 	srl	r7,r5,r7
  28cb7c:	11004526 	beq	r2,r4,28cc94 <__subdf3+0x57c>
  28cb80:	01001004 	movi	r4,64
  28cb84:	2089c83a 	sub	r4,r4,r2
  28cb88:	2904983a 	sll	r2,r5,r4
  28cb8c:	118cb03a 	or	r6,r2,r6
  28cb90:	300cc03a 	cmpne	r6,r6,zero
  28cb94:	398cb03a 	or	r6,r7,r6
  28cb98:	0005883a 	mov	r2,zero
  28cb9c:	003f3706 	br	28c87c <__subdf3+0x164>
  28cba0:	80002a26 	beq	r16,zero,28cc4c <__subdf3+0x534>
  28cba4:	0101ffc4 	movi	r4,2047
  28cba8:	49006626 	beq	r9,r4,28cd44 <__subdf3+0x62c>
  28cbac:	0085c83a 	sub	r2,zero,r2
  28cbb0:	18c02034 	orhi	r3,r3,128
  28cbb4:	01000e04 	movi	r4,56
  28cbb8:	20807e16 	blt	r4,r2,28cdb4 <__subdf3+0x69c>
  28cbbc:	010007c4 	movi	r4,31
  28cbc0:	2080e716 	blt	r4,r2,28cf60 <__subdf3+0x848>
  28cbc4:	01000804 	movi	r4,32
  28cbc8:	2089c83a 	sub	r4,r4,r2
  28cbcc:	1914983a 	sll	r10,r3,r4
  28cbd0:	8890d83a 	srl	r8,r17,r2
  28cbd4:	8908983a 	sll	r4,r17,r4
  28cbd8:	1884d83a 	srl	r2,r3,r2
  28cbdc:	5222b03a 	or	r17,r10,r8
  28cbe0:	2006c03a 	cmpne	r3,r4,zero
  28cbe4:	88e2b03a 	or	r17,r17,r3
  28cbe8:	3463c83a 	sub	r17,r6,r17
  28cbec:	2885c83a 	sub	r2,r5,r2
  28cbf0:	344d803a 	cmpltu	r6,r6,r17
  28cbf4:	1187c83a 	sub	r3,r2,r6
  28cbf8:	4821883a 	mov	r16,r9
  28cbfc:	3825883a 	mov	r18,r7
  28cc00:	003f2306 	br	28c890 <__subdf3+0x178>
  28cc04:	24d0b03a 	or	r8,r4,r19
  28cc08:	40001b1e 	bne	r8,zero,28cc78 <__subdf3+0x560>
  28cc0c:	0005883a 	mov	r2,zero
  28cc10:	0009883a 	mov	r4,zero
  28cc14:	0021883a 	mov	r16,zero
  28cc18:	003f4906 	br	28c940 <__subdf3+0x228>
  28cc1c:	010007c4 	movi	r4,31
  28cc20:	20803a16 	blt	r4,r2,28cd0c <__subdf3+0x5f4>
  28cc24:	01000804 	movi	r4,32
  28cc28:	2089c83a 	sub	r4,r4,r2
  28cc2c:	2912983a 	sll	r9,r5,r4
  28cc30:	3090d83a 	srl	r8,r6,r2
  28cc34:	3108983a 	sll	r4,r6,r4
  28cc38:	2884d83a 	srl	r2,r5,r2
  28cc3c:	4a12b03a 	or	r9,r9,r8
  28cc40:	2008c03a 	cmpne	r4,r4,zero
  28cc44:	4912b03a 	or	r9,r9,r4
  28cc48:	003f4e06 	br	28c984 <__subdf3+0x26c>
  28cc4c:	1c48b03a 	or	r4,r3,r17
  28cc50:	20003c26 	beq	r4,zero,28cd44 <__subdf3+0x62c>
  28cc54:	0084303a 	nor	r2,zero,r2
  28cc58:	1000381e 	bne	r2,zero,28cd3c <__subdf3+0x624>
  28cc5c:	3463c83a 	sub	r17,r6,r17
  28cc60:	28c5c83a 	sub	r2,r5,r3
  28cc64:	344d803a 	cmpltu	r6,r6,r17
  28cc68:	1187c83a 	sub	r3,r2,r6
  28cc6c:	4821883a 	mov	r16,r9
  28cc70:	3825883a 	mov	r18,r7
  28cc74:	003f0606 	br	28c890 <__subdf3+0x178>
  28cc78:	2023883a 	mov	r17,r4
  28cc7c:	003f0906 	br	28c8a4 <__subdf3+0x18c>
  28cc80:	0101ffc4 	movi	r4,2047
  28cc84:	813f3a1e 	bne	r16,r4,28c970 <__subdf3+0x258>
  28cc88:	003ec406 	br	28c79c <__subdf3+0x84>
  28cc8c:	0005883a 	mov	r2,zero
  28cc90:	003fb106 	br	28cb58 <__subdf3+0x440>
  28cc94:	0005883a 	mov	r2,zero
  28cc98:	003fbc06 	br	28cb8c <__subdf3+0x474>
  28cc9c:	1c44b03a 	or	r2,r3,r17
  28cca0:	80008e1e 	bne	r16,zero,28cedc <__subdf3+0x7c4>
  28cca4:	1000c826 	beq	r2,zero,28cfc8 <__subdf3+0x8b0>
  28cca8:	2984b03a 	or	r2,r5,r6
  28ccac:	103ebb26 	beq	r2,zero,28c79c <__subdf3+0x84>
  28ccb0:	8989883a 	add	r4,r17,r6
  28ccb4:	1945883a 	add	r2,r3,r5
  28ccb8:	2447803a 	cmpltu	r3,r4,r17
  28ccbc:	1887883a 	add	r3,r3,r2
  28ccc0:	1880202c 	andhi	r2,r3,128
  28ccc4:	2023883a 	mov	r17,r4
  28ccc8:	103f1626 	beq	r2,zero,28c924 <__subdf3+0x20c>
  28cccc:	00bfe034 	movhi	r2,65408
  28ccd0:	10bfffc4 	addi	r2,r2,-1
  28ccd4:	5021883a 	mov	r16,r10
  28ccd8:	1886703a 	and	r3,r3,r2
  28ccdc:	003eaf06 	br	28c79c <__subdf3+0x84>
  28cce0:	3825883a 	mov	r18,r7
  28cce4:	003f0f06 	br	28c924 <__subdf3+0x20c>
  28cce8:	1c44b03a 	or	r2,r3,r17
  28ccec:	8000251e 	bne	r16,zero,28cd84 <__subdf3+0x66c>
  28ccf0:	1000661e 	bne	r2,zero,28ce8c <__subdf3+0x774>
  28ccf4:	2990b03a 	or	r8,r5,r6
  28ccf8:	40009626 	beq	r8,zero,28cf54 <__subdf3+0x83c>
  28ccfc:	2807883a 	mov	r3,r5
  28cd00:	3023883a 	mov	r17,r6
  28cd04:	3825883a 	mov	r18,r7
  28cd08:	003ea406 	br	28c79c <__subdf3+0x84>
  28cd0c:	127ff804 	addi	r9,r2,-32
  28cd10:	01000804 	movi	r4,32
  28cd14:	2a52d83a 	srl	r9,r5,r9
  28cd18:	11008c26 	beq	r2,r4,28cf4c <__subdf3+0x834>
  28cd1c:	01001004 	movi	r4,64
  28cd20:	2085c83a 	sub	r2,r4,r2
  28cd24:	2884983a 	sll	r2,r5,r2
  28cd28:	118cb03a 	or	r6,r2,r6
  28cd2c:	300cc03a 	cmpne	r6,r6,zero
  28cd30:	4992b03a 	or	r9,r9,r6
  28cd34:	0005883a 	mov	r2,zero
  28cd38:	003f1206 	br	28c984 <__subdf3+0x26c>
  28cd3c:	0101ffc4 	movi	r4,2047
  28cd40:	493f9c1e 	bne	r9,r4,28cbb4 <__subdf3+0x49c>
  28cd44:	2807883a 	mov	r3,r5
  28cd48:	3023883a 	mov	r17,r6
  28cd4c:	4821883a 	mov	r16,r9
  28cd50:	3825883a 	mov	r18,r7
  28cd54:	003e9106 	br	28c79c <__subdf3+0x84>
  28cd58:	80001f1e 	bne	r16,zero,28cdd8 <__subdf3+0x6c0>
  28cd5c:	1c48b03a 	or	r4,r3,r17
  28cd60:	20005a26 	beq	r4,zero,28cecc <__subdf3+0x7b4>
  28cd64:	0084303a 	nor	r2,zero,r2
  28cd68:	1000561e 	bne	r2,zero,28cec4 <__subdf3+0x7ac>
  28cd6c:	89a3883a 	add	r17,r17,r6
  28cd70:	1945883a 	add	r2,r3,r5
  28cd74:	898d803a 	cmpltu	r6,r17,r6
  28cd78:	3087883a 	add	r3,r6,r2
  28cd7c:	4821883a 	mov	r16,r9
  28cd80:	003f0506 	br	28c998 <__subdf3+0x280>
  28cd84:	10002b1e 	bne	r2,zero,28ce34 <__subdf3+0x71c>
  28cd88:	2984b03a 	or	r2,r5,r6
  28cd8c:	10008026 	beq	r2,zero,28cf90 <__subdf3+0x878>
  28cd90:	2807883a 	mov	r3,r5
  28cd94:	3023883a 	mov	r17,r6
  28cd98:	3825883a 	mov	r18,r7
  28cd9c:	0401ffc4 	movi	r16,2047
  28cda0:	003e7e06 	br	28c79c <__subdf3+0x84>
  28cda4:	3809883a 	mov	r4,r7
  28cda8:	0011883a 	mov	r8,zero
  28cdac:	0005883a 	mov	r2,zero
  28cdb0:	003ee306 	br	28c940 <__subdf3+0x228>
  28cdb4:	1c62b03a 	or	r17,r3,r17
  28cdb8:	8822c03a 	cmpne	r17,r17,zero
  28cdbc:	0005883a 	mov	r2,zero
  28cdc0:	003f8906 	br	28cbe8 <__subdf3+0x4d0>
  28cdc4:	3809883a 	mov	r4,r7
  28cdc8:	4821883a 	mov	r16,r9
  28cdcc:	0011883a 	mov	r8,zero
  28cdd0:	0005883a 	mov	r2,zero
  28cdd4:	003eda06 	br	28c940 <__subdf3+0x228>
  28cdd8:	0101ffc4 	movi	r4,2047
  28cddc:	49003b26 	beq	r9,r4,28cecc <__subdf3+0x7b4>
  28cde0:	0085c83a 	sub	r2,zero,r2
  28cde4:	18c02034 	orhi	r3,r3,128
  28cde8:	01000e04 	movi	r4,56
  28cdec:	20806e16 	blt	r4,r2,28cfa8 <__subdf3+0x890>
  28cdf0:	010007c4 	movi	r4,31
  28cdf4:	20807716 	blt	r4,r2,28cfd4 <__subdf3+0x8bc>
  28cdf8:	01000804 	movi	r4,32
  28cdfc:	2089c83a 	sub	r4,r4,r2
  28ce00:	1914983a 	sll	r10,r3,r4
  28ce04:	8890d83a 	srl	r8,r17,r2
  28ce08:	8908983a 	sll	r4,r17,r4
  28ce0c:	1884d83a 	srl	r2,r3,r2
  28ce10:	5222b03a 	or	r17,r10,r8
  28ce14:	2006c03a 	cmpne	r3,r4,zero
  28ce18:	88e2b03a 	or	r17,r17,r3
  28ce1c:	89a3883a 	add	r17,r17,r6
  28ce20:	1145883a 	add	r2,r2,r5
  28ce24:	898d803a 	cmpltu	r6,r17,r6
  28ce28:	3087883a 	add	r3,r6,r2
  28ce2c:	4821883a 	mov	r16,r9
  28ce30:	003ed906 	br	28c998 <__subdf3+0x280>
  28ce34:	2984b03a 	or	r2,r5,r6
  28ce38:	10004226 	beq	r2,zero,28cf44 <__subdf3+0x82c>
  28ce3c:	1808d0fa 	srli	r4,r3,3
  28ce40:	8822d0fa 	srli	r17,r17,3
  28ce44:	1806977a 	slli	r3,r3,29
  28ce48:	2080022c 	andhi	r2,r4,8
  28ce4c:	1c62b03a 	or	r17,r3,r17
  28ce50:	10000826 	beq	r2,zero,28ce74 <__subdf3+0x75c>
  28ce54:	2812d0fa 	srli	r9,r5,3
  28ce58:	4880022c 	andhi	r2,r9,8
  28ce5c:	1000051e 	bne	r2,zero,28ce74 <__subdf3+0x75c>
  28ce60:	300cd0fa 	srli	r6,r6,3
  28ce64:	2804977a 	slli	r2,r5,29
  28ce68:	4809883a 	mov	r4,r9
  28ce6c:	3825883a 	mov	r18,r7
  28ce70:	11a2b03a 	or	r17,r2,r6
  28ce74:	8806d77a 	srli	r3,r17,29
  28ce78:	200890fa 	slli	r4,r4,3
  28ce7c:	882290fa 	slli	r17,r17,3
  28ce80:	0401ffc4 	movi	r16,2047
  28ce84:	1906b03a 	or	r3,r3,r4
  28ce88:	003e4406 	br	28c79c <__subdf3+0x84>
  28ce8c:	2984b03a 	or	r2,r5,r6
  28ce90:	103e4226 	beq	r2,zero,28c79c <__subdf3+0x84>
  28ce94:	8989c83a 	sub	r4,r17,r6
  28ce98:	8911803a 	cmpltu	r8,r17,r4
  28ce9c:	1945c83a 	sub	r2,r3,r5
  28cea0:	1205c83a 	sub	r2,r2,r8
  28cea4:	1200202c 	andhi	r8,r2,128
  28cea8:	403e9a26 	beq	r8,zero,28c914 <__subdf3+0x1fc>
  28ceac:	3463c83a 	sub	r17,r6,r17
  28ceb0:	28c5c83a 	sub	r2,r5,r3
  28ceb4:	344d803a 	cmpltu	r6,r6,r17
  28ceb8:	1187c83a 	sub	r3,r2,r6
  28cebc:	3825883a 	mov	r18,r7
  28cec0:	003e3606 	br	28c79c <__subdf3+0x84>
  28cec4:	0101ffc4 	movi	r4,2047
  28cec8:	493fc71e 	bne	r9,r4,28cde8 <__subdf3+0x6d0>
  28cecc:	2807883a 	mov	r3,r5
  28ced0:	3023883a 	mov	r17,r6
  28ced4:	4821883a 	mov	r16,r9
  28ced8:	003e3006 	br	28c79c <__subdf3+0x84>
  28cedc:	10003626 	beq	r2,zero,28cfb8 <__subdf3+0x8a0>
  28cee0:	2984b03a 	or	r2,r5,r6
  28cee4:	10001726 	beq	r2,zero,28cf44 <__subdf3+0x82c>
  28cee8:	1808d0fa 	srli	r4,r3,3
  28ceec:	8822d0fa 	srli	r17,r17,3
  28cef0:	1806977a 	slli	r3,r3,29
  28cef4:	2080022c 	andhi	r2,r4,8
  28cef8:	1c62b03a 	or	r17,r3,r17
  28cefc:	10000726 	beq	r2,zero,28cf1c <__subdf3+0x804>
  28cf00:	2812d0fa 	srli	r9,r5,3
  28cf04:	4880022c 	andhi	r2,r9,8
  28cf08:	1000041e 	bne	r2,zero,28cf1c <__subdf3+0x804>
  28cf0c:	300cd0fa 	srli	r6,r6,3
  28cf10:	2804977a 	slli	r2,r5,29
  28cf14:	4809883a 	mov	r4,r9
  28cf18:	11a2b03a 	or	r17,r2,r6
  28cf1c:	8806d77a 	srli	r3,r17,29
  28cf20:	200890fa 	slli	r4,r4,3
  28cf24:	882290fa 	slli	r17,r17,3
  28cf28:	3825883a 	mov	r18,r7
  28cf2c:	1906b03a 	or	r3,r3,r4
  28cf30:	0401ffc4 	movi	r16,2047
  28cf34:	003e1906 	br	28c79c <__subdf3+0x84>
  28cf38:	000b883a 	mov	r5,zero
  28cf3c:	0005883a 	mov	r2,zero
  28cf40:	003e2e06 	br	28c7fc <__subdf3+0xe4>
  28cf44:	0401ffc4 	movi	r16,2047
  28cf48:	003e1406 	br	28c79c <__subdf3+0x84>
  28cf4c:	0005883a 	mov	r2,zero
  28cf50:	003f7506 	br	28cd28 <__subdf3+0x610>
  28cf54:	0005883a 	mov	r2,zero
  28cf58:	0009883a 	mov	r4,zero
  28cf5c:	003e7806 	br	28c940 <__subdf3+0x228>
  28cf60:	123ff804 	addi	r8,r2,-32
  28cf64:	01000804 	movi	r4,32
  28cf68:	1a10d83a 	srl	r8,r3,r8
  28cf6c:	11002526 	beq	r2,r4,28d004 <__subdf3+0x8ec>
  28cf70:	01001004 	movi	r4,64
  28cf74:	2085c83a 	sub	r2,r4,r2
  28cf78:	1884983a 	sll	r2,r3,r2
  28cf7c:	1444b03a 	or	r2,r2,r17
  28cf80:	1004c03a 	cmpne	r2,r2,zero
  28cf84:	40a2b03a 	or	r17,r8,r2
  28cf88:	0005883a 	mov	r2,zero
  28cf8c:	003f1606 	br	28cbe8 <__subdf3+0x4d0>
  28cf90:	02000434 	movhi	r8,16
  28cf94:	0009883a 	mov	r4,zero
  28cf98:	423fffc4 	addi	r8,r8,-1
  28cf9c:	00bfffc4 	movi	r2,-1
  28cfa0:	0401ffc4 	movi	r16,2047
  28cfa4:	003e6606 	br	28c940 <__subdf3+0x228>
  28cfa8:	1c62b03a 	or	r17,r3,r17
  28cfac:	8822c03a 	cmpne	r17,r17,zero
  28cfb0:	0005883a 	mov	r2,zero
  28cfb4:	003f9906 	br	28ce1c <__subdf3+0x704>
  28cfb8:	2807883a 	mov	r3,r5
  28cfbc:	3023883a 	mov	r17,r6
  28cfc0:	0401ffc4 	movi	r16,2047
  28cfc4:	003df506 	br	28c79c <__subdf3+0x84>
  28cfc8:	2807883a 	mov	r3,r5
  28cfcc:	3023883a 	mov	r17,r6
  28cfd0:	003df206 	br	28c79c <__subdf3+0x84>
  28cfd4:	123ff804 	addi	r8,r2,-32
  28cfd8:	01000804 	movi	r4,32
  28cfdc:	1a10d83a 	srl	r8,r3,r8
  28cfe0:	11000a26 	beq	r2,r4,28d00c <__subdf3+0x8f4>
  28cfe4:	01001004 	movi	r4,64
  28cfe8:	2085c83a 	sub	r2,r4,r2
  28cfec:	1884983a 	sll	r2,r3,r2
  28cff0:	1444b03a 	or	r2,r2,r17
  28cff4:	1004c03a 	cmpne	r2,r2,zero
  28cff8:	40a2b03a 	or	r17,r8,r2
  28cffc:	0005883a 	mov	r2,zero
  28d000:	003f8606 	br	28ce1c <__subdf3+0x704>
  28d004:	0005883a 	mov	r2,zero
  28d008:	003fdc06 	br	28cf7c <__subdf3+0x864>
  28d00c:	0005883a 	mov	r2,zero
  28d010:	003ff706 	br	28cff0 <__subdf3+0x8d8>

0028d014 <__fixdfsi>:
  28d014:	280cd53a 	srli	r6,r5,20
  28d018:	00c00434 	movhi	r3,16
  28d01c:	18ffffc4 	addi	r3,r3,-1
  28d020:	3181ffcc 	andi	r6,r6,2047
  28d024:	01c0ff84 	movi	r7,1022
  28d028:	28c6703a 	and	r3,r5,r3
  28d02c:	280ad7fa 	srli	r5,r5,31
  28d030:	3980120e 	bge	r7,r6,28d07c <__fixdfsi+0x68>
  28d034:	00810744 	movi	r2,1053
  28d038:	11800c16 	blt	r2,r6,28d06c <__fixdfsi+0x58>
  28d03c:	00810cc4 	movi	r2,1075
  28d040:	1185c83a 	sub	r2,r2,r6
  28d044:	01c007c4 	movi	r7,31
  28d048:	18c00434 	orhi	r3,r3,16
  28d04c:	38800d16 	blt	r7,r2,28d084 <__fixdfsi+0x70>
  28d050:	31befb44 	addi	r6,r6,-1043
  28d054:	2084d83a 	srl	r2,r4,r2
  28d058:	1986983a 	sll	r3,r3,r6
  28d05c:	1884b03a 	or	r2,r3,r2
  28d060:	28000726 	beq	r5,zero,28d080 <__fixdfsi+0x6c>
  28d064:	0085c83a 	sub	r2,zero,r2
  28d068:	f800283a 	ret
  28d06c:	00a00034 	movhi	r2,32768
  28d070:	10bfffc4 	addi	r2,r2,-1
  28d074:	2885883a 	add	r2,r5,r2
  28d078:	f800283a 	ret
  28d07c:	0005883a 	mov	r2,zero
  28d080:	f800283a 	ret
  28d084:	008104c4 	movi	r2,1043
  28d088:	1185c83a 	sub	r2,r2,r6
  28d08c:	1884d83a 	srl	r2,r3,r2
  28d090:	003ff306 	br	28d060 <__fixdfsi+0x4c>

0028d094 <__floatsidf>:
  28d094:	defffd04 	addi	sp,sp,-12
  28d098:	dfc00215 	stw	ra,8(sp)
  28d09c:	dc400115 	stw	r17,4(sp)
  28d0a0:	dc000015 	stw	r16,0(sp)
  28d0a4:	20002b26 	beq	r4,zero,28d154 <__floatsidf+0xc0>
  28d0a8:	2023883a 	mov	r17,r4
  28d0ac:	2020d7fa 	srli	r16,r4,31
  28d0b0:	20002d16 	blt	r4,zero,28d168 <__floatsidf+0xd4>
  28d0b4:	8809883a 	mov	r4,r17
  28d0b8:	028d2180 	call	28d218 <__clzsi2>
  28d0bc:	01410784 	movi	r5,1054
  28d0c0:	288bc83a 	sub	r5,r5,r2
  28d0c4:	01010cc4 	movi	r4,1075
  28d0c8:	2149c83a 	sub	r4,r4,r5
  28d0cc:	00c007c4 	movi	r3,31
  28d0d0:	1900160e 	bge	r3,r4,28d12c <__floatsidf+0x98>
  28d0d4:	00c104c4 	movi	r3,1043
  28d0d8:	1947c83a 	sub	r3,r3,r5
  28d0dc:	88c6983a 	sll	r3,r17,r3
  28d0e0:	00800434 	movhi	r2,16
  28d0e4:	10bfffc4 	addi	r2,r2,-1
  28d0e8:	1886703a 	and	r3,r3,r2
  28d0ec:	2941ffcc 	andi	r5,r5,2047
  28d0f0:	800d883a 	mov	r6,r16
  28d0f4:	0005883a 	mov	r2,zero
  28d0f8:	280a953a 	slli	r5,r5,20
  28d0fc:	31803fcc 	andi	r6,r6,255
  28d100:	01000434 	movhi	r4,16
  28d104:	300c97fa 	slli	r6,r6,31
  28d108:	213fffc4 	addi	r4,r4,-1
  28d10c:	1906703a 	and	r3,r3,r4
  28d110:	1946b03a 	or	r3,r3,r5
  28d114:	1986b03a 	or	r3,r3,r6
  28d118:	dfc00217 	ldw	ra,8(sp)
  28d11c:	dc400117 	ldw	r17,4(sp)
  28d120:	dc000017 	ldw	r16,0(sp)
  28d124:	dec00304 	addi	sp,sp,12
  28d128:	f800283a 	ret
  28d12c:	00c002c4 	movi	r3,11
  28d130:	1887c83a 	sub	r3,r3,r2
  28d134:	88c6d83a 	srl	r3,r17,r3
  28d138:	8904983a 	sll	r2,r17,r4
  28d13c:	01000434 	movhi	r4,16
  28d140:	213fffc4 	addi	r4,r4,-1
  28d144:	2941ffcc 	andi	r5,r5,2047
  28d148:	1906703a 	and	r3,r3,r4
  28d14c:	800d883a 	mov	r6,r16
  28d150:	003fe906 	br	28d0f8 <__floatsidf+0x64>
  28d154:	000d883a 	mov	r6,zero
  28d158:	000b883a 	mov	r5,zero
  28d15c:	0007883a 	mov	r3,zero
  28d160:	0005883a 	mov	r2,zero
  28d164:	003fe406 	br	28d0f8 <__floatsidf+0x64>
  28d168:	0123c83a 	sub	r17,zero,r4
  28d16c:	003fd106 	br	28d0b4 <__floatsidf+0x20>

0028d170 <__floatunsidf>:
  28d170:	defffe04 	addi	sp,sp,-8
  28d174:	dc000015 	stw	r16,0(sp)
  28d178:	dfc00115 	stw	ra,4(sp)
  28d17c:	2021883a 	mov	r16,r4
  28d180:	20002226 	beq	r4,zero,28d20c <__floatunsidf+0x9c>
  28d184:	028d2180 	call	28d218 <__clzsi2>
  28d188:	01010784 	movi	r4,1054
  28d18c:	2089c83a 	sub	r4,r4,r2
  28d190:	01810cc4 	movi	r6,1075
  28d194:	310dc83a 	sub	r6,r6,r4
  28d198:	00c007c4 	movi	r3,31
  28d19c:	1980120e 	bge	r3,r6,28d1e8 <__floatunsidf+0x78>
  28d1a0:	00c104c4 	movi	r3,1043
  28d1a4:	1907c83a 	sub	r3,r3,r4
  28d1a8:	80ca983a 	sll	r5,r16,r3
  28d1ac:	00800434 	movhi	r2,16
  28d1b0:	10bfffc4 	addi	r2,r2,-1
  28d1b4:	2101ffcc 	andi	r4,r4,2047
  28d1b8:	0021883a 	mov	r16,zero
  28d1bc:	288a703a 	and	r5,r5,r2
  28d1c0:	2008953a 	slli	r4,r4,20
  28d1c4:	00c00434 	movhi	r3,16
  28d1c8:	18ffffc4 	addi	r3,r3,-1
  28d1cc:	28c6703a 	and	r3,r5,r3
  28d1d0:	8005883a 	mov	r2,r16
  28d1d4:	1906b03a 	or	r3,r3,r4
  28d1d8:	dfc00117 	ldw	ra,4(sp)
  28d1dc:	dc000017 	ldw	r16,0(sp)
  28d1e0:	dec00204 	addi	sp,sp,8
  28d1e4:	f800283a 	ret
  28d1e8:	00c002c4 	movi	r3,11
  28d1ec:	188bc83a 	sub	r5,r3,r2
  28d1f0:	814ad83a 	srl	r5,r16,r5
  28d1f4:	00c00434 	movhi	r3,16
  28d1f8:	18ffffc4 	addi	r3,r3,-1
  28d1fc:	81a0983a 	sll	r16,r16,r6
  28d200:	2101ffcc 	andi	r4,r4,2047
  28d204:	28ca703a 	and	r5,r5,r3
  28d208:	003fed06 	br	28d1c0 <__floatunsidf+0x50>
  28d20c:	0009883a 	mov	r4,zero
  28d210:	000b883a 	mov	r5,zero
  28d214:	003fea06 	br	28d1c0 <__floatunsidf+0x50>

0028d218 <__clzsi2>:
  28d218:	00bfffd4 	movui	r2,65535
  28d21c:	11000536 	bltu	r2,r4,28d234 <__clzsi2+0x1c>
  28d220:	00803fc4 	movi	r2,255
  28d224:	11000f36 	bltu	r2,r4,28d264 <__clzsi2+0x4c>
  28d228:	00800804 	movi	r2,32
  28d22c:	0007883a 	mov	r3,zero
  28d230:	00000506 	br	28d248 <__clzsi2+0x30>
  28d234:	00804034 	movhi	r2,256
  28d238:	10bfffc4 	addi	r2,r2,-1
  28d23c:	11000c2e 	bgeu	r2,r4,28d270 <__clzsi2+0x58>
  28d240:	00800204 	movi	r2,8
  28d244:	00c00604 	movi	r3,24
  28d248:	20c8d83a 	srl	r4,r4,r3
  28d24c:	00c00a74 	movhi	r3,41
  28d250:	18c66e04 	addi	r3,r3,6584
  28d254:	1909883a 	add	r4,r3,r4
  28d258:	20c00003 	ldbu	r3,0(r4)
  28d25c:	10c5c83a 	sub	r2,r2,r3
  28d260:	f800283a 	ret
  28d264:	00800604 	movi	r2,24
  28d268:	00c00204 	movi	r3,8
  28d26c:	003ff606 	br	28d248 <__clzsi2+0x30>
  28d270:	00800404 	movi	r2,16
  28d274:	1007883a 	mov	r3,r2
  28d278:	003ff306 	br	28d248 <__clzsi2+0x30>

0028d27c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28d27c:	defffe04 	addi	sp,sp,-8
  28d280:	dfc00115 	stw	ra,4(sp)
  28d284:	df000015 	stw	fp,0(sp)
  28d288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  28d28c:	d0a00c17 	ldw	r2,-32720(gp)
  28d290:	10000326 	beq	r2,zero,28d2a0 <alt_get_errno+0x24>
  28d294:	d0a00c17 	ldw	r2,-32720(gp)
  28d298:	103ee83a 	callr	r2
  28d29c:	00000106 	br	28d2a4 <alt_get_errno+0x28>
  28d2a0:	d0a70104 	addi	r2,gp,-25596
}
  28d2a4:	e037883a 	mov	sp,fp
  28d2a8:	dfc00117 	ldw	ra,4(sp)
  28d2ac:	df000017 	ldw	fp,0(sp)
  28d2b0:	dec00204 	addi	sp,sp,8
  28d2b4:	f800283a 	ret

0028d2b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  28d2b8:	defffb04 	addi	sp,sp,-20
  28d2bc:	dfc00415 	stw	ra,16(sp)
  28d2c0:	df000315 	stw	fp,12(sp)
  28d2c4:	df000304 	addi	fp,sp,12
  28d2c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  28d2cc:	e0bfff17 	ldw	r2,-4(fp)
  28d2d0:	10000616 	blt	r2,zero,28d2ec <close+0x34>
  28d2d4:	e0bfff17 	ldw	r2,-4(fp)
  28d2d8:	10c00324 	muli	r3,r2,12
  28d2dc:	00800a74 	movhi	r2,41
  28d2e0:	10890204 	addi	r2,r2,9224
  28d2e4:	1885883a 	add	r2,r3,r2
  28d2e8:	00000106 	br	28d2f0 <close+0x38>
  28d2ec:	0005883a 	mov	r2,zero
  28d2f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  28d2f4:	e0bffd17 	ldw	r2,-12(fp)
  28d2f8:	10001926 	beq	r2,zero,28d360 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  28d2fc:	e0bffd17 	ldw	r2,-12(fp)
  28d300:	10800017 	ldw	r2,0(r2)
  28d304:	10800417 	ldw	r2,16(r2)
  28d308:	10000626 	beq	r2,zero,28d324 <close+0x6c>
  28d30c:	e0bffd17 	ldw	r2,-12(fp)
  28d310:	10800017 	ldw	r2,0(r2)
  28d314:	10800417 	ldw	r2,16(r2)
  28d318:	e13ffd17 	ldw	r4,-12(fp)
  28d31c:	103ee83a 	callr	r2
  28d320:	00000106 	br	28d328 <close+0x70>
  28d324:	0005883a 	mov	r2,zero
  28d328:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  28d32c:	e13fff17 	ldw	r4,-4(fp)
  28d330:	028d9780 	call	28d978 <alt_release_fd>
    if (rval < 0)
  28d334:	e0bffe17 	ldw	r2,-8(fp)
  28d338:	1000070e 	bge	r2,zero,28d358 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  28d33c:	028d27c0 	call	28d27c <alt_get_errno>
  28d340:	1007883a 	mov	r3,r2
  28d344:	e0bffe17 	ldw	r2,-8(fp)
  28d348:	0085c83a 	sub	r2,zero,r2
  28d34c:	18800015 	stw	r2,0(r3)
      return -1;
  28d350:	00bfffc4 	movi	r2,-1
  28d354:	00000706 	br	28d374 <close+0xbc>
    }
    return 0;
  28d358:	0005883a 	mov	r2,zero
  28d35c:	00000506 	br	28d374 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  28d360:	028d27c0 	call	28d27c <alt_get_errno>
  28d364:	1007883a 	mov	r3,r2
  28d368:	00801444 	movi	r2,81
  28d36c:	18800015 	stw	r2,0(r3)
    return -1;
  28d370:	00bfffc4 	movi	r2,-1
  }
}
  28d374:	e037883a 	mov	sp,fp
  28d378:	dfc00117 	ldw	ra,4(sp)
  28d37c:	df000017 	ldw	fp,0(sp)
  28d380:	dec00204 	addi	sp,sp,8
  28d384:	f800283a 	ret

0028d388 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  28d388:	defffc04 	addi	sp,sp,-16
  28d38c:	df000315 	stw	fp,12(sp)
  28d390:	df000304 	addi	fp,sp,12
  28d394:	e13ffd15 	stw	r4,-12(fp)
  28d398:	e17ffe15 	stw	r5,-8(fp)
  28d39c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  28d3a0:	e0bfff17 	ldw	r2,-4(fp)
}
  28d3a4:	e037883a 	mov	sp,fp
  28d3a8:	df000017 	ldw	fp,0(sp)
  28d3ac:	dec00104 	addi	sp,sp,4
  28d3b0:	f800283a 	ret

0028d3b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28d3b4:	defffe04 	addi	sp,sp,-8
  28d3b8:	dfc00115 	stw	ra,4(sp)
  28d3bc:	df000015 	stw	fp,0(sp)
  28d3c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  28d3c4:	d0a00c17 	ldw	r2,-32720(gp)
  28d3c8:	10000326 	beq	r2,zero,28d3d8 <alt_get_errno+0x24>
  28d3cc:	d0a00c17 	ldw	r2,-32720(gp)
  28d3d0:	103ee83a 	callr	r2
  28d3d4:	00000106 	br	28d3dc <alt_get_errno+0x28>
  28d3d8:	d0a70104 	addi	r2,gp,-25596
}
  28d3dc:	e037883a 	mov	sp,fp
  28d3e0:	dfc00117 	ldw	ra,4(sp)
  28d3e4:	df000017 	ldw	fp,0(sp)
  28d3e8:	dec00204 	addi	sp,sp,8
  28d3ec:	f800283a 	ret

0028d3f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  28d3f0:	defffb04 	addi	sp,sp,-20
  28d3f4:	dfc00415 	stw	ra,16(sp)
  28d3f8:	df000315 	stw	fp,12(sp)
  28d3fc:	df000304 	addi	fp,sp,12
  28d400:	e13ffe15 	stw	r4,-8(fp)
  28d404:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  28d408:	e0bffe17 	ldw	r2,-8(fp)
  28d40c:	10000616 	blt	r2,zero,28d428 <fstat+0x38>
  28d410:	e0bffe17 	ldw	r2,-8(fp)
  28d414:	10c00324 	muli	r3,r2,12
  28d418:	00800a74 	movhi	r2,41
  28d41c:	10890204 	addi	r2,r2,9224
  28d420:	1885883a 	add	r2,r3,r2
  28d424:	00000106 	br	28d42c <fstat+0x3c>
  28d428:	0005883a 	mov	r2,zero
  28d42c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  28d430:	e0bffd17 	ldw	r2,-12(fp)
  28d434:	10001026 	beq	r2,zero,28d478 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  28d438:	e0bffd17 	ldw	r2,-12(fp)
  28d43c:	10800017 	ldw	r2,0(r2)
  28d440:	10800817 	ldw	r2,32(r2)
  28d444:	10000726 	beq	r2,zero,28d464 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  28d448:	e0bffd17 	ldw	r2,-12(fp)
  28d44c:	10800017 	ldw	r2,0(r2)
  28d450:	10800817 	ldw	r2,32(r2)
  28d454:	e17fff17 	ldw	r5,-4(fp)
  28d458:	e13ffd17 	ldw	r4,-12(fp)
  28d45c:	103ee83a 	callr	r2
  28d460:	00000a06 	br	28d48c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  28d464:	e0bfff17 	ldw	r2,-4(fp)
  28d468:	00c80004 	movi	r3,8192
  28d46c:	10c00115 	stw	r3,4(r2)
      return 0;
  28d470:	0005883a 	mov	r2,zero
  28d474:	00000506 	br	28d48c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  28d478:	028d3b40 	call	28d3b4 <alt_get_errno>
  28d47c:	1007883a 	mov	r3,r2
  28d480:	00801444 	movi	r2,81
  28d484:	18800015 	stw	r2,0(r3)
    return -1;
  28d488:	00bfffc4 	movi	r2,-1
  }
}
  28d48c:	e037883a 	mov	sp,fp
  28d490:	dfc00117 	ldw	ra,4(sp)
  28d494:	df000017 	ldw	fp,0(sp)
  28d498:	dec00204 	addi	sp,sp,8
  28d49c:	f800283a 	ret

0028d4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28d4a0:	defffe04 	addi	sp,sp,-8
  28d4a4:	dfc00115 	stw	ra,4(sp)
  28d4a8:	df000015 	stw	fp,0(sp)
  28d4ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  28d4b0:	d0a00c17 	ldw	r2,-32720(gp)
  28d4b4:	10000326 	beq	r2,zero,28d4c4 <alt_get_errno+0x24>
  28d4b8:	d0a00c17 	ldw	r2,-32720(gp)
  28d4bc:	103ee83a 	callr	r2
  28d4c0:	00000106 	br	28d4c8 <alt_get_errno+0x28>
  28d4c4:	d0a70104 	addi	r2,gp,-25596
}
  28d4c8:	e037883a 	mov	sp,fp
  28d4cc:	dfc00117 	ldw	ra,4(sp)
  28d4d0:	df000017 	ldw	fp,0(sp)
  28d4d4:	dec00204 	addi	sp,sp,8
  28d4d8:	f800283a 	ret

0028d4dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  28d4dc:	deffed04 	addi	sp,sp,-76
  28d4e0:	dfc01215 	stw	ra,72(sp)
  28d4e4:	df001115 	stw	fp,68(sp)
  28d4e8:	df001104 	addi	fp,sp,68
  28d4ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  28d4f0:	e0bfff17 	ldw	r2,-4(fp)
  28d4f4:	10000616 	blt	r2,zero,28d510 <isatty+0x34>
  28d4f8:	e0bfff17 	ldw	r2,-4(fp)
  28d4fc:	10c00324 	muli	r3,r2,12
  28d500:	00800a74 	movhi	r2,41
  28d504:	10890204 	addi	r2,r2,9224
  28d508:	1885883a 	add	r2,r3,r2
  28d50c:	00000106 	br	28d514 <isatty+0x38>
  28d510:	0005883a 	mov	r2,zero
  28d514:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  28d518:	e0bfef17 	ldw	r2,-68(fp)
  28d51c:	10000e26 	beq	r2,zero,28d558 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  28d520:	e0bfef17 	ldw	r2,-68(fp)
  28d524:	10800017 	ldw	r2,0(r2)
  28d528:	10800817 	ldw	r2,32(r2)
  28d52c:	1000021e 	bne	r2,zero,28d538 <isatty+0x5c>
    {
      return 1;
  28d530:	00800044 	movi	r2,1
  28d534:	00000d06 	br	28d56c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  28d538:	e0bff004 	addi	r2,fp,-64
  28d53c:	100b883a 	mov	r5,r2
  28d540:	e13fff17 	ldw	r4,-4(fp)
  28d544:	028d3f00 	call	28d3f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  28d548:	e0bff117 	ldw	r2,-60(fp)
  28d54c:	10880020 	cmpeqi	r2,r2,8192
  28d550:	10803fcc 	andi	r2,r2,255
  28d554:	00000506 	br	28d56c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  28d558:	028d4a00 	call	28d4a0 <alt_get_errno>
  28d55c:	1007883a 	mov	r3,r2
  28d560:	00801444 	movi	r2,81
  28d564:	18800015 	stw	r2,0(r3)
    return 0;
  28d568:	0005883a 	mov	r2,zero
  }
}
  28d56c:	e037883a 	mov	sp,fp
  28d570:	dfc00117 	ldw	ra,4(sp)
  28d574:	df000017 	ldw	fp,0(sp)
  28d578:	dec00204 	addi	sp,sp,8
  28d57c:	f800283a 	ret

0028d580 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  28d580:	defffc04 	addi	sp,sp,-16
  28d584:	df000315 	stw	fp,12(sp)
  28d588:	df000304 	addi	fp,sp,12
  28d58c:	e13ffd15 	stw	r4,-12(fp)
  28d590:	e17ffe15 	stw	r5,-8(fp)
  28d594:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  28d598:	e0fffe17 	ldw	r3,-8(fp)
  28d59c:	e0bffd17 	ldw	r2,-12(fp)
  28d5a0:	18800c26 	beq	r3,r2,28d5d4 <alt_load_section+0x54>
  {
    while( to != end )
  28d5a4:	00000806 	br	28d5c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  28d5a8:	e0bffe17 	ldw	r2,-8(fp)
  28d5ac:	10c00104 	addi	r3,r2,4
  28d5b0:	e0fffe15 	stw	r3,-8(fp)
  28d5b4:	e0fffd17 	ldw	r3,-12(fp)
  28d5b8:	19000104 	addi	r4,r3,4
  28d5bc:	e13ffd15 	stw	r4,-12(fp)
  28d5c0:	18c00017 	ldw	r3,0(r3)
  28d5c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  28d5c8:	e0fffe17 	ldw	r3,-8(fp)
  28d5cc:	e0bfff17 	ldw	r2,-4(fp)
  28d5d0:	18bff51e 	bne	r3,r2,28d5a8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  28d5d4:	0001883a 	nop
  28d5d8:	e037883a 	mov	sp,fp
  28d5dc:	df000017 	ldw	fp,0(sp)
  28d5e0:	dec00104 	addi	sp,sp,4
  28d5e4:	f800283a 	ret

0028d5e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  28d5e8:	defffe04 	addi	sp,sp,-8
  28d5ec:	dfc00115 	stw	ra,4(sp)
  28d5f0:	df000015 	stw	fp,0(sp)
  28d5f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  28d5f8:	01800a74 	movhi	r6,41
  28d5fc:	318db804 	addi	r6,r6,14048
  28d600:	01400a74 	movhi	r5,41
  28d604:	2946cf04 	addi	r5,r5,6972
  28d608:	01000a74 	movhi	r4,41
  28d60c:	210db804 	addi	r4,r4,14048
  28d610:	028d5800 	call	28d580 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  28d614:	01800a34 	movhi	r6,40
  28d618:	31809204 	addi	r6,r6,584
  28d61c:	01400a34 	movhi	r5,40
  28d620:	29400804 	addi	r5,r5,32
  28d624:	01000a34 	movhi	r4,40
  28d628:	21000804 	addi	r4,r4,32
  28d62c:	028d5800 	call	28d580 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  28d630:	01800a74 	movhi	r6,41
  28d634:	3186cf04 	addi	r6,r6,6972
  28d638:	01400a74 	movhi	r5,41
  28d63c:	2945d004 	addi	r5,r5,5952
  28d640:	01000a74 	movhi	r4,41
  28d644:	2105d004 	addi	r4,r4,5952
  28d648:	028d5800 	call	28d580 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  28d64c:	029074c0 	call	29074c <alt_dcache_flush_all>
  alt_icache_flush_all();
  28d650:	02909c40 	call	2909c4 <alt_icache_flush_all>
}
  28d654:	0001883a 	nop
  28d658:	e037883a 	mov	sp,fp
  28d65c:	dfc00117 	ldw	ra,4(sp)
  28d660:	df000017 	ldw	fp,0(sp)
  28d664:	dec00204 	addi	sp,sp,8
  28d668:	f800283a 	ret

0028d66c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28d66c:	defffe04 	addi	sp,sp,-8
  28d670:	dfc00115 	stw	ra,4(sp)
  28d674:	df000015 	stw	fp,0(sp)
  28d678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  28d67c:	d0a00c17 	ldw	r2,-32720(gp)
  28d680:	10000326 	beq	r2,zero,28d690 <alt_get_errno+0x24>
  28d684:	d0a00c17 	ldw	r2,-32720(gp)
  28d688:	103ee83a 	callr	r2
  28d68c:	00000106 	br	28d694 <alt_get_errno+0x28>
  28d690:	d0a70104 	addi	r2,gp,-25596
}
  28d694:	e037883a 	mov	sp,fp
  28d698:	dfc00117 	ldw	ra,4(sp)
  28d69c:	df000017 	ldw	fp,0(sp)
  28d6a0:	dec00204 	addi	sp,sp,8
  28d6a4:	f800283a 	ret

0028d6a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  28d6a8:	defff904 	addi	sp,sp,-28
  28d6ac:	dfc00615 	stw	ra,24(sp)
  28d6b0:	df000515 	stw	fp,20(sp)
  28d6b4:	df000504 	addi	fp,sp,20
  28d6b8:	e13ffd15 	stw	r4,-12(fp)
  28d6bc:	e17ffe15 	stw	r5,-8(fp)
  28d6c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  28d6c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  28d6c8:	e0bffd17 	ldw	r2,-12(fp)
  28d6cc:	10000616 	blt	r2,zero,28d6e8 <lseek+0x40>
  28d6d0:	e0bffd17 	ldw	r2,-12(fp)
  28d6d4:	10c00324 	muli	r3,r2,12
  28d6d8:	00800a74 	movhi	r2,41
  28d6dc:	10890204 	addi	r2,r2,9224
  28d6e0:	1885883a 	add	r2,r3,r2
  28d6e4:	00000106 	br	28d6ec <lseek+0x44>
  28d6e8:	0005883a 	mov	r2,zero
  28d6ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  28d6f0:	e0bffc17 	ldw	r2,-16(fp)
  28d6f4:	10001026 	beq	r2,zero,28d738 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  28d6f8:	e0bffc17 	ldw	r2,-16(fp)
  28d6fc:	10800017 	ldw	r2,0(r2)
  28d700:	10800717 	ldw	r2,28(r2)
  28d704:	10000926 	beq	r2,zero,28d72c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  28d708:	e0bffc17 	ldw	r2,-16(fp)
  28d70c:	10800017 	ldw	r2,0(r2)
  28d710:	10800717 	ldw	r2,28(r2)
  28d714:	e1bfff17 	ldw	r6,-4(fp)
  28d718:	e17ffe17 	ldw	r5,-8(fp)
  28d71c:	e13ffc17 	ldw	r4,-16(fp)
  28d720:	103ee83a 	callr	r2
  28d724:	e0bffb15 	stw	r2,-20(fp)
  28d728:	00000506 	br	28d740 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  28d72c:	00bfde84 	movi	r2,-134
  28d730:	e0bffb15 	stw	r2,-20(fp)
  28d734:	00000206 	br	28d740 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  28d738:	00bfebc4 	movi	r2,-81
  28d73c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  28d740:	e0bffb17 	ldw	r2,-20(fp)
  28d744:	1000070e 	bge	r2,zero,28d764 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  28d748:	028d66c0 	call	28d66c <alt_get_errno>
  28d74c:	1007883a 	mov	r3,r2
  28d750:	e0bffb17 	ldw	r2,-20(fp)
  28d754:	0085c83a 	sub	r2,zero,r2
  28d758:	18800015 	stw	r2,0(r3)
    rc = -1;
  28d75c:	00bfffc4 	movi	r2,-1
  28d760:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  28d764:	e0bffb17 	ldw	r2,-20(fp)
}
  28d768:	e037883a 	mov	sp,fp
  28d76c:	dfc00117 	ldw	ra,4(sp)
  28d770:	df000017 	ldw	fp,0(sp)
  28d774:	dec00204 	addi	sp,sp,8
  28d778:	f800283a 	ret

0028d77c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  28d77c:	defffd04 	addi	sp,sp,-12
  28d780:	dfc00215 	stw	ra,8(sp)
  28d784:	df000115 	stw	fp,4(sp)
  28d788:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  28d78c:	0009883a 	mov	r4,zero
  28d790:	028dbf40 	call	28dbf4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  28d794:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  28d798:	028dc2c0 	call	28dc2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  28d79c:	01800a74 	movhi	r6,41
  28d7a0:	3186b104 	addi	r6,r6,6852
  28d7a4:	01400a74 	movhi	r5,41
  28d7a8:	2946b104 	addi	r5,r5,6852
  28d7ac:	01000a74 	movhi	r4,41
  28d7b0:	2106b104 	addi	r4,r4,6852
  28d7b4:	0290abc0 	call	290abc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  28d7b8:	02908740 	call	290874 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  28d7bc:	01000a74 	movhi	r4,41
  28d7c0:	21023504 	addi	r4,r4,2260
  28d7c4:	02913ac0 	call	2913ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  28d7c8:	d0a70217 	ldw	r2,-25592(gp)
  28d7cc:	d0e70317 	ldw	r3,-25588(gp)
  28d7d0:	d1270417 	ldw	r4,-25584(gp)
  28d7d4:	200d883a 	mov	r6,r4
  28d7d8:	180b883a 	mov	r5,r3
  28d7dc:	1009883a 	mov	r4,r2
  28d7e0:	02806200 	call	280620 <main>
  28d7e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  28d7e8:	01000044 	movi	r4,1
  28d7ec:	028d2b80 	call	28d2b8 <close>
  exit (result);
  28d7f0:	e13fff17 	ldw	r4,-4(fp)
  28d7f4:	02913c00 	call	2913c0 <exit>

0028d7f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  28d7f8:	defffe04 	addi	sp,sp,-8
  28d7fc:	df000115 	stw	fp,4(sp)
  28d800:	df000104 	addi	fp,sp,4
  28d804:	e13fff15 	stw	r4,-4(fp)
}
  28d808:	0001883a 	nop
  28d80c:	e037883a 	mov	sp,fp
  28d810:	df000017 	ldw	fp,0(sp)
  28d814:	dec00104 	addi	sp,sp,4
  28d818:	f800283a 	ret

0028d81c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  28d81c:	defffe04 	addi	sp,sp,-8
  28d820:	df000115 	stw	fp,4(sp)
  28d824:	df000104 	addi	fp,sp,4
  28d828:	e13fff15 	stw	r4,-4(fp)
}
  28d82c:	0001883a 	nop
  28d830:	e037883a 	mov	sp,fp
  28d834:	df000017 	ldw	fp,0(sp)
  28d838:	dec00104 	addi	sp,sp,4
  28d83c:	f800283a 	ret

0028d840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28d840:	defffe04 	addi	sp,sp,-8
  28d844:	dfc00115 	stw	ra,4(sp)
  28d848:	df000015 	stw	fp,0(sp)
  28d84c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  28d850:	d0a00c17 	ldw	r2,-32720(gp)
  28d854:	10000326 	beq	r2,zero,28d864 <alt_get_errno+0x24>
  28d858:	d0a00c17 	ldw	r2,-32720(gp)
  28d85c:	103ee83a 	callr	r2
  28d860:	00000106 	br	28d868 <alt_get_errno+0x28>
  28d864:	d0a70104 	addi	r2,gp,-25596
}
  28d868:	e037883a 	mov	sp,fp
  28d86c:	dfc00117 	ldw	ra,4(sp)
  28d870:	df000017 	ldw	fp,0(sp)
  28d874:	dec00204 	addi	sp,sp,8
  28d878:	f800283a 	ret

0028d87c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  28d87c:	defff904 	addi	sp,sp,-28
  28d880:	dfc00615 	stw	ra,24(sp)
  28d884:	df000515 	stw	fp,20(sp)
  28d888:	df000504 	addi	fp,sp,20
  28d88c:	e13ffd15 	stw	r4,-12(fp)
  28d890:	e17ffe15 	stw	r5,-8(fp)
  28d894:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  28d898:	e0bffd17 	ldw	r2,-12(fp)
  28d89c:	10000616 	blt	r2,zero,28d8b8 <read+0x3c>
  28d8a0:	e0bffd17 	ldw	r2,-12(fp)
  28d8a4:	10c00324 	muli	r3,r2,12
  28d8a8:	00800a74 	movhi	r2,41
  28d8ac:	10890204 	addi	r2,r2,9224
  28d8b0:	1885883a 	add	r2,r3,r2
  28d8b4:	00000106 	br	28d8bc <read+0x40>
  28d8b8:	0005883a 	mov	r2,zero
  28d8bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  28d8c0:	e0bffb17 	ldw	r2,-20(fp)
  28d8c4:	10002226 	beq	r2,zero,28d950 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  28d8c8:	e0bffb17 	ldw	r2,-20(fp)
  28d8cc:	10800217 	ldw	r2,8(r2)
  28d8d0:	108000cc 	andi	r2,r2,3
  28d8d4:	10800060 	cmpeqi	r2,r2,1
  28d8d8:	1000181e 	bne	r2,zero,28d93c <read+0xc0>
        (fd->dev->read))
  28d8dc:	e0bffb17 	ldw	r2,-20(fp)
  28d8e0:	10800017 	ldw	r2,0(r2)
  28d8e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  28d8e8:	10001426 	beq	r2,zero,28d93c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  28d8ec:	e0bffb17 	ldw	r2,-20(fp)
  28d8f0:	10800017 	ldw	r2,0(r2)
  28d8f4:	10800517 	ldw	r2,20(r2)
  28d8f8:	e0ffff17 	ldw	r3,-4(fp)
  28d8fc:	180d883a 	mov	r6,r3
  28d900:	e17ffe17 	ldw	r5,-8(fp)
  28d904:	e13ffb17 	ldw	r4,-20(fp)
  28d908:	103ee83a 	callr	r2
  28d90c:	e0bffc15 	stw	r2,-16(fp)
  28d910:	e0bffc17 	ldw	r2,-16(fp)
  28d914:	1000070e 	bge	r2,zero,28d934 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  28d918:	028d8400 	call	28d840 <alt_get_errno>
  28d91c:	1007883a 	mov	r3,r2
  28d920:	e0bffc17 	ldw	r2,-16(fp)
  28d924:	0085c83a 	sub	r2,zero,r2
  28d928:	18800015 	stw	r2,0(r3)
          return -1;
  28d92c:	00bfffc4 	movi	r2,-1
  28d930:	00000c06 	br	28d964 <read+0xe8>
        }
        return rval;
  28d934:	e0bffc17 	ldw	r2,-16(fp)
  28d938:	00000a06 	br	28d964 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  28d93c:	028d8400 	call	28d840 <alt_get_errno>
  28d940:	1007883a 	mov	r3,r2
  28d944:	00800344 	movi	r2,13
  28d948:	18800015 	stw	r2,0(r3)
  28d94c:	00000406 	br	28d960 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  28d950:	028d8400 	call	28d840 <alt_get_errno>
  28d954:	1007883a 	mov	r3,r2
  28d958:	00801444 	movi	r2,81
  28d95c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  28d960:	00bfffc4 	movi	r2,-1
}
  28d964:	e037883a 	mov	sp,fp
  28d968:	dfc00117 	ldw	ra,4(sp)
  28d96c:	df000017 	ldw	fp,0(sp)
  28d970:	dec00204 	addi	sp,sp,8
  28d974:	f800283a 	ret

0028d978 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  28d978:	defffe04 	addi	sp,sp,-8
  28d97c:	df000115 	stw	fp,4(sp)
  28d980:	df000104 	addi	fp,sp,4
  28d984:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  28d988:	e0bfff17 	ldw	r2,-4(fp)
  28d98c:	108000d0 	cmplti	r2,r2,3
  28d990:	10000d1e 	bne	r2,zero,28d9c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  28d994:	00800a74 	movhi	r2,41
  28d998:	10890204 	addi	r2,r2,9224
  28d99c:	e0ffff17 	ldw	r3,-4(fp)
  28d9a0:	18c00324 	muli	r3,r3,12
  28d9a4:	10c5883a 	add	r2,r2,r3
  28d9a8:	10800204 	addi	r2,r2,8
  28d9ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  28d9b0:	00800a74 	movhi	r2,41
  28d9b4:	10890204 	addi	r2,r2,9224
  28d9b8:	e0ffff17 	ldw	r3,-4(fp)
  28d9bc:	18c00324 	muli	r3,r3,12
  28d9c0:	10c5883a 	add	r2,r2,r3
  28d9c4:	10000015 	stw	zero,0(r2)
  }
}
  28d9c8:	0001883a 	nop
  28d9cc:	e037883a 	mov	sp,fp
  28d9d0:	df000017 	ldw	fp,0(sp)
  28d9d4:	dec00104 	addi	sp,sp,4
  28d9d8:	f800283a 	ret

0028d9dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  28d9dc:	defff904 	addi	sp,sp,-28
  28d9e0:	df000615 	stw	fp,24(sp)
  28d9e4:	df000604 	addi	fp,sp,24
  28d9e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  28d9ec:	0005303a 	rdctl	r2,status
  28d9f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  28d9f4:	e0fffe17 	ldw	r3,-8(fp)
  28d9f8:	00bfff84 	movi	r2,-2
  28d9fc:	1884703a 	and	r2,r3,r2
  28da00:	1001703a 	wrctl	status,r2
  
  return context;
  28da04:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  28da08:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  28da0c:	d0a00d17 	ldw	r2,-32716(gp)
  28da10:	10c000c4 	addi	r3,r2,3
  28da14:	00bfff04 	movi	r2,-4
  28da18:	1884703a 	and	r2,r3,r2
  28da1c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  28da20:	d0e00d17 	ldw	r3,-32716(gp)
  28da24:	e0bfff17 	ldw	r2,-4(fp)
  28da28:	1887883a 	add	r3,r3,r2
  28da2c:	00800bb4 	movhi	r2,46
  28da30:	1086a004 	addi	r2,r2,6784
  28da34:	10c0062e 	bgeu	r2,r3,28da50 <sbrk+0x74>
  28da38:	e0bffb17 	ldw	r2,-20(fp)
  28da3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  28da40:	e0bffa17 	ldw	r2,-24(fp)
  28da44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  28da48:	00bfffc4 	movi	r2,-1
  28da4c:	00000b06 	br	28da7c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  28da50:	d0a00d17 	ldw	r2,-32716(gp)
  28da54:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  28da58:	d0e00d17 	ldw	r3,-32716(gp)
  28da5c:	e0bfff17 	ldw	r2,-4(fp)
  28da60:	1885883a 	add	r2,r3,r2
  28da64:	d0a00d15 	stw	r2,-32716(gp)
  28da68:	e0bffb17 	ldw	r2,-20(fp)
  28da6c:	e0bffc15 	stw	r2,-16(fp)
  28da70:	e0bffc17 	ldw	r2,-16(fp)
  28da74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  28da78:	e0bffd17 	ldw	r2,-12(fp)
} 
  28da7c:	e037883a 	mov	sp,fp
  28da80:	df000017 	ldw	fp,0(sp)
  28da84:	dec00104 	addi	sp,sp,4
  28da88:	f800283a 	ret

0028da8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28da8c:	defffe04 	addi	sp,sp,-8
  28da90:	dfc00115 	stw	ra,4(sp)
  28da94:	df000015 	stw	fp,0(sp)
  28da98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  28da9c:	d0a00c17 	ldw	r2,-32720(gp)
  28daa0:	10000326 	beq	r2,zero,28dab0 <alt_get_errno+0x24>
  28daa4:	d0a00c17 	ldw	r2,-32720(gp)
  28daa8:	103ee83a 	callr	r2
  28daac:	00000106 	br	28dab4 <alt_get_errno+0x28>
  28dab0:	d0a70104 	addi	r2,gp,-25596
}
  28dab4:	e037883a 	mov	sp,fp
  28dab8:	dfc00117 	ldw	ra,4(sp)
  28dabc:	df000017 	ldw	fp,0(sp)
  28dac0:	dec00204 	addi	sp,sp,8
  28dac4:	f800283a 	ret

0028dac8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  28dac8:	defff904 	addi	sp,sp,-28
  28dacc:	dfc00615 	stw	ra,24(sp)
  28dad0:	df000515 	stw	fp,20(sp)
  28dad4:	df000504 	addi	fp,sp,20
  28dad8:	e13ffd15 	stw	r4,-12(fp)
  28dadc:	e17ffe15 	stw	r5,-8(fp)
  28dae0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  28dae4:	e0bffd17 	ldw	r2,-12(fp)
  28dae8:	10000616 	blt	r2,zero,28db04 <write+0x3c>
  28daec:	e0bffd17 	ldw	r2,-12(fp)
  28daf0:	10c00324 	muli	r3,r2,12
  28daf4:	00800a74 	movhi	r2,41
  28daf8:	10890204 	addi	r2,r2,9224
  28dafc:	1885883a 	add	r2,r3,r2
  28db00:	00000106 	br	28db08 <write+0x40>
  28db04:	0005883a 	mov	r2,zero
  28db08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  28db0c:	e0bffb17 	ldw	r2,-20(fp)
  28db10:	10002126 	beq	r2,zero,28db98 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  28db14:	e0bffb17 	ldw	r2,-20(fp)
  28db18:	10800217 	ldw	r2,8(r2)
  28db1c:	108000cc 	andi	r2,r2,3
  28db20:	10001826 	beq	r2,zero,28db84 <write+0xbc>
  28db24:	e0bffb17 	ldw	r2,-20(fp)
  28db28:	10800017 	ldw	r2,0(r2)
  28db2c:	10800617 	ldw	r2,24(r2)
  28db30:	10001426 	beq	r2,zero,28db84 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  28db34:	e0bffb17 	ldw	r2,-20(fp)
  28db38:	10800017 	ldw	r2,0(r2)
  28db3c:	10800617 	ldw	r2,24(r2)
  28db40:	e0ffff17 	ldw	r3,-4(fp)
  28db44:	180d883a 	mov	r6,r3
  28db48:	e17ffe17 	ldw	r5,-8(fp)
  28db4c:	e13ffb17 	ldw	r4,-20(fp)
  28db50:	103ee83a 	callr	r2
  28db54:	e0bffc15 	stw	r2,-16(fp)
  28db58:	e0bffc17 	ldw	r2,-16(fp)
  28db5c:	1000070e 	bge	r2,zero,28db7c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  28db60:	028da8c0 	call	28da8c <alt_get_errno>
  28db64:	1007883a 	mov	r3,r2
  28db68:	e0bffc17 	ldw	r2,-16(fp)
  28db6c:	0085c83a 	sub	r2,zero,r2
  28db70:	18800015 	stw	r2,0(r3)
        return -1;
  28db74:	00bfffc4 	movi	r2,-1
  28db78:	00000c06 	br	28dbac <write+0xe4>
      }
      return rval;
  28db7c:	e0bffc17 	ldw	r2,-16(fp)
  28db80:	00000a06 	br	28dbac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  28db84:	028da8c0 	call	28da8c <alt_get_errno>
  28db88:	1007883a 	mov	r3,r2
  28db8c:	00800344 	movi	r2,13
  28db90:	18800015 	stw	r2,0(r3)
  28db94:	00000406 	br	28dba8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  28db98:	028da8c0 	call	28da8c <alt_get_errno>
  28db9c:	1007883a 	mov	r3,r2
  28dba0:	00801444 	movi	r2,81
  28dba4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  28dba8:	00bfffc4 	movi	r2,-1
}
  28dbac:	e037883a 	mov	sp,fp
  28dbb0:	dfc00117 	ldw	ra,4(sp)
  28dbb4:	df000017 	ldw	fp,0(sp)
  28dbb8:	dec00204 	addi	sp,sp,8
  28dbbc:	f800283a 	ret

0028dbc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  28dbc0:	defffd04 	addi	sp,sp,-12
  28dbc4:	dfc00215 	stw	ra,8(sp)
  28dbc8:	df000115 	stw	fp,4(sp)
  28dbcc:	df000104 	addi	fp,sp,4
  28dbd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  28dbd4:	d1600904 	addi	r5,gp,-32732
  28dbd8:	e13fff17 	ldw	r4,-4(fp)
  28dbdc:	02907d00 	call	2907d0 <alt_dev_llist_insert>
}
  28dbe0:	e037883a 	mov	sp,fp
  28dbe4:	dfc00117 	ldw	ra,4(sp)
  28dbe8:	df000017 	ldw	fp,0(sp)
  28dbec:	dec00204 	addi	sp,sp,8
  28dbf0:	f800283a 	ret

0028dbf4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  28dbf4:	defffd04 	addi	sp,sp,-12
  28dbf8:	dfc00215 	stw	ra,8(sp)
  28dbfc:	df000115 	stw	fp,4(sp)
  28dc00:	df000104 	addi	fp,sp,4
  28dc04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  28dc08:	02910b00 	call	2910b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  28dc0c:	00800044 	movi	r2,1
  28dc10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  28dc14:	0001883a 	nop
  28dc18:	e037883a 	mov	sp,fp
  28dc1c:	dfc00117 	ldw	ra,4(sp)
  28dc20:	df000017 	ldw	fp,0(sp)
  28dc24:	dec00204 	addi	sp,sp,8
  28dc28:	f800283a 	ret

0028dc2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  28dc2c:	defffd04 	addi	sp,sp,-12
  28dc30:	dfc00215 	stw	ra,8(sp)
  28dc34:	df000115 	stw	fp,4(sp)
  28dc38:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  28dc3c:	01800044 	movi	r6,1
  28dc40:	000b883a 	mov	r5,zero
  28dc44:	01000a74 	movhi	r4,41
  28dc48:	21096c04 	addi	r4,r4,9648
  28dc4c:	028dfcc0 	call	28dfcc <altera_avalon_jtag_uart_init>
  28dc50:	01000a74 	movhi	r4,41
  28dc54:	21096204 	addi	r4,r4,9608
  28dc58:	028dbc00 	call	28dbc0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  28dc5c:	01000a74 	movhi	r4,41
  28dc60:	210d7a04 	addi	r4,r4,13800
  28dc64:	028dbc00 	call	28dbc0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  28dc68:	01000a74 	movhi	r4,41
  28dc6c:	210d8604 	addi	r4,r4,13848
  28dc70:	028dbc00 	call	28dbc0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  28dc74:	00800a74 	movhi	r2,41
  28dc78:	108d9204 	addi	r2,r2,13896
  28dc7c:	10800a17 	ldw	r2,40(r2)
  28dc80:	10800017 	ldw	r2,0(r2)
  28dc84:	1007883a 	mov	r3,r2
  28dc88:	00800a74 	movhi	r2,41
  28dc8c:	108d9204 	addi	r2,r2,13896
  28dc90:	10c00b15 	stw	r3,44(r2)
  28dc94:	00800a74 	movhi	r2,41
  28dc98:	108d9204 	addi	r2,r2,13896
  28dc9c:	10800a17 	ldw	r2,40(r2)
  28dca0:	10800104 	addi	r2,r2,4
  28dca4:	10800017 	ldw	r2,0(r2)
  28dca8:	1007883a 	mov	r3,r2
  28dcac:	00800a74 	movhi	r2,41
  28dcb0:	108d9204 	addi	r2,r2,13896
  28dcb4:	10c00c15 	stw	r3,48(r2)
  28dcb8:	00800a74 	movhi	r2,41
  28dcbc:	108d9204 	addi	r2,r2,13896
  28dcc0:	10800a17 	ldw	r2,40(r2)
  28dcc4:	10800204 	addi	r2,r2,8
  28dcc8:	10800017 	ldw	r2,0(r2)
  28dccc:	10ffffcc 	andi	r3,r2,65535
  28dcd0:	00800a74 	movhi	r2,41
  28dcd4:	108d9204 	addi	r2,r2,13896
  28dcd8:	10c00f15 	stw	r3,60(r2)
  28dcdc:	00800a74 	movhi	r2,41
  28dce0:	108d9204 	addi	r2,r2,13896
  28dce4:	10800a17 	ldw	r2,40(r2)
  28dce8:	10800204 	addi	r2,r2,8
  28dcec:	10800017 	ldw	r2,0(r2)
  28dcf0:	1006d43a 	srli	r3,r2,16
  28dcf4:	00800a74 	movhi	r2,41
  28dcf8:	108d9204 	addi	r2,r2,13896
  28dcfc:	10c01015 	stw	r3,64(r2)
  28dd00:	00800a74 	movhi	r2,41
  28dd04:	108d9204 	addi	r2,r2,13896
  28dd08:	10800a17 	ldw	r2,40(r2)
  28dd0c:	10800304 	addi	r2,r2,12
  28dd10:	10800017 	ldw	r2,0(r2)
  28dd14:	1005d07a 	srai	r2,r2,1
  28dd18:	10c0004c 	andi	r3,r2,1
  28dd1c:	00800a74 	movhi	r2,41
  28dd20:	108d9204 	addi	r2,r2,13896
  28dd24:	10c00d15 	stw	r3,52(r2)
  28dd28:	00800a74 	movhi	r2,41
  28dd2c:	108d9204 	addi	r2,r2,13896
  28dd30:	10800a17 	ldw	r2,40(r2)
  28dd34:	10800304 	addi	r2,r2,12
  28dd38:	10800017 	ldw	r2,0(r2)
  28dd3c:	1005d13a 	srai	r2,r2,4
  28dd40:	10c003cc 	andi	r3,r2,15
  28dd44:	00800a74 	movhi	r2,41
  28dd48:	108d9204 	addi	r2,r2,13896
  28dd4c:	10c00e15 	stw	r3,56(r2)
  28dd50:	00800a74 	movhi	r2,41
  28dd54:	108d9204 	addi	r2,r2,13896
  28dd58:	10800a17 	ldw	r2,40(r2)
  28dd5c:	10800304 	addi	r2,r2,12
  28dd60:	10800017 	ldw	r2,0(r2)
  28dd64:	1005d43a 	srai	r2,r2,16
  28dd68:	e0bfff05 	stb	r2,-4(fp)
  28dd6c:	00800a74 	movhi	r2,41
  28dd70:	108d9204 	addi	r2,r2,13896
  28dd74:	10800a17 	ldw	r2,40(r2)
  28dd78:	10800304 	addi	r2,r2,12
  28dd7c:	10800017 	ldw	r2,0(r2)
  28dd80:	1004d63a 	srli	r2,r2,24
  28dd84:	e0bfff45 	stb	r2,-3(fp)
  28dd88:	00800a74 	movhi	r2,41
  28dd8c:	108d9204 	addi	r2,r2,13896
  28dd90:	10800e17 	ldw	r2,56(r2)
  28dd94:	10800058 	cmpnei	r2,r2,1
  28dd98:	1000041e 	bne	r2,zero,28ddac <alt_sys_init+0x180>
  28dd9c:	00800a74 	movhi	r2,41
  28dda0:	108d9204 	addi	r2,r2,13896
  28dda4:	10001115 	stw	zero,68(r2)
  28dda8:	00000e06 	br	28dde4 <alt_sys_init+0x1b8>
  28ddac:	00800a74 	movhi	r2,41
  28ddb0:	108d9204 	addi	r2,r2,13896
  28ddb4:	10800e17 	ldw	r2,56(r2)
  28ddb8:	10800098 	cmpnei	r2,r2,2
  28ddbc:	1000051e 	bne	r2,zero,28ddd4 <alt_sys_init+0x1a8>
  28ddc0:	00800a74 	movhi	r2,41
  28ddc4:	108d9204 	addi	r2,r2,13896
  28ddc8:	00c00044 	movi	r3,1
  28ddcc:	10c01115 	stw	r3,68(r2)
  28ddd0:	00000406 	br	28dde4 <alt_sys_init+0x1b8>
  28ddd4:	00800a74 	movhi	r2,41
  28ddd8:	108d9204 	addi	r2,r2,13896
  28dddc:	00c00084 	movi	r3,2
  28dde0:	10c01115 	stw	r3,68(r2)
  28dde4:	e0bfff03 	ldbu	r2,-4(fp)
  28dde8:	00c00804 	movi	r3,32
  28ddec:	1885c83a 	sub	r2,r3,r2
  28ddf0:	00ffffc4 	movi	r3,-1
  28ddf4:	1886d83a 	srl	r3,r3,r2
  28ddf8:	00800a74 	movhi	r2,41
  28ddfc:	108d9204 	addi	r2,r2,13896
  28de00:	10c01215 	stw	r3,72(r2)
  28de04:	e0ffff03 	ldbu	r3,-4(fp)
  28de08:	00800a74 	movhi	r2,41
  28de0c:	108d9204 	addi	r2,r2,13896
  28de10:	10801117 	ldw	r2,68(r2)
  28de14:	1887883a 	add	r3,r3,r2
  28de18:	00800a74 	movhi	r2,41
  28de1c:	108d9204 	addi	r2,r2,13896
  28de20:	10c01315 	stw	r3,76(r2)
  28de24:	e0bfff43 	ldbu	r2,-3(fp)
  28de28:	00c00804 	movi	r3,32
  28de2c:	1885c83a 	sub	r2,r3,r2
  28de30:	00ffffc4 	movi	r3,-1
  28de34:	1886d83a 	srl	r3,r3,r2
  28de38:	00800a74 	movhi	r2,41
  28de3c:	108d9204 	addi	r2,r2,13896
  28de40:	10c01415 	stw	r3,80(r2)
  28de44:	01000a74 	movhi	r4,41
  28de48:	210d9204 	addi	r4,r4,13896
  28de4c:	028dbc00 	call	28dbc0 <alt_dev_reg>
}
  28de50:	0001883a 	nop
  28de54:	e037883a 	mov	sp,fp
  28de58:	dfc00117 	ldw	ra,4(sp)
  28de5c:	df000017 	ldw	fp,0(sp)
  28de60:	dec00204 	addi	sp,sp,8
  28de64:	f800283a 	ret

0028de68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  28de68:	defffa04 	addi	sp,sp,-24
  28de6c:	dfc00515 	stw	ra,20(sp)
  28de70:	df000415 	stw	fp,16(sp)
  28de74:	df000404 	addi	fp,sp,16
  28de78:	e13ffd15 	stw	r4,-12(fp)
  28de7c:	e17ffe15 	stw	r5,-8(fp)
  28de80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  28de84:	e0bffd17 	ldw	r2,-12(fp)
  28de88:	10800017 	ldw	r2,0(r2)
  28de8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  28de90:	e0bffc17 	ldw	r2,-16(fp)
  28de94:	10c00a04 	addi	r3,r2,40
  28de98:	e0bffd17 	ldw	r2,-12(fp)
  28de9c:	10800217 	ldw	r2,8(r2)
  28dea0:	100f883a 	mov	r7,r2
  28dea4:	e1bfff17 	ldw	r6,-4(fp)
  28dea8:	e17ffe17 	ldw	r5,-8(fp)
  28deac:	1809883a 	mov	r4,r3
  28deb0:	028e4880 	call	28e488 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  28deb4:	e037883a 	mov	sp,fp
  28deb8:	dfc00117 	ldw	ra,4(sp)
  28debc:	df000017 	ldw	fp,0(sp)
  28dec0:	dec00204 	addi	sp,sp,8
  28dec4:	f800283a 	ret

0028dec8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  28dec8:	defffa04 	addi	sp,sp,-24
  28decc:	dfc00515 	stw	ra,20(sp)
  28ded0:	df000415 	stw	fp,16(sp)
  28ded4:	df000404 	addi	fp,sp,16
  28ded8:	e13ffd15 	stw	r4,-12(fp)
  28dedc:	e17ffe15 	stw	r5,-8(fp)
  28dee0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  28dee4:	e0bffd17 	ldw	r2,-12(fp)
  28dee8:	10800017 	ldw	r2,0(r2)
  28deec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  28def0:	e0bffc17 	ldw	r2,-16(fp)
  28def4:	10c00a04 	addi	r3,r2,40
  28def8:	e0bffd17 	ldw	r2,-12(fp)
  28defc:	10800217 	ldw	r2,8(r2)
  28df00:	100f883a 	mov	r7,r2
  28df04:	e1bfff17 	ldw	r6,-4(fp)
  28df08:	e17ffe17 	ldw	r5,-8(fp)
  28df0c:	1809883a 	mov	r4,r3
  28df10:	028e6a40 	call	28e6a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  28df14:	e037883a 	mov	sp,fp
  28df18:	dfc00117 	ldw	ra,4(sp)
  28df1c:	df000017 	ldw	fp,0(sp)
  28df20:	dec00204 	addi	sp,sp,8
  28df24:	f800283a 	ret

0028df28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  28df28:	defffc04 	addi	sp,sp,-16
  28df2c:	dfc00315 	stw	ra,12(sp)
  28df30:	df000215 	stw	fp,8(sp)
  28df34:	df000204 	addi	fp,sp,8
  28df38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  28df3c:	e0bfff17 	ldw	r2,-4(fp)
  28df40:	10800017 	ldw	r2,0(r2)
  28df44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  28df48:	e0bffe17 	ldw	r2,-8(fp)
  28df4c:	10c00a04 	addi	r3,r2,40
  28df50:	e0bfff17 	ldw	r2,-4(fp)
  28df54:	10800217 	ldw	r2,8(r2)
  28df58:	100b883a 	mov	r5,r2
  28df5c:	1809883a 	mov	r4,r3
  28df60:	028e3300 	call	28e330 <altera_avalon_jtag_uart_close>
}
  28df64:	e037883a 	mov	sp,fp
  28df68:	dfc00117 	ldw	ra,4(sp)
  28df6c:	df000017 	ldw	fp,0(sp)
  28df70:	dec00204 	addi	sp,sp,8
  28df74:	f800283a 	ret

0028df78 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  28df78:	defffa04 	addi	sp,sp,-24
  28df7c:	dfc00515 	stw	ra,20(sp)
  28df80:	df000415 	stw	fp,16(sp)
  28df84:	df000404 	addi	fp,sp,16
  28df88:	e13ffd15 	stw	r4,-12(fp)
  28df8c:	e17ffe15 	stw	r5,-8(fp)
  28df90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  28df94:	e0bffd17 	ldw	r2,-12(fp)
  28df98:	10800017 	ldw	r2,0(r2)
  28df9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  28dfa0:	e0bffc17 	ldw	r2,-16(fp)
  28dfa4:	10800a04 	addi	r2,r2,40
  28dfa8:	e1bfff17 	ldw	r6,-4(fp)
  28dfac:	e17ffe17 	ldw	r5,-8(fp)
  28dfb0:	1009883a 	mov	r4,r2
  28dfb4:	028e3980 	call	28e398 <altera_avalon_jtag_uart_ioctl>
}
  28dfb8:	e037883a 	mov	sp,fp
  28dfbc:	dfc00117 	ldw	ra,4(sp)
  28dfc0:	df000017 	ldw	fp,0(sp)
  28dfc4:	dec00204 	addi	sp,sp,8
  28dfc8:	f800283a 	ret

0028dfcc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  28dfcc:	defffb04 	addi	sp,sp,-20
  28dfd0:	dfc00415 	stw	ra,16(sp)
  28dfd4:	df000315 	stw	fp,12(sp)
  28dfd8:	df000304 	addi	fp,sp,12
  28dfdc:	e13ffd15 	stw	r4,-12(fp)
  28dfe0:	e17ffe15 	stw	r5,-8(fp)
  28dfe4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  28dfe8:	e0bffd17 	ldw	r2,-12(fp)
  28dfec:	00c00044 	movi	r3,1
  28dff0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  28dff4:	e0bffd17 	ldw	r2,-12(fp)
  28dff8:	10800017 	ldw	r2,0(r2)
  28dffc:	10800104 	addi	r2,r2,4
  28e000:	1007883a 	mov	r3,r2
  28e004:	e0bffd17 	ldw	r2,-12(fp)
  28e008:	10800817 	ldw	r2,32(r2)
  28e00c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  28e010:	e0bfff17 	ldw	r2,-4(fp)
  28e014:	01800a74 	movhi	r6,41
  28e018:	31b82004 	addi	r6,r6,-8064
  28e01c:	e17ffd17 	ldw	r5,-12(fp)
  28e020:	1009883a 	mov	r4,r2
  28e024:	0290b380 	call	290b38 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  28e028:	e0bffd17 	ldw	r2,-12(fp)
  28e02c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  28e030:	e0bffd17 	ldw	r2,-12(fp)
  28e034:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  28e038:	d0e70617 	ldw	r3,-25576(gp)
  28e03c:	e1fffd17 	ldw	r7,-12(fp)
  28e040:	01800a74 	movhi	r6,41
  28e044:	31b8a404 	addi	r6,r6,-7536
  28e048:	180b883a 	mov	r5,r3
  28e04c:	1009883a 	mov	r4,r2
  28e050:	02906200 	call	290620 <alt_alarm_start>
  28e054:	1000040e 	bge	r2,zero,28e068 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  28e058:	e0fffd17 	ldw	r3,-12(fp)
  28e05c:	00a00034 	movhi	r2,32768
  28e060:	10bfffc4 	addi	r2,r2,-1
  28e064:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  28e068:	0001883a 	nop
  28e06c:	e037883a 	mov	sp,fp
  28e070:	dfc00117 	ldw	ra,4(sp)
  28e074:	df000017 	ldw	fp,0(sp)
  28e078:	dec00204 	addi	sp,sp,8
  28e07c:	f800283a 	ret

0028e080 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  28e080:	defff704 	addi	sp,sp,-36
  28e084:	df000815 	stw	fp,32(sp)
  28e088:	df000804 	addi	fp,sp,32
  28e08c:	e13ffe15 	stw	r4,-8(fp)
  28e090:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  28e094:	e0bffe17 	ldw	r2,-8(fp)
  28e098:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  28e09c:	e0bffa17 	ldw	r2,-24(fp)
  28e0a0:	10800017 	ldw	r2,0(r2)
  28e0a4:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  28e0a8:	e0bffb17 	ldw	r2,-20(fp)
  28e0ac:	10800104 	addi	r2,r2,4
  28e0b0:	10800037 	ldwio	r2,0(r2)
  28e0b4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  28e0b8:	e0bffc17 	ldw	r2,-16(fp)
  28e0bc:	1080c00c 	andi	r2,r2,768
  28e0c0:	10006d26 	beq	r2,zero,28e278 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  28e0c4:	e0bffc17 	ldw	r2,-16(fp)
  28e0c8:	1080400c 	andi	r2,r2,256
  28e0cc:	10003526 	beq	r2,zero,28e1a4 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  28e0d0:	00800074 	movhi	r2,1
  28e0d4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  28e0d8:	e0bffa17 	ldw	r2,-24(fp)
  28e0dc:	10800a17 	ldw	r2,40(r2)
  28e0e0:	10800044 	addi	r2,r2,1
  28e0e4:	1081ffcc 	andi	r2,r2,2047
  28e0e8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  28e0ec:	e0bffa17 	ldw	r2,-24(fp)
  28e0f0:	10c00b17 	ldw	r3,44(r2)
  28e0f4:	e0bffd17 	ldw	r2,-12(fp)
  28e0f8:	18801526 	beq	r3,r2,28e150 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  28e0fc:	e0bffb17 	ldw	r2,-20(fp)
  28e100:	10800037 	ldwio	r2,0(r2)
  28e104:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  28e108:	e0bff817 	ldw	r2,-32(fp)
  28e10c:	10a0000c 	andi	r2,r2,32768
  28e110:	10001126 	beq	r2,zero,28e158 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  28e114:	e0bffa17 	ldw	r2,-24(fp)
  28e118:	10800a17 	ldw	r2,40(r2)
  28e11c:	e0fff817 	ldw	r3,-32(fp)
  28e120:	1809883a 	mov	r4,r3
  28e124:	e0fffa17 	ldw	r3,-24(fp)
  28e128:	1885883a 	add	r2,r3,r2
  28e12c:	10800e04 	addi	r2,r2,56
  28e130:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  28e134:	e0bffa17 	ldw	r2,-24(fp)
  28e138:	10800a17 	ldw	r2,40(r2)
  28e13c:	10800044 	addi	r2,r2,1
  28e140:	10c1ffcc 	andi	r3,r2,2047
  28e144:	e0bffa17 	ldw	r2,-24(fp)
  28e148:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  28e14c:	003fe206 	br	28e0d8 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  28e150:	0001883a 	nop
  28e154:	00000106 	br	28e15c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  28e158:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  28e15c:	e0bff817 	ldw	r2,-32(fp)
  28e160:	10bfffec 	andhi	r2,r2,65535
  28e164:	10000f26 	beq	r2,zero,28e1a4 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  28e168:	e0bffa17 	ldw	r2,-24(fp)
  28e16c:	10c00817 	ldw	r3,32(r2)
  28e170:	00bfff84 	movi	r2,-2
  28e174:	1886703a 	and	r3,r3,r2
  28e178:	e0bffa17 	ldw	r2,-24(fp)
  28e17c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  28e180:	e0bffb17 	ldw	r2,-20(fp)
  28e184:	10800104 	addi	r2,r2,4
  28e188:	1007883a 	mov	r3,r2
  28e18c:	e0bffa17 	ldw	r2,-24(fp)
  28e190:	10800817 	ldw	r2,32(r2)
  28e194:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  28e198:	e0bffb17 	ldw	r2,-20(fp)
  28e19c:	10800104 	addi	r2,r2,4
  28e1a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  28e1a4:	e0bffc17 	ldw	r2,-16(fp)
  28e1a8:	1080800c 	andi	r2,r2,512
  28e1ac:	103fbe26 	beq	r2,zero,28e0a8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  28e1b0:	e0bffc17 	ldw	r2,-16(fp)
  28e1b4:	1004d43a 	srli	r2,r2,16
  28e1b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  28e1bc:	00001406 	br	28e210 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  28e1c0:	e0bffb17 	ldw	r2,-20(fp)
  28e1c4:	e0fffa17 	ldw	r3,-24(fp)
  28e1c8:	18c00d17 	ldw	r3,52(r3)
  28e1cc:	e13ffa17 	ldw	r4,-24(fp)
  28e1d0:	20c7883a 	add	r3,r4,r3
  28e1d4:	18c20e04 	addi	r3,r3,2104
  28e1d8:	18c00003 	ldbu	r3,0(r3)
  28e1dc:	18c03fcc 	andi	r3,r3,255
  28e1e0:	18c0201c 	xori	r3,r3,128
  28e1e4:	18ffe004 	addi	r3,r3,-128
  28e1e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  28e1ec:	e0bffa17 	ldw	r2,-24(fp)
  28e1f0:	10800d17 	ldw	r2,52(r2)
  28e1f4:	10800044 	addi	r2,r2,1
  28e1f8:	10c1ffcc 	andi	r3,r2,2047
  28e1fc:	e0bffa17 	ldw	r2,-24(fp)
  28e200:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  28e204:	e0bff917 	ldw	r2,-28(fp)
  28e208:	10bfffc4 	addi	r2,r2,-1
  28e20c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  28e210:	e0bff917 	ldw	r2,-28(fp)
  28e214:	10000526 	beq	r2,zero,28e22c <altera_avalon_jtag_uart_irq+0x1ac>
  28e218:	e0bffa17 	ldw	r2,-24(fp)
  28e21c:	10c00d17 	ldw	r3,52(r2)
  28e220:	e0bffa17 	ldw	r2,-24(fp)
  28e224:	10800c17 	ldw	r2,48(r2)
  28e228:	18bfe51e 	bne	r3,r2,28e1c0 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  28e22c:	e0bff917 	ldw	r2,-28(fp)
  28e230:	103f9d26 	beq	r2,zero,28e0a8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  28e234:	e0bffa17 	ldw	r2,-24(fp)
  28e238:	10c00817 	ldw	r3,32(r2)
  28e23c:	00bfff44 	movi	r2,-3
  28e240:	1886703a 	and	r3,r3,r2
  28e244:	e0bffa17 	ldw	r2,-24(fp)
  28e248:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  28e24c:	e0bffa17 	ldw	r2,-24(fp)
  28e250:	10800017 	ldw	r2,0(r2)
  28e254:	10800104 	addi	r2,r2,4
  28e258:	1007883a 	mov	r3,r2
  28e25c:	e0bffa17 	ldw	r2,-24(fp)
  28e260:	10800817 	ldw	r2,32(r2)
  28e264:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  28e268:	e0bffb17 	ldw	r2,-20(fp)
  28e26c:	10800104 	addi	r2,r2,4
  28e270:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  28e274:	003f8c06 	br	28e0a8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  28e278:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  28e27c:	0001883a 	nop
  28e280:	e037883a 	mov	sp,fp
  28e284:	df000017 	ldw	fp,0(sp)
  28e288:	dec00104 	addi	sp,sp,4
  28e28c:	f800283a 	ret

0028e290 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  28e290:	defff804 	addi	sp,sp,-32
  28e294:	df000715 	stw	fp,28(sp)
  28e298:	df000704 	addi	fp,sp,28
  28e29c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  28e2a0:	e0bffb17 	ldw	r2,-20(fp)
  28e2a4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  28e2a8:	e0bff917 	ldw	r2,-28(fp)
  28e2ac:	10800017 	ldw	r2,0(r2)
  28e2b0:	10800104 	addi	r2,r2,4
  28e2b4:	10800037 	ldwio	r2,0(r2)
  28e2b8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  28e2bc:	e0bffa17 	ldw	r2,-24(fp)
  28e2c0:	1081000c 	andi	r2,r2,1024
  28e2c4:	10000b26 	beq	r2,zero,28e2f4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  28e2c8:	e0bff917 	ldw	r2,-28(fp)
  28e2cc:	10800017 	ldw	r2,0(r2)
  28e2d0:	10800104 	addi	r2,r2,4
  28e2d4:	1007883a 	mov	r3,r2
  28e2d8:	e0bff917 	ldw	r2,-28(fp)
  28e2dc:	10800817 	ldw	r2,32(r2)
  28e2e0:	10810014 	ori	r2,r2,1024
  28e2e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  28e2e8:	e0bff917 	ldw	r2,-28(fp)
  28e2ec:	10000915 	stw	zero,36(r2)
  28e2f0:	00000a06 	br	28e31c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  28e2f4:	e0bff917 	ldw	r2,-28(fp)
  28e2f8:	10c00917 	ldw	r3,36(r2)
  28e2fc:	00a00034 	movhi	r2,32768
  28e300:	10bfff04 	addi	r2,r2,-4
  28e304:	10c00536 	bltu	r2,r3,28e31c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  28e308:	e0bff917 	ldw	r2,-28(fp)
  28e30c:	10800917 	ldw	r2,36(r2)
  28e310:	10c00044 	addi	r3,r2,1
  28e314:	e0bff917 	ldw	r2,-28(fp)
  28e318:	10c00915 	stw	r3,36(r2)
  28e31c:	d0a70617 	ldw	r2,-25576(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  28e320:	e037883a 	mov	sp,fp
  28e324:	df000017 	ldw	fp,0(sp)
  28e328:	dec00104 	addi	sp,sp,4
  28e32c:	f800283a 	ret

0028e330 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  28e330:	defffd04 	addi	sp,sp,-12
  28e334:	df000215 	stw	fp,8(sp)
  28e338:	df000204 	addi	fp,sp,8
  28e33c:	e13ffe15 	stw	r4,-8(fp)
  28e340:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  28e344:	00000506 	br	28e35c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  28e348:	e0bfff17 	ldw	r2,-4(fp)
  28e34c:	1090000c 	andi	r2,r2,16384
  28e350:	10000226 	beq	r2,zero,28e35c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  28e354:	00bffd44 	movi	r2,-11
  28e358:	00000b06 	br	28e388 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  28e35c:	e0bffe17 	ldw	r2,-8(fp)
  28e360:	10c00d17 	ldw	r3,52(r2)
  28e364:	e0bffe17 	ldw	r2,-8(fp)
  28e368:	10800c17 	ldw	r2,48(r2)
  28e36c:	18800526 	beq	r3,r2,28e384 <altera_avalon_jtag_uart_close+0x54>
  28e370:	e0bffe17 	ldw	r2,-8(fp)
  28e374:	10c00917 	ldw	r3,36(r2)
  28e378:	e0bffe17 	ldw	r2,-8(fp)
  28e37c:	10800117 	ldw	r2,4(r2)
  28e380:	18bff136 	bltu	r3,r2,28e348 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  28e384:	0005883a 	mov	r2,zero
}
  28e388:	e037883a 	mov	sp,fp
  28e38c:	df000017 	ldw	fp,0(sp)
  28e390:	dec00104 	addi	sp,sp,4
  28e394:	f800283a 	ret

0028e398 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  28e398:	defffa04 	addi	sp,sp,-24
  28e39c:	df000515 	stw	fp,20(sp)
  28e3a0:	df000504 	addi	fp,sp,20
  28e3a4:	e13ffd15 	stw	r4,-12(fp)
  28e3a8:	e17ffe15 	stw	r5,-8(fp)
  28e3ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  28e3b0:	00bff9c4 	movi	r2,-25
  28e3b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  28e3b8:	e0bffe17 	ldw	r2,-8(fp)
  28e3bc:	10da8060 	cmpeqi	r3,r2,27137
  28e3c0:	1800031e 	bne	r3,zero,28e3d0 <altera_avalon_jtag_uart_ioctl+0x38>
  28e3c4:	109a80a0 	cmpeqi	r2,r2,27138
  28e3c8:	1000181e 	bne	r2,zero,28e42c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  28e3cc:	00002906 	br	28e474 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  28e3d0:	e0bffd17 	ldw	r2,-12(fp)
  28e3d4:	10c00117 	ldw	r3,4(r2)
  28e3d8:	00a00034 	movhi	r2,32768
  28e3dc:	10bfffc4 	addi	r2,r2,-1
  28e3e0:	18802126 	beq	r3,r2,28e468 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  28e3e4:	e0bfff17 	ldw	r2,-4(fp)
  28e3e8:	10800017 	ldw	r2,0(r2)
  28e3ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  28e3f0:	e0bffc17 	ldw	r2,-16(fp)
  28e3f4:	10800090 	cmplti	r2,r2,2
  28e3f8:	1000061e 	bne	r2,zero,28e414 <altera_avalon_jtag_uart_ioctl+0x7c>
  28e3fc:	e0fffc17 	ldw	r3,-16(fp)
  28e400:	00a00034 	movhi	r2,32768
  28e404:	10bfffc4 	addi	r2,r2,-1
  28e408:	18800226 	beq	r3,r2,28e414 <altera_avalon_jtag_uart_ioctl+0x7c>
  28e40c:	e0bffc17 	ldw	r2,-16(fp)
  28e410:	00000206 	br	28e41c <altera_avalon_jtag_uart_ioctl+0x84>
  28e414:	00a00034 	movhi	r2,32768
  28e418:	10bfff84 	addi	r2,r2,-2
  28e41c:	e0fffd17 	ldw	r3,-12(fp)
  28e420:	18800115 	stw	r2,4(r3)
      rc = 0;
  28e424:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  28e428:	00000f06 	br	28e468 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  28e42c:	e0bffd17 	ldw	r2,-12(fp)
  28e430:	10c00117 	ldw	r3,4(r2)
  28e434:	00a00034 	movhi	r2,32768
  28e438:	10bfffc4 	addi	r2,r2,-1
  28e43c:	18800c26 	beq	r3,r2,28e470 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  28e440:	e0bffd17 	ldw	r2,-12(fp)
  28e444:	10c00917 	ldw	r3,36(r2)
  28e448:	e0bffd17 	ldw	r2,-12(fp)
  28e44c:	10800117 	ldw	r2,4(r2)
  28e450:	1885803a 	cmpltu	r2,r3,r2
  28e454:	10c03fcc 	andi	r3,r2,255
  28e458:	e0bfff17 	ldw	r2,-4(fp)
  28e45c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  28e460:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  28e464:	00000206 	br	28e470 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  28e468:	0001883a 	nop
  28e46c:	00000106 	br	28e474 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  28e470:	0001883a 	nop

  default:
    break;
  }

  return rc;
  28e474:	e0bffb17 	ldw	r2,-20(fp)
}
  28e478:	e037883a 	mov	sp,fp
  28e47c:	df000017 	ldw	fp,0(sp)
  28e480:	dec00104 	addi	sp,sp,4
  28e484:	f800283a 	ret

0028e488 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  28e488:	defff304 	addi	sp,sp,-52
  28e48c:	dfc00c15 	stw	ra,48(sp)
  28e490:	df000b15 	stw	fp,44(sp)
  28e494:	df000b04 	addi	fp,sp,44
  28e498:	e13ffc15 	stw	r4,-16(fp)
  28e49c:	e17ffd15 	stw	r5,-12(fp)
  28e4a0:	e1bffe15 	stw	r6,-8(fp)
  28e4a4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  28e4a8:	e0bffd17 	ldw	r2,-12(fp)
  28e4ac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  28e4b0:	00004706 	br	28e5d0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  28e4b4:	e0bffc17 	ldw	r2,-16(fp)
  28e4b8:	10800a17 	ldw	r2,40(r2)
  28e4bc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  28e4c0:	e0bffc17 	ldw	r2,-16(fp)
  28e4c4:	10800b17 	ldw	r2,44(r2)
  28e4c8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  28e4cc:	e0fff717 	ldw	r3,-36(fp)
  28e4d0:	e0bff817 	ldw	r2,-32(fp)
  28e4d4:	18800536 	bltu	r3,r2,28e4ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  28e4d8:	e0fff717 	ldw	r3,-36(fp)
  28e4dc:	e0bff817 	ldw	r2,-32(fp)
  28e4e0:	1885c83a 	sub	r2,r3,r2
  28e4e4:	e0bff615 	stw	r2,-40(fp)
  28e4e8:	00000406 	br	28e4fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  28e4ec:	00c20004 	movi	r3,2048
  28e4f0:	e0bff817 	ldw	r2,-32(fp)
  28e4f4:	1885c83a 	sub	r2,r3,r2
  28e4f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  28e4fc:	e0bff617 	ldw	r2,-40(fp)
  28e500:	10001e26 	beq	r2,zero,28e57c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  28e504:	e0fffe17 	ldw	r3,-8(fp)
  28e508:	e0bff617 	ldw	r2,-40(fp)
  28e50c:	1880022e 	bgeu	r3,r2,28e518 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  28e510:	e0bffe17 	ldw	r2,-8(fp)
  28e514:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  28e518:	e0bffc17 	ldw	r2,-16(fp)
  28e51c:	10c00e04 	addi	r3,r2,56
  28e520:	e0bff817 	ldw	r2,-32(fp)
  28e524:	1885883a 	add	r2,r3,r2
  28e528:	e1bff617 	ldw	r6,-40(fp)
  28e52c:	100b883a 	mov	r5,r2
  28e530:	e13ff517 	ldw	r4,-44(fp)
  28e534:	02865dc0 	call	2865dc <memcpy>
      ptr   += n;
  28e538:	e0fff517 	ldw	r3,-44(fp)
  28e53c:	e0bff617 	ldw	r2,-40(fp)
  28e540:	1885883a 	add	r2,r3,r2
  28e544:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  28e548:	e0fffe17 	ldw	r3,-8(fp)
  28e54c:	e0bff617 	ldw	r2,-40(fp)
  28e550:	1885c83a 	sub	r2,r3,r2
  28e554:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  28e558:	e0fff817 	ldw	r3,-32(fp)
  28e55c:	e0bff617 	ldw	r2,-40(fp)
  28e560:	1885883a 	add	r2,r3,r2
  28e564:	10c1ffcc 	andi	r3,r2,2047
  28e568:	e0bffc17 	ldw	r2,-16(fp)
  28e56c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  28e570:	e0bffe17 	ldw	r2,-8(fp)
  28e574:	00bfcf16 	blt	zero,r2,28e4b4 <altera_avalon_jtag_uart_read+0x2c>
  28e578:	00000106 	br	28e580 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  28e57c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  28e580:	e0fff517 	ldw	r3,-44(fp)
  28e584:	e0bffd17 	ldw	r2,-12(fp)
  28e588:	1880141e 	bne	r3,r2,28e5dc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  28e58c:	e0bfff17 	ldw	r2,-4(fp)
  28e590:	1090000c 	andi	r2,r2,16384
  28e594:	1000131e 	bne	r2,zero,28e5e4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  28e598:	0001883a 	nop
  28e59c:	e0bffc17 	ldw	r2,-16(fp)
  28e5a0:	10c00a17 	ldw	r3,40(r2)
  28e5a4:	e0bff717 	ldw	r2,-36(fp)
  28e5a8:	1880051e 	bne	r3,r2,28e5c0 <altera_avalon_jtag_uart_read+0x138>
  28e5ac:	e0bffc17 	ldw	r2,-16(fp)
  28e5b0:	10c00917 	ldw	r3,36(r2)
  28e5b4:	e0bffc17 	ldw	r2,-16(fp)
  28e5b8:	10800117 	ldw	r2,4(r2)
  28e5bc:	18bff736 	bltu	r3,r2,28e59c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  28e5c0:	e0bffc17 	ldw	r2,-16(fp)
  28e5c4:	10c00a17 	ldw	r3,40(r2)
  28e5c8:	e0bff717 	ldw	r2,-36(fp)
  28e5cc:	18800726 	beq	r3,r2,28e5ec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  28e5d0:	e0bffe17 	ldw	r2,-8(fp)
  28e5d4:	00bfb716 	blt	zero,r2,28e4b4 <altera_avalon_jtag_uart_read+0x2c>
  28e5d8:	00000506 	br	28e5f0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  28e5dc:	0001883a 	nop
  28e5e0:	00000306 	br	28e5f0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  28e5e4:	0001883a 	nop
  28e5e8:	00000106 	br	28e5f0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  28e5ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  28e5f0:	e0fff517 	ldw	r3,-44(fp)
  28e5f4:	e0bffd17 	ldw	r2,-12(fp)
  28e5f8:	18801826 	beq	r3,r2,28e65c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  28e5fc:	0005303a 	rdctl	r2,status
  28e600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  28e604:	e0fffb17 	ldw	r3,-20(fp)
  28e608:	00bfff84 	movi	r2,-2
  28e60c:	1884703a 	and	r2,r3,r2
  28e610:	1001703a 	wrctl	status,r2
  
  return context;
  28e614:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  28e618:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  28e61c:	e0bffc17 	ldw	r2,-16(fp)
  28e620:	10800817 	ldw	r2,32(r2)
  28e624:	10c00054 	ori	r3,r2,1
  28e628:	e0bffc17 	ldw	r2,-16(fp)
  28e62c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  28e630:	e0bffc17 	ldw	r2,-16(fp)
  28e634:	10800017 	ldw	r2,0(r2)
  28e638:	10800104 	addi	r2,r2,4
  28e63c:	1007883a 	mov	r3,r2
  28e640:	e0bffc17 	ldw	r2,-16(fp)
  28e644:	10800817 	ldw	r2,32(r2)
  28e648:	18800035 	stwio	r2,0(r3)
  28e64c:	e0bffa17 	ldw	r2,-24(fp)
  28e650:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  28e654:	e0bff917 	ldw	r2,-28(fp)
  28e658:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  28e65c:	e0fff517 	ldw	r3,-44(fp)
  28e660:	e0bffd17 	ldw	r2,-12(fp)
  28e664:	18800426 	beq	r3,r2,28e678 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  28e668:	e0fff517 	ldw	r3,-44(fp)
  28e66c:	e0bffd17 	ldw	r2,-12(fp)
  28e670:	1885c83a 	sub	r2,r3,r2
  28e674:	00000606 	br	28e690 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  28e678:	e0bfff17 	ldw	r2,-4(fp)
  28e67c:	1090000c 	andi	r2,r2,16384
  28e680:	10000226 	beq	r2,zero,28e68c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  28e684:	00bffd44 	movi	r2,-11
  28e688:	00000106 	br	28e690 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  28e68c:	00bffec4 	movi	r2,-5
}
  28e690:	e037883a 	mov	sp,fp
  28e694:	dfc00117 	ldw	ra,4(sp)
  28e698:	df000017 	ldw	fp,0(sp)
  28e69c:	dec00204 	addi	sp,sp,8
  28e6a0:	f800283a 	ret

0028e6a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  28e6a4:	defff304 	addi	sp,sp,-52
  28e6a8:	dfc00c15 	stw	ra,48(sp)
  28e6ac:	df000b15 	stw	fp,44(sp)
  28e6b0:	df000b04 	addi	fp,sp,44
  28e6b4:	e13ffc15 	stw	r4,-16(fp)
  28e6b8:	e17ffd15 	stw	r5,-12(fp)
  28e6bc:	e1bffe15 	stw	r6,-8(fp)
  28e6c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  28e6c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  28e6c8:	e0bffd17 	ldw	r2,-12(fp)
  28e6cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  28e6d0:	00003706 	br	28e7b0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  28e6d4:	e0bffc17 	ldw	r2,-16(fp)
  28e6d8:	10800c17 	ldw	r2,48(r2)
  28e6dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  28e6e0:	e0bffc17 	ldw	r2,-16(fp)
  28e6e4:	10800d17 	ldw	r2,52(r2)
  28e6e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  28e6ec:	e0fff917 	ldw	r3,-28(fp)
  28e6f0:	e0bff517 	ldw	r2,-44(fp)
  28e6f4:	1880062e 	bgeu	r3,r2,28e710 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  28e6f8:	e0fff517 	ldw	r3,-44(fp)
  28e6fc:	e0bff917 	ldw	r2,-28(fp)
  28e700:	1885c83a 	sub	r2,r3,r2
  28e704:	10bfffc4 	addi	r2,r2,-1
  28e708:	e0bff615 	stw	r2,-40(fp)
  28e70c:	00000b06 	br	28e73c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  28e710:	e0bff517 	ldw	r2,-44(fp)
  28e714:	10000526 	beq	r2,zero,28e72c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  28e718:	00c20004 	movi	r3,2048
  28e71c:	e0bff917 	ldw	r2,-28(fp)
  28e720:	1885c83a 	sub	r2,r3,r2
  28e724:	e0bff615 	stw	r2,-40(fp)
  28e728:	00000406 	br	28e73c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  28e72c:	00c1ffc4 	movi	r3,2047
  28e730:	e0bff917 	ldw	r2,-28(fp)
  28e734:	1885c83a 	sub	r2,r3,r2
  28e738:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  28e73c:	e0bff617 	ldw	r2,-40(fp)
  28e740:	10001e26 	beq	r2,zero,28e7bc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  28e744:	e0fffe17 	ldw	r3,-8(fp)
  28e748:	e0bff617 	ldw	r2,-40(fp)
  28e74c:	1880022e 	bgeu	r3,r2,28e758 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  28e750:	e0bffe17 	ldw	r2,-8(fp)
  28e754:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  28e758:	e0bffc17 	ldw	r2,-16(fp)
  28e75c:	10c20e04 	addi	r3,r2,2104
  28e760:	e0bff917 	ldw	r2,-28(fp)
  28e764:	1885883a 	add	r2,r3,r2
  28e768:	e1bff617 	ldw	r6,-40(fp)
  28e76c:	e17ffd17 	ldw	r5,-12(fp)
  28e770:	1009883a 	mov	r4,r2
  28e774:	02865dc0 	call	2865dc <memcpy>
      ptr   += n;
  28e778:	e0fffd17 	ldw	r3,-12(fp)
  28e77c:	e0bff617 	ldw	r2,-40(fp)
  28e780:	1885883a 	add	r2,r3,r2
  28e784:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  28e788:	e0fffe17 	ldw	r3,-8(fp)
  28e78c:	e0bff617 	ldw	r2,-40(fp)
  28e790:	1885c83a 	sub	r2,r3,r2
  28e794:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  28e798:	e0fff917 	ldw	r3,-28(fp)
  28e79c:	e0bff617 	ldw	r2,-40(fp)
  28e7a0:	1885883a 	add	r2,r3,r2
  28e7a4:	10c1ffcc 	andi	r3,r2,2047
  28e7a8:	e0bffc17 	ldw	r2,-16(fp)
  28e7ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  28e7b0:	e0bffe17 	ldw	r2,-8(fp)
  28e7b4:	00bfc716 	blt	zero,r2,28e6d4 <altera_avalon_jtag_uart_write+0x30>
  28e7b8:	00000106 	br	28e7c0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  28e7bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  28e7c0:	0005303a 	rdctl	r2,status
  28e7c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  28e7c8:	e0fffb17 	ldw	r3,-20(fp)
  28e7cc:	00bfff84 	movi	r2,-2
  28e7d0:	1884703a 	and	r2,r3,r2
  28e7d4:	1001703a 	wrctl	status,r2
  
  return context;
  28e7d8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  28e7dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  28e7e0:	e0bffc17 	ldw	r2,-16(fp)
  28e7e4:	10800817 	ldw	r2,32(r2)
  28e7e8:	10c00094 	ori	r3,r2,2
  28e7ec:	e0bffc17 	ldw	r2,-16(fp)
  28e7f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  28e7f4:	e0bffc17 	ldw	r2,-16(fp)
  28e7f8:	10800017 	ldw	r2,0(r2)
  28e7fc:	10800104 	addi	r2,r2,4
  28e800:	1007883a 	mov	r3,r2
  28e804:	e0bffc17 	ldw	r2,-16(fp)
  28e808:	10800817 	ldw	r2,32(r2)
  28e80c:	18800035 	stwio	r2,0(r3)
  28e810:	e0bffa17 	ldw	r2,-24(fp)
  28e814:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  28e818:	e0bff817 	ldw	r2,-32(fp)
  28e81c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  28e820:	e0bffe17 	ldw	r2,-8(fp)
  28e824:	0080100e 	bge	zero,r2,28e868 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  28e828:	e0bfff17 	ldw	r2,-4(fp)
  28e82c:	1090000c 	andi	r2,r2,16384
  28e830:	1000101e 	bne	r2,zero,28e874 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  28e834:	0001883a 	nop
  28e838:	e0bffc17 	ldw	r2,-16(fp)
  28e83c:	10c00d17 	ldw	r3,52(r2)
  28e840:	e0bff517 	ldw	r2,-44(fp)
  28e844:	1880051e 	bne	r3,r2,28e85c <altera_avalon_jtag_uart_write+0x1b8>
  28e848:	e0bffc17 	ldw	r2,-16(fp)
  28e84c:	10c00917 	ldw	r3,36(r2)
  28e850:	e0bffc17 	ldw	r2,-16(fp)
  28e854:	10800117 	ldw	r2,4(r2)
  28e858:	18bff736 	bltu	r3,r2,28e838 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  28e85c:	e0bffc17 	ldw	r2,-16(fp)
  28e860:	10800917 	ldw	r2,36(r2)
  28e864:	1000051e 	bne	r2,zero,28e87c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  28e868:	e0bffe17 	ldw	r2,-8(fp)
  28e86c:	00bfd016 	blt	zero,r2,28e7b0 <altera_avalon_jtag_uart_write+0x10c>
  28e870:	00000306 	br	28e880 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  28e874:	0001883a 	nop
  28e878:	00000106 	br	28e880 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  28e87c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  28e880:	e0fffd17 	ldw	r3,-12(fp)
  28e884:	e0bff717 	ldw	r2,-36(fp)
  28e888:	18800426 	beq	r3,r2,28e89c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  28e88c:	e0fffd17 	ldw	r3,-12(fp)
  28e890:	e0bff717 	ldw	r2,-36(fp)
  28e894:	1885c83a 	sub	r2,r3,r2
  28e898:	00000606 	br	28e8b4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  28e89c:	e0bfff17 	ldw	r2,-4(fp)
  28e8a0:	1090000c 	andi	r2,r2,16384
  28e8a4:	10000226 	beq	r2,zero,28e8b0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  28e8a8:	00bffd44 	movi	r2,-11
  28e8ac:	00000106 	br	28e8b4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  28e8b0:	00bffec4 	movi	r2,-5
}
  28e8b4:	e037883a 	mov	sp,fp
  28e8b8:	dfc00117 	ldw	ra,4(sp)
  28e8bc:	df000017 	ldw	fp,0(sp)
  28e8c0:	dec00204 	addi	sp,sp,8
  28e8c4:	f800283a 	ret

0028e8c8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  28e8c8:	defffc04 	addi	sp,sp,-16
  28e8cc:	dfc00315 	stw	ra,12(sp)
  28e8d0:	df000215 	stw	fp,8(sp)
  28e8d4:	df000204 	addi	fp,sp,8
  28e8d8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  28e8dc:	d1600904 	addi	r5,gp,-32732
  28e8e0:	e13fff17 	ldw	r4,-4(fp)
  28e8e4:	02909340 	call	290934 <alt_find_dev>
  28e8e8:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  28e8ec:	e0bffe17 	ldw	r2,-8(fp)
}
  28e8f0:	e037883a 	mov	sp,fp
  28e8f4:	dfc00117 	ldw	ra,4(sp)
  28e8f8:	df000017 	ldw	fp,0(sp)
  28e8fc:	dec00204 	addi	sp,sp,8
  28e900:	f800283a 	ret

0028e904 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  28e904:	defffd04 	addi	sp,sp,-12
  28e908:	df000215 	stw	fp,8(sp)
  28e90c:	df000204 	addi	fp,sp,8
  28e910:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28e914:	e0bfff17 	ldw	r2,-4(fp)
  28e918:	10800a17 	ldw	r2,40(r2)
  28e91c:	10800037 	ldwio	r2,0(r2)
  28e920:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  28e924:	e0bffe17 	ldw	r2,-8(fp)
  28e928:	10800054 	ori	r2,r2,1
  28e92c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  28e930:	e0bfff17 	ldw	r2,-4(fp)
  28e934:	10800a17 	ldw	r2,40(r2)
  28e938:	1007883a 	mov	r3,r2
  28e93c:	e0bffe17 	ldw	r2,-8(fp)
  28e940:	18800035 	stwio	r2,0(r3)
}
  28e944:	0001883a 	nop
  28e948:	e037883a 	mov	sp,fp
  28e94c:	df000017 	ldw	fp,0(sp)
  28e950:	dec00104 	addi	sp,sp,4
  28e954:	f800283a 	ret

0028e958 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  28e958:	defffd04 	addi	sp,sp,-12
  28e95c:	df000215 	stw	fp,8(sp)
  28e960:	df000204 	addi	fp,sp,8
  28e964:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28e968:	e0bfff17 	ldw	r2,-4(fp)
  28e96c:	10800a17 	ldw	r2,40(r2)
  28e970:	10800037 	ldwio	r2,0(r2)
  28e974:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  28e978:	e0fffe17 	ldw	r3,-8(fp)
  28e97c:	00bfff84 	movi	r2,-2
  28e980:	1884703a 	and	r2,r3,r2
  28e984:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  28e988:	e0bfff17 	ldw	r2,-4(fp)
  28e98c:	10800a17 	ldw	r2,40(r2)
  28e990:	1007883a 	mov	r3,r2
  28e994:	e0bffe17 	ldw	r2,-8(fp)
  28e998:	18800035 	stwio	r2,0(r3)
}
  28e99c:	0001883a 	nop
  28e9a0:	e037883a 	mov	sp,fp
  28e9a4:	df000017 	ldw	fp,0(sp)
  28e9a8:	dec00104 	addi	sp,sp,4
  28e9ac:	f800283a 	ret

0028e9b0 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  28e9b0:	defffd04 	addi	sp,sp,-12
  28e9b4:	df000215 	stw	fp,8(sp)
  28e9b8:	df000204 	addi	fp,sp,8
  28e9bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28e9c0:	e0bfff17 	ldw	r2,-4(fp)
  28e9c4:	10800a17 	ldw	r2,40(r2)
  28e9c8:	10800037 	ldwio	r2,0(r2)
  28e9cc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  28e9d0:	e0bffe17 	ldw	r2,-8(fp)
  28e9d4:	10800094 	ori	r2,r2,2
  28e9d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  28e9dc:	e0bfff17 	ldw	r2,-4(fp)
  28e9e0:	10800a17 	ldw	r2,40(r2)
  28e9e4:	1007883a 	mov	r3,r2
  28e9e8:	e0bffe17 	ldw	r2,-8(fp)
  28e9ec:	18800035 	stwio	r2,0(r3)
}
  28e9f0:	0001883a 	nop
  28e9f4:	e037883a 	mov	sp,fp
  28e9f8:	df000017 	ldw	fp,0(sp)
  28e9fc:	dec00104 	addi	sp,sp,4
  28ea00:	f800283a 	ret

0028ea04 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  28ea04:	defffd04 	addi	sp,sp,-12
  28ea08:	df000215 	stw	fp,8(sp)
  28ea0c:	df000204 	addi	fp,sp,8
  28ea10:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28ea14:	e0bfff17 	ldw	r2,-4(fp)
  28ea18:	10800a17 	ldw	r2,40(r2)
  28ea1c:	10800037 	ldwio	r2,0(r2)
  28ea20:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  28ea24:	e0fffe17 	ldw	r3,-8(fp)
  28ea28:	00bfff44 	movi	r2,-3
  28ea2c:	1884703a 	and	r2,r3,r2
  28ea30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  28ea34:	e0bfff17 	ldw	r2,-4(fp)
  28ea38:	10800a17 	ldw	r2,40(r2)
  28ea3c:	1007883a 	mov	r3,r2
  28ea40:	e0bffe17 	ldw	r2,-8(fp)
  28ea44:	18800035 	stwio	r2,0(r3)
}
  28ea48:	0001883a 	nop
  28ea4c:	e037883a 	mov	sp,fp
  28ea50:	df000017 	ldw	fp,0(sp)
  28ea54:	dec00104 	addi	sp,sp,4
  28ea58:	f800283a 	ret

0028ea5c <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  28ea5c:	defffd04 	addi	sp,sp,-12
  28ea60:	df000215 	stw	fp,8(sp)
  28ea64:	df000204 	addi	fp,sp,8
  28ea68:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28ea6c:	e0bfff17 	ldw	r2,-4(fp)
  28ea70:	10800a17 	ldw	r2,40(r2)
  28ea74:	10800037 	ldwio	r2,0(r2)
  28ea78:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  28ea7c:	e0bffe17 	ldw	r2,-8(fp)
  28ea80:	1080400c 	andi	r2,r2,256
  28ea84:	1004c03a 	cmpne	r2,r2,zero
  28ea88:	10803fcc 	andi	r2,r2,255
}
  28ea8c:	e037883a 	mov	sp,fp
  28ea90:	df000017 	ldw	fp,0(sp)
  28ea94:	dec00104 	addi	sp,sp,4
  28ea98:	f800283a 	ret

0028ea9c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  28ea9c:	defffd04 	addi	sp,sp,-12
  28eaa0:	df000215 	stw	fp,8(sp)
  28eaa4:	df000204 	addi	fp,sp,8
  28eaa8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28eaac:	e0bfff17 	ldw	r2,-4(fp)
  28eab0:	10800a17 	ldw	r2,40(r2)
  28eab4:	10800037 	ldwio	r2,0(r2)
  28eab8:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  28eabc:	e0bffe17 	ldw	r2,-8(fp)
  28eac0:	1080800c 	andi	r2,r2,512
  28eac4:	1004c03a 	cmpne	r2,r2,zero
  28eac8:	10803fcc 	andi	r2,r2,255
}
  28eacc:	e037883a 	mov	sp,fp
  28ead0:	df000017 	ldw	fp,0(sp)
  28ead4:	dec00104 	addi	sp,sp,4
  28ead8:	f800283a 	ret

0028eadc <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  28eadc:	defffd04 	addi	sp,sp,-12
  28eae0:	df000215 	stw	fp,8(sp)
  28eae4:	df000204 	addi	fp,sp,8
  28eae8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  28eaec:	e0bfff17 	ldw	r2,-4(fp)
  28eaf0:	10800a17 	ldw	r2,40(r2)
  28eaf4:	10800037 	ldwio	r2,0(r2)
  28eaf8:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  28eafc:	e0bffe17 	ldw	r2,-8(fp)
  28eb00:	10800114 	ori	r2,r2,4
  28eb04:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  28eb08:	e0bffe17 	ldw	r2,-8(fp)
  28eb0c:	10800214 	ori	r2,r2,8
  28eb10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  28eb14:	e0bfff17 	ldw	r2,-4(fp)
  28eb18:	10800a17 	ldw	r2,40(r2)
  28eb1c:	1007883a 	mov	r3,r2
  28eb20:	e0bffe17 	ldw	r2,-8(fp)
  28eb24:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  28eb28:	e0fffe17 	ldw	r3,-8(fp)
  28eb2c:	00bffec4 	movi	r2,-5
  28eb30:	1884703a 	and	r2,r3,r2
  28eb34:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  28eb38:	e0fffe17 	ldw	r3,-8(fp)
  28eb3c:	00bffdc4 	movi	r2,-9
  28eb40:	1884703a 	and	r2,r3,r2
  28eb44:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  28eb48:	e0bfff17 	ldw	r2,-4(fp)
  28eb4c:	10800a17 	ldw	r2,40(r2)
  28eb50:	1007883a 	mov	r3,r2
  28eb54:	e0bffe17 	ldw	r2,-8(fp)
  28eb58:	18800035 	stwio	r2,0(r3)
}
  28eb5c:	0001883a 	nop
  28eb60:	e037883a 	mov	sp,fp
  28eb64:	df000017 	ldw	fp,0(sp)
  28eb68:	dec00104 	addi	sp,sp,4
  28eb6c:	f800283a 	ret

0028eb70 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  28eb70:	defffc04 	addi	sp,sp,-16
  28eb74:	df000315 	stw	fp,12(sp)
  28eb78:	df000304 	addi	fp,sp,12
  28eb7c:	e13ffe15 	stw	r4,-8(fp)
  28eb80:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  28eb84:	e0bffe17 	ldw	r2,-8(fp)
  28eb88:	10800a17 	ldw	r2,40(r2)
  28eb8c:	10800104 	addi	r2,r2,4
  28eb90:	10800037 	ldwio	r2,0(r2)
  28eb94:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  28eb98:	e0bfff17 	ldw	r2,-4(fp)
  28eb9c:	1000041e 	bne	r2,zero,28ebb0 <alt_up_audio_read_fifo_avail+0x40>
  28eba0:	e0bffd17 	ldw	r2,-12(fp)
  28eba4:	10bfc00c 	andi	r2,r2,65280
  28eba8:	1004d23a 	srli	r2,r2,8
  28ebac:	00000206 	br	28ebb8 <alt_up_audio_read_fifo_avail+0x48>
  28ebb0:	e0bffd17 	ldw	r2,-12(fp)
  28ebb4:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  28ebb8:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  28ebbc:	e0bffd17 	ldw	r2,-12(fp)
}
  28ebc0:	e037883a 	mov	sp,fp
  28ebc4:	df000017 	ldw	fp,0(sp)
  28ebc8:	dec00104 	addi	sp,sp,4
  28ebcc:	f800283a 	ret

0028ebd0 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  28ebd0:	defffa04 	addi	sp,sp,-24
  28ebd4:	dfc00515 	stw	ra,20(sp)
  28ebd8:	df000415 	stw	fp,16(sp)
  28ebdc:	df000404 	addi	fp,sp,16
  28ebe0:	e13ffd15 	stw	r4,-12(fp)
  28ebe4:	e17ffe15 	stw	r5,-8(fp)
  28ebe8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  28ebec:	01400044 	movi	r5,1
  28ebf0:	e13ffd17 	ldw	r4,-12(fp)
  28ebf4:	028eb700 	call	28eb70 <alt_up_audio_read_fifo_avail>
  28ebf8:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  28ebfc:	e0bffc17 	ldw	r2,-16(fp)
  28ec00:	10801868 	cmpgeui	r2,r2,97
  28ec04:	1000021e 	bne	r2,zero,28ec10 <alt_up_audio_record_r+0x40>
		return 0;
  28ec08:	0005883a 	mov	r2,zero
  28ec0c:	00000506 	br	28ec24 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  28ec10:	01c00044 	movi	r7,1
  28ec14:	e1bfff17 	ldw	r6,-4(fp)
  28ec18:	e17ffe17 	ldw	r5,-8(fp)
  28ec1c:	e13ffd17 	ldw	r4,-12(fp)
  28ec20:	028edd00 	call	28edd0 <alt_up_audio_read_fifo>
}
  28ec24:	e037883a 	mov	sp,fp
  28ec28:	dfc00117 	ldw	ra,4(sp)
  28ec2c:	df000017 	ldw	fp,0(sp)
  28ec30:	dec00204 	addi	sp,sp,8
  28ec34:	f800283a 	ret

0028ec38 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  28ec38:	defffa04 	addi	sp,sp,-24
  28ec3c:	dfc00515 	stw	ra,20(sp)
  28ec40:	df000415 	stw	fp,16(sp)
  28ec44:	df000404 	addi	fp,sp,16
  28ec48:	e13ffd15 	stw	r4,-12(fp)
  28ec4c:	e17ffe15 	stw	r5,-8(fp)
  28ec50:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  28ec54:	000b883a 	mov	r5,zero
  28ec58:	e13ffd17 	ldw	r4,-12(fp)
  28ec5c:	028eb700 	call	28eb70 <alt_up_audio_read_fifo_avail>
  28ec60:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  28ec64:	e0bffc17 	ldw	r2,-16(fp)
  28ec68:	10801868 	cmpgeui	r2,r2,97
  28ec6c:	1000021e 	bne	r2,zero,28ec78 <alt_up_audio_record_l+0x40>
		return 0;
  28ec70:	0005883a 	mov	r2,zero
  28ec74:	00000506 	br	28ec8c <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  28ec78:	000f883a 	mov	r7,zero
  28ec7c:	e1bfff17 	ldw	r6,-4(fp)
  28ec80:	e17ffe17 	ldw	r5,-8(fp)
  28ec84:	e13ffd17 	ldw	r4,-12(fp)
  28ec88:	028edd00 	call	28edd0 <alt_up_audio_read_fifo>
}
  28ec8c:	e037883a 	mov	sp,fp
  28ec90:	dfc00117 	ldw	ra,4(sp)
  28ec94:	df000017 	ldw	fp,0(sp)
  28ec98:	dec00204 	addi	sp,sp,8
  28ec9c:	f800283a 	ret

0028eca0 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  28eca0:	defffc04 	addi	sp,sp,-16
  28eca4:	df000315 	stw	fp,12(sp)
  28eca8:	df000304 	addi	fp,sp,12
  28ecac:	e13ffe15 	stw	r4,-8(fp)
  28ecb0:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  28ecb4:	e0bffe17 	ldw	r2,-8(fp)
  28ecb8:	10800a17 	ldw	r2,40(r2)
  28ecbc:	10800104 	addi	r2,r2,4
  28ecc0:	10800037 	ldwio	r2,0(r2)
  28ecc4:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  28ecc8:	e0bfff17 	ldw	r2,-4(fp)
  28eccc:	1000031e 	bne	r2,zero,28ecdc <alt_up_audio_write_fifo_space+0x3c>
  28ecd0:	e0bffd17 	ldw	r2,-12(fp)
  28ecd4:	1004d63a 	srli	r2,r2,24
  28ecd8:	00000306 	br	28ece8 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  28ecdc:	e0bffd17 	ldw	r2,-12(fp)
  28ece0:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  28ece4:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  28ece8:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  28ecec:	e0bffd17 	ldw	r2,-12(fp)
}
  28ecf0:	e037883a 	mov	sp,fp
  28ecf4:	df000017 	ldw	fp,0(sp)
  28ecf8:	dec00104 	addi	sp,sp,4
  28ecfc:	f800283a 	ret

0028ed00 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  28ed00:	defffa04 	addi	sp,sp,-24
  28ed04:	dfc00515 	stw	ra,20(sp)
  28ed08:	df000415 	stw	fp,16(sp)
  28ed0c:	df000404 	addi	fp,sp,16
  28ed10:	e13ffd15 	stw	r4,-12(fp)
  28ed14:	e17ffe15 	stw	r5,-8(fp)
  28ed18:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  28ed1c:	01400044 	movi	r5,1
  28ed20:	e13ffd17 	ldw	r4,-12(fp)
  28ed24:	028eca00 	call	28eca0 <alt_up_audio_write_fifo_space>
  28ed28:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  28ed2c:	e0bffc17 	ldw	r2,-16(fp)
  28ed30:	10801868 	cmpgeui	r2,r2,97
  28ed34:	1000021e 	bne	r2,zero,28ed40 <alt_up_audio_play_r+0x40>
		return 0;
  28ed38:	0005883a 	mov	r2,zero
  28ed3c:	00000506 	br	28ed54 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  28ed40:	01c00044 	movi	r7,1
  28ed44:	e1bfff17 	ldw	r6,-4(fp)
  28ed48:	e17ffe17 	ldw	r5,-8(fp)
  28ed4c:	e13ffd17 	ldw	r4,-12(fp)
  28ed50:	028eeb00 	call	28eeb0 <alt_up_audio_write_fifo>
}
  28ed54:	e037883a 	mov	sp,fp
  28ed58:	dfc00117 	ldw	ra,4(sp)
  28ed5c:	df000017 	ldw	fp,0(sp)
  28ed60:	dec00204 	addi	sp,sp,8
  28ed64:	f800283a 	ret

0028ed68 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  28ed68:	defffa04 	addi	sp,sp,-24
  28ed6c:	dfc00515 	stw	ra,20(sp)
  28ed70:	df000415 	stw	fp,16(sp)
  28ed74:	df000404 	addi	fp,sp,16
  28ed78:	e13ffd15 	stw	r4,-12(fp)
  28ed7c:	e17ffe15 	stw	r5,-8(fp)
  28ed80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  28ed84:	000b883a 	mov	r5,zero
  28ed88:	e13ffd17 	ldw	r4,-12(fp)
  28ed8c:	028eca00 	call	28eca0 <alt_up_audio_write_fifo_space>
  28ed90:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  28ed94:	e0bffc17 	ldw	r2,-16(fp)
  28ed98:	10801868 	cmpgeui	r2,r2,97
  28ed9c:	1000021e 	bne	r2,zero,28eda8 <alt_up_audio_play_l+0x40>
		return 0;
  28eda0:	0005883a 	mov	r2,zero
  28eda4:	00000506 	br	28edbc <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  28eda8:	000f883a 	mov	r7,zero
  28edac:	e1bfff17 	ldw	r6,-4(fp)
  28edb0:	e17ffe17 	ldw	r5,-8(fp)
  28edb4:	e13ffd17 	ldw	r4,-12(fp)
  28edb8:	028eeb00 	call	28eeb0 <alt_up_audio_write_fifo>
}
  28edbc:	e037883a 	mov	sp,fp
  28edc0:	dfc00117 	ldw	ra,4(sp)
  28edc4:	df000017 	ldw	fp,0(sp)
  28edc8:	dec00204 	addi	sp,sp,8
  28edcc:	f800283a 	ret

0028edd0 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  28edd0:	defff904 	addi	sp,sp,-28
  28edd4:	df000615 	stw	fp,24(sp)
  28edd8:	df000604 	addi	fp,sp,24
  28eddc:	e13ffc15 	stw	r4,-16(fp)
  28ede0:	e17ffd15 	stw	r5,-12(fp)
  28ede4:	e1bffe15 	stw	r6,-8(fp)
  28ede8:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  28edec:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  28edf0:	00002506 	br	28ee88 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  28edf4:	e0bffc17 	ldw	r2,-16(fp)
  28edf8:	10800a17 	ldw	r2,40(r2)
  28edfc:	10800104 	addi	r2,r2,4
  28ee00:	10800037 	ldwio	r2,0(r2)
  28ee04:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  28ee08:	e0bfff17 	ldw	r2,-4(fp)
  28ee0c:	1000041e 	bne	r2,zero,28ee20 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  28ee10:	e0bffb17 	ldw	r2,-20(fp)
  28ee14:	10bfc00c 	andi	r2,r2,65280
			:
  28ee18:	1004d23a 	srli	r2,r2,8
  28ee1c:	00000206 	br	28ee28 <alt_up_audio_read_fifo+0x58>
  28ee20:	e0bffb17 	ldw	r2,-20(fp)
  28ee24:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  28ee28:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  28ee2c:	e0bffb17 	ldw	r2,-20(fp)
  28ee30:	10001926 	beq	r2,zero,28ee98 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  28ee34:	e0bffa17 	ldw	r2,-24(fp)
  28ee38:	1085883a 	add	r2,r2,r2
  28ee3c:	1085883a 	add	r2,r2,r2
  28ee40:	1007883a 	mov	r3,r2
  28ee44:	e0bffd17 	ldw	r2,-12(fp)
  28ee48:	10c5883a 	add	r2,r2,r3
  28ee4c:	e0ffff17 	ldw	r3,-4(fp)
  28ee50:	1800051e 	bne	r3,zero,28ee68 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  28ee54:	e0fffc17 	ldw	r3,-16(fp)
  28ee58:	18c00a17 	ldw	r3,40(r3)
  28ee5c:	18c00204 	addi	r3,r3,8
  28ee60:	18c00037 	ldwio	r3,0(r3)
  28ee64:	00000406 	br	28ee78 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  28ee68:	e0fffc17 	ldw	r3,-16(fp)
  28ee6c:	18c00a17 	ldw	r3,40(r3)
  28ee70:	18c00304 	addi	r3,r3,12
  28ee74:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  28ee78:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  28ee7c:	e0bffa17 	ldw	r2,-24(fp)
  28ee80:	10800044 	addi	r2,r2,1
  28ee84:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  28ee88:	e0fffa17 	ldw	r3,-24(fp)
  28ee8c:	e0bffe17 	ldw	r2,-8(fp)
  28ee90:	18bfd816 	blt	r3,r2,28edf4 <alt_up_audio_read_fifo+0x24>
  28ee94:	00000106 	br	28ee9c <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
  28ee98:	0001883a 	nop
		}
	}
	return count;
  28ee9c:	e0bffa17 	ldw	r2,-24(fp)
}
  28eea0:	e037883a 	mov	sp,fp
  28eea4:	df000017 	ldw	fp,0(sp)
  28eea8:	dec00104 	addi	sp,sp,4
  28eeac:	f800283a 	ret

0028eeb0 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  28eeb0:	defff904 	addi	sp,sp,-28
  28eeb4:	df000615 	stw	fp,24(sp)
  28eeb8:	df000604 	addi	fp,sp,24
  28eebc:	e13ffc15 	stw	r4,-16(fp)
  28eec0:	e17ffd15 	stw	r5,-12(fp)
  28eec4:	e1bffe15 	stw	r6,-8(fp)
  28eec8:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  28eecc:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  28eed0:	00002f06 	br	28ef90 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  28eed4:	e0bffc17 	ldw	r2,-16(fp)
  28eed8:	10800a17 	ldw	r2,40(r2)
  28eedc:	10800104 	addi	r2,r2,4
  28eee0:	10800037 	ldwio	r2,0(r2)
  28eee4:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  28eee8:	e0bfff17 	ldw	r2,-4(fp)
  28eeec:	1000031e 	bne	r2,zero,28eefc <alt_up_audio_write_fifo+0x4c>
  28eef0:	e0bffb17 	ldw	r2,-20(fp)
  28eef4:	1004d63a 	srli	r2,r2,24
  28eef8:	00000306 	br	28ef08 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  28eefc:	e0bffb17 	ldw	r2,-20(fp)
  28ef00:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  28ef04:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  28ef08:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  28ef0c:	e0bffb17 	ldw	r2,-20(fp)
  28ef10:	10002326 	beq	r2,zero,28efa0 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  28ef14:	e0bfff17 	ldw	r2,-4(fp)
  28ef18:	10000f1e 	bne	r2,zero,28ef58 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  28ef1c:	e0bffc17 	ldw	r2,-16(fp)
  28ef20:	10800a17 	ldw	r2,40(r2)
  28ef24:	10800204 	addi	r2,r2,8
  28ef28:	1009883a 	mov	r4,r2
  28ef2c:	e0bffa17 	ldw	r2,-24(fp)
  28ef30:	10c00044 	addi	r3,r2,1
  28ef34:	e0fffa15 	stw	r3,-24(fp)
  28ef38:	1085883a 	add	r2,r2,r2
  28ef3c:	1085883a 	add	r2,r2,r2
  28ef40:	1007883a 	mov	r3,r2
  28ef44:	e0bffd17 	ldw	r2,-12(fp)
  28ef48:	10c5883a 	add	r2,r2,r3
  28ef4c:	10800017 	ldw	r2,0(r2)
  28ef50:	20800035 	stwio	r2,0(r4)
  28ef54:	00000e06 	br	28ef90 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  28ef58:	e0bffc17 	ldw	r2,-16(fp)
  28ef5c:	10800a17 	ldw	r2,40(r2)
  28ef60:	10800304 	addi	r2,r2,12
  28ef64:	1009883a 	mov	r4,r2
  28ef68:	e0bffa17 	ldw	r2,-24(fp)
  28ef6c:	10c00044 	addi	r3,r2,1
  28ef70:	e0fffa15 	stw	r3,-24(fp)
  28ef74:	1085883a 	add	r2,r2,r2
  28ef78:	1085883a 	add	r2,r2,r2
  28ef7c:	1007883a 	mov	r3,r2
  28ef80:	e0bffd17 	ldw	r2,-12(fp)
  28ef84:	10c5883a 	add	r2,r2,r3
  28ef88:	10800017 	ldw	r2,0(r2)
  28ef8c:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  28ef90:	e0fffa17 	ldw	r3,-24(fp)
  28ef94:	e0bffe17 	ldw	r2,-8(fp)
  28ef98:	18bfce16 	blt	r3,r2,28eed4 <alt_up_audio_write_fifo+0x24>
  28ef9c:	00000106 	br	28efa4 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
  28efa0:	0001883a 	nop
		}
	}
	return count;
  28efa4:	e0bffa17 	ldw	r2,-24(fp)
}
  28efa8:	e037883a 	mov	sp,fp
  28efac:	df000017 	ldw	fp,0(sp)
  28efb0:	dec00104 	addi	sp,sp,4
  28efb4:	f800283a 	ret

0028efb8 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  28efb8:	defffd04 	addi	sp,sp,-12
  28efbc:	df000215 	stw	fp,8(sp)
  28efc0:	df000204 	addi	fp,sp,8
  28efc4:	e13ffe15 	stw	r4,-8(fp)
  28efc8:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  28efcc:	e0bfff17 	ldw	r2,-4(fp)
  28efd0:	1000051e 	bne	r2,zero,28efe8 <alt_up_audio_read_fifo_head+0x30>
  28efd4:	e0bffe17 	ldw	r2,-8(fp)
  28efd8:	10800a17 	ldw	r2,40(r2)
  28efdc:	10800204 	addi	r2,r2,8
  28efe0:	10800037 	ldwio	r2,0(r2)
  28efe4:	00000406 	br	28eff8 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  28efe8:	e0bffe17 	ldw	r2,-8(fp)
  28efec:	10800a17 	ldw	r2,40(r2)
  28eff0:	10800304 	addi	r2,r2,12
  28eff4:	10800037 	ldwio	r2,0(r2)
}
  28eff8:	e037883a 	mov	sp,fp
  28effc:	df000017 	ldw	fp,0(sp)
  28f000:	dec00104 	addi	sp,sp,4
  28f004:	f800283a 	ret

0028f008 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  28f008:	defffc04 	addi	sp,sp,-16
  28f00c:	df000315 	stw	fp,12(sp)
  28f010:	df000304 	addi	fp,sp,12
  28f014:	e13ffd15 	stw	r4,-12(fp)
  28f018:	e17ffe15 	stw	r5,-8(fp)
  28f01c:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  28f020:	e0bfff17 	ldw	r2,-4(fp)
  28f024:	1000071e 	bne	r2,zero,28f044 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  28f028:	e0bffd17 	ldw	r2,-12(fp)
  28f02c:	10800a17 	ldw	r2,40(r2)
  28f030:	10800204 	addi	r2,r2,8
  28f034:	1007883a 	mov	r3,r2
  28f038:	e0bffe17 	ldw	r2,-8(fp)
  28f03c:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
  28f040:	00000606 	br	28f05c <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  28f044:	e0bffd17 	ldw	r2,-12(fp)
  28f048:	10800a17 	ldw	r2,40(r2)
  28f04c:	10800304 	addi	r2,r2,12
  28f050:	1007883a 	mov	r3,r2
  28f054:	e0bffe17 	ldw	r2,-8(fp)
  28f058:	18800035 	stwio	r2,0(r3)
}
  28f05c:	0001883a 	nop
  28f060:	e037883a 	mov	sp,fp
  28f064:	df000017 	ldw	fp,0(sp)
  28f068:	dec00104 	addi	sp,sp,4
  28f06c:	f800283a 	ret

0028f070 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  28f070:	defffc04 	addi	sp,sp,-16
  28f074:	dfc00315 	stw	ra,12(sp)
  28f078:	df000215 	stw	fp,8(sp)
  28f07c:	df000204 	addi	fp,sp,8
  28f080:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  28f084:	d1600904 	addi	r5,gp,-32732
  28f088:	e13fff17 	ldw	r4,-4(fp)
  28f08c:	02909340 	call	290934 <alt_find_dev>
  28f090:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  28f094:	e0bffe17 	ldw	r2,-8(fp)
  28f098:	10800a17 	ldw	r2,40(r2)
  28f09c:	10800104 	addi	r2,r2,4
  28f0a0:	10800037 	ldwio	r2,0(r2)
  28f0a4:	10803fec 	andhi	r2,r2,255
  28f0a8:	1005d43a 	srai	r2,r2,16
  28f0ac:	1007883a 	mov	r3,r2
  28f0b0:	e0bffe17 	ldw	r2,-8(fp)
  28f0b4:	10c00b15 	stw	r3,44(r2)

  return dev;
  28f0b8:	e0bffe17 	ldw	r2,-8(fp)
}
  28f0bc:	e037883a 	mov	sp,fp
  28f0c0:	dfc00117 	ldw	ra,4(sp)
  28f0c4:	df000017 	ldw	fp,0(sp)
  28f0c8:	dec00204 	addi	sp,sp,8
  28f0cc:	f800283a 	ret

0028f0d0 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  28f0d0:	defffc04 	addi	sp,sp,-16
  28f0d4:	df000315 	stw	fp,12(sp)
  28f0d8:	df000304 	addi	fp,sp,12
  28f0dc:	e13ffd15 	stw	r4,-12(fp)
  28f0e0:	e17ffe15 	stw	r5,-8(fp)
  28f0e4:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  28f0e8:	e0bffd17 	ldw	r2,-12(fp)
  28f0ec:	10800a17 	ldw	r2,40(r2)
  28f0f0:	10800204 	addi	r2,r2,8
  28f0f4:	1007883a 	mov	r3,r2
  28f0f8:	e0bffe17 	ldw	r2,-8(fp)
  28f0fc:	10803fcc 	andi	r2,r2,255
  28f100:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  28f104:	e0bffd17 	ldw	r2,-12(fp)
  28f108:	10800a17 	ldw	r2,40(r2)
  28f10c:	10800304 	addi	r2,r2,12
  28f110:	1007883a 	mov	r3,r2
  28f114:	e0bfff17 	ldw	r2,-4(fp)
  28f118:	10bfffcc 	andi	r2,r2,65535
  28f11c:	18800035 	stwio	r2,0(r3)

	return 0;
  28f120:	0005883a 	mov	r2,zero
}
  28f124:	e037883a 	mov	sp,fp
  28f128:	df000017 	ldw	fp,0(sp)
  28f12c:	dec00104 	addi	sp,sp,4
  28f130:	f800283a 	ret

0028f134 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  28f134:	defffb04 	addi	sp,sp,-20
  28f138:	dfc00415 	stw	ra,16(sp)
  28f13c:	df000315 	stw	fp,12(sp)
  28f140:	df000304 	addi	fp,sp,12
  28f144:	e13ffd15 	stw	r4,-12(fp)
  28f148:	e17ffe15 	stw	r5,-8(fp)
  28f14c:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  28f150:	e0bffd17 	ldw	r2,-12(fp)
  28f154:	10800a17 	ldw	r2,40(r2)
  28f158:	10800204 	addi	r2,r2,8
  28f15c:	1007883a 	mov	r3,r2
  28f160:	e0bffe17 	ldw	r2,-8(fp)
  28f164:	10803fcc 	andi	r2,r2,255
  28f168:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  28f16c:	e0bffd17 	ldw	r2,-12(fp)
  28f170:	10800a17 	ldw	r2,40(r2)
  28f174:	10800304 	addi	r2,r2,12
  28f178:	10800037 	ldwio	r2,0(r2)
  28f17c:	1007883a 	mov	r3,r2
  28f180:	e0bfff17 	ldw	r2,-4(fp)
  28f184:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  28f188:	e13ffd17 	ldw	r4,-12(fp)
  28f18c:	028f2580 	call	28f258 <alt_up_av_config_read_acknowledge>
  28f190:	10000226 	beq	r2,zero,28f19c <alt_up_av_config_read_data+0x68>
		return -1;
  28f194:	00bfffc4 	movi	r2,-1
  28f198:	00000106 	br	28f1a0 <alt_up_av_config_read_data+0x6c>

	return 0;
  28f19c:	0005883a 	mov	r2,zero
}
  28f1a0:	e037883a 	mov	sp,fp
  28f1a4:	dfc00117 	ldw	ra,4(sp)
  28f1a8:	df000017 	ldw	fp,0(sp)
  28f1ac:	dec00204 	addi	sp,sp,8
  28f1b0:	f800283a 	ret

0028f1b4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  28f1b4:	defffe04 	addi	sp,sp,-8
  28f1b8:	df000115 	stw	fp,4(sp)
  28f1bc:	df000104 	addi	fp,sp,4
  28f1c0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  28f1c4:	e0bfff17 	ldw	r2,-4(fp)
  28f1c8:	10800a17 	ldw	r2,40(r2)
  28f1cc:	1007883a 	mov	r3,r2
  28f1d0:	00800044 	movi	r2,1
  28f1d4:	18800025 	stbio	r2,0(r3)
	return 0;
  28f1d8:	0005883a 	mov	r2,zero
}
  28f1dc:	e037883a 	mov	sp,fp
  28f1e0:	df000017 	ldw	fp,0(sp)
  28f1e4:	dec00104 	addi	sp,sp,4
  28f1e8:	f800283a 	ret

0028f1ec <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  28f1ec:	defffe04 	addi	sp,sp,-8
  28f1f0:	df000115 	stw	fp,4(sp)
  28f1f4:	df000104 	addi	fp,sp,4
  28f1f8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  28f1fc:	e0bfff17 	ldw	r2,-4(fp)
  28f200:	10800a17 	ldw	r2,40(r2)
  28f204:	1007883a 	mov	r3,r2
  28f208:	00800084 	movi	r2,2
  28f20c:	18800025 	stbio	r2,0(r3)
	return 0;
  28f210:	0005883a 	mov	r2,zero
}
  28f214:	e037883a 	mov	sp,fp
  28f218:	df000017 	ldw	fp,0(sp)
  28f21c:	dec00104 	addi	sp,sp,4
  28f220:	f800283a 	ret

0028f224 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  28f224:	defffe04 	addi	sp,sp,-8
  28f228:	df000115 	stw	fp,4(sp)
  28f22c:	df000104 	addi	fp,sp,4
  28f230:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  28f234:	e0bfff17 	ldw	r2,-4(fp)
  28f238:	10800a17 	ldw	r2,40(r2)
  28f23c:	0007883a 	mov	r3,zero
  28f240:	10c00025 	stbio	r3,0(r2)
	return 0;
  28f244:	0005883a 	mov	r2,zero
}
  28f248:	e037883a 	mov	sp,fp
  28f24c:	df000017 	ldw	fp,0(sp)
  28f250:	dec00104 	addi	sp,sp,4
  28f254:	f800283a 	ret

0028f258 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  28f258:	defffe04 	addi	sp,sp,-8
  28f25c:	df000115 	stw	fp,4(sp)
  28f260:	df000104 	addi	fp,sp,4
  28f264:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  28f268:	e0bfff17 	ldw	r2,-4(fp)
  28f26c:	10800a17 	ldw	r2,40(r2)
  28f270:	10800104 	addi	r2,r2,4
  28f274:	10800037 	ldwio	r2,0(r2)
  28f278:	1080008c 	andi	r2,r2,2
  28f27c:	1005d07a 	srai	r2,r2,1
  28f280:	10000626 	beq	r2,zero,28f29c <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  28f284:	e0bfff17 	ldw	r2,-4(fp)
  28f288:	10800a17 	ldw	r2,40(r2)
  28f28c:	10800104 	addi	r2,r2,4
  28f290:	10800037 	ldwio	r2,0(r2)
  28f294:	1080004c 	andi	r2,r2,1
  28f298:	00000106 	br	28f2a0 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
  28f29c:	00bfffc4 	movi	r2,-1
}
  28f2a0:	e037883a 	mov	sp,fp
  28f2a4:	df000017 	ldw	fp,0(sp)
  28f2a8:	dec00104 	addi	sp,sp,4
  28f2ac:	f800283a 	ret

0028f2b0 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  28f2b0:	defffe04 	addi	sp,sp,-8
  28f2b4:	df000115 	stw	fp,4(sp)
  28f2b8:	df000104 	addi	fp,sp,4
  28f2bc:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  28f2c0:	e0bfff17 	ldw	r2,-4(fp)
  28f2c4:	10800a17 	ldw	r2,40(r2)
  28f2c8:	10800104 	addi	r2,r2,4
  28f2cc:	10800037 	ldwio	r2,0(r2)
  28f2d0:	1080008c 	andi	r2,r2,2
  28f2d4:	1005d07a 	srai	r2,r2,1
}
  28f2d8:	e037883a 	mov	sp,fp
  28f2dc:	df000017 	ldw	fp,0(sp)
  28f2e0:	dec00104 	addi	sp,sp,4
  28f2e4:	f800283a 	ret

0028f2e8 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  28f2e8:	defffa04 	addi	sp,sp,-24
  28f2ec:	dfc00515 	stw	ra,20(sp)
  28f2f0:	df000415 	stw	fp,16(sp)
  28f2f4:	df000404 	addi	fp,sp,16
  28f2f8:	e13ffd15 	stw	r4,-12(fp)
  28f2fc:	e17ffe15 	stw	r5,-8(fp)
  28f300:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  28f304:	e0bffd17 	ldw	r2,-12(fp)
  28f308:	10800b17 	ldw	r2,44(r2)
  28f30c:	10800060 	cmpeqi	r2,r2,1
  28f310:	10000e1e 	bne	r2,zero,28f34c <alt_up_av_config_write_audio_cfg_register+0x64>
  28f314:	e0bffd17 	ldw	r2,-12(fp)
  28f318:	10800b17 	ldw	r2,44(r2)
  28f31c:	108000a0 	cmpeqi	r2,r2,2
  28f320:	10000a1e 	bne	r2,zero,28f34c <alt_up_av_config_write_audio_cfg_register+0x64>
  28f324:	e0bffd17 	ldw	r2,-12(fp)
  28f328:	10800b17 	ldw	r2,44(r2)
  28f32c:	108000e0 	cmpeqi	r2,r2,3
  28f330:	1000061e 	bne	r2,zero,28f34c <alt_up_av_config_write_audio_cfg_register+0x64>
  28f334:	e0bffd17 	ldw	r2,-12(fp)
  28f338:	10800b17 	ldw	r2,44(r2)
  28f33c:	10800120 	cmpeqi	r2,r2,4
  28f340:	1000021e 	bne	r2,zero,28f34c <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
  28f344:	00bffa84 	movi	r2,-22
  28f348:	00000b06 	br	28f378 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  28f34c:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  28f350:	e0bffd17 	ldw	r2,-12(fp)
  28f354:	10800a17 	ldw	r2,40(r2)
  28f358:	10800084 	addi	r2,r2,2
  28f35c:	1007883a 	mov	r3,r2
  28f360:	e0bffc17 	ldw	r2,-16(fp)
  28f364:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
  28f368:	e1bfff17 	ldw	r6,-4(fp)
  28f36c:	e17ffe17 	ldw	r5,-8(fp)
  28f370:	e13ffd17 	ldw	r4,-12(fp)
  28f374:	028f0d00 	call	28f0d0 <alt_up_av_config_write_data>
}
  28f378:	e037883a 	mov	sp,fp
  28f37c:	dfc00117 	ldw	ra,4(sp)
  28f380:	df000017 	ldw	fp,0(sp)
  28f384:	dec00204 	addi	sp,sp,8
  28f388:	f800283a 	ret

0028f38c <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  28f38c:	defffa04 	addi	sp,sp,-24
  28f390:	dfc00515 	stw	ra,20(sp)
  28f394:	df000415 	stw	fp,16(sp)
  28f398:	df000404 	addi	fp,sp,16
  28f39c:	e13ffc15 	stw	r4,-16(fp)
  28f3a0:	e17ffd15 	stw	r5,-12(fp)
  28f3a4:	e1bffe15 	stw	r6,-8(fp)
  28f3a8:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  28f3ac:	e0bffc17 	ldw	r2,-16(fp)
  28f3b0:	10800b17 	ldw	r2,44(r2)
  28f3b4:	108000a0 	cmpeqi	r2,r2,2
  28f3b8:	10000a1e 	bne	r2,zero,28f3e4 <alt_up_av_config_read_video_cfg_register+0x58>
  28f3bc:	e0bffc17 	ldw	r2,-16(fp)
  28f3c0:	10800b17 	ldw	r2,44(r2)
  28f3c4:	108000e0 	cmpeqi	r2,r2,3
  28f3c8:	1000061e 	bne	r2,zero,28f3e4 <alt_up_av_config_read_video_cfg_register+0x58>
  28f3cc:	e0bffc17 	ldw	r2,-16(fp)
  28f3d0:	10800b17 	ldw	r2,44(r2)
  28f3d4:	10800120 	cmpeqi	r2,r2,4
  28f3d8:	1000021e 	bne	r2,zero,28f3e4 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
  28f3dc:	00bffa84 	movi	r2,-22
  28f3e0:	00001f06 	br	28f460 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  28f3e4:	e0bffc17 	ldw	r2,-16(fp)
  28f3e8:	10800b17 	ldw	r2,44(r2)
  28f3ec:	108000a0 	cmpeqi	r2,r2,2
  28f3f0:	1000041e 	bne	r2,zero,28f404 <alt_up_av_config_read_video_cfg_register+0x78>
  28f3f4:	e0bffc17 	ldw	r2,-16(fp)
  28f3f8:	10800b17 	ldw	r2,44(r2)
  28f3fc:	10800118 	cmpnei	r2,r2,4
  28f400:	1000051e 	bne	r2,zero,28f418 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  28f404:	e0bfff17 	ldw	r2,-4(fp)
  28f408:	10800060 	cmpeqi	r2,r2,1
  28f40c:	10000a1e 	bne	r2,zero,28f438 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
  28f410:	00bffa84 	movi	r2,-22
  28f414:	00001206 	br	28f460 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  28f418:	e0bfff17 	ldw	r2,-4(fp)
  28f41c:	10800060 	cmpeqi	r2,r2,1
  28f420:	1000051e 	bne	r2,zero,28f438 <alt_up_av_config_read_video_cfg_register+0xac>
  28f424:	e0bfff17 	ldw	r2,-4(fp)
  28f428:	108000a0 	cmpeqi	r2,r2,2
  28f42c:	1000021e 	bne	r2,zero,28f438 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
  28f430:	00bffa84 	movi	r2,-22
  28f434:	00000a06 	br	28f460 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  28f438:	e0bffc17 	ldw	r2,-16(fp)
  28f43c:	10800a17 	ldw	r2,40(r2)
  28f440:	10800084 	addi	r2,r2,2
  28f444:	1007883a 	mov	r3,r2
  28f448:	e0bfff17 	ldw	r2,-4(fp)
  28f44c:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
  28f450:	e1bffe17 	ldw	r6,-8(fp)
  28f454:	e17ffd17 	ldw	r5,-12(fp)
  28f458:	e13ffc17 	ldw	r4,-16(fp)
  28f45c:	028f1340 	call	28f134 <alt_up_av_config_read_data>
}
  28f460:	e037883a 	mov	sp,fp
  28f464:	dfc00117 	ldw	ra,4(sp)
  28f468:	df000017 	ldw	fp,0(sp)
  28f46c:	dec00204 	addi	sp,sp,8
  28f470:	f800283a 	ret

0028f474 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  28f474:	defffa04 	addi	sp,sp,-24
  28f478:	dfc00515 	stw	ra,20(sp)
  28f47c:	df000415 	stw	fp,16(sp)
  28f480:	df000404 	addi	fp,sp,16
  28f484:	e13ffc15 	stw	r4,-16(fp)
  28f488:	e17ffd15 	stw	r5,-12(fp)
  28f48c:	e1bffe15 	stw	r6,-8(fp)
  28f490:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  28f494:	e0bffc17 	ldw	r2,-16(fp)
  28f498:	10800b17 	ldw	r2,44(r2)
  28f49c:	108000a0 	cmpeqi	r2,r2,2
  28f4a0:	10000a1e 	bne	r2,zero,28f4cc <alt_up_av_config_write_video_cfg_register+0x58>
  28f4a4:	e0bffc17 	ldw	r2,-16(fp)
  28f4a8:	10800b17 	ldw	r2,44(r2)
  28f4ac:	108000e0 	cmpeqi	r2,r2,3
  28f4b0:	1000061e 	bne	r2,zero,28f4cc <alt_up_av_config_write_video_cfg_register+0x58>
  28f4b4:	e0bffc17 	ldw	r2,-16(fp)
  28f4b8:	10800b17 	ldw	r2,44(r2)
  28f4bc:	10800120 	cmpeqi	r2,r2,4
  28f4c0:	1000021e 	bne	r2,zero,28f4cc <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
  28f4c4:	00bffa84 	movi	r2,-22
  28f4c8:	00001f06 	br	28f548 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  28f4cc:	e0bffc17 	ldw	r2,-16(fp)
  28f4d0:	10800b17 	ldw	r2,44(r2)
  28f4d4:	108000a0 	cmpeqi	r2,r2,2
  28f4d8:	1000041e 	bne	r2,zero,28f4ec <alt_up_av_config_write_video_cfg_register+0x78>
  28f4dc:	e0bffc17 	ldw	r2,-16(fp)
  28f4e0:	10800b17 	ldw	r2,44(r2)
  28f4e4:	10800118 	cmpnei	r2,r2,4
  28f4e8:	1000051e 	bne	r2,zero,28f500 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  28f4ec:	e0bfff17 	ldw	r2,-4(fp)
  28f4f0:	10800060 	cmpeqi	r2,r2,1
  28f4f4:	10000a1e 	bne	r2,zero,28f520 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
  28f4f8:	00bffa84 	movi	r2,-22
  28f4fc:	00001206 	br	28f548 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  28f500:	e0bfff17 	ldw	r2,-4(fp)
  28f504:	10800060 	cmpeqi	r2,r2,1
  28f508:	1000051e 	bne	r2,zero,28f520 <alt_up_av_config_write_video_cfg_register+0xac>
  28f50c:	e0bfff17 	ldw	r2,-4(fp)
  28f510:	108000a0 	cmpeqi	r2,r2,2
  28f514:	1000021e 	bne	r2,zero,28f520 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
  28f518:	00bffa84 	movi	r2,-22
  28f51c:	00000a06 	br	28f548 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  28f520:	e0bffc17 	ldw	r2,-16(fp)
  28f524:	10800a17 	ldw	r2,40(r2)
  28f528:	10800084 	addi	r2,r2,2
  28f52c:	1007883a 	mov	r3,r2
  28f530:	e0bfff17 	ldw	r2,-4(fp)
  28f534:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
  28f538:	e1bffe17 	ldw	r6,-8(fp)
  28f53c:	e17ffd17 	ldw	r5,-12(fp)
  28f540:	e13ffc17 	ldw	r4,-16(fp)
  28f544:	028f0d00 	call	28f0d0 <alt_up_av_config_write_data>
}
  28f548:	e037883a 	mov	sp,fp
  28f54c:	dfc00117 	ldw	ra,4(sp)
  28f550:	df000017 	ldw	fp,0(sp)
  28f554:	dec00204 	addi	sp,sp,8
  28f558:	f800283a 	ret

0028f55c <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  28f55c:	defffb04 	addi	sp,sp,-20
  28f560:	dfc00415 	stw	ra,16(sp)
  28f564:	df000315 	stw	fp,12(sp)
  28f568:	df000304 	addi	fp,sp,12
  28f56c:	e13ffd15 	stw	r4,-12(fp)
  28f570:	e17ffe15 	stw	r5,-8(fp)
  28f574:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  28f578:	e0bffd17 	ldw	r2,-12(fp)
  28f57c:	10800b17 	ldw	r2,44(r2)
  28f580:	10800220 	cmpeqi	r2,r2,8
  28f584:	1000021e 	bne	r2,zero,28f590 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
  28f588:	00bffa84 	movi	r2,-22
  28f58c:	00000406 	br	28f5a0 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
  28f590:	e1bfff17 	ldw	r6,-4(fp)
  28f594:	e17ffe17 	ldw	r5,-8(fp)
  28f598:	e13ffd17 	ldw	r4,-12(fp)
  28f59c:	028f1340 	call	28f134 <alt_up_av_config_read_data>
}
  28f5a0:	e037883a 	mov	sp,fp
  28f5a4:	dfc00117 	ldw	ra,4(sp)
  28f5a8:	df000017 	ldw	fp,0(sp)
  28f5ac:	dec00204 	addi	sp,sp,8
  28f5b0:	f800283a 	ret

0028f5b4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  28f5b4:	defffb04 	addi	sp,sp,-20
  28f5b8:	dfc00415 	stw	ra,16(sp)
  28f5bc:	df000315 	stw	fp,12(sp)
  28f5c0:	df000304 	addi	fp,sp,12
  28f5c4:	e13ffd15 	stw	r4,-12(fp)
  28f5c8:	e17ffe15 	stw	r5,-8(fp)
  28f5cc:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  28f5d0:	e0bffd17 	ldw	r2,-12(fp)
  28f5d4:	10800b17 	ldw	r2,44(r2)
  28f5d8:	10800220 	cmpeqi	r2,r2,8
  28f5dc:	1000021e 	bne	r2,zero,28f5e8 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
  28f5e0:	00bffa84 	movi	r2,-22
  28f5e4:	00000406 	br	28f5f8 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
  28f5e8:	e1bfff17 	ldw	r6,-4(fp)
  28f5ec:	e17ffe17 	ldw	r5,-8(fp)
  28f5f0:	e13ffd17 	ldw	r4,-12(fp)
  28f5f4:	028f0d00 	call	28f0d0 <alt_up_av_config_write_data>
}
  28f5f8:	e037883a 	mov	sp,fp
  28f5fc:	dfc00117 	ldw	ra,4(sp)
  28f600:	df000017 	ldw	fp,0(sp)
  28f604:	dec00204 	addi	sp,sp,8
  28f608:	f800283a 	ret

0028f60c <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  28f60c:	defffb04 	addi	sp,sp,-20
  28f610:	dfc00415 	stw	ra,16(sp)
  28f614:	df000315 	stw	fp,12(sp)
  28f618:	df000304 	addi	fp,sp,12
  28f61c:	e13ffd15 	stw	r4,-12(fp)
  28f620:	e17ffe15 	stw	r5,-8(fp)
  28f624:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  28f628:	e0bffd17 	ldw	r2,-12(fp)
  28f62c:	10800b17 	ldw	r2,44(r2)
  28f630:	10800260 	cmpeqi	r2,r2,9
  28f634:	1000021e 	bne	r2,zero,28f640 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
  28f638:	00bffa84 	movi	r2,-22
  28f63c:	00000406 	br	28f650 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  28f640:	e1bfff17 	ldw	r6,-4(fp)
  28f644:	e17ffe17 	ldw	r5,-8(fp)
  28f648:	e13ffd17 	ldw	r4,-12(fp)
  28f64c:	028f1340 	call	28f134 <alt_up_av_config_read_data>
}
  28f650:	e037883a 	mov	sp,fp
  28f654:	dfc00117 	ldw	ra,4(sp)
  28f658:	df000017 	ldw	fp,0(sp)
  28f65c:	dec00204 	addi	sp,sp,8
  28f660:	f800283a 	ret

0028f664 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  28f664:	defffb04 	addi	sp,sp,-20
  28f668:	dfc00415 	stw	ra,16(sp)
  28f66c:	df000315 	stw	fp,12(sp)
  28f670:	df000304 	addi	fp,sp,12
  28f674:	e13ffd15 	stw	r4,-12(fp)
  28f678:	e17ffe15 	stw	r5,-8(fp)
  28f67c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  28f680:	e0bffd17 	ldw	r2,-12(fp)
  28f684:	10800b17 	ldw	r2,44(r2)
  28f688:	10800260 	cmpeqi	r2,r2,9
  28f68c:	1000021e 	bne	r2,zero,28f698 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
  28f690:	00bffa84 	movi	r2,-22
  28f694:	00000406 	br	28f6a8 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  28f698:	e1bfff17 	ldw	r6,-4(fp)
  28f69c:	e17ffe17 	ldw	r5,-8(fp)
  28f6a0:	e13ffd17 	ldw	r4,-12(fp)
  28f6a4:	028f0d00 	call	28f0d0 <alt_up_av_config_write_data>
}
  28f6a8:	e037883a 	mov	sp,fp
  28f6ac:	dfc00117 	ldw	ra,4(sp)
  28f6b0:	df000017 	ldw	fp,0(sp)
  28f6b4:	dec00204 	addi	sp,sp,8
  28f6b8:	f800283a 	ret

0028f6bc <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  28f6bc:	defffb04 	addi	sp,sp,-20
  28f6c0:	dfc00415 	stw	ra,16(sp)
  28f6c4:	df000315 	stw	fp,12(sp)
  28f6c8:	df000304 	addi	fp,sp,12
  28f6cc:	e13ffd15 	stw	r4,-12(fp)
  28f6d0:	e17ffe15 	stw	r5,-8(fp)
  28f6d4:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  28f6d8:	e0bffd17 	ldw	r2,-12(fp)
  28f6dc:	10800b17 	ldw	r2,44(r2)
  28f6e0:	108002a0 	cmpeqi	r2,r2,10
  28f6e4:	1000021e 	bne	r2,zero,28f6f0 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
  28f6e8:	00bffa84 	movi	r2,-22
  28f6ec:	00000406 	br	28f700 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
  28f6f0:	e1bfff17 	ldw	r6,-4(fp)
  28f6f4:	e17ffe17 	ldw	r5,-8(fp)
  28f6f8:	e13ffd17 	ldw	r4,-12(fp)
  28f6fc:	028f1340 	call	28f134 <alt_up_av_config_read_data>
}
  28f700:	e037883a 	mov	sp,fp
  28f704:	dfc00117 	ldw	ra,4(sp)
  28f708:	df000017 	ldw	fp,0(sp)
  28f70c:	dec00204 	addi	sp,sp,8
  28f710:	f800283a 	ret

0028f714 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  28f714:	defffb04 	addi	sp,sp,-20
  28f718:	dfc00415 	stw	ra,16(sp)
  28f71c:	df000315 	stw	fp,12(sp)
  28f720:	df000304 	addi	fp,sp,12
  28f724:	e13ffd15 	stw	r4,-12(fp)
  28f728:	e17ffe15 	stw	r5,-8(fp)
  28f72c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  28f730:	e0bffd17 	ldw	r2,-12(fp)
  28f734:	10800b17 	ldw	r2,44(r2)
  28f738:	108002a0 	cmpeqi	r2,r2,10
  28f73c:	1000021e 	bne	r2,zero,28f748 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
  28f740:	00bffa84 	movi	r2,-22
  28f744:	00000406 	br	28f758 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
  28f748:	e1bfff17 	ldw	r6,-4(fp)
  28f74c:	e17ffe17 	ldw	r5,-8(fp)
  28f750:	e13ffd17 	ldw	r4,-12(fp)
  28f754:	028f0d00 	call	28f0d0 <alt_up_av_config_write_data>
}
  28f758:	e037883a 	mov	sp,fp
  28f75c:	dfc00117 	ldw	ra,4(sp)
  28f760:	df000017 	ldw	fp,0(sp)
  28f764:	dec00204 	addi	sp,sp,8
  28f768:	f800283a 	ret

0028f76c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  28f76c:	defffc04 	addi	sp,sp,-16
  28f770:	dfc00315 	stw	ra,12(sp)
  28f774:	df000215 	stw	fp,8(sp)
  28f778:	df000204 	addi	fp,sp,8
  28f77c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  28f780:	d1600904 	addi	r5,gp,-32732
  28f784:	e13fff17 	ldw	r4,-4(fp)
  28f788:	02909340 	call	290934 <alt_find_dev>
  28f78c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  28f790:	e0bffe17 	ldw	r2,-8(fp)
}
  28f794:	e037883a 	mov	sp,fp
  28f798:	dfc00117 	ldw	ra,4(sp)
  28f79c:	df000017 	ldw	fp,0(sp)
  28f7a0:	dec00204 	addi	sp,sp,8
  28f7a4:	f800283a 	ret

0028f7a8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  28f7a8:	defffa04 	addi	sp,sp,-24
  28f7ac:	df000515 	stw	fp,20(sp)
  28f7b0:	df000504 	addi	fp,sp,20
  28f7b4:	e13ffc15 	stw	r4,-16(fp)
  28f7b8:	e17ffd15 	stw	r5,-12(fp)
  28f7bc:	e1bffe15 	stw	r6,-8(fp)
  28f7c0:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  28f7c4:	e0bffc17 	ldw	r2,-16(fp)
  28f7c8:	10800f17 	ldw	r2,60(r2)
  28f7cc:	e0fffe17 	ldw	r3,-8(fp)
  28f7d0:	1880042e 	bgeu	r3,r2,28f7e4 <alt_up_pixel_buffer_dma_draw+0x3c>
  28f7d4:	e0bffc17 	ldw	r2,-16(fp)
  28f7d8:	10801017 	ldw	r2,64(r2)
  28f7dc:	e0ffff17 	ldw	r3,-4(fp)
  28f7e0:	18800236 	bltu	r3,r2,28f7ec <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
  28f7e4:	00bfffc4 	movi	r2,-1
  28f7e8:	00005006 	br	28f92c <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
  28f7ec:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  28f7f0:	e0bffc17 	ldw	r2,-16(fp)
  28f7f4:	10800d17 	ldw	r2,52(r2)
  28f7f8:	1000151e 	bne	r2,zero,28f850 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  28f7fc:	e0bffc17 	ldw	r2,-16(fp)
  28f800:	10c01217 	ldw	r3,72(r2)
  28f804:	e0bffe17 	ldw	r2,-8(fp)
  28f808:	1886703a 	and	r3,r3,r2
  28f80c:	e0bffc17 	ldw	r2,-16(fp)
  28f810:	10801117 	ldw	r2,68(r2)
  28f814:	1884983a 	sll	r2,r3,r2
  28f818:	e0fffb17 	ldw	r3,-20(fp)
  28f81c:	1885883a 	add	r2,r3,r2
  28f820:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  28f824:	e0bffc17 	ldw	r2,-16(fp)
  28f828:	10c01417 	ldw	r3,80(r2)
  28f82c:	e0bfff17 	ldw	r2,-4(fp)
  28f830:	1886703a 	and	r3,r3,r2
  28f834:	e0bffc17 	ldw	r2,-16(fp)
  28f838:	10801317 	ldw	r2,76(r2)
  28f83c:	1884983a 	sll	r2,r3,r2
  28f840:	e0fffb17 	ldw	r3,-20(fp)
  28f844:	1885883a 	add	r2,r3,r2
  28f848:	e0bffb15 	stw	r2,-20(fp)
  28f84c:	00001706 	br	28f8ac <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  28f850:	e0bffc17 	ldw	r2,-16(fp)
  28f854:	10c01217 	ldw	r3,72(r2)
  28f858:	e0bffe17 	ldw	r2,-8(fp)
  28f85c:	1886703a 	and	r3,r3,r2
  28f860:	e0bffc17 	ldw	r2,-16(fp)
  28f864:	10801117 	ldw	r2,68(r2)
  28f868:	1884983a 	sll	r2,r3,r2
  28f86c:	e0fffb17 	ldw	r3,-20(fp)
  28f870:	1885883a 	add	r2,r3,r2
  28f874:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  28f878:	e0bffc17 	ldw	r2,-16(fp)
  28f87c:	10c01417 	ldw	r3,80(r2)
  28f880:	e0bfff17 	ldw	r2,-4(fp)
  28f884:	1886703a 	and	r3,r3,r2
  28f888:	e0bffc17 	ldw	r2,-16(fp)
  28f88c:	10800f17 	ldw	r2,60(r2)
  28f890:	1887383a 	mul	r3,r3,r2
  28f894:	e0bffc17 	ldw	r2,-16(fp)
  28f898:	10801117 	ldw	r2,68(r2)
  28f89c:	1884983a 	sll	r2,r3,r2
  28f8a0:	e0fffb17 	ldw	r3,-20(fp)
  28f8a4:	1885883a 	add	r2,r3,r2
  28f8a8:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28f8ac:	e0bffc17 	ldw	r2,-16(fp)
  28f8b0:	10800e17 	ldw	r2,56(r2)
  28f8b4:	10800058 	cmpnei	r2,r2,1
  28f8b8:	1000081e 	bne	r2,zero,28f8dc <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  28f8bc:	e0bffc17 	ldw	r2,-16(fp)
  28f8c0:	10c00c17 	ldw	r3,48(r2)
  28f8c4:	e0bffb17 	ldw	r2,-20(fp)
  28f8c8:	1885883a 	add	r2,r3,r2
  28f8cc:	1007883a 	mov	r3,r2
  28f8d0:	e0bffd17 	ldw	r2,-12(fp)
  28f8d4:	18800025 	stbio	r2,0(r3)
  28f8d8:	00001306 	br	28f928 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  28f8dc:	e0bffc17 	ldw	r2,-16(fp)
  28f8e0:	10800e17 	ldw	r2,56(r2)
  28f8e4:	10800098 	cmpnei	r2,r2,2
  28f8e8:	1000081e 	bne	r2,zero,28f90c <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  28f8ec:	e0bffc17 	ldw	r2,-16(fp)
  28f8f0:	10c00c17 	ldw	r3,48(r2)
  28f8f4:	e0bffb17 	ldw	r2,-20(fp)
  28f8f8:	1885883a 	add	r2,r3,r2
  28f8fc:	1007883a 	mov	r3,r2
  28f900:	e0bffd17 	ldw	r2,-12(fp)
  28f904:	1880002d 	sthio	r2,0(r3)
  28f908:	00000706 	br	28f928 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  28f90c:	e0bffc17 	ldw	r2,-16(fp)
  28f910:	10c00c17 	ldw	r3,48(r2)
  28f914:	e0bffb17 	ldw	r2,-20(fp)
  28f918:	1885883a 	add	r2,r3,r2
  28f91c:	1007883a 	mov	r3,r2
  28f920:	e0bffd17 	ldw	r2,-12(fp)
  28f924:	18800035 	stwio	r2,0(r3)
	}

	return 0;
  28f928:	0005883a 	mov	r2,zero
}
  28f92c:	e037883a 	mov	sp,fp
  28f930:	df000017 	ldw	fp,0(sp)
  28f934:	dec00104 	addi	sp,sp,4
  28f938:	f800283a 	ret

0028f93c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  28f93c:	defffd04 	addi	sp,sp,-12
  28f940:	df000215 	stw	fp,8(sp)
  28f944:	df000204 	addi	fp,sp,8
  28f948:	e13ffe15 	stw	r4,-8(fp)
  28f94c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  28f950:	e0bffe17 	ldw	r2,-8(fp)
  28f954:	10800a17 	ldw	r2,40(r2)
  28f958:	10800104 	addi	r2,r2,4
  28f95c:	1007883a 	mov	r3,r2
  28f960:	e0bfff17 	ldw	r2,-4(fp)
  28f964:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  28f968:	e0bffe17 	ldw	r2,-8(fp)
  28f96c:	10800a17 	ldw	r2,40(r2)
  28f970:	10800104 	addi	r2,r2,4
  28f974:	10800037 	ldwio	r2,0(r2)
  28f978:	1007883a 	mov	r3,r2
  28f97c:	e0bffe17 	ldw	r2,-8(fp)
  28f980:	10c00c15 	stw	r3,48(r2)
	return 0;
  28f984:	0005883a 	mov	r2,zero
}
  28f988:	e037883a 	mov	sp,fp
  28f98c:	df000017 	ldw	fp,0(sp)
  28f990:	dec00104 	addi	sp,sp,4
  28f994:	f800283a 	ret

0028f998 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  28f998:	defffd04 	addi	sp,sp,-12
  28f99c:	df000215 	stw	fp,8(sp)
  28f9a0:	dc000115 	stw	r16,4(sp)
  28f9a4:	df000204 	addi	fp,sp,8
  28f9a8:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  28f9ac:	e0bffe17 	ldw	r2,-8(fp)
  28f9b0:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  28f9b4:	e0bffe17 	ldw	r2,-8(fp)
  28f9b8:	10800a17 	ldw	r2,40(r2)
  28f9bc:	1007883a 	mov	r3,r2
  28f9c0:	00800044 	movi	r2,1
  28f9c4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  28f9c8:	e0bffe17 	ldw	r2,-8(fp)
  28f9cc:	10c00b17 	ldw	r3,44(r2)
  28f9d0:	e0bffe17 	ldw	r2,-8(fp)
  28f9d4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  28f9d8:	e0bffe17 	ldw	r2,-8(fp)
  28f9dc:	14000b15 	stw	r16,44(r2)
	return 0;
  28f9e0:	0005883a 	mov	r2,zero
}
  28f9e4:	e6ffff04 	addi	sp,fp,-4
  28f9e8:	df000117 	ldw	fp,4(sp)
  28f9ec:	dc000017 	ldw	r16,0(sp)
  28f9f0:	dec00204 	addi	sp,sp,8
  28f9f4:	f800283a 	ret

0028f9f8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  28f9f8:	defffe04 	addi	sp,sp,-8
  28f9fc:	df000115 	stw	fp,4(sp)
  28fa00:	df000104 	addi	fp,sp,4
  28fa04:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  28fa08:	e0bfff17 	ldw	r2,-4(fp)
  28fa0c:	10800a17 	ldw	r2,40(r2)
  28fa10:	10800304 	addi	r2,r2,12
  28fa14:	10800037 	ldwio	r2,0(r2)
  28fa18:	1080004c 	andi	r2,r2,1
}
  28fa1c:	e037883a 	mov	sp,fp
  28fa20:	df000017 	ldw	fp,0(sp)
  28fa24:	dec00104 	addi	sp,sp,4
  28fa28:	f800283a 	ret

0028fa2c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  28fa2c:	defff704 	addi	sp,sp,-36
  28fa30:	df000815 	stw	fp,32(sp)
  28fa34:	dd400715 	stw	r21,28(sp)
  28fa38:	dd000615 	stw	r20,24(sp)
  28fa3c:	dcc00515 	stw	r19,20(sp)
  28fa40:	dc800415 	stw	r18,16(sp)
  28fa44:	dc400315 	stw	r17,12(sp)
  28fa48:	dc000215 	stw	r16,8(sp)
  28fa4c:	df000804 	addi	fp,sp,32
  28fa50:	e13ff815 	stw	r4,-32(fp)
  28fa54:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  28fa58:	e0bff917 	ldw	r2,-28(fp)
  28fa5c:	10800058 	cmpnei	r2,r2,1
  28fa60:	1000031e 	bne	r2,zero,28fa70 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
  28fa64:	e0bff817 	ldw	r2,-32(fp)
  28fa68:	14400c17 	ldw	r17,48(r2)
  28fa6c:	00000206 	br	28fa78 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
  28fa70:	e0bff817 	ldw	r2,-32(fp)
  28fa74:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
  28fa78:	e0bff817 	ldw	r2,-32(fp)
  28fa7c:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  28fa80:	e0bff817 	ldw	r2,-32(fp)
  28fa84:	10800e17 	ldw	r2,56(r2)
  28fa88:	10800098 	cmpnei	r2,r2,2
  28fa8c:	1000031e 	bne	r2,zero,28fa9c <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
  28fa90:	8405883a 	add	r2,r16,r16
  28fa94:	1021883a 	mov	r16,r2
  28fa98:	00000306 	br	28faa8 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
  28fa9c:	8405883a 	add	r2,r16,r16
  28faa0:	1085883a 	add	r2,r2,r2
  28faa4:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
  28faa8:	e0bff817 	ldw	r2,-32(fp)
  28faac:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  28fab0:	e0bff817 	ldw	r2,-32(fp)
  28fab4:	10800d17 	ldw	r2,52(r2)
  28fab8:	1000111e 	bne	r2,zero,28fb00 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  28fabc:	e0bff817 	ldw	r2,-32(fp)
  28fac0:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
  28fac4:	0029883a 	mov	r20,zero
  28fac8:	00000b06 	br	28faf8 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
  28facc:	0027883a 	mov	r19,zero
  28fad0:	00000406 	br	28fae4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
  28fad4:	9c45883a 	add	r2,r19,r17
  28fad8:	0007883a 	mov	r3,zero
  28fadc:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  28fae0:	9cc00104 	addi	r19,r19,4
  28fae4:	9c3ffb36 	bltu	r19,r16,28fad4 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  28fae8:	00800044 	movi	r2,1
  28faec:	1544983a 	sll	r2,r2,r21
  28faf0:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  28faf4:	a5000044 	addi	r20,r20,1
  28faf8:	a4bff436 	bltu	r20,r18,28facc <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  28fafc:	00000a06 	br	28fb28 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  28fb00:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
  28fb04:	0021883a 	mov	r16,zero
  28fb08:	00000506 	br	28fb20 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
  28fb0c:	8005883a 	mov	r2,r16
  28fb10:	1445883a 	add	r2,r2,r17
  28fb14:	0007883a 	mov	r3,zero
  28fb18:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  28fb1c:	84000104 	addi	r16,r16,4
  28fb20:	8005883a 	mov	r2,r16
  28fb24:	14bff936 	bltu	r2,r18,28fb0c <alt_up_pixel_buffer_dma_clear_screen+0xe0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  28fb28:	0001883a 	nop
  28fb2c:	e6fffa04 	addi	sp,fp,-24
  28fb30:	df000617 	ldw	fp,24(sp)
  28fb34:	dd400517 	ldw	r21,20(sp)
  28fb38:	dd000417 	ldw	r20,16(sp)
  28fb3c:	dcc00317 	ldw	r19,12(sp)
  28fb40:	dc800217 	ldw	r18,8(sp)
  28fb44:	dc400117 	ldw	r17,4(sp)
  28fb48:	dc000017 	ldw	r16,0(sp)
  28fb4c:	dec00704 	addi	sp,sp,28
  28fb50:	f800283a 	ret

0028fb54 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  28fb54:	defff304 	addi	sp,sp,-52
  28fb58:	df000c15 	stw	fp,48(sp)
  28fb5c:	ddc00b15 	stw	r23,44(sp)
  28fb60:	dd800a15 	stw	r22,40(sp)
  28fb64:	dd400915 	stw	r21,36(sp)
  28fb68:	dd000815 	stw	r20,32(sp)
  28fb6c:	dcc00715 	stw	r19,28(sp)
  28fb70:	dc800615 	stw	r18,24(sp)
  28fb74:	dc400515 	stw	r17,20(sp)
  28fb78:	dc000415 	stw	r16,16(sp)
  28fb7c:	df000c04 	addi	fp,sp,48
  28fb80:	e13ff415 	stw	r4,-48(fp)
  28fb84:	e17ff515 	stw	r5,-44(fp)
  28fb88:	e1bff615 	stw	r6,-40(fp)
  28fb8c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  28fb90:	e0bff417 	ldw	r2,-48(fp)
  28fb94:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  28fb98:	e0bff417 	ldw	r2,-48(fp)
  28fb9c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
  28fba0:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
  28fba4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
  28fba8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
  28fbac:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
  28fbb0:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  28fbb4:	a580032e 	bgeu	r20,r22,28fbc4 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
  28fbb8:	b02b883a 	mov	r21,r22
		l_x = r_x;
  28fbbc:	a02d883a 	mov	r22,r20
		r_x = temp;
  28fbc0:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
  28fbc4:	9c40032e 	bgeu	r19,r17,28fbd4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
  28fbc8:	882b883a 	mov	r21,r17
		t_y = b_y;
  28fbcc:	9823883a 	mov	r17,r19
		b_y = temp;
  28fbd0:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  28fbd4:	b480892e 	bgeu	r22,r18,28fdfc <alt_up_pixel_buffer_dma_draw_box+0x2a8>
  28fbd8:	8c00882e 	bgeu	r17,r16,28fdfc <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  28fbdc:	a4800136 	bltu	r20,r18,28fbe4 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
  28fbe0:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  28fbe4:	9c000136 	bltu	r19,r16,28fbec <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
  28fbe8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  28fbec:	e0800317 	ldw	r2,12(fp)
  28fbf0:	10800058 	cmpnei	r2,r2,1
  28fbf4:	1000031e 	bne	r2,zero,28fc04 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
  28fbf8:	e0bff417 	ldw	r2,-48(fp)
  28fbfc:	14000c17 	ldw	r16,48(r2)
  28fc00:	00000206 	br	28fc0c <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
  28fc04:	e0bff417 	ldw	r2,-48(fp)
  28fc08:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  28fc0c:	e0bff417 	ldw	r2,-48(fp)
  28fc10:	10800d17 	ldw	r2,52(r2)
  28fc14:	10003c1e 	bne	r2,zero,28fd08 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  28fc18:	e0bff417 	ldw	r2,-48(fp)
  28fc1c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
  28fc20:	8d44983a 	sll	r2,r17,r21
  28fc24:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28fc28:	e0bff417 	ldw	r2,-48(fp)
  28fc2c:	10800e17 	ldw	r2,56(r2)
  28fc30:	10800058 	cmpnei	r2,r2,1
  28fc34:	10000f1e 	bne	r2,zero,28fc74 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
  28fc38:	8825883a 	mov	r18,r17
  28fc3c:	00000b06 	br	28fc6c <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
  28fc40:	b023883a 	mov	r17,r22
  28fc44:	00000406 	br	28fc58 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
  28fc48:	8c05883a 	add	r2,r17,r16
  28fc4c:	b807883a 	mov	r3,r23
  28fc50:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  28fc54:	8c400044 	addi	r17,r17,1
  28fc58:	a47ffb2e 	bgeu	r20,r17,28fc48 <alt_up_pixel_buffer_dma_draw_box+0xf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  28fc5c:	00800044 	movi	r2,1
  28fc60:	1544983a 	sll	r2,r2,r21
  28fc64:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  28fc68:	94800044 	addi	r18,r18,1
  28fc6c:	9cbff42e 	bgeu	r19,r18,28fc40 <alt_up_pixel_buffer_dma_draw_box+0xec>
  28fc70:	00006306 	br	28fe00 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  28fc74:	e0bff417 	ldw	r2,-48(fp)
  28fc78:	10800e17 	ldw	r2,56(r2)
  28fc7c:	10800098 	cmpnei	r2,r2,2
  28fc80:	1000101e 	bne	r2,zero,28fcc4 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
  28fc84:	8825883a 	mov	r18,r17
  28fc88:	00000c06 	br	28fcbc <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
  28fc8c:	b023883a 	mov	r17,r22
  28fc90:	00000506 	br	28fca8 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  28fc94:	8c45883a 	add	r2,r17,r17
  28fc98:	1405883a 	add	r2,r2,r16
  28fc9c:	b807883a 	mov	r3,r23
  28fca0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  28fca4:	8c400044 	addi	r17,r17,1
  28fca8:	a47ffa2e 	bgeu	r20,r17,28fc94 <alt_up_pixel_buffer_dma_draw_box+0x140>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  28fcac:	00800044 	movi	r2,1
  28fcb0:	1544983a 	sll	r2,r2,r21
  28fcb4:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  28fcb8:	94800044 	addi	r18,r18,1
  28fcbc:	9cbff32e 	bgeu	r19,r18,28fc8c <alt_up_pixel_buffer_dma_draw_box+0x138>
  28fcc0:	00004f06 	br	28fe00 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  28fcc4:	8825883a 	mov	r18,r17
  28fcc8:	00000d06 	br	28fd00 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
  28fccc:	b023883a 	mov	r17,r22
  28fcd0:	00000606 	br	28fcec <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  28fcd4:	8c45883a 	add	r2,r17,r17
  28fcd8:	1085883a 	add	r2,r2,r2
  28fcdc:	1405883a 	add	r2,r2,r16
  28fce0:	b807883a 	mov	r3,r23
  28fce4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  28fce8:	8c400044 	addi	r17,r17,1
  28fcec:	a47ff92e 	bgeu	r20,r17,28fcd4 <alt_up_pixel_buffer_dma_draw_box+0x180>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  28fcf0:	00800044 	movi	r2,1
  28fcf4:	1544983a 	sll	r2,r2,r21
  28fcf8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  28fcfc:	94800044 	addi	r18,r18,1
  28fd00:	9cbff22e 	bgeu	r19,r18,28fccc <alt_up_pixel_buffer_dma_draw_box+0x178>
  28fd04:	00003e06 	br	28fe00 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28fd08:	e0bff417 	ldw	r2,-48(fp)
  28fd0c:	10800e17 	ldw	r2,56(r2)
  28fd10:	10800058 	cmpnei	r2,r2,1
  28fd14:	10000f1e 	bne	r2,zero,28fd54 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
  28fd18:	8c85383a 	mul	r2,r17,r18
  28fd1c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  28fd20:	882b883a 	mov	r21,r17
  28fd24:	00000906 	br	28fd4c <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
  28fd28:	b023883a 	mov	r17,r22
  28fd2c:	00000406 	br	28fd40 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
  28fd30:	8c05883a 	add	r2,r17,r16
  28fd34:	b807883a 	mov	r3,r23
  28fd38:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  28fd3c:	8c400044 	addi	r17,r17,1
  28fd40:	a47ffb2e 	bgeu	r20,r17,28fd30 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  28fd44:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  28fd48:	ad400044 	addi	r21,r21,1
  28fd4c:	9d7ff62e 	bgeu	r19,r21,28fd28 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
  28fd50:	00002b06 	br	28fe00 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  28fd54:	e0bff417 	ldw	r2,-48(fp)
  28fd58:	10800e17 	ldw	r2,56(r2)
  28fd5c:	10800098 	cmpnei	r2,r2,2
  28fd60:	1000121e 	bne	r2,zero,28fdac <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
  28fd64:	9485883a 	add	r2,r18,r18
  28fd68:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
  28fd6c:	8c85383a 	mul	r2,r17,r18
  28fd70:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  28fd74:	882b883a 	mov	r21,r17
  28fd78:	00000a06 	br	28fda4 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
  28fd7c:	b023883a 	mov	r17,r22
  28fd80:	00000506 	br	28fd98 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  28fd84:	8c45883a 	add	r2,r17,r17
  28fd88:	1405883a 	add	r2,r2,r16
  28fd8c:	b807883a 	mov	r3,r23
  28fd90:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  28fd94:	8c400044 	addi	r17,r17,1
  28fd98:	a47ffa2e 	bgeu	r20,r17,28fd84 <alt_up_pixel_buffer_dma_draw_box+0x230>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  28fd9c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  28fda0:	ad400044 	addi	r21,r21,1
  28fda4:	9d7ff52e 	bgeu	r19,r21,28fd7c <alt_up_pixel_buffer_dma_draw_box+0x228>
  28fda8:	00001506 	br	28fe00 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  28fdac:	9485883a 	add	r2,r18,r18
  28fdb0:	1085883a 	add	r2,r2,r2
  28fdb4:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
  28fdb8:	8c85383a 	mul	r2,r17,r18
  28fdbc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  28fdc0:	882b883a 	mov	r21,r17
  28fdc4:	00000b06 	br	28fdf4 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
  28fdc8:	b023883a 	mov	r17,r22
  28fdcc:	00000606 	br	28fde8 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  28fdd0:	8c45883a 	add	r2,r17,r17
  28fdd4:	1085883a 	add	r2,r2,r2
  28fdd8:	1405883a 	add	r2,r2,r16
  28fddc:	b807883a 	mov	r3,r23
  28fde0:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  28fde4:	8c400044 	addi	r17,r17,1
  28fde8:	a47ff92e 	bgeu	r20,r17,28fdd0 <alt_up_pixel_buffer_dma_draw_box+0x27c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  28fdec:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  28fdf0:	ad400044 	addi	r21,r21,1
  28fdf4:	9d7ff42e 	bgeu	r19,r21,28fdc8 <alt_up_pixel_buffer_dma_draw_box+0x274>
  28fdf8:	00000106 	br	28fe00 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  28fdfc:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
  28fe00:	e6fff804 	addi	sp,fp,-32
  28fe04:	df000817 	ldw	fp,32(sp)
  28fe08:	ddc00717 	ldw	r23,28(sp)
  28fe0c:	dd800617 	ldw	r22,24(sp)
  28fe10:	dd400517 	ldw	r21,20(sp)
  28fe14:	dd000417 	ldw	r20,16(sp)
  28fe18:	dcc00317 	ldw	r19,12(sp)
  28fe1c:	dc800217 	ldw	r18,8(sp)
  28fe20:	dc400117 	ldw	r17,4(sp)
  28fe24:	dc000017 	ldw	r16,0(sp)
  28fe28:	dec00904 	addi	sp,sp,36
  28fe2c:	f800283a 	ret

0028fe30 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  28fe30:	defff404 	addi	sp,sp,-48
  28fe34:	df000b15 	stw	fp,44(sp)
  28fe38:	dd800a15 	stw	r22,40(sp)
  28fe3c:	dd400915 	stw	r21,36(sp)
  28fe40:	dd000815 	stw	r20,32(sp)
  28fe44:	dcc00715 	stw	r19,28(sp)
  28fe48:	dc800615 	stw	r18,24(sp)
  28fe4c:	dc400515 	stw	r17,20(sp)
  28fe50:	dc000415 	stw	r16,16(sp)
  28fe54:	df000b04 	addi	fp,sp,44
  28fe58:	e13ff515 	stw	r4,-44(fp)
  28fe5c:	e17ff615 	stw	r5,-40(fp)
  28fe60:	e1bff715 	stw	r6,-36(fp)
  28fe64:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  28fe68:	e0bff517 	ldw	r2,-44(fp)
  28fe6c:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  28fe70:	e0bff517 	ldw	r2,-44(fp)
  28fe74:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
  28fe78:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
  28fe7c:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
  28fe80:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
  28fe84:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  28fe88:	9c40032e 	bgeu	r19,r17,28fe98 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
  28fe8c:	882d883a 	mov	r22,r17
		l_x = r_x;
  28fe90:	9823883a 	mov	r17,r19
		r_x = temp;
  28fe94:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  28fe98:	8c805d2e 	bgeu	r17,r18,290010 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
  28fe9c:	a4005c2e 	bgeu	r20,r16,290010 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  28fea0:	9c800136 	bltu	r19,r18,28fea8 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
  28fea4:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  28fea8:	e0800217 	ldw	r2,8(fp)
  28feac:	10800058 	cmpnei	r2,r2,1
  28feb0:	1000031e 	bne	r2,zero,28fec0 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
  28feb4:	e0bff517 	ldw	r2,-44(fp)
  28feb8:	14000c17 	ldw	r16,48(r2)
  28febc:	00000206 	br	28fec8 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
  28fec0:	e0bff517 	ldw	r2,-44(fp)
  28fec4:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  28fec8:	e0bff517 	ldw	r2,-44(fp)
  28fecc:	10800d17 	ldw	r2,52(r2)
  28fed0:	1000231e 	bne	r2,zero,28ff60 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  28fed4:	e0bff517 	ldw	r2,-44(fp)
  28fed8:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
  28fedc:	a484983a 	sll	r2,r20,r18
  28fee0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28fee4:	e0bff517 	ldw	r2,-44(fp)
  28fee8:	10800e17 	ldw	r2,56(r2)
  28feec:	10800058 	cmpnei	r2,r2,1
  28fef0:	1000071e 	bne	r2,zero,28ff10 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
  28fef4:	00000406 	br	28ff08 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
  28fef8:	8c05883a 	add	r2,r17,r16
  28fefc:	a807883a 	mov	r3,r21
  28ff00:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  28ff04:	8c400044 	addi	r17,r17,1
  28ff08:	9c7ffb2e 	bgeu	r19,r17,28fef8 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
  28ff0c:	00004106 	br	290014 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  28ff10:	e0bff517 	ldw	r2,-44(fp)
  28ff14:	10800e17 	ldw	r2,56(r2)
  28ff18:	10800098 	cmpnei	r2,r2,2
  28ff1c:	10000e1e 	bne	r2,zero,28ff58 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
  28ff20:	00000506 	br	28ff38 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  28ff24:	8c45883a 	add	r2,r17,r17
  28ff28:	1405883a 	add	r2,r2,r16
  28ff2c:	a807883a 	mov	r3,r21
  28ff30:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  28ff34:	8c400044 	addi	r17,r17,1
  28ff38:	9c7ffa2e 	bgeu	r19,r17,28ff24 <alt_up_pixel_buffer_dma_draw_hline+0xf4>
  28ff3c:	00003506 	br	290014 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  28ff40:	8c45883a 	add	r2,r17,r17
  28ff44:	1085883a 	add	r2,r2,r2
  28ff48:	1405883a 	add	r2,r2,r16
  28ff4c:	a807883a 	mov	r3,r21
  28ff50:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  28ff54:	8c400044 	addi	r17,r17,1
  28ff58:	9c7ff92e 	bgeu	r19,r17,28ff40 <alt_up_pixel_buffer_dma_draw_hline+0x110>
  28ff5c:	00002d06 	br	290014 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28ff60:	e0bff517 	ldw	r2,-44(fp)
  28ff64:	10800e17 	ldw	r2,56(r2)
  28ff68:	10800058 	cmpnei	r2,r2,1
  28ff6c:	1000091e 	bne	r2,zero,28ff94 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
  28ff70:	a485383a 	mul	r2,r20,r18
  28ff74:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
  28ff78:	00000406 	br	28ff8c <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  28ff7c:	8c05883a 	add	r2,r17,r16
  28ff80:	a807883a 	mov	r3,r21
  28ff84:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  28ff88:	8c400044 	addi	r17,r17,1
  28ff8c:	9c7ffb2e 	bgeu	r19,r17,28ff7c <alt_up_pixel_buffer_dma_draw_hline+0x14c>
  28ff90:	00002006 	br	290014 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  28ff94:	e0bff517 	ldw	r2,-44(fp)
  28ff98:	10800e17 	ldw	r2,56(r2)
  28ff9c:	10800098 	cmpnei	r2,r2,2
  28ffa0:	10000c1e 	bne	r2,zero,28ffd4 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
  28ffa4:	9485883a 	add	r2,r18,r18
  28ffa8:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
  28ffac:	a485383a 	mul	r2,r20,r18
  28ffb0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
  28ffb4:	00000506 	br	28ffcc <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  28ffb8:	8c45883a 	add	r2,r17,r17
  28ffbc:	1405883a 	add	r2,r2,r16
  28ffc0:	a807883a 	mov	r3,r21
  28ffc4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  28ffc8:	8c400044 	addi	r17,r17,1
  28ffcc:	9c7ffa2e 	bgeu	r19,r17,28ffb8 <alt_up_pixel_buffer_dma_draw_hline+0x188>
  28ffd0:	00001006 	br	290014 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  28ffd4:	9485883a 	add	r2,r18,r18
  28ffd8:	1085883a 	add	r2,r2,r2
  28ffdc:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
  28ffe0:	a485383a 	mul	r2,r20,r18
  28ffe4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
  28ffe8:	00000606 	br	290004 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  28ffec:	8c45883a 	add	r2,r17,r17
  28fff0:	1085883a 	add	r2,r2,r2
  28fff4:	1405883a 	add	r2,r2,r16
  28fff8:	a807883a 	mov	r3,r21
  28fffc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  290000:	8c400044 	addi	r17,r17,1
  290004:	9c7ff92e 	bgeu	r19,r17,28ffec <alt_up_pixel_buffer_dma_draw_hline+0x1bc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
  290008:	84a1883a 	add	r16,r16,r18
  29000c:	00000106 	br	290014 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  290010:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  290014:	e6fff904 	addi	sp,fp,-28
  290018:	df000717 	ldw	fp,28(sp)
  29001c:	dd800617 	ldw	r22,24(sp)
  290020:	dd400517 	ldw	r21,20(sp)
  290024:	dd000417 	ldw	r20,16(sp)
  290028:	dcc00317 	ldw	r19,12(sp)
  29002c:	dc800217 	ldw	r18,8(sp)
  290030:	dc400117 	ldw	r17,4(sp)
  290034:	dc000017 	ldw	r16,0(sp)
  290038:	dec00804 	addi	sp,sp,32
  29003c:	f800283a 	ret

00290040 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  290040:	defff404 	addi	sp,sp,-48
  290044:	df000b15 	stw	fp,44(sp)
  290048:	dd800a15 	stw	r22,40(sp)
  29004c:	dd400915 	stw	r21,36(sp)
  290050:	dd000815 	stw	r20,32(sp)
  290054:	dcc00715 	stw	r19,28(sp)
  290058:	dc800615 	stw	r18,24(sp)
  29005c:	dc400515 	stw	r17,20(sp)
  290060:	dc000415 	stw	r16,16(sp)
  290064:	df000b04 	addi	fp,sp,44
  290068:	e13ff515 	stw	r4,-44(fp)
  29006c:	e17ff615 	stw	r5,-40(fp)
  290070:	e1bff715 	stw	r6,-36(fp)
  290074:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  290078:	e0bff517 	ldw	r2,-44(fp)
  29007c:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  290080:	e0bff517 	ldw	r2,-44(fp)
  290084:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
  290088:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
  29008c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
  290090:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
  290094:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  290098:	9d00032e 	bgeu	r19,r20,2900a8 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
  29009c:	a02b883a 	mov	r21,r20
		t_y = b_y;
  2900a0:	9829883a 	mov	r20,r19
		b_y = temp;
  2900a4:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  2900a8:	94406c2e 	bgeu	r18,r17,29025c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
  2900ac:	a4006b2e 	bgeu	r20,r16,29025c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  2900b0:	9c000136 	bltu	r19,r16,2900b8 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
  2900b4:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  2900b8:	e0800217 	ldw	r2,8(fp)
  2900bc:	10800058 	cmpnei	r2,r2,1
  2900c0:	1000031e 	bne	r2,zero,2900d0 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
  2900c4:	e0bff517 	ldw	r2,-44(fp)
  2900c8:	14000c17 	ldw	r16,48(r2)
  2900cc:	00000206 	br	2900d8 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
  2900d0:	e0bff517 	ldw	r2,-44(fp)
  2900d4:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  2900d8:	e0bff517 	ldw	r2,-44(fp)
  2900dc:	10800d17 	ldw	r2,52(r2)
  2900e0:	1000301e 	bne	r2,zero,2901a4 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  2900e4:	e0bff517 	ldw	r2,-44(fp)
  2900e8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
  2900ec:	a544983a 	sll	r2,r20,r21
  2900f0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  2900f4:	e0bff517 	ldw	r2,-44(fp)
  2900f8:	10800e17 	ldw	r2,56(r2)
  2900fc:	10800058 	cmpnei	r2,r2,1
  290100:	10000b1e 	bne	r2,zero,290130 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
  290104:	a023883a 	mov	r17,r20
  290108:	00000706 	br	290128 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  29010c:	9405883a 	add	r2,r18,r16
  290110:	b007883a 	mov	r3,r22
  290114:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  290118:	00800044 	movi	r2,1
  29011c:	1544983a 	sll	r2,r2,r21
  290120:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  290124:	8c400044 	addi	r17,r17,1
  290128:	9c7ff82e 	bgeu	r19,r17,29010c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
  29012c:	00004c06 	br	290260 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  290130:	e0bff517 	ldw	r2,-44(fp)
  290134:	10800e17 	ldw	r2,56(r2)
  290138:	10800098 	cmpnei	r2,r2,2
  29013c:	10000c1e 	bne	r2,zero,290170 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
  290140:	a023883a 	mov	r17,r20
  290144:	00000806 	br	290168 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  290148:	9485883a 	add	r2,r18,r18
  29014c:	1405883a 	add	r2,r2,r16
  290150:	b007883a 	mov	r3,r22
  290154:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  290158:	00800044 	movi	r2,1
  29015c:	1544983a 	sll	r2,r2,r21
  290160:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  290164:	8c400044 	addi	r17,r17,1
  290168:	9c7ff72e 	bgeu	r19,r17,290148 <alt_up_pixel_buffer_dma_draw_vline+0x108>
  29016c:	00003c06 	br	290260 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  290170:	a023883a 	mov	r17,r20
  290174:	00000906 	br	29019c <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  290178:	9485883a 	add	r2,r18,r18
  29017c:	1085883a 	add	r2,r2,r2
  290180:	1405883a 	add	r2,r2,r16
  290184:	b007883a 	mov	r3,r22
  290188:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  29018c:	00800044 	movi	r2,1
  290190:	1544983a 	sll	r2,r2,r21
  290194:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  290198:	8c400044 	addi	r17,r17,1
  29019c:	9c7ff62e 	bgeu	r19,r17,290178 <alt_up_pixel_buffer_dma_draw_vline+0x138>
  2901a0:	00002f06 	br	290260 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  2901a4:	e0bff517 	ldw	r2,-44(fp)
  2901a8:	10800e17 	ldw	r2,56(r2)
  2901ac:	10800058 	cmpnei	r2,r2,1
  2901b0:	10000a1e 	bne	r2,zero,2901dc <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
  2901b4:	a445383a 	mul	r2,r20,r17
  2901b8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  2901bc:	00000506 	br	2901d4 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  2901c0:	9405883a 	add	r2,r18,r16
  2901c4:	b007883a 	mov	r3,r22
  2901c8:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  2901cc:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  2901d0:	a5000044 	addi	r20,r20,1
  2901d4:	9d3ffa2e 	bgeu	r19,r20,2901c0 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  2901d8:	00002106 	br	290260 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  2901dc:	e0bff517 	ldw	r2,-44(fp)
  2901e0:	10800e17 	ldw	r2,56(r2)
  2901e4:	10800098 	cmpnei	r2,r2,2
  2901e8:	10000d1e 	bne	r2,zero,290220 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
  2901ec:	8c45883a 	add	r2,r17,r17
  2901f0:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
  2901f4:	a445383a 	mul	r2,r20,r17
  2901f8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  2901fc:	00000606 	br	290218 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  290200:	9485883a 	add	r2,r18,r18
  290204:	1405883a 	add	r2,r2,r16
  290208:	b007883a 	mov	r3,r22
  29020c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  290210:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  290214:	a5000044 	addi	r20,r20,1
  290218:	9d3ff92e 	bgeu	r19,r20,290200 <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
  29021c:	00001006 	br	290260 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  290220:	8c45883a 	add	r2,r17,r17
  290224:	1085883a 	add	r2,r2,r2
  290228:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
  29022c:	a445383a 	mul	r2,r20,r17
  290230:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
  290234:	00000706 	br	290254 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  290238:	9485883a 	add	r2,r18,r18
  29023c:	1085883a 	add	r2,r2,r2
  290240:	1405883a 	add	r2,r2,r16
  290244:	b007883a 	mov	r3,r22
  290248:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  29024c:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  290250:	a5000044 	addi	r20,r20,1
  290254:	9d3ff82e 	bgeu	r19,r20,290238 <alt_up_pixel_buffer_dma_draw_vline+0x1f8>
  290258:	00000106 	br	290260 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  29025c:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  290260:	e6fff904 	addi	sp,fp,-28
  290264:	df000717 	ldw	fp,28(sp)
  290268:	dd800617 	ldw	r22,24(sp)
  29026c:	dd400517 	ldw	r21,20(sp)
  290270:	dd000417 	ldw	r20,16(sp)
  290274:	dcc00317 	ldw	r19,12(sp)
  290278:	dc800217 	ldw	r18,8(sp)
  29027c:	dc400117 	ldw	r17,4(sp)
  290280:	dc000017 	ldw	r16,0(sp)
  290284:	dec00804 	addi	sp,sp,32
  290288:	f800283a 	ret

0029028c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  29028c:	defff804 	addi	sp,sp,-32
  290290:	dfc00715 	stw	ra,28(sp)
  290294:	df000615 	stw	fp,24(sp)
  290298:	df000604 	addi	fp,sp,24
  29029c:	e13ffc15 	stw	r4,-16(fp)
  2902a0:	e17ffd15 	stw	r5,-12(fp)
  2902a4:	e1bffe15 	stw	r6,-8(fp)
  2902a8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  2902ac:	e0800417 	ldw	r2,16(fp)
  2902b0:	d8800115 	stw	r2,4(sp)
  2902b4:	e0800317 	ldw	r2,12(fp)
  2902b8:	d8800015 	stw	r2,0(sp)
  2902bc:	e1fffe17 	ldw	r7,-8(fp)
  2902c0:	e1bfff17 	ldw	r6,-4(fp)
  2902c4:	e17ffd17 	ldw	r5,-12(fp)
  2902c8:	e13ffc17 	ldw	r4,-16(fp)
  2902cc:	028fe300 	call	28fe30 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  2902d0:	e0800417 	ldw	r2,16(fp)
  2902d4:	d8800115 	stw	r2,4(sp)
  2902d8:	e0800317 	ldw	r2,12(fp)
  2902dc:	d8800015 	stw	r2,0(sp)
  2902e0:	e1c00217 	ldw	r7,8(fp)
  2902e4:	e1bfff17 	ldw	r6,-4(fp)
  2902e8:	e17ffd17 	ldw	r5,-12(fp)
  2902ec:	e13ffc17 	ldw	r4,-16(fp)
  2902f0:	028fe300 	call	28fe30 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  2902f4:	e0800417 	ldw	r2,16(fp)
  2902f8:	d8800115 	stw	r2,4(sp)
  2902fc:	e0800317 	ldw	r2,12(fp)
  290300:	d8800015 	stw	r2,0(sp)
  290304:	e1c00217 	ldw	r7,8(fp)
  290308:	e1bffe17 	ldw	r6,-8(fp)
  29030c:	e17ffd17 	ldw	r5,-12(fp)
  290310:	e13ffc17 	ldw	r4,-16(fp)
  290314:	02900400 	call	290040 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  290318:	e0800417 	ldw	r2,16(fp)
  29031c:	d8800115 	stw	r2,4(sp)
  290320:	e0800317 	ldw	r2,12(fp)
  290324:	d8800015 	stw	r2,0(sp)
  290328:	e1c00217 	ldw	r7,8(fp)
  29032c:	e1bffe17 	ldw	r6,-8(fp)
  290330:	e17fff17 	ldw	r5,-4(fp)
  290334:	e13ffc17 	ldw	r4,-16(fp)
  290338:	02900400 	call	290040 <alt_up_pixel_buffer_dma_draw_vline>
}
  29033c:	0001883a 	nop
  290340:	e037883a 	mov	sp,fp
  290344:	dfc00117 	ldw	ra,4(sp)
  290348:	df000017 	ldw	fp,0(sp)
  29034c:	dec00204 	addi	sp,sp,8
  290350:	f800283a 	ret

00290354 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  290354:	deffff04 	addi	sp,sp,-4
  290358:	df000015 	stw	fp,0(sp)
  29035c:	d839883a 	mov	fp,sp
  290360:	2005883a 	mov	r2,r4
  290364:	3007883a 	mov	r3,r6
  290368:	3809883a 	mov	r4,r7
  29036c:	e1800117 	ldw	r6,4(fp)
  290370:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
  290374:	3800051e 	bne	r7,zero,29038c <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  290378:	2909383a 	mul	r4,r5,r4
  29037c:	20c7883a 	add	r3,r4,r3
  290380:	1885883a 	add	r2,r3,r2
  290384:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
  290388:	00000e06 	br	2903c4 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  29038c:	39c00058 	cmpnei	r7,r7,1
  290390:	3800061e 	bne	r7,zero,2903ac <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  290394:	2909383a 	mul	r4,r5,r4
  290398:	20c7883a 	add	r3,r4,r3
  29039c:	18c7883a 	add	r3,r3,r3
  2903a0:	1885883a 	add	r2,r3,r2
  2903a4:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
  2903a8:	00000606 	br	2903c4 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  2903ac:	2909383a 	mul	r4,r5,r4
  2903b0:	20c7883a 	add	r3,r4,r3
  2903b4:	18c7883a 	add	r3,r3,r3
  2903b8:	18c7883a 	add	r3,r3,r3
  2903bc:	1885883a 	add	r2,r3,r2
  2903c0:	11800035 	stwio	r6,0(r2)
}
  2903c4:	0001883a 	nop
  2903c8:	e037883a 	mov	sp,fp
  2903cc:	df000017 	ldw	fp,0(sp)
  2903d0:	dec00104 	addi	sp,sp,4
  2903d4:	f800283a 	ret

002903d8 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  2903d8:	deffeb04 	addi	sp,sp,-84
  2903dc:	dfc01415 	stw	ra,80(sp)
  2903e0:	df001315 	stw	fp,76(sp)
  2903e4:	ddc01215 	stw	r23,72(sp)
  2903e8:	dd801115 	stw	r22,68(sp)
  2903ec:	dd401015 	stw	r21,64(sp)
  2903f0:	dd000f15 	stw	r20,60(sp)
  2903f4:	dcc00e15 	stw	r19,56(sp)
  2903f8:	dc800d15 	stw	r18,52(sp)
  2903fc:	dc400c15 	stw	r17,48(sp)
  290400:	dc000b15 	stw	r16,44(sp)
  290404:	df001304 	addi	fp,sp,76
  290408:	e13fef15 	stw	r4,-68(fp)
  29040c:	e17ff015 	stw	r5,-64(fp)
  290410:	e1bff115 	stw	r6,-60(fp)
  290414:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
  290418:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
  29041c:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
  290420:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
  290424:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  290428:	a4c5c83a 	sub	r2,r20,r19
  29042c:	1000010e 	bge	r2,zero,290434 <alt_up_pixel_buffer_dma_draw_line+0x5c>
  290430:	0085c83a 	sub	r2,zero,r2
  290434:	1007883a 	mov	r3,r2
  290438:	9445c83a 	sub	r2,r18,r17
  29043c:	1000010e 	bge	r2,zero,290444 <alt_up_pixel_buffer_dma_draw_line+0x6c>
  290440:	0085c83a 	sub	r2,zero,r2
  290444:	10c4803a 	cmplt	r2,r2,r3
  290448:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
  29044c:	e0bfef17 	ldw	r2,-68(fp)
  290450:	10800e17 	ldw	r2,56(r2)
  290454:	10800060 	cmpeqi	r2,r2,1
  290458:	1000081e 	bne	r2,zero,29047c <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  29045c:	e0bfef17 	ldw	r2,-68(fp)
  290460:	10800e17 	ldw	r2,56(r2)
  290464:	10800098 	cmpnei	r2,r2,2
  290468:	1000021e 	bne	r2,zero,290474 <alt_up_pixel_buffer_dma_draw_line+0x9c>
  29046c:	00800044 	movi	r2,1
  290470:	00000306 	br	290480 <alt_up_pixel_buffer_dma_draw_line+0xa8>
  290474:	00800084 	movi	r2,2
  290478:	00000106 	br	290480 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
  29047c:	0005883a 	mov	r2,zero
  290480:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
  290484:	e0800317 	ldw	r2,12(fp)
  290488:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  29048c:	e0bfef17 	ldw	r2,-68(fp)
  290490:	10800d17 	ldw	r2,52(r2)
  290494:	1000071e 	bne	r2,zero,2904b4 <alt_up_pixel_buffer_dma_draw_line+0xdc>
  290498:	e0bfef17 	ldw	r2,-68(fp)
  29049c:	10801317 	ldw	r2,76(r2)
  2904a0:	e0fff417 	ldw	r3,-48(fp)
  2904a4:	10c5c83a 	sub	r2,r2,r3
  2904a8:	00c00044 	movi	r3,1
  2904ac:	1884983a 	sll	r2,r3,r2
  2904b0:	00000206 	br	2904bc <alt_up_pixel_buffer_dma_draw_line+0xe4>
  2904b4:	e0bfef17 	ldw	r2,-68(fp)
  2904b8:	10800f17 	ldw	r2,60(r2)
  2904bc:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
  2904c0:	e0800417 	ldw	r2,16(fp)
  2904c4:	10800058 	cmpnei	r2,r2,1
  2904c8:	1000031e 	bne	r2,zero,2904d8 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
  2904cc:	e0bfef17 	ldw	r2,-68(fp)
  2904d0:	15c00c17 	ldw	r23,48(r2)
  2904d4:	00000206 	br	2904e0 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  2904d8:	e0bfef17 	ldw	r2,-68(fp)
  2904dc:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
  2904e0:	e0bff307 	ldb	r2,-52(fp)
  2904e4:	0080060e 	bge	zero,r2,290500 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
  2904e8:	8821883a 	mov	r16,r17
		x_0 = y_0;
  2904ec:	9823883a 	mov	r17,r19
		y_0 = error;
  2904f0:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
  2904f4:	9021883a 	mov	r16,r18
		x_1 = y_1;
  2904f8:	a025883a 	mov	r18,r20
		y_1 = error;
  2904fc:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
  290500:	9440060e 	bge	r18,r17,29051c <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
  290504:	8821883a 	mov	r16,r17
		x_0 = x_1;
  290508:	9023883a 	mov	r17,r18
		x_1 = error;
  29050c:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
  290510:	9821883a 	mov	r16,r19
		y_0 = y_1;
  290514:	a027883a 	mov	r19,r20
		y_1 = error;
  290518:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  29051c:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
  290520:	a4c5c83a 	sub	r2,r20,r19
  290524:	1000010e 	bge	r2,zero,29052c <alt_up_pixel_buffer_dma_draw_line+0x154>
  290528:	0085c83a 	sub	r2,zero,r2
  29052c:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
  290530:	a804d7fa 	srli	r2,r21,31
  290534:	1545883a 	add	r2,r2,r21
  290538:	1005d07a 	srai	r2,r2,1
  29053c:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
  290540:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
  290544:	9d00020e 	bge	r19,r20,290550 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
  290548:	04c00044 	movi	r19,1
  29054c:	00000106 	br	290554 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
  290550:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  290554:	e0bff307 	ldb	r2,-52(fp)
  290558:	10800058 	cmpnei	r2,r2,1
  29055c:	1000211e 	bne	r2,zero,2905e4 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
  290560:	00000f06 	br	2905a0 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  290564:	e0bff417 	ldw	r2,-48(fp)
  290568:	d8800115 	stw	r2,4(sp)
  29056c:	e0bff517 	ldw	r2,-44(fp)
  290570:	d8800015 	stw	r2,0(sp)
  290574:	880f883a 	mov	r7,r17
  290578:	b00d883a 	mov	r6,r22
  29057c:	e17ff617 	ldw	r5,-40(fp)
  290580:	b809883a 	mov	r4,r23
  290584:	02903540 	call	290354 <helper_plot_pixel>
			error = error + deltay;
  290588:	e0bff717 	ldw	r2,-36(fp)
  29058c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
  290590:	0400020e 	bge	zero,r16,29059c <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
  290594:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
  290598:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  29059c:	8c400044 	addi	r17,r17,1
  2905a0:	947ff00e 	bge	r18,r17,290564 <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  2905a4:	00001006 	br	2905e8 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  2905a8:	e0bff417 	ldw	r2,-48(fp)
  2905ac:	d8800115 	stw	r2,4(sp)
  2905b0:	e0bff517 	ldw	r2,-44(fp)
  2905b4:	d8800015 	stw	r2,0(sp)
  2905b8:	b00f883a 	mov	r7,r22
  2905bc:	880d883a 	mov	r6,r17
  2905c0:	e17ff617 	ldw	r5,-40(fp)
  2905c4:	b809883a 	mov	r4,r23
  2905c8:	02903540 	call	290354 <helper_plot_pixel>
			error = error + deltay;
  2905cc:	e0bff717 	ldw	r2,-36(fp)
  2905d0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
  2905d4:	0400020e 	bge	zero,r16,2905e0 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
  2905d8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
  2905dc:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  2905e0:	8c400044 	addi	r17,r17,1
  2905e4:	947ff00e 	bge	r18,r17,2905a8 <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  2905e8:	0001883a 	nop
  2905ec:	e6fff804 	addi	sp,fp,-32
  2905f0:	dfc00917 	ldw	ra,36(sp)
  2905f4:	df000817 	ldw	fp,32(sp)
  2905f8:	ddc00717 	ldw	r23,28(sp)
  2905fc:	dd800617 	ldw	r22,24(sp)
  290600:	dd400517 	ldw	r21,20(sp)
  290604:	dd000417 	ldw	r20,16(sp)
  290608:	dcc00317 	ldw	r19,12(sp)
  29060c:	dc800217 	ldw	r18,8(sp)
  290610:	dc400117 	ldw	r17,4(sp)
  290614:	dc000017 	ldw	r16,0(sp)
  290618:	dec00a04 	addi	sp,sp,40
  29061c:	f800283a 	ret

00290620 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  290620:	defff504 	addi	sp,sp,-44
  290624:	df000a15 	stw	fp,40(sp)
  290628:	df000a04 	addi	fp,sp,40
  29062c:	e13ffc15 	stw	r4,-16(fp)
  290630:	e17ffd15 	stw	r5,-12(fp)
  290634:	e1bffe15 	stw	r6,-8(fp)
  290638:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  29063c:	e03ff615 	stw	zero,-40(fp)
  290640:	d0a70617 	ldw	r2,-25576(gp)
  
  if (alt_ticks_per_second ())
  290644:	10003c26 	beq	r2,zero,290738 <alt_alarm_start+0x118>
  {
    if (alarm)
  290648:	e0bffc17 	ldw	r2,-16(fp)
  29064c:	10003826 	beq	r2,zero,290730 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  290650:	e0bffc17 	ldw	r2,-16(fp)
  290654:	e0fffe17 	ldw	r3,-8(fp)
  290658:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  29065c:	e0bffc17 	ldw	r2,-16(fp)
  290660:	e0ffff17 	ldw	r3,-4(fp)
  290664:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  290668:	0005303a 	rdctl	r2,status
  29066c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  290670:	e0fff917 	ldw	r3,-28(fp)
  290674:	00bfff84 	movi	r2,-2
  290678:	1884703a 	and	r2,r3,r2
  29067c:	1001703a 	wrctl	status,r2
  
  return context;
  290680:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  290684:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  290688:	d0a70717 	ldw	r2,-25572(gp)
      
      current_nticks = alt_nticks();
  29068c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  290690:	e0fffd17 	ldw	r3,-12(fp)
  290694:	e0bff617 	ldw	r2,-40(fp)
  290698:	1885883a 	add	r2,r3,r2
  29069c:	10c00044 	addi	r3,r2,1
  2906a0:	e0bffc17 	ldw	r2,-16(fp)
  2906a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  2906a8:	e0bffc17 	ldw	r2,-16(fp)
  2906ac:	10c00217 	ldw	r3,8(r2)
  2906b0:	e0bff617 	ldw	r2,-40(fp)
  2906b4:	1880042e 	bgeu	r3,r2,2906c8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  2906b8:	e0bffc17 	ldw	r2,-16(fp)
  2906bc:	00c00044 	movi	r3,1
  2906c0:	10c00405 	stb	r3,16(r2)
  2906c4:	00000206 	br	2906d0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  2906c8:	e0bffc17 	ldw	r2,-16(fp)
  2906cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  2906d0:	e0bffc17 	ldw	r2,-16(fp)
  2906d4:	d0e00f04 	addi	r3,gp,-32708
  2906d8:	e0fffa15 	stw	r3,-24(fp)
  2906dc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2906e0:	e0bffb17 	ldw	r2,-20(fp)
  2906e4:	e0fffa17 	ldw	r3,-24(fp)
  2906e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  2906ec:	e0bffa17 	ldw	r2,-24(fp)
  2906f0:	10c00017 	ldw	r3,0(r2)
  2906f4:	e0bffb17 	ldw	r2,-20(fp)
  2906f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2906fc:	e0bffa17 	ldw	r2,-24(fp)
  290700:	10800017 	ldw	r2,0(r2)
  290704:	e0fffb17 	ldw	r3,-20(fp)
  290708:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  29070c:	e0bffa17 	ldw	r2,-24(fp)
  290710:	e0fffb17 	ldw	r3,-20(fp)
  290714:	10c00015 	stw	r3,0(r2)
  290718:	e0bff817 	ldw	r2,-32(fp)
  29071c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  290720:	e0bff717 	ldw	r2,-36(fp)
  290724:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  290728:	0005883a 	mov	r2,zero
  29072c:	00000306 	br	29073c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  290730:	00bffa84 	movi	r2,-22
  290734:	00000106 	br	29073c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  290738:	00bfde84 	movi	r2,-134
  }
}
  29073c:	e037883a 	mov	sp,fp
  290740:	df000017 	ldw	fp,0(sp)
  290744:	dec00104 	addi	sp,sp,4
  290748:	f800283a 	ret

0029074c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  29074c:	defffe04 	addi	sp,sp,-8
  290750:	df000115 	stw	fp,4(sp)
  290754:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  290758:	e03fff15 	stw	zero,-4(fp)
  29075c:	00000506 	br	290774 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  290760:	e0bfff17 	ldw	r2,-4(fp)
  290764:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  290768:	e0bfff17 	ldw	r2,-4(fp)
  29076c:	10800804 	addi	r2,r2,32
  290770:	e0bfff15 	stw	r2,-4(fp)
  290774:	e0bfff17 	ldw	r2,-4(fp)
  290778:	10820030 	cmpltui	r2,r2,2048
  29077c:	103ff81e 	bne	r2,zero,290760 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  290780:	0001883a 	nop
  290784:	e037883a 	mov	sp,fp
  290788:	df000017 	ldw	fp,0(sp)
  29078c:	dec00104 	addi	sp,sp,4
  290790:	f800283a 	ret

00290794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  290794:	defffe04 	addi	sp,sp,-8
  290798:	dfc00115 	stw	ra,4(sp)
  29079c:	df000015 	stw	fp,0(sp)
  2907a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2907a4:	d0a00c17 	ldw	r2,-32720(gp)
  2907a8:	10000326 	beq	r2,zero,2907b8 <alt_get_errno+0x24>
  2907ac:	d0a00c17 	ldw	r2,-32720(gp)
  2907b0:	103ee83a 	callr	r2
  2907b4:	00000106 	br	2907bc <alt_get_errno+0x28>
  2907b8:	d0a70104 	addi	r2,gp,-25596
}
  2907bc:	e037883a 	mov	sp,fp
  2907c0:	dfc00117 	ldw	ra,4(sp)
  2907c4:	df000017 	ldw	fp,0(sp)
  2907c8:	dec00204 	addi	sp,sp,8
  2907cc:	f800283a 	ret

002907d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  2907d0:	defffa04 	addi	sp,sp,-24
  2907d4:	dfc00515 	stw	ra,20(sp)
  2907d8:	df000415 	stw	fp,16(sp)
  2907dc:	df000404 	addi	fp,sp,16
  2907e0:	e13ffe15 	stw	r4,-8(fp)
  2907e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  2907e8:	e0bffe17 	ldw	r2,-8(fp)
  2907ec:	10000326 	beq	r2,zero,2907fc <alt_dev_llist_insert+0x2c>
  2907f0:	e0bffe17 	ldw	r2,-8(fp)
  2907f4:	10800217 	ldw	r2,8(r2)
  2907f8:	1000061e 	bne	r2,zero,290814 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  2907fc:	02907940 	call	290794 <alt_get_errno>
  290800:	1007883a 	mov	r3,r2
  290804:	00800584 	movi	r2,22
  290808:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  29080c:	00bffa84 	movi	r2,-22
  290810:	00001306 	br	290860 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  290814:	e0bffe17 	ldw	r2,-8(fp)
  290818:	e0ffff17 	ldw	r3,-4(fp)
  29081c:	e0fffc15 	stw	r3,-16(fp)
  290820:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  290824:	e0bffd17 	ldw	r2,-12(fp)
  290828:	e0fffc17 	ldw	r3,-16(fp)
  29082c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  290830:	e0bffc17 	ldw	r2,-16(fp)
  290834:	10c00017 	ldw	r3,0(r2)
  290838:	e0bffd17 	ldw	r2,-12(fp)
  29083c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  290840:	e0bffc17 	ldw	r2,-16(fp)
  290844:	10800017 	ldw	r2,0(r2)
  290848:	e0fffd17 	ldw	r3,-12(fp)
  29084c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  290850:	e0bffc17 	ldw	r2,-16(fp)
  290854:	e0fffd17 	ldw	r3,-12(fp)
  290858:	10c00015 	stw	r3,0(r2)

  return 0;  
  29085c:	0005883a 	mov	r2,zero
}
  290860:	e037883a 	mov	sp,fp
  290864:	dfc00117 	ldw	ra,4(sp)
  290868:	df000017 	ldw	fp,0(sp)
  29086c:	dec00204 	addi	sp,sp,8
  290870:	f800283a 	ret

00290874 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  290874:	defffd04 	addi	sp,sp,-12
  290878:	dfc00215 	stw	ra,8(sp)
  29087c:	df000115 	stw	fp,4(sp)
  290880:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  290884:	00800a74 	movhi	r2,41
  290888:	1085cf04 	addi	r2,r2,5948
  29088c:	e0bfff15 	stw	r2,-4(fp)
  290890:	00000606 	br	2908ac <_do_ctors+0x38>
        (*ctor) (); 
  290894:	e0bfff17 	ldw	r2,-4(fp)
  290898:	10800017 	ldw	r2,0(r2)
  29089c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  2908a0:	e0bfff17 	ldw	r2,-4(fp)
  2908a4:	10bfff04 	addi	r2,r2,-4
  2908a8:	e0bfff15 	stw	r2,-4(fp)
  2908ac:	e0ffff17 	ldw	r3,-4(fp)
  2908b0:	00800a74 	movhi	r2,41
  2908b4:	1085d004 	addi	r2,r2,5952
  2908b8:	18bff62e 	bgeu	r3,r2,290894 <_do_ctors+0x20>
        (*ctor) (); 
}
  2908bc:	0001883a 	nop
  2908c0:	e037883a 	mov	sp,fp
  2908c4:	dfc00117 	ldw	ra,4(sp)
  2908c8:	df000017 	ldw	fp,0(sp)
  2908cc:	dec00204 	addi	sp,sp,8
  2908d0:	f800283a 	ret

002908d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  2908d4:	defffd04 	addi	sp,sp,-12
  2908d8:	dfc00215 	stw	ra,8(sp)
  2908dc:	df000115 	stw	fp,4(sp)
  2908e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  2908e4:	00800a74 	movhi	r2,41
  2908e8:	1085cf04 	addi	r2,r2,5948
  2908ec:	e0bfff15 	stw	r2,-4(fp)
  2908f0:	00000606 	br	29090c <_do_dtors+0x38>
        (*dtor) (); 
  2908f4:	e0bfff17 	ldw	r2,-4(fp)
  2908f8:	10800017 	ldw	r2,0(r2)
  2908fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  290900:	e0bfff17 	ldw	r2,-4(fp)
  290904:	10bfff04 	addi	r2,r2,-4
  290908:	e0bfff15 	stw	r2,-4(fp)
  29090c:	e0ffff17 	ldw	r3,-4(fp)
  290910:	00800a74 	movhi	r2,41
  290914:	1085d004 	addi	r2,r2,5952
  290918:	18bff62e 	bgeu	r3,r2,2908f4 <_do_dtors+0x20>
        (*dtor) (); 
}
  29091c:	0001883a 	nop
  290920:	e037883a 	mov	sp,fp
  290924:	dfc00117 	ldw	ra,4(sp)
  290928:	df000017 	ldw	fp,0(sp)
  29092c:	dec00204 	addi	sp,sp,8
  290930:	f800283a 	ret

00290934 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  290934:	defffa04 	addi	sp,sp,-24
  290938:	dfc00515 	stw	ra,20(sp)
  29093c:	df000415 	stw	fp,16(sp)
  290940:	df000404 	addi	fp,sp,16
  290944:	e13ffe15 	stw	r4,-8(fp)
  290948:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  29094c:	e0bfff17 	ldw	r2,-4(fp)
  290950:	10800017 	ldw	r2,0(r2)
  290954:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  290958:	e13ffe17 	ldw	r4,-8(fp)
  29095c:	0280c500 	call	280c50 <strlen>
  290960:	10800044 	addi	r2,r2,1
  290964:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  290968:	00000d06 	br	2909a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  29096c:	e0bffc17 	ldw	r2,-16(fp)
  290970:	10800217 	ldw	r2,8(r2)
  290974:	e0fffd17 	ldw	r3,-12(fp)
  290978:	180d883a 	mov	r6,r3
  29097c:	e17ffe17 	ldw	r5,-8(fp)
  290980:	1009883a 	mov	r4,r2
  290984:	02913f80 	call	2913f8 <memcmp>
  290988:	1000021e 	bne	r2,zero,290994 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  29098c:	e0bffc17 	ldw	r2,-16(fp)
  290990:	00000706 	br	2909b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  290994:	e0bffc17 	ldw	r2,-16(fp)
  290998:	10800017 	ldw	r2,0(r2)
  29099c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  2909a0:	e0fffc17 	ldw	r3,-16(fp)
  2909a4:	e0bfff17 	ldw	r2,-4(fp)
  2909a8:	18bff01e 	bne	r3,r2,29096c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  2909ac:	0005883a 	mov	r2,zero
}
  2909b0:	e037883a 	mov	sp,fp
  2909b4:	dfc00117 	ldw	ra,4(sp)
  2909b8:	df000017 	ldw	fp,0(sp)
  2909bc:	dec00204 	addi	sp,sp,8
  2909c0:	f800283a 	ret

002909c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  2909c4:	defffe04 	addi	sp,sp,-8
  2909c8:	dfc00115 	stw	ra,4(sp)
  2909cc:	df000015 	stw	fp,0(sp)
  2909d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  2909d4:	01440004 	movi	r5,4096
  2909d8:	0009883a 	mov	r4,zero
  2909dc:	02912800 	call	291280 <alt_icache_flush>
#endif
}
  2909e0:	0001883a 	nop
  2909e4:	e037883a 	mov	sp,fp
  2909e8:	dfc00117 	ldw	ra,4(sp)
  2909ec:	df000017 	ldw	fp,0(sp)
  2909f0:	dec00204 	addi	sp,sp,8
  2909f4:	f800283a 	ret

002909f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  2909f8:	defff904 	addi	sp,sp,-28
  2909fc:	dfc00615 	stw	ra,24(sp)
  290a00:	df000515 	stw	fp,20(sp)
  290a04:	df000504 	addi	fp,sp,20
  290a08:	e13ffc15 	stw	r4,-16(fp)
  290a0c:	e17ffd15 	stw	r5,-12(fp)
  290a10:	e1bffe15 	stw	r6,-8(fp)
  290a14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  290a18:	e1bfff17 	ldw	r6,-4(fp)
  290a1c:	e17ffe17 	ldw	r5,-8(fp)
  290a20:	e13ffd17 	ldw	r4,-12(fp)
  290a24:	0290db80 	call	290db8 <open>
  290a28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  290a2c:	e0bffb17 	ldw	r2,-20(fp)
  290a30:	10001c16 	blt	r2,zero,290aa4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  290a34:	00800a74 	movhi	r2,41
  290a38:	10890204 	addi	r2,r2,9224
  290a3c:	e0fffb17 	ldw	r3,-20(fp)
  290a40:	18c00324 	muli	r3,r3,12
  290a44:	10c5883a 	add	r2,r2,r3
  290a48:	10c00017 	ldw	r3,0(r2)
  290a4c:	e0bffc17 	ldw	r2,-16(fp)
  290a50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  290a54:	00800a74 	movhi	r2,41
  290a58:	10890204 	addi	r2,r2,9224
  290a5c:	e0fffb17 	ldw	r3,-20(fp)
  290a60:	18c00324 	muli	r3,r3,12
  290a64:	10c5883a 	add	r2,r2,r3
  290a68:	10800104 	addi	r2,r2,4
  290a6c:	10c00017 	ldw	r3,0(r2)
  290a70:	e0bffc17 	ldw	r2,-16(fp)
  290a74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  290a78:	00800a74 	movhi	r2,41
  290a7c:	10890204 	addi	r2,r2,9224
  290a80:	e0fffb17 	ldw	r3,-20(fp)
  290a84:	18c00324 	muli	r3,r3,12
  290a88:	10c5883a 	add	r2,r2,r3
  290a8c:	10800204 	addi	r2,r2,8
  290a90:	10c00017 	ldw	r3,0(r2)
  290a94:	e0bffc17 	ldw	r2,-16(fp)
  290a98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  290a9c:	e13ffb17 	ldw	r4,-20(fp)
  290aa0:	028d9780 	call	28d978 <alt_release_fd>
  }
} 
  290aa4:	0001883a 	nop
  290aa8:	e037883a 	mov	sp,fp
  290aac:	dfc00117 	ldw	ra,4(sp)
  290ab0:	df000017 	ldw	fp,0(sp)
  290ab4:	dec00204 	addi	sp,sp,8
  290ab8:	f800283a 	ret

00290abc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  290abc:	defffb04 	addi	sp,sp,-20
  290ac0:	dfc00415 	stw	ra,16(sp)
  290ac4:	df000315 	stw	fp,12(sp)
  290ac8:	df000304 	addi	fp,sp,12
  290acc:	e13ffd15 	stw	r4,-12(fp)
  290ad0:	e17ffe15 	stw	r5,-8(fp)
  290ad4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  290ad8:	01c07fc4 	movi	r7,511
  290adc:	01800044 	movi	r6,1
  290ae0:	e17ffd17 	ldw	r5,-12(fp)
  290ae4:	01000a74 	movhi	r4,41
  290ae8:	21090504 	addi	r4,r4,9236
  290aec:	02909f80 	call	2909f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  290af0:	01c07fc4 	movi	r7,511
  290af4:	000d883a 	mov	r6,zero
  290af8:	e17ffe17 	ldw	r5,-8(fp)
  290afc:	01000a74 	movhi	r4,41
  290b00:	21090204 	addi	r4,r4,9224
  290b04:	02909f80 	call	2909f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  290b08:	01c07fc4 	movi	r7,511
  290b0c:	01800044 	movi	r6,1
  290b10:	e17fff17 	ldw	r5,-4(fp)
  290b14:	01000a74 	movhi	r4,41
  290b18:	21090804 	addi	r4,r4,9248
  290b1c:	02909f80 	call	2909f8 <alt_open_fd>
}  
  290b20:	0001883a 	nop
  290b24:	e037883a 	mov	sp,fp
  290b28:	dfc00117 	ldw	ra,4(sp)
  290b2c:	df000017 	ldw	fp,0(sp)
  290b30:	dec00204 	addi	sp,sp,8
  290b34:	f800283a 	ret

00290b38 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  290b38:	defff004 	addi	sp,sp,-64
  290b3c:	df000f15 	stw	fp,60(sp)
  290b40:	df000f04 	addi	fp,sp,60
  290b44:	e13ffd15 	stw	r4,-12(fp)
  290b48:	e17ffe15 	stw	r5,-8(fp)
  290b4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  290b50:	00bffa84 	movi	r2,-22
  290b54:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  290b58:	e0bffd17 	ldw	r2,-12(fp)
  290b5c:	10800828 	cmpgeui	r2,r2,32
  290b60:	1000501e 	bne	r2,zero,290ca4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  290b64:	0005303a 	rdctl	r2,status
  290b68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  290b6c:	e0fff617 	ldw	r3,-40(fp)
  290b70:	00bfff84 	movi	r2,-2
  290b74:	1884703a 	and	r2,r3,r2
  290b78:	1001703a 	wrctl	status,r2
  
  return context;
  290b7c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  290b80:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  290b84:	00800a74 	movhi	r2,41
  290b88:	1095e604 	addi	r2,r2,22424
  290b8c:	e0fffd17 	ldw	r3,-12(fp)
  290b90:	180690fa 	slli	r3,r3,3
  290b94:	10c5883a 	add	r2,r2,r3
  290b98:	e0ffff17 	ldw	r3,-4(fp)
  290b9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  290ba0:	00800a74 	movhi	r2,41
  290ba4:	1095e604 	addi	r2,r2,22424
  290ba8:	e0fffd17 	ldw	r3,-12(fp)
  290bac:	180690fa 	slli	r3,r3,3
  290bb0:	10c5883a 	add	r2,r2,r3
  290bb4:	10800104 	addi	r2,r2,4
  290bb8:	e0fffe17 	ldw	r3,-8(fp)
  290bbc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  290bc0:	e0bfff17 	ldw	r2,-4(fp)
  290bc4:	10001926 	beq	r2,zero,290c2c <alt_irq_register+0xf4>
  290bc8:	e0bffd17 	ldw	r2,-12(fp)
  290bcc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  290bd0:	0005303a 	rdctl	r2,status
  290bd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  290bd8:	e0fff717 	ldw	r3,-36(fp)
  290bdc:	00bfff84 	movi	r2,-2
  290be0:	1884703a 	and	r2,r3,r2
  290be4:	1001703a 	wrctl	status,r2
  
  return context;
  290be8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  290bec:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  290bf0:	00c00044 	movi	r3,1
  290bf4:	e0bff217 	ldw	r2,-56(fp)
  290bf8:	1884983a 	sll	r2,r3,r2
  290bfc:	1007883a 	mov	r3,r2
  290c00:	d0a70517 	ldw	r2,-25580(gp)
  290c04:	1884b03a 	or	r2,r3,r2
  290c08:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  290c0c:	d0a70517 	ldw	r2,-25580(gp)
  290c10:	100170fa 	wrctl	ienable,r2
  290c14:	e0bff817 	ldw	r2,-32(fp)
  290c18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  290c1c:	e0bff917 	ldw	r2,-28(fp)
  290c20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  290c24:	0005883a 	mov	r2,zero
  290c28:	00001906 	br	290c90 <alt_irq_register+0x158>
  290c2c:	e0bffd17 	ldw	r2,-12(fp)
  290c30:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  290c34:	0005303a 	rdctl	r2,status
  290c38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  290c3c:	e0fffa17 	ldw	r3,-24(fp)
  290c40:	00bfff84 	movi	r2,-2
  290c44:	1884703a 	and	r2,r3,r2
  290c48:	1001703a 	wrctl	status,r2
  
  return context;
  290c4c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  290c50:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  290c54:	00c00044 	movi	r3,1
  290c58:	e0bff417 	ldw	r2,-48(fp)
  290c5c:	1884983a 	sll	r2,r3,r2
  290c60:	0084303a 	nor	r2,zero,r2
  290c64:	1007883a 	mov	r3,r2
  290c68:	d0a70517 	ldw	r2,-25580(gp)
  290c6c:	1884703a 	and	r2,r3,r2
  290c70:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  290c74:	d0a70517 	ldw	r2,-25580(gp)
  290c78:	100170fa 	wrctl	ienable,r2
  290c7c:	e0bffb17 	ldw	r2,-20(fp)
  290c80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  290c84:	e0bffc17 	ldw	r2,-16(fp)
  290c88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  290c8c:	0005883a 	mov	r2,zero
  290c90:	e0bff115 	stw	r2,-60(fp)
  290c94:	e0bff317 	ldw	r2,-52(fp)
  290c98:	e0bff515 	stw	r2,-44(fp)
  290c9c:	e0bff517 	ldw	r2,-44(fp)
  290ca0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  290ca4:	e0bff117 	ldw	r2,-60(fp)
}
  290ca8:	e037883a 	mov	sp,fp
  290cac:	df000017 	ldw	fp,0(sp)
  290cb0:	dec00104 	addi	sp,sp,4
  290cb4:	f800283a 	ret

00290cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  290cb8:	defffe04 	addi	sp,sp,-8
  290cbc:	dfc00115 	stw	ra,4(sp)
  290cc0:	df000015 	stw	fp,0(sp)
  290cc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  290cc8:	d0a00c17 	ldw	r2,-32720(gp)
  290ccc:	10000326 	beq	r2,zero,290cdc <alt_get_errno+0x24>
  290cd0:	d0a00c17 	ldw	r2,-32720(gp)
  290cd4:	103ee83a 	callr	r2
  290cd8:	00000106 	br	290ce0 <alt_get_errno+0x28>
  290cdc:	d0a70104 	addi	r2,gp,-25596
}
  290ce0:	e037883a 	mov	sp,fp
  290ce4:	dfc00117 	ldw	ra,4(sp)
  290ce8:	df000017 	ldw	fp,0(sp)
  290cec:	dec00204 	addi	sp,sp,8
  290cf0:	f800283a 	ret

00290cf4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  290cf4:	defffd04 	addi	sp,sp,-12
  290cf8:	df000215 	stw	fp,8(sp)
  290cfc:	df000204 	addi	fp,sp,8
  290d00:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  290d04:	e0bfff17 	ldw	r2,-4(fp)
  290d08:	10800217 	ldw	r2,8(r2)
  290d0c:	10d00034 	orhi	r3,r2,16384
  290d10:	e0bfff17 	ldw	r2,-4(fp)
  290d14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  290d18:	e03ffe15 	stw	zero,-8(fp)
  290d1c:	00001d06 	br	290d94 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  290d20:	00800a74 	movhi	r2,41
  290d24:	10890204 	addi	r2,r2,9224
  290d28:	e0fffe17 	ldw	r3,-8(fp)
  290d2c:	18c00324 	muli	r3,r3,12
  290d30:	10c5883a 	add	r2,r2,r3
  290d34:	10c00017 	ldw	r3,0(r2)
  290d38:	e0bfff17 	ldw	r2,-4(fp)
  290d3c:	10800017 	ldw	r2,0(r2)
  290d40:	1880111e 	bne	r3,r2,290d88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  290d44:	00800a74 	movhi	r2,41
  290d48:	10890204 	addi	r2,r2,9224
  290d4c:	e0fffe17 	ldw	r3,-8(fp)
  290d50:	18c00324 	muli	r3,r3,12
  290d54:	10c5883a 	add	r2,r2,r3
  290d58:	10800204 	addi	r2,r2,8
  290d5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  290d60:	1000090e 	bge	r2,zero,290d88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  290d64:	e0bffe17 	ldw	r2,-8(fp)
  290d68:	10c00324 	muli	r3,r2,12
  290d6c:	00800a74 	movhi	r2,41
  290d70:	10890204 	addi	r2,r2,9224
  290d74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  290d78:	e0bfff17 	ldw	r2,-4(fp)
  290d7c:	18800226 	beq	r3,r2,290d88 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  290d80:	00bffcc4 	movi	r2,-13
  290d84:	00000806 	br	290da8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  290d88:	e0bffe17 	ldw	r2,-8(fp)
  290d8c:	10800044 	addi	r2,r2,1
  290d90:	e0bffe15 	stw	r2,-8(fp)
  290d94:	d0a00b17 	ldw	r2,-32724(gp)
  290d98:	1007883a 	mov	r3,r2
  290d9c:	e0bffe17 	ldw	r2,-8(fp)
  290da0:	18bfdf2e 	bgeu	r3,r2,290d20 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  290da4:	0005883a 	mov	r2,zero
}
  290da8:	e037883a 	mov	sp,fp
  290dac:	df000017 	ldw	fp,0(sp)
  290db0:	dec00104 	addi	sp,sp,4
  290db4:	f800283a 	ret

00290db8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  290db8:	defff604 	addi	sp,sp,-40
  290dbc:	dfc00915 	stw	ra,36(sp)
  290dc0:	df000815 	stw	fp,32(sp)
  290dc4:	df000804 	addi	fp,sp,32
  290dc8:	e13ffd15 	stw	r4,-12(fp)
  290dcc:	e17ffe15 	stw	r5,-8(fp)
  290dd0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  290dd4:	00bfffc4 	movi	r2,-1
  290dd8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  290ddc:	00bffb44 	movi	r2,-19
  290de0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  290de4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  290de8:	d1600904 	addi	r5,gp,-32732
  290dec:	e13ffd17 	ldw	r4,-12(fp)
  290df0:	02909340 	call	290934 <alt_find_dev>
  290df4:	e0bff815 	stw	r2,-32(fp)
  290df8:	e0bff817 	ldw	r2,-32(fp)
  290dfc:	1000051e 	bne	r2,zero,290e14 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  290e00:	e13ffd17 	ldw	r4,-12(fp)
  290e04:	02910d40 	call	2910d4 <alt_find_file>
  290e08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  290e0c:	00800044 	movi	r2,1
  290e10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  290e14:	e0bff817 	ldw	r2,-32(fp)
  290e18:	10002926 	beq	r2,zero,290ec0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  290e1c:	e13ff817 	ldw	r4,-32(fp)
  290e20:	02911dc0 	call	2911dc <alt_get_fd>
  290e24:	e0bff915 	stw	r2,-28(fp)
  290e28:	e0bff917 	ldw	r2,-28(fp)
  290e2c:	1000030e 	bge	r2,zero,290e3c <open+0x84>
    {
      status = index;
  290e30:	e0bff917 	ldw	r2,-28(fp)
  290e34:	e0bffa15 	stw	r2,-24(fp)
  290e38:	00002306 	br	290ec8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  290e3c:	e0bff917 	ldw	r2,-28(fp)
  290e40:	10c00324 	muli	r3,r2,12
  290e44:	00800a74 	movhi	r2,41
  290e48:	10890204 	addi	r2,r2,9224
  290e4c:	1885883a 	add	r2,r3,r2
  290e50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  290e54:	e0fffe17 	ldw	r3,-8(fp)
  290e58:	00900034 	movhi	r2,16384
  290e5c:	10bfffc4 	addi	r2,r2,-1
  290e60:	1886703a 	and	r3,r3,r2
  290e64:	e0bffc17 	ldw	r2,-16(fp)
  290e68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  290e6c:	e0bffb17 	ldw	r2,-20(fp)
  290e70:	1000051e 	bne	r2,zero,290e88 <open+0xd0>
  290e74:	e13ffc17 	ldw	r4,-16(fp)
  290e78:	0290cf40 	call	290cf4 <alt_file_locked>
  290e7c:	e0bffa15 	stw	r2,-24(fp)
  290e80:	e0bffa17 	ldw	r2,-24(fp)
  290e84:	10001016 	blt	r2,zero,290ec8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  290e88:	e0bff817 	ldw	r2,-32(fp)
  290e8c:	10800317 	ldw	r2,12(r2)
  290e90:	10000826 	beq	r2,zero,290eb4 <open+0xfc>
  290e94:	e0bff817 	ldw	r2,-32(fp)
  290e98:	10800317 	ldw	r2,12(r2)
  290e9c:	e1ffff17 	ldw	r7,-4(fp)
  290ea0:	e1bffe17 	ldw	r6,-8(fp)
  290ea4:	e17ffd17 	ldw	r5,-12(fp)
  290ea8:	e13ffc17 	ldw	r4,-16(fp)
  290eac:	103ee83a 	callr	r2
  290eb0:	00000106 	br	290eb8 <open+0x100>
  290eb4:	0005883a 	mov	r2,zero
  290eb8:	e0bffa15 	stw	r2,-24(fp)
  290ebc:	00000206 	br	290ec8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  290ec0:	00bffb44 	movi	r2,-19
  290ec4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  290ec8:	e0bffa17 	ldw	r2,-24(fp)
  290ecc:	1000090e 	bge	r2,zero,290ef4 <open+0x13c>
  {
    alt_release_fd (index);  
  290ed0:	e13ff917 	ldw	r4,-28(fp)
  290ed4:	028d9780 	call	28d978 <alt_release_fd>
    ALT_ERRNO = -status;
  290ed8:	0290cb80 	call	290cb8 <alt_get_errno>
  290edc:	1007883a 	mov	r3,r2
  290ee0:	e0bffa17 	ldw	r2,-24(fp)
  290ee4:	0085c83a 	sub	r2,zero,r2
  290ee8:	18800015 	stw	r2,0(r3)
    return -1;
  290eec:	00bfffc4 	movi	r2,-1
  290ef0:	00000106 	br	290ef8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  290ef4:	e0bff917 	ldw	r2,-28(fp)
}
  290ef8:	e037883a 	mov	sp,fp
  290efc:	dfc00117 	ldw	ra,4(sp)
  290f00:	df000017 	ldw	fp,0(sp)
  290f04:	dec00204 	addi	sp,sp,8
  290f08:	f800283a 	ret

00290f0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  290f0c:	defffa04 	addi	sp,sp,-24
  290f10:	df000515 	stw	fp,20(sp)
  290f14:	df000504 	addi	fp,sp,20
  290f18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  290f1c:	0005303a 	rdctl	r2,status
  290f20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  290f24:	e0fffc17 	ldw	r3,-16(fp)
  290f28:	00bfff84 	movi	r2,-2
  290f2c:	1884703a 	and	r2,r3,r2
  290f30:	1001703a 	wrctl	status,r2
  
  return context;
  290f34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  290f38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  290f3c:	e0bfff17 	ldw	r2,-4(fp)
  290f40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  290f44:	e0bffd17 	ldw	r2,-12(fp)
  290f48:	10800017 	ldw	r2,0(r2)
  290f4c:	e0fffd17 	ldw	r3,-12(fp)
  290f50:	18c00117 	ldw	r3,4(r3)
  290f54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  290f58:	e0bffd17 	ldw	r2,-12(fp)
  290f5c:	10800117 	ldw	r2,4(r2)
  290f60:	e0fffd17 	ldw	r3,-12(fp)
  290f64:	18c00017 	ldw	r3,0(r3)
  290f68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  290f6c:	e0bffd17 	ldw	r2,-12(fp)
  290f70:	e0fffd17 	ldw	r3,-12(fp)
  290f74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  290f78:	e0bffd17 	ldw	r2,-12(fp)
  290f7c:	e0fffd17 	ldw	r3,-12(fp)
  290f80:	10c00015 	stw	r3,0(r2)
  290f84:	e0bffb17 	ldw	r2,-20(fp)
  290f88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  290f8c:	e0bffe17 	ldw	r2,-8(fp)
  290f90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  290f94:	0001883a 	nop
  290f98:	e037883a 	mov	sp,fp
  290f9c:	df000017 	ldw	fp,0(sp)
  290fa0:	dec00104 	addi	sp,sp,4
  290fa4:	f800283a 	ret

00290fa8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  290fa8:	defffb04 	addi	sp,sp,-20
  290fac:	dfc00415 	stw	ra,16(sp)
  290fb0:	df000315 	stw	fp,12(sp)
  290fb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  290fb8:	d0a00f17 	ldw	r2,-32708(gp)
  290fbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  290fc0:	d0a70717 	ldw	r2,-25572(gp)
  290fc4:	10800044 	addi	r2,r2,1
  290fc8:	d0a70715 	stw	r2,-25572(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  290fcc:	00002e06 	br	291088 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  290fd0:	e0bffd17 	ldw	r2,-12(fp)
  290fd4:	10800017 	ldw	r2,0(r2)
  290fd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  290fdc:	e0bffd17 	ldw	r2,-12(fp)
  290fe0:	10800403 	ldbu	r2,16(r2)
  290fe4:	10803fcc 	andi	r2,r2,255
  290fe8:	10000426 	beq	r2,zero,290ffc <alt_tick+0x54>
  290fec:	d0a70717 	ldw	r2,-25572(gp)
  290ff0:	1000021e 	bne	r2,zero,290ffc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  290ff4:	e0bffd17 	ldw	r2,-12(fp)
  290ff8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  290ffc:	e0bffd17 	ldw	r2,-12(fp)
  291000:	10800217 	ldw	r2,8(r2)
  291004:	d0e70717 	ldw	r3,-25572(gp)
  291008:	18801d36 	bltu	r3,r2,291080 <alt_tick+0xd8>
  29100c:	e0bffd17 	ldw	r2,-12(fp)
  291010:	10800403 	ldbu	r2,16(r2)
  291014:	10803fcc 	andi	r2,r2,255
  291018:	1000191e 	bne	r2,zero,291080 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  29101c:	e0bffd17 	ldw	r2,-12(fp)
  291020:	10800317 	ldw	r2,12(r2)
  291024:	e0fffd17 	ldw	r3,-12(fp)
  291028:	18c00517 	ldw	r3,20(r3)
  29102c:	1809883a 	mov	r4,r3
  291030:	103ee83a 	callr	r2
  291034:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  291038:	e0bfff17 	ldw	r2,-4(fp)
  29103c:	1000031e 	bne	r2,zero,29104c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  291040:	e13ffd17 	ldw	r4,-12(fp)
  291044:	0290f0c0 	call	290f0c <alt_alarm_stop>
  291048:	00000d06 	br	291080 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  29104c:	e0bffd17 	ldw	r2,-12(fp)
  291050:	10c00217 	ldw	r3,8(r2)
  291054:	e0bfff17 	ldw	r2,-4(fp)
  291058:	1887883a 	add	r3,r3,r2
  29105c:	e0bffd17 	ldw	r2,-12(fp)
  291060:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  291064:	e0bffd17 	ldw	r2,-12(fp)
  291068:	10c00217 	ldw	r3,8(r2)
  29106c:	d0a70717 	ldw	r2,-25572(gp)
  291070:	1880032e 	bgeu	r3,r2,291080 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  291074:	e0bffd17 	ldw	r2,-12(fp)
  291078:	00c00044 	movi	r3,1
  29107c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  291080:	e0bffe17 	ldw	r2,-8(fp)
  291084:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  291088:	e0fffd17 	ldw	r3,-12(fp)
  29108c:	d0a00f04 	addi	r2,gp,-32708
  291090:	18bfcf1e 	bne	r3,r2,290fd0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  291094:	0001883a 	nop
}
  291098:	0001883a 	nop
  29109c:	e037883a 	mov	sp,fp
  2910a0:	dfc00117 	ldw	ra,4(sp)
  2910a4:	df000017 	ldw	fp,0(sp)
  2910a8:	dec00204 	addi	sp,sp,8
  2910ac:	f800283a 	ret

002910b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  2910b0:	deffff04 	addi	sp,sp,-4
  2910b4:	df000015 	stw	fp,0(sp)
  2910b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  2910bc:	000170fa 	wrctl	ienable,zero
}
  2910c0:	0001883a 	nop
  2910c4:	e037883a 	mov	sp,fp
  2910c8:	df000017 	ldw	fp,0(sp)
  2910cc:	dec00104 	addi	sp,sp,4
  2910d0:	f800283a 	ret

002910d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  2910d4:	defffb04 	addi	sp,sp,-20
  2910d8:	dfc00415 	stw	ra,16(sp)
  2910dc:	df000315 	stw	fp,12(sp)
  2910e0:	df000304 	addi	fp,sp,12
  2910e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  2910e8:	d0a00717 	ldw	r2,-32740(gp)
  2910ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2910f0:	00003106 	br	2911b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  2910f4:	e0bffd17 	ldw	r2,-12(fp)
  2910f8:	10800217 	ldw	r2,8(r2)
  2910fc:	1009883a 	mov	r4,r2
  291100:	0280c500 	call	280c50 <strlen>
  291104:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  291108:	e0bffd17 	ldw	r2,-12(fp)
  29110c:	10c00217 	ldw	r3,8(r2)
  291110:	e0bffe17 	ldw	r2,-8(fp)
  291114:	10bfffc4 	addi	r2,r2,-1
  291118:	1885883a 	add	r2,r3,r2
  29111c:	10800003 	ldbu	r2,0(r2)
  291120:	10803fcc 	andi	r2,r2,255
  291124:	1080201c 	xori	r2,r2,128
  291128:	10bfe004 	addi	r2,r2,-128
  29112c:	10800bd8 	cmpnei	r2,r2,47
  291130:	1000031e 	bne	r2,zero,291140 <alt_find_file+0x6c>
    {
      len -= 1;
  291134:	e0bffe17 	ldw	r2,-8(fp)
  291138:	10bfffc4 	addi	r2,r2,-1
  29113c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  291140:	e0bffe17 	ldw	r2,-8(fp)
  291144:	e0ffff17 	ldw	r3,-4(fp)
  291148:	1885883a 	add	r2,r3,r2
  29114c:	10800003 	ldbu	r2,0(r2)
  291150:	10803fcc 	andi	r2,r2,255
  291154:	1080201c 	xori	r2,r2,128
  291158:	10bfe004 	addi	r2,r2,-128
  29115c:	10800be0 	cmpeqi	r2,r2,47
  291160:	1000081e 	bne	r2,zero,291184 <alt_find_file+0xb0>
  291164:	e0bffe17 	ldw	r2,-8(fp)
  291168:	e0ffff17 	ldw	r3,-4(fp)
  29116c:	1885883a 	add	r2,r3,r2
  291170:	10800003 	ldbu	r2,0(r2)
  291174:	10803fcc 	andi	r2,r2,255
  291178:	1080201c 	xori	r2,r2,128
  29117c:	10bfe004 	addi	r2,r2,-128
  291180:	10000a1e 	bne	r2,zero,2911ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  291184:	e0bffd17 	ldw	r2,-12(fp)
  291188:	10800217 	ldw	r2,8(r2)
  29118c:	e0fffe17 	ldw	r3,-8(fp)
  291190:	180d883a 	mov	r6,r3
  291194:	e17fff17 	ldw	r5,-4(fp)
  291198:	1009883a 	mov	r4,r2
  29119c:	02913f80 	call	2913f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  2911a0:	1000021e 	bne	r2,zero,2911ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  2911a4:	e0bffd17 	ldw	r2,-12(fp)
  2911a8:	00000706 	br	2911c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  2911ac:	e0bffd17 	ldw	r2,-12(fp)
  2911b0:	10800017 	ldw	r2,0(r2)
  2911b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2911b8:	e0fffd17 	ldw	r3,-12(fp)
  2911bc:	d0a00704 	addi	r2,gp,-32740
  2911c0:	18bfcc1e 	bne	r3,r2,2910f4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  2911c4:	0005883a 	mov	r2,zero
}
  2911c8:	e037883a 	mov	sp,fp
  2911cc:	dfc00117 	ldw	ra,4(sp)
  2911d0:	df000017 	ldw	fp,0(sp)
  2911d4:	dec00204 	addi	sp,sp,8
  2911d8:	f800283a 	ret

002911dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  2911dc:	defffc04 	addi	sp,sp,-16
  2911e0:	df000315 	stw	fp,12(sp)
  2911e4:	df000304 	addi	fp,sp,12
  2911e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  2911ec:	00bffa04 	movi	r2,-24
  2911f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2911f4:	e03ffd15 	stw	zero,-12(fp)
  2911f8:	00001906 	br	291260 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  2911fc:	00800a74 	movhi	r2,41
  291200:	10890204 	addi	r2,r2,9224
  291204:	e0fffd17 	ldw	r3,-12(fp)
  291208:	18c00324 	muli	r3,r3,12
  29120c:	10c5883a 	add	r2,r2,r3
  291210:	10800017 	ldw	r2,0(r2)
  291214:	10000f1e 	bne	r2,zero,291254 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  291218:	00800a74 	movhi	r2,41
  29121c:	10890204 	addi	r2,r2,9224
  291220:	e0fffd17 	ldw	r3,-12(fp)
  291224:	18c00324 	muli	r3,r3,12
  291228:	10c5883a 	add	r2,r2,r3
  29122c:	e0ffff17 	ldw	r3,-4(fp)
  291230:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  291234:	d0e00b17 	ldw	r3,-32724(gp)
  291238:	e0bffd17 	ldw	r2,-12(fp)
  29123c:	1880020e 	bge	r3,r2,291248 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  291240:	e0bffd17 	ldw	r2,-12(fp)
  291244:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
  291248:	e0bffd17 	ldw	r2,-12(fp)
  29124c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  291250:	00000606 	br	29126c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  291254:	e0bffd17 	ldw	r2,-12(fp)
  291258:	10800044 	addi	r2,r2,1
  29125c:	e0bffd15 	stw	r2,-12(fp)
  291260:	e0bffd17 	ldw	r2,-12(fp)
  291264:	10800810 	cmplti	r2,r2,32
  291268:	103fe41e 	bne	r2,zero,2911fc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  29126c:	e0bffe17 	ldw	r2,-8(fp)
}
  291270:	e037883a 	mov	sp,fp
  291274:	df000017 	ldw	fp,0(sp)
  291278:	dec00104 	addi	sp,sp,4
  29127c:	f800283a 	ret

00291280 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  291280:	defffb04 	addi	sp,sp,-20
  291284:	df000415 	stw	fp,16(sp)
  291288:	df000404 	addi	fp,sp,16
  29128c:	e13ffe15 	stw	r4,-8(fp)
  291290:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  291294:	e0bfff17 	ldw	r2,-4(fp)
  291298:	10840070 	cmpltui	r2,r2,4097
  29129c:	1000021e 	bne	r2,zero,2912a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  2912a0:	00840004 	movi	r2,4096
  2912a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  2912a8:	e0fffe17 	ldw	r3,-8(fp)
  2912ac:	e0bfff17 	ldw	r2,-4(fp)
  2912b0:	1885883a 	add	r2,r3,r2
  2912b4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  2912b8:	e0bffe17 	ldw	r2,-8(fp)
  2912bc:	e0bffc15 	stw	r2,-16(fp)
  2912c0:	00000506 	br	2912d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  2912c4:	e0bffc17 	ldw	r2,-16(fp)
  2912c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  2912cc:	e0bffc17 	ldw	r2,-16(fp)
  2912d0:	10800804 	addi	r2,r2,32
  2912d4:	e0bffc15 	stw	r2,-16(fp)
  2912d8:	e0fffc17 	ldw	r3,-16(fp)
  2912dc:	e0bffd17 	ldw	r2,-12(fp)
  2912e0:	18bff836 	bltu	r3,r2,2912c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  2912e4:	e0bffe17 	ldw	r2,-8(fp)
  2912e8:	108007cc 	andi	r2,r2,31
  2912ec:	10000226 	beq	r2,zero,2912f8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  2912f0:	e0bffc17 	ldw	r2,-16(fp)
  2912f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  2912f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  2912fc:	0001883a 	nop
  291300:	e037883a 	mov	sp,fp
  291304:	df000017 	ldw	fp,0(sp)
  291308:	dec00104 	addi	sp,sp,4
  29130c:	f800283a 	ret

00291310 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  291310:	defffe04 	addi	sp,sp,-8
  291314:	df000115 	stw	fp,4(sp)
  291318:	df000104 	addi	fp,sp,4
  29131c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  291320:	e0bfff17 	ldw	r2,-4(fp)
  291324:	10bffe84 	addi	r2,r2,-6
  291328:	10c00428 	cmpgeui	r3,r2,16
  29132c:	18001a1e 	bne	r3,zero,291398 <alt_exception_cause_generated_bad_addr+0x88>
  291330:	100690ba 	slli	r3,r2,2
  291334:	00800a74 	movhi	r2,41
  291338:	1084d204 	addi	r2,r2,4936
  29133c:	1885883a 	add	r2,r3,r2
  291340:	10800017 	ldw	r2,0(r2)
  291344:	1000683a 	jmp	r2
  291348:	00291388 	cmpgei	zero,zero,-23474
  29134c:	00291388 	cmpgei	zero,zero,-23474
  291350:	00291398 	cmpnei	zero,zero,-23474
  291354:	00291398 	cmpnei	zero,zero,-23474
  291358:	00291398 	cmpnei	zero,zero,-23474
  29135c:	00291388 	cmpgei	zero,zero,-23474
  291360:	00291390 	cmplti	zero,zero,-23474
  291364:	00291398 	cmpnei	zero,zero,-23474
  291368:	00291388 	cmpgei	zero,zero,-23474
  29136c:	00291388 	cmpgei	zero,zero,-23474
  291370:	00291398 	cmpnei	zero,zero,-23474
  291374:	00291388 	cmpgei	zero,zero,-23474
  291378:	00291390 	cmplti	zero,zero,-23474
  29137c:	00291398 	cmpnei	zero,zero,-23474
  291380:	00291398 	cmpnei	zero,zero,-23474
  291384:	00291388 	cmpgei	zero,zero,-23474
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  291388:	00800044 	movi	r2,1
  29138c:	00000306 	br	29139c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  291390:	0005883a 	mov	r2,zero
  291394:	00000106 	br	29139c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  291398:	0005883a 	mov	r2,zero
  }
}
  29139c:	e037883a 	mov	sp,fp
  2913a0:	df000017 	ldw	fp,0(sp)
  2913a4:	dec00104 	addi	sp,sp,4
  2913a8:	f800283a 	ret

002913ac <atexit>:
  2913ac:	200b883a 	mov	r5,r4
  2913b0:	000f883a 	mov	r7,zero
  2913b4:	000d883a 	mov	r6,zero
  2913b8:	0009883a 	mov	r4,zero
  2913bc:	02914741 	jmpi	291474 <__register_exitproc>

002913c0 <exit>:
  2913c0:	defffe04 	addi	sp,sp,-8
  2913c4:	000b883a 	mov	r5,zero
  2913c8:	dc000015 	stw	r16,0(sp)
  2913cc:	dfc00115 	stw	ra,4(sp)
  2913d0:	2021883a 	mov	r16,r4
  2913d4:	029158c0 	call	29158c <__call_exitprocs>
  2913d8:	00800a74 	movhi	r2,41
  2913dc:	108da804 	addi	r2,r2,13984
  2913e0:	11000017 	ldw	r4,0(r2)
  2913e4:	20800f17 	ldw	r2,60(r4)
  2913e8:	10000126 	beq	r2,zero,2913f0 <exit+0x30>
  2913ec:	103ee83a 	callr	r2
  2913f0:	8009883a 	mov	r4,r16
  2913f4:	029170c0 	call	29170c <_exit>

002913f8 <memcmp>:
  2913f8:	01c000c4 	movi	r7,3
  2913fc:	3980192e 	bgeu	r7,r6,291464 <memcmp+0x6c>
  291400:	2144b03a 	or	r2,r4,r5
  291404:	11c4703a 	and	r2,r2,r7
  291408:	10000f26 	beq	r2,zero,291448 <memcmp+0x50>
  29140c:	20800003 	ldbu	r2,0(r4)
  291410:	28c00003 	ldbu	r3,0(r5)
  291414:	10c0151e 	bne	r2,r3,29146c <memcmp+0x74>
  291418:	31bfff84 	addi	r6,r6,-2
  29141c:	01ffffc4 	movi	r7,-1
  291420:	00000406 	br	291434 <memcmp+0x3c>
  291424:	20800003 	ldbu	r2,0(r4)
  291428:	28c00003 	ldbu	r3,0(r5)
  29142c:	31bfffc4 	addi	r6,r6,-1
  291430:	10c00e1e 	bne	r2,r3,29146c <memcmp+0x74>
  291434:	21000044 	addi	r4,r4,1
  291438:	29400044 	addi	r5,r5,1
  29143c:	31fff91e 	bne	r6,r7,291424 <memcmp+0x2c>
  291440:	0005883a 	mov	r2,zero
  291444:	f800283a 	ret
  291448:	20c00017 	ldw	r3,0(r4)
  29144c:	28800017 	ldw	r2,0(r5)
  291450:	18bfee1e 	bne	r3,r2,29140c <memcmp+0x14>
  291454:	31bfff04 	addi	r6,r6,-4
  291458:	21000104 	addi	r4,r4,4
  29145c:	29400104 	addi	r5,r5,4
  291460:	39bff936 	bltu	r7,r6,291448 <memcmp+0x50>
  291464:	303fe91e 	bne	r6,zero,29140c <memcmp+0x14>
  291468:	003ff506 	br	291440 <memcmp+0x48>
  29146c:	10c5c83a 	sub	r2,r2,r3
  291470:	f800283a 	ret

00291474 <__register_exitproc>:
  291474:	defffa04 	addi	sp,sp,-24
  291478:	dc000315 	stw	r16,12(sp)
  29147c:	04000a74 	movhi	r16,41
  291480:	840da804 	addi	r16,r16,13984
  291484:	80c00017 	ldw	r3,0(r16)
  291488:	dc400415 	stw	r17,16(sp)
  29148c:	dfc00515 	stw	ra,20(sp)
  291490:	18805217 	ldw	r2,328(r3)
  291494:	2023883a 	mov	r17,r4
  291498:	10003726 	beq	r2,zero,291578 <__register_exitproc+0x104>
  29149c:	10c00117 	ldw	r3,4(r2)
  2914a0:	010007c4 	movi	r4,31
  2914a4:	20c00e16 	blt	r4,r3,2914e0 <__register_exitproc+0x6c>
  2914a8:	1a000044 	addi	r8,r3,1
  2914ac:	8800221e 	bne	r17,zero,291538 <__register_exitproc+0xc4>
  2914b0:	18c00084 	addi	r3,r3,2
  2914b4:	18c7883a 	add	r3,r3,r3
  2914b8:	18c7883a 	add	r3,r3,r3
  2914bc:	12000115 	stw	r8,4(r2)
  2914c0:	10c7883a 	add	r3,r2,r3
  2914c4:	19400015 	stw	r5,0(r3)
  2914c8:	0005883a 	mov	r2,zero
  2914cc:	dfc00517 	ldw	ra,20(sp)
  2914d0:	dc400417 	ldw	r17,16(sp)
  2914d4:	dc000317 	ldw	r16,12(sp)
  2914d8:	dec00604 	addi	sp,sp,24
  2914dc:	f800283a 	ret
  2914e0:	00800034 	movhi	r2,0
  2914e4:	10800004 	addi	r2,r2,0
  2914e8:	10002626 	beq	r2,zero,291584 <__register_exitproc+0x110>
  2914ec:	01006404 	movi	r4,400
  2914f0:	d9400015 	stw	r5,0(sp)
  2914f4:	d9800115 	stw	r6,4(sp)
  2914f8:	d9c00215 	stw	r7,8(sp)
  2914fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x280000>
  291500:	d9400017 	ldw	r5,0(sp)
  291504:	d9800117 	ldw	r6,4(sp)
  291508:	d9c00217 	ldw	r7,8(sp)
  29150c:	10001d26 	beq	r2,zero,291584 <__register_exitproc+0x110>
  291510:	81000017 	ldw	r4,0(r16)
  291514:	10000115 	stw	zero,4(r2)
  291518:	02000044 	movi	r8,1
  29151c:	22405217 	ldw	r9,328(r4)
  291520:	0007883a 	mov	r3,zero
  291524:	12400015 	stw	r9,0(r2)
  291528:	20805215 	stw	r2,328(r4)
  29152c:	10006215 	stw	zero,392(r2)
  291530:	10006315 	stw	zero,396(r2)
  291534:	883fde26 	beq	r17,zero,2914b0 <__register_exitproc+0x3c>
  291538:	18c9883a 	add	r4,r3,r3
  29153c:	2109883a 	add	r4,r4,r4
  291540:	1109883a 	add	r4,r2,r4
  291544:	21802215 	stw	r6,136(r4)
  291548:	01800044 	movi	r6,1
  29154c:	12406217 	ldw	r9,392(r2)
  291550:	30cc983a 	sll	r6,r6,r3
  291554:	4992b03a 	or	r9,r9,r6
  291558:	12406215 	stw	r9,392(r2)
  29155c:	21c04215 	stw	r7,264(r4)
  291560:	01000084 	movi	r4,2
  291564:	893fd21e 	bne	r17,r4,2914b0 <__register_exitproc+0x3c>
  291568:	11006317 	ldw	r4,396(r2)
  29156c:	218cb03a 	or	r6,r4,r6
  291570:	11806315 	stw	r6,396(r2)
  291574:	003fce06 	br	2914b0 <__register_exitproc+0x3c>
  291578:	18805304 	addi	r2,r3,332
  29157c:	18805215 	stw	r2,328(r3)
  291580:	003fc606 	br	29149c <__register_exitproc+0x28>
  291584:	00bfffc4 	movi	r2,-1
  291588:	003fd006 	br	2914cc <__register_exitproc+0x58>

0029158c <__call_exitprocs>:
  29158c:	defff504 	addi	sp,sp,-44
  291590:	df000915 	stw	fp,36(sp)
  291594:	dd400615 	stw	r21,24(sp)
  291598:	dc800315 	stw	r18,12(sp)
  29159c:	dfc00a15 	stw	ra,40(sp)
  2915a0:	ddc00815 	stw	r23,32(sp)
  2915a4:	dd800715 	stw	r22,28(sp)
  2915a8:	dd000515 	stw	r20,20(sp)
  2915ac:	dcc00415 	stw	r19,16(sp)
  2915b0:	dc400215 	stw	r17,8(sp)
  2915b4:	dc000115 	stw	r16,4(sp)
  2915b8:	d9000015 	stw	r4,0(sp)
  2915bc:	2839883a 	mov	fp,r5
  2915c0:	04800044 	movi	r18,1
  2915c4:	057fffc4 	movi	r21,-1
  2915c8:	00800a74 	movhi	r2,41
  2915cc:	108da804 	addi	r2,r2,13984
  2915d0:	12000017 	ldw	r8,0(r2)
  2915d4:	45005217 	ldw	r20,328(r8)
  2915d8:	44c05204 	addi	r19,r8,328
  2915dc:	a0001c26 	beq	r20,zero,291650 <__call_exitprocs+0xc4>
  2915e0:	a0800117 	ldw	r2,4(r20)
  2915e4:	15ffffc4 	addi	r23,r2,-1
  2915e8:	b8000d16 	blt	r23,zero,291620 <__call_exitprocs+0x94>
  2915ec:	14000044 	addi	r16,r2,1
  2915f0:	8421883a 	add	r16,r16,r16
  2915f4:	8421883a 	add	r16,r16,r16
  2915f8:	84402004 	addi	r17,r16,128
  2915fc:	a463883a 	add	r17,r20,r17
  291600:	a421883a 	add	r16,r20,r16
  291604:	e0001e26 	beq	fp,zero,291680 <__call_exitprocs+0xf4>
  291608:	80804017 	ldw	r2,256(r16)
  29160c:	e0801c26 	beq	fp,r2,291680 <__call_exitprocs+0xf4>
  291610:	bdffffc4 	addi	r23,r23,-1
  291614:	843fff04 	addi	r16,r16,-4
  291618:	8c7fff04 	addi	r17,r17,-4
  29161c:	bd7ff91e 	bne	r23,r21,291604 <__call_exitprocs+0x78>
  291620:	00800034 	movhi	r2,0
  291624:	10800004 	addi	r2,r2,0
  291628:	10000926 	beq	r2,zero,291650 <__call_exitprocs+0xc4>
  29162c:	a0800117 	ldw	r2,4(r20)
  291630:	1000301e 	bne	r2,zero,2916f4 <__call_exitprocs+0x168>
  291634:	a0800017 	ldw	r2,0(r20)
  291638:	10003226 	beq	r2,zero,291704 <__call_exitprocs+0x178>
  29163c:	a009883a 	mov	r4,r20
  291640:	98800015 	stw	r2,0(r19)
  291644:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x280000>
  291648:	9d000017 	ldw	r20,0(r19)
  29164c:	a03fe41e 	bne	r20,zero,2915e0 <__call_exitprocs+0x54>
  291650:	dfc00a17 	ldw	ra,40(sp)
  291654:	df000917 	ldw	fp,36(sp)
  291658:	ddc00817 	ldw	r23,32(sp)
  29165c:	dd800717 	ldw	r22,28(sp)
  291660:	dd400617 	ldw	r21,24(sp)
  291664:	dd000517 	ldw	r20,20(sp)
  291668:	dcc00417 	ldw	r19,16(sp)
  29166c:	dc800317 	ldw	r18,12(sp)
  291670:	dc400217 	ldw	r17,8(sp)
  291674:	dc000117 	ldw	r16,4(sp)
  291678:	dec00b04 	addi	sp,sp,44
  29167c:	f800283a 	ret
  291680:	a0800117 	ldw	r2,4(r20)
  291684:	80c00017 	ldw	r3,0(r16)
  291688:	10bfffc4 	addi	r2,r2,-1
  29168c:	15c01426 	beq	r2,r23,2916e0 <__call_exitprocs+0x154>
  291690:	80000015 	stw	zero,0(r16)
  291694:	183fde26 	beq	r3,zero,291610 <__call_exitprocs+0x84>
  291698:	95c8983a 	sll	r4,r18,r23
  29169c:	a0806217 	ldw	r2,392(r20)
  2916a0:	a5800117 	ldw	r22,4(r20)
  2916a4:	2084703a 	and	r2,r4,r2
  2916a8:	10000b26 	beq	r2,zero,2916d8 <__call_exitprocs+0x14c>
  2916ac:	a0806317 	ldw	r2,396(r20)
  2916b0:	2088703a 	and	r4,r4,r2
  2916b4:	20000c1e 	bne	r4,zero,2916e8 <__call_exitprocs+0x15c>
  2916b8:	89400017 	ldw	r5,0(r17)
  2916bc:	d9000017 	ldw	r4,0(sp)
  2916c0:	183ee83a 	callr	r3
  2916c4:	a0800117 	ldw	r2,4(r20)
  2916c8:	15bfbf1e 	bne	r2,r22,2915c8 <__call_exitprocs+0x3c>
  2916cc:	98800017 	ldw	r2,0(r19)
  2916d0:	153fcf26 	beq	r2,r20,291610 <__call_exitprocs+0x84>
  2916d4:	003fbc06 	br	2915c8 <__call_exitprocs+0x3c>
  2916d8:	183ee83a 	callr	r3
  2916dc:	003ff906 	br	2916c4 <__call_exitprocs+0x138>
  2916e0:	a5c00115 	stw	r23,4(r20)
  2916e4:	003feb06 	br	291694 <__call_exitprocs+0x108>
  2916e8:	89000017 	ldw	r4,0(r17)
  2916ec:	183ee83a 	callr	r3
  2916f0:	003ff406 	br	2916c4 <__call_exitprocs+0x138>
  2916f4:	a0800017 	ldw	r2,0(r20)
  2916f8:	a027883a 	mov	r19,r20
  2916fc:	1029883a 	mov	r20,r2
  291700:	003fb606 	br	2915dc <__call_exitprocs+0x50>
  291704:	0005883a 	mov	r2,zero
  291708:	003ffb06 	br	2916f8 <__call_exitprocs+0x16c>

0029170c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  29170c:	defffd04 	addi	sp,sp,-12
  291710:	df000215 	stw	fp,8(sp)
  291714:	df000204 	addi	fp,sp,8
  291718:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  29171c:	0001883a 	nop
  291720:	e0bfff17 	ldw	r2,-4(fp)
  291724:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  291728:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  29172c:	10000226 	beq	r2,zero,291738 <_exit+0x2c>
    ALT_SIM_FAIL();
  291730:	002af070 	cmpltui	zero,zero,43969
  291734:	00000106 	br	29173c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  291738:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  29173c:	003fff06 	br	29173c <_exit+0x30>
