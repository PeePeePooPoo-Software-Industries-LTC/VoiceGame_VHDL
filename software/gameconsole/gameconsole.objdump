
gameconsole.elf:     file format elf32-littlenios2
gameconsole.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01080248

Program Header:
    LOAD off    0x00001000 vaddr 0x01080000 paddr 0x01080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01080020 paddr 0x01080020 align 2**12
         filesz 0x000024ec memsz 0x000024ec flags r-x
    LOAD off    0x0000350c vaddr 0x0108250c paddr 0x01083b94 align 2**12
         filesz 0x00001688 memsz 0x00001688 flags rw-
    LOAD off    0x0000521c vaddr 0x0108521c paddr 0x0108521c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  01080020  01080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000227c  01080248  01080248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  010824c4  010824c4  000034c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001688  0108250c  01083b94  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0108521c  0108521c  0000521c  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00800000  00800000  00004b94  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0108533c  0108533c  00004b94  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00004b94  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000598  00000000  00000000  00004bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007572  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028ff  00000000  00000000  0000c6c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002b07  00000000  00000000  0000efc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000a40  00000000  00000000  00011ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000019eb  00000000  00000000  00012508  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000770  00000000  00000000  00013ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00014664  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000178  00000000  00000000  00014698  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001623a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001623d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00016249  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001624a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0001624b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00016256  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00016261  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0001626c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  00016277  2**0
                  CONTENTS, READONLY
 27 .jdi          00005da1  00000000  00000000  000162ab  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005001b  00000000  00000000  0001c04c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 .entry
01080020 l    d  .exceptions	00000000 .exceptions
01080248 l    d  .text	00000000 .text
010824c4 l    d  .rodata	00000000 .rodata
0108250c l    d  .rwdata	00000000 .rwdata
0108521c l    d  .bss	00000000 .bss
00800000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0108533c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gameconsole_bsp//obj/HAL/src/crt0.o
01080290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
010803a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01080508 l     F .text	00000034 alt_dev_reg
0108250c l     O .rwdata	00001060 jtag_uart_0
0108356c l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010807e0 l     F .text	00000210 altera_avalon_jtag_uart_irq
010809f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
01081154 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
010812a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010812d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010814a8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01081768 l     F .text	0000003c alt_get_errno
010817a4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
01083744 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01085234 g     O .bss	00000004 alt_instruction_exception_handler
0108048c g     F .text	0000007c alt_main
0108523c g     O .bss	00000100 alt_irq
01083b94 g       *ABS*	00000000 __flash_rwdata_start
01081bc4 g     F .text	00000024 altera_nios2_gen2_irq_init
01080000 g     F .entry	0000001c __reset
01080020 g       *ABS*	00000000 __flash_exceptions_start
01085238 g     O .bss	00000004 errno
01085220 g     O .bss	00000004 alt_argv
0108bb68 g       *ABS*	00000000 _gp
010835c4 g     O .rwdata	00000180 alt_fd_list
01081be8 g     F .text	00000090 alt_find_dev
01082018 g     F .text	00000148 memcpy
0108156c g     F .text	0000007c alt_io_redirect
010824c4 g       *ABS*	00000000 __DTOR_END__
01081eb4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01080be8 g     F .text	0000021c altera_avalon_jtag_uart_read
01080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01081e24 g     F .text	00000090 alt_icache_flush
01083b78 g     O .rwdata	00000004 alt_max_fd
010815e8 g     F .text	00000180 alt_irq_register
01083b8c g     O .rwdata	00000004 _global_impure_ptr
0108533c g       *ABS*	00000000 __bss_end
01081abc g     F .text	00000108 alt_tick
01081a20 g     F .text	0000009c alt_alarm_stop
010802e4 g     F .text	00000040 update_screen
01085228 g     O .bss	00000004 alt_irq_active
010800fc g     F .exceptions	000000d8 alt_irq_handler
0108359c g     O .rwdata	00000028 alt_dev_null
01080294 g     F .text	00000050 set_pixel_color
01081260 g     F .text	00000048 alt_dcache_flush_all
01083b94 g       *ABS*	00000000 __ram_rwdata_end
01083b70 g     O .rwdata	00000008 alt_dev_list
0108250c g       *ABS*	00000000 __ram_rodata_end
0108533c g       *ABS*	00000000 end
0108072c g     F .text	000000b4 altera_avalon_jtag_uart_init
010801d4 g     F .exceptions	00000074 alt_instruction_exception_entry
010824c4 g       *ABS*	00000000 __CTOR_LIST__
010e1a80 g       *ABS*	00000000 __alt_stack_pointer
01080e04 g     F .text	00000224 altera_avalon_jtag_uart_write
01082310 g     F .text	00000180 __call_exitprocs
01080248 g     F .text	0000004c _start
0108522c g     O .bss	00000004 _alt_tick_rate
01085230 g     O .bss	00000004 _alt_nticks
01080574 g     F .text	00000054 alt_sys_init
010821f8 g     F .text	00000118 __register_exitproc
01080a90 g     F .text	00000068 altera_avalon_jtag_uart_close
0108250c g       *ABS*	00000000 __ram_rwdata_start
010824c4 g       *ABS*	00000000 __ram_rodata_start
010805c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01081d80 g     F .text	000000a4 alt_get_fd
01081f9c g     F .text	0000007c memcmp
01080688 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0108533c g       *ABS*	00000000 __alt_stack_base
010806d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01081c78 g     F .text	00000108 alt_find_file
01081310 g     F .text	000000a4 alt_dev_llist_insert
0108521c g       *ABS*	00000000 __bss_start
01080324 g     F .text	0000007c main
01085224 g     O .bss	00000004 alt_envp
01080628 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01083b7c g     O .rwdata	00000004 alt_errno
010824c4 g       *ABS*	00000000 __CTOR_END__
010824c4 g       *ABS*	00000000 __flash_rodata_start
010824c4 g       *ABS*	00000000 __DTOR_LIST__
0108053c g     F .text	00000038 alt_irq_init
010819bc g     F .text	00000064 alt_release_fd
01081f50 g     F .text	00000014 atexit
01083b90 g     O .rwdata	00000004 _impure_ptr
0108521c g     O .bss	00000004 alt_argc
01081414 g     F .text	00000060 _do_dtors
01080020 g       .exceptions	00000000 alt_irq_entry
01083b68 g     O .rwdata	00000008 alt_fs_list
01080020 g       *ABS*	00000000 __ram_exceptions_start
00800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
01083b94 g       *ABS*	00000000 _edata
0108533c g       *ABS*	00000000 _end
01080248 g       *ABS*	00000000 __ram_exceptions_end
01080af8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01081f64 g     F .text	00000038 exit
010e1a80 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
01082490 g     F .text	00000034 _exit
01081028 g     F .text	0000012c alt_alarm_start
01082160 g     F .text	00000098 strlen
01081868 g     F .text	00000154 open
01081474 g     F .text	00000034 alt_icache_flush_all
01083b80 g     O .rwdata	00000004 alt_priority_mask
01083b84 g     O .rwdata	00000008 alt_alarm_list
010813b4 g     F .text	00000060 _do_ctors
01081190 g     F .text	000000d0 close
01080408 g     F .text	00000084 alt_load



Disassembly of section .entry:

01080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 108000c:	00bffd16 	blt	zero,r2,1080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080010:	00404234 	movhi	at,264
    ori r1, r1, %lo(_start)
 1080014:	08409214 	ori	at,at,584
    jmp r1
 1080018:	0800683a 	jmp	at
 108001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>

Disassembly of section .exceptions:

01080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800fc0 	call	10800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000706 	br	10800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 108008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1080098:	10801d40 	call	10801d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 108009c:	1000021e 	bne	r2,zero,10800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800f8:	ef80083a 	eret

010800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800fc:	defff904 	addi	sp,sp,-28
 1080100:	dfc00615 	stw	ra,24(sp)
 1080104:	df000515 	stw	fp,20(sp)
 1080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 108010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080110:	0005313a 	rdctl	r2,ipending
 1080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080124:	00800044 	movi	r2,1
 1080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 108012c:	e0fffb17 	ldw	r3,-20(fp)
 1080130:	e0bffc17 	ldw	r2,-16(fp)
 1080134:	1884703a 	and	r2,r3,r2
 1080138:	10001526 	beq	r2,zero,1080190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 108013c:	00804234 	movhi	r2,264
 1080140:	10948f04 	addi	r2,r2,21052
 1080144:	e0fffd17 	ldw	r3,-12(fp)
 1080148:	180690fa 	slli	r3,r3,3
 108014c:	10c5883a 	add	r2,r2,r3
 1080150:	10c00017 	ldw	r3,0(r2)
 1080154:	00804234 	movhi	r2,264
 1080158:	10948f04 	addi	r2,r2,21052
 108015c:	e13ffd17 	ldw	r4,-12(fp)
 1080160:	200890fa 	slli	r4,r4,3
 1080164:	1105883a 	add	r2,r2,r4
 1080168:	10800104 	addi	r2,r2,4
 108016c:	10800017 	ldw	r2,0(r2)
 1080170:	e17ffd17 	ldw	r5,-12(fp)
 1080174:	1009883a 	mov	r4,r2
 1080178:	183ee83a 	callr	r3
#endif
        break;
 108017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080180:	0005313a 	rdctl	r2,ipending
 1080184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1080188:	e0bfff17 	ldw	r2,-4(fp)
 108018c:	00000706 	br	10801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 1080190:	e0bffc17 	ldw	r2,-16(fp)
 1080194:	1085883a 	add	r2,r2,r2
 1080198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 108019c:	e0bffd17 	ldw	r2,-12(fp)
 10801a0:	10800044 	addi	r2,r2,1
 10801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10801a8:	003fe006 	br	108012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 10801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10801b0:	e0bffb17 	ldw	r2,-20(fp)
 10801b4:	103fda1e 	bne	r2,zero,1080120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10801b8:	0001883a 	nop
}
 10801bc:	0001883a 	nop
 10801c0:	e037883a 	mov	sp,fp
 10801c4:	dfc00117 	ldw	ra,4(sp)
 10801c8:	df000017 	ldw	fp,0(sp)
 10801cc:	dec00204 	addi	sp,sp,8
 10801d0:	f800283a 	ret

010801d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10801d4:	defffb04 	addi	sp,sp,-20
 10801d8:	dfc00415 	stw	ra,16(sp)
 10801dc:	df000315 	stw	fp,12(sp)
 10801e0:	df000304 	addi	fp,sp,12
 10801e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10801e8:	000531fa 	rdctl	r2,exception
 10801ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10801f0:	e0bffd17 	ldw	r2,-12(fp)
 10801f4:	10801f0c 	andi	r2,r2,124
 10801f8:	1004d0ba 	srli	r2,r2,2
 10801fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1080200:	0005333a 	rdctl	r2,badaddr
 1080204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1080208:	d0a5b317 	ldw	r2,-26932(gp)
 108020c:	10000726 	beq	r2,zero,108022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1080210:	d0a5b317 	ldw	r2,-26932(gp)
 1080214:	e0fffd17 	ldw	r3,-12(fp)
 1080218:	e1bffe17 	ldw	r6,-8(fp)
 108021c:	e17fff17 	ldw	r5,-4(fp)
 1080220:	1809883a 	mov	r4,r3
 1080224:	103ee83a 	callr	r2
 1080228:	00000206 	br	1080234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 108022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1080230:	0005883a 	mov	r2,zero
}
 1080234:	e037883a 	mov	sp,fp
 1080238:	dfc00117 	ldw	ra,4(sp)
 108023c:	df000017 	ldw	fp,0(sp)
 1080240:	dec00204 	addi	sp,sp,8
 1080244:	f800283a 	ret

Disassembly of section .text:

01080248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1080248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 108024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1080250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1080254:	00bffd16 	blt	zero,r2,108024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1080258:	06c043b4 	movhi	sp,270
    ori sp, sp, %lo(__alt_stack_pointer)
 108025c:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
 1080260:	06804234 	movhi	gp,264
    ori gp, gp, %lo(_gp)
 1080264:	d6aeda14 	ori	gp,gp,47976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1080268:	00804234 	movhi	r2,264
    ori r2, r2, %lo(__bss_start)
 108026c:	10948714 	ori	r2,r2,21020

    movhi r3, %hi(__bss_end)
 1080270:	00c04234 	movhi	r3,264
    ori r3, r3, %lo(__bss_end)
 1080274:	18d4cf14 	ori	r3,r3,21308

    beq r2, r3, 1f
 1080278:	10c00326 	beq	r2,r3,1080288 <_start+0x40>

0:
    stw zero, (r2)
 108027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1080280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1080284:	10fffd36 	bltu	r2,r3,108027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1080288:	10804080 	call	1080408 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 108028c:	108048c0 	call	108048c <alt_main>

01080290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1080290:	003fff06 	br	1080290 <alt_after_alt_main>

01080294 <set_pixel_color>:
#define RGB(r, g, b) ((r << 16) | (g << 8) | b)

void update_screen();
void set_pixel_color(int x, int y, int color);

inline void set_pixel_color(int x, int y, int color) {
 1080294:	defffc04 	addi	sp,sp,-16
 1080298:	df000315 	stw	fp,12(sp)
 108029c:	df000304 	addi	fp,sp,12
 10802a0:	e13ffd15 	stw	r4,-12(fp)
 10802a4:	e17ffe15 	stw	r5,-8(fp)
 10802a8:	e1bfff15 	stw	r6,-4(fp)
	WRITE_SDRAM(y * VGA_HEIGHT + x, color);
 10802ac:	e0bffe17 	ldw	r2,-8(fp)
 10802b0:	10c07824 	muli	r3,r2,480
 10802b4:	00802034 	movhi	r2,128
 10802b8:	1887883a 	add	r3,r3,r2
 10802bc:	e0bffd17 	ldw	r2,-12(fp)
 10802c0:	1885883a 	add	r2,r3,r2
 10802c4:	1007883a 	mov	r3,r2
 10802c8:	e0bfff17 	ldw	r2,-4(fp)
 10802cc:	18800015 	stw	r2,0(r3)
}
 10802d0:	0001883a 	nop
 10802d4:	e037883a 	mov	sp,fp
 10802d8:	df000017 	ldw	fp,0(sp)
 10802dc:	dec00104 	addi	sp,sp,4
 10802e0:	f800283a 	ret

010802e4 <update_screen>:

inline void update_screen() {
 10802e4:	defffe04 	addi	sp,sp,-8
 10802e8:	df000115 	stw	fp,4(sp)
 10802ec:	df000104 	addi	fp,sp,4
	int position = IORD(PIO_PIXEL_POSITION_BASE, 0);
 10802f0:	00804434 	movhi	r2,272
 10802f4:	10840804 	addi	r2,r2,4128
 10802f8:	10800037 	ldwio	r2,0(r2)
 10802fc:	e0bfff15 	stw	r2,-4(fp)
//	int x = (position >> 16);
//	int y = position & 0xffff;

	IOWR(PIO_PIXEL_COLOR_BASE, 0, position);
 1080300:	00804434 	movhi	r2,272
 1080304:	10840004 	addi	r2,r2,4096
 1080308:	e0ffff17 	ldw	r3,-4(fp)
 108030c:	10c00035 	stwio	r3,0(r2)
//	IOWR(PIO_PIXEL_COLOR_BASE, 0, RGB(x, 0, 0));

//	IOWR(PIO_PIXEL_COLOR_BASE, 0, READ_SDRAM(y * VGA_HEIGHT + x));
}
 1080310:	0001883a 	nop
 1080314:	e037883a 	mov	sp,fp
 1080318:	df000017 	ldw	fp,0(sp)
 108031c:	dec00104 	addi	sp,sp,4
 1080320:	f800283a 	ret

01080324 <main>:

int main() {
 1080324:	defffc04 	addi	sp,sp,-16
 1080328:	dfc00315 	stw	ra,12(sp)
 108032c:	df000215 	stw	fp,8(sp)
 1080330:	df000204 	addi	fp,sp,8
	for (int x = 0; x < VGA_WIDTH; x++) {
 1080334:	e03ffe15 	stw	zero,-8(fp)
 1080338:	00000f06 	br	1080378 <main+0x54>
		for (int y = 0; y < VGA_HEIGHT; y++) {
 108033c:	e03fff15 	stw	zero,-4(fp)
 1080340:	00000706 	br	1080360 <main+0x3c>
//			if (x < 10) {
//				set_pixel_color(x, y, 0x00ff0000);
//			} else {
				set_pixel_color(x, y, 0x000000ff);
 1080344:	01803fc4 	movi	r6,255
 1080348:	e17fff17 	ldw	r5,-4(fp)
 108034c:	e13ffe17 	ldw	r4,-8(fp)
 1080350:	10802940 	call	1080294 <set_pixel_color>
//	IOWR(PIO_PIXEL_COLOR_BASE, 0, READ_SDRAM(y * VGA_HEIGHT + x));
}

int main() {
	for (int x = 0; x < VGA_WIDTH; x++) {
		for (int y = 0; y < VGA_HEIGHT; y++) {
 1080354:	e0bfff17 	ldw	r2,-4(fp)
 1080358:	10800044 	addi	r2,r2,1
 108035c:	e0bfff15 	stw	r2,-4(fp)
 1080360:	e0bfff17 	ldw	r2,-4(fp)
 1080364:	10807810 	cmplti	r2,r2,480
 1080368:	103ff61e 	bne	r2,zero,1080344 <main+0x20>

//	IOWR(PIO_PIXEL_COLOR_BASE, 0, READ_SDRAM(y * VGA_HEIGHT + x));
}

int main() {
	for (int x = 0; x < VGA_WIDTH; x++) {
 108036c:	e0bffe17 	ldw	r2,-8(fp)
 1080370:	10800044 	addi	r2,r2,1
 1080374:	e0bffe15 	stw	r2,-8(fp)
 1080378:	e0bffe17 	ldw	r2,-8(fp)
 108037c:	1080a010 	cmplti	r2,r2,640
 1080380:	103fee1e 	bne	r2,zero,108033c <main+0x18>
//			}
		}
	}

	while (1) {
		IOWR(PIO_PIXEL_COLOR_BASE, 0, IORD(PIO_PIXEL_POSITION_BASE, 0));
 1080384:	00804434 	movhi	r2,272
 1080388:	10840804 	addi	r2,r2,4128
 108038c:	10c00037 	ldwio	r3,0(r2)
 1080390:	00804434 	movhi	r2,272
 1080394:	10840004 	addi	r2,r2,4096
 1080398:	10c00035 	stwio	r3,0(r2)
//		update_screen();
	}
 108039c:	003ff906 	br	1080384 <main+0x60>

010803a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10803a0:	defffc04 	addi	sp,sp,-16
 10803a4:	df000315 	stw	fp,12(sp)
 10803a8:	df000304 	addi	fp,sp,12
 10803ac:	e13ffd15 	stw	r4,-12(fp)
 10803b0:	e17ffe15 	stw	r5,-8(fp)
 10803b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10803b8:	e0fffe17 	ldw	r3,-8(fp)
 10803bc:	e0bffd17 	ldw	r2,-12(fp)
 10803c0:	18800c26 	beq	r3,r2,10803f4 <alt_load_section+0x54>
  {
    while( to != end )
 10803c4:	00000806 	br	10803e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 10803c8:	e0bffe17 	ldw	r2,-8(fp)
 10803cc:	10c00104 	addi	r3,r2,4
 10803d0:	e0fffe15 	stw	r3,-8(fp)
 10803d4:	e0fffd17 	ldw	r3,-12(fp)
 10803d8:	19000104 	addi	r4,r3,4
 10803dc:	e13ffd15 	stw	r4,-12(fp)
 10803e0:	18c00017 	ldw	r3,0(r3)
 10803e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10803e8:	e0fffe17 	ldw	r3,-8(fp)
 10803ec:	e0bfff17 	ldw	r2,-4(fp)
 10803f0:	18bff51e 	bne	r3,r2,10803c8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10803f4:	0001883a 	nop
 10803f8:	e037883a 	mov	sp,fp
 10803fc:	df000017 	ldw	fp,0(sp)
 1080400:	dec00104 	addi	sp,sp,4
 1080404:	f800283a 	ret

01080408 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1080408:	defffe04 	addi	sp,sp,-8
 108040c:	dfc00115 	stw	ra,4(sp)
 1080410:	df000015 	stw	fp,0(sp)
 1080414:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1080418:	01804234 	movhi	r6,264
 108041c:	318ee504 	addi	r6,r6,15252
 1080420:	01404234 	movhi	r5,264
 1080424:	29494304 	addi	r5,r5,9484
 1080428:	01004234 	movhi	r4,264
 108042c:	210ee504 	addi	r4,r4,15252
 1080430:	10803a00 	call	10803a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1080434:	01804234 	movhi	r6,264
 1080438:	31809204 	addi	r6,r6,584
 108043c:	01404234 	movhi	r5,264
 1080440:	29400804 	addi	r5,r5,32
 1080444:	01004234 	movhi	r4,264
 1080448:	21000804 	addi	r4,r4,32
 108044c:	10803a00 	call	10803a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1080450:	01804234 	movhi	r6,264
 1080454:	31894304 	addi	r6,r6,9484
 1080458:	01404234 	movhi	r5,264
 108045c:	29493104 	addi	r5,r5,9412
 1080460:	01004234 	movhi	r4,264
 1080464:	21093104 	addi	r4,r4,9412
 1080468:	10803a00 	call	10803a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 108046c:	10812600 	call	1081260 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1080470:	10814740 	call	1081474 <alt_icache_flush_all>
}
 1080474:	0001883a 	nop
 1080478:	e037883a 	mov	sp,fp
 108047c:	dfc00117 	ldw	ra,4(sp)
 1080480:	df000017 	ldw	fp,0(sp)
 1080484:	dec00204 	addi	sp,sp,8
 1080488:	f800283a 	ret

0108048c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 108048c:	defffd04 	addi	sp,sp,-12
 1080490:	dfc00215 	stw	ra,8(sp)
 1080494:	df000115 	stw	fp,4(sp)
 1080498:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 108049c:	0009883a 	mov	r4,zero
 10804a0:	108053c0 	call	108053c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10804a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10804a8:	10805740 	call	1080574 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10804ac:	01804234 	movhi	r6,264
 10804b0:	31893104 	addi	r6,r6,9412
 10804b4:	01404234 	movhi	r5,264
 10804b8:	29493104 	addi	r5,r5,9412
 10804bc:	01004234 	movhi	r4,264
 10804c0:	21093104 	addi	r4,r4,9412
 10804c4:	108156c0 	call	108156c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10804c8:	10813b40 	call	10813b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10804cc:	01004234 	movhi	r4,264
 10804d0:	21050504 	addi	r4,r4,5140
 10804d4:	1081f500 	call	1081f50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10804d8:	d0a5ad17 	ldw	r2,-26956(gp)
 10804dc:	d0e5ae17 	ldw	r3,-26952(gp)
 10804e0:	d125af17 	ldw	r4,-26948(gp)
 10804e4:	200d883a 	mov	r6,r4
 10804e8:	180b883a 	mov	r5,r3
 10804ec:	1009883a 	mov	r4,r2
 10804f0:	10803240 	call	1080324 <main>
 10804f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10804f8:	01000044 	movi	r4,1
 10804fc:	10811900 	call	1081190 <close>
  exit (result);
 1080500:	e13fff17 	ldw	r4,-4(fp)
 1080504:	1081f640 	call	1081f64 <exit>

01080508 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1080508:	defffd04 	addi	sp,sp,-12
 108050c:	dfc00215 	stw	ra,8(sp)
 1080510:	df000115 	stw	fp,4(sp)
 1080514:	df000104 	addi	fp,sp,4
 1080518:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 108051c:	d1600204 	addi	r5,gp,-32760
 1080520:	e13fff17 	ldw	r4,-4(fp)
 1080524:	10813100 	call	1081310 <alt_dev_llist_insert>
}
 1080528:	e037883a 	mov	sp,fp
 108052c:	dfc00117 	ldw	ra,4(sp)
 1080530:	df000017 	ldw	fp,0(sp)
 1080534:	dec00204 	addi	sp,sp,8
 1080538:	f800283a 	ret

0108053c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 108053c:	defffd04 	addi	sp,sp,-12
 1080540:	dfc00215 	stw	ra,8(sp)
 1080544:	df000115 	stw	fp,4(sp)
 1080548:	df000104 	addi	fp,sp,4
 108054c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 1080550:	1081bc40 	call	1081bc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1080554:	00800044 	movi	r2,1
 1080558:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 108055c:	0001883a 	nop
 1080560:	e037883a 	mov	sp,fp
 1080564:	dfc00117 	ldw	ra,4(sp)
 1080568:	df000017 	ldw	fp,0(sp)
 108056c:	dec00204 	addi	sp,sp,8
 1080570:	f800283a 	ret

01080574 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1080574:	defffe04 	addi	sp,sp,-8
 1080578:	dfc00115 	stw	ra,4(sp)
 108057c:	df000015 	stw	fp,0(sp)
 1080580:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1080584:	01800044 	movi	r6,1
 1080588:	000b883a 	mov	r5,zero
 108058c:	01004234 	movhi	r4,264
 1080590:	21094d04 	addi	r4,r4,9524
 1080594:	108072c0 	call	108072c <altera_avalon_jtag_uart_init>
 1080598:	01004234 	movhi	r4,264
 108059c:	21094304 	addi	r4,r4,9484
 10805a0:	10805080 	call	1080508 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 10805a4:	01004234 	movhi	r4,264
 10805a8:	210d5b04 	addi	r4,r4,13676
 10805ac:	10805080 	call	1080508 <alt_dev_reg>
}
 10805b0:	0001883a 	nop
 10805b4:	e037883a 	mov	sp,fp
 10805b8:	dfc00117 	ldw	ra,4(sp)
 10805bc:	df000017 	ldw	fp,0(sp)
 10805c0:	dec00204 	addi	sp,sp,8
 10805c4:	f800283a 	ret

010805c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10805c8:	defffa04 	addi	sp,sp,-24
 10805cc:	dfc00515 	stw	ra,20(sp)
 10805d0:	df000415 	stw	fp,16(sp)
 10805d4:	df000404 	addi	fp,sp,16
 10805d8:	e13ffd15 	stw	r4,-12(fp)
 10805dc:	e17ffe15 	stw	r5,-8(fp)
 10805e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10805e4:	e0bffd17 	ldw	r2,-12(fp)
 10805e8:	10800017 	ldw	r2,0(r2)
 10805ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10805f0:	e0bffc17 	ldw	r2,-16(fp)
 10805f4:	10c00a04 	addi	r3,r2,40
 10805f8:	e0bffd17 	ldw	r2,-12(fp)
 10805fc:	10800217 	ldw	r2,8(r2)
 1080600:	100f883a 	mov	r7,r2
 1080604:	e1bfff17 	ldw	r6,-4(fp)
 1080608:	e17ffe17 	ldw	r5,-8(fp)
 108060c:	1809883a 	mov	r4,r3
 1080610:	1080be80 	call	1080be8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1080614:	e037883a 	mov	sp,fp
 1080618:	dfc00117 	ldw	ra,4(sp)
 108061c:	df000017 	ldw	fp,0(sp)
 1080620:	dec00204 	addi	sp,sp,8
 1080624:	f800283a 	ret

01080628 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1080628:	defffa04 	addi	sp,sp,-24
 108062c:	dfc00515 	stw	ra,20(sp)
 1080630:	df000415 	stw	fp,16(sp)
 1080634:	df000404 	addi	fp,sp,16
 1080638:	e13ffd15 	stw	r4,-12(fp)
 108063c:	e17ffe15 	stw	r5,-8(fp)
 1080640:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1080644:	e0bffd17 	ldw	r2,-12(fp)
 1080648:	10800017 	ldw	r2,0(r2)
 108064c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1080650:	e0bffc17 	ldw	r2,-16(fp)
 1080654:	10c00a04 	addi	r3,r2,40
 1080658:	e0bffd17 	ldw	r2,-12(fp)
 108065c:	10800217 	ldw	r2,8(r2)
 1080660:	100f883a 	mov	r7,r2
 1080664:	e1bfff17 	ldw	r6,-4(fp)
 1080668:	e17ffe17 	ldw	r5,-8(fp)
 108066c:	1809883a 	mov	r4,r3
 1080670:	1080e040 	call	1080e04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1080674:	e037883a 	mov	sp,fp
 1080678:	dfc00117 	ldw	ra,4(sp)
 108067c:	df000017 	ldw	fp,0(sp)
 1080680:	dec00204 	addi	sp,sp,8
 1080684:	f800283a 	ret

01080688 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1080688:	defffc04 	addi	sp,sp,-16
 108068c:	dfc00315 	stw	ra,12(sp)
 1080690:	df000215 	stw	fp,8(sp)
 1080694:	df000204 	addi	fp,sp,8
 1080698:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 108069c:	e0bfff17 	ldw	r2,-4(fp)
 10806a0:	10800017 	ldw	r2,0(r2)
 10806a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10806a8:	e0bffe17 	ldw	r2,-8(fp)
 10806ac:	10c00a04 	addi	r3,r2,40
 10806b0:	e0bfff17 	ldw	r2,-4(fp)
 10806b4:	10800217 	ldw	r2,8(r2)
 10806b8:	100b883a 	mov	r5,r2
 10806bc:	1809883a 	mov	r4,r3
 10806c0:	1080a900 	call	1080a90 <altera_avalon_jtag_uart_close>
}
 10806c4:	e037883a 	mov	sp,fp
 10806c8:	dfc00117 	ldw	ra,4(sp)
 10806cc:	df000017 	ldw	fp,0(sp)
 10806d0:	dec00204 	addi	sp,sp,8
 10806d4:	f800283a 	ret

010806d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10806d8:	defffa04 	addi	sp,sp,-24
 10806dc:	dfc00515 	stw	ra,20(sp)
 10806e0:	df000415 	stw	fp,16(sp)
 10806e4:	df000404 	addi	fp,sp,16
 10806e8:	e13ffd15 	stw	r4,-12(fp)
 10806ec:	e17ffe15 	stw	r5,-8(fp)
 10806f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10806f4:	e0bffd17 	ldw	r2,-12(fp)
 10806f8:	10800017 	ldw	r2,0(r2)
 10806fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1080700:	e0bffc17 	ldw	r2,-16(fp)
 1080704:	10800a04 	addi	r2,r2,40
 1080708:	e1bfff17 	ldw	r6,-4(fp)
 108070c:	e17ffe17 	ldw	r5,-8(fp)
 1080710:	1009883a 	mov	r4,r2
 1080714:	1080af80 	call	1080af8 <altera_avalon_jtag_uart_ioctl>
}
 1080718:	e037883a 	mov	sp,fp
 108071c:	dfc00117 	ldw	ra,4(sp)
 1080720:	df000017 	ldw	fp,0(sp)
 1080724:	dec00204 	addi	sp,sp,8
 1080728:	f800283a 	ret

0108072c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 108072c:	defffb04 	addi	sp,sp,-20
 1080730:	dfc00415 	stw	ra,16(sp)
 1080734:	df000315 	stw	fp,12(sp)
 1080738:	df000304 	addi	fp,sp,12
 108073c:	e13ffd15 	stw	r4,-12(fp)
 1080740:	e17ffe15 	stw	r5,-8(fp)
 1080744:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1080748:	e0bffd17 	ldw	r2,-12(fp)
 108074c:	00c00044 	movi	r3,1
 1080750:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1080754:	e0bffd17 	ldw	r2,-12(fp)
 1080758:	10800017 	ldw	r2,0(r2)
 108075c:	10800104 	addi	r2,r2,4
 1080760:	1007883a 	mov	r3,r2
 1080764:	e0bffd17 	ldw	r2,-12(fp)
 1080768:	10800817 	ldw	r2,32(r2)
 108076c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1080770:	e0bfff17 	ldw	r2,-4(fp)
 1080774:	01804234 	movhi	r6,264
 1080778:	3181f804 	addi	r6,r6,2016
 108077c:	e17ffd17 	ldw	r5,-12(fp)
 1080780:	1009883a 	mov	r4,r2
 1080784:	10815e80 	call	10815e8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1080788:	e0bffd17 	ldw	r2,-12(fp)
 108078c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1080790:	e0bffd17 	ldw	r2,-12(fp)
 1080794:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1080798:	d0e5b117 	ldw	r3,-26940(gp)
 108079c:	e1fffd17 	ldw	r7,-12(fp)
 10807a0:	01804234 	movhi	r6,264
 10807a4:	31827c04 	addi	r6,r6,2544
 10807a8:	180b883a 	mov	r5,r3
 10807ac:	1009883a 	mov	r4,r2
 10807b0:	10810280 	call	1081028 <alt_alarm_start>
 10807b4:	1000040e 	bge	r2,zero,10807c8 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10807b8:	e0fffd17 	ldw	r3,-12(fp)
 10807bc:	00a00034 	movhi	r2,32768
 10807c0:	10bfffc4 	addi	r2,r2,-1
 10807c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10807c8:	0001883a 	nop
 10807cc:	e037883a 	mov	sp,fp
 10807d0:	dfc00117 	ldw	ra,4(sp)
 10807d4:	df000017 	ldw	fp,0(sp)
 10807d8:	dec00204 	addi	sp,sp,8
 10807dc:	f800283a 	ret

010807e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10807e0:	defff704 	addi	sp,sp,-36
 10807e4:	df000815 	stw	fp,32(sp)
 10807e8:	df000804 	addi	fp,sp,32
 10807ec:	e13ffe15 	stw	r4,-8(fp)
 10807f0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10807f4:	e0bffe17 	ldw	r2,-8(fp)
 10807f8:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 10807fc:	e0bffa17 	ldw	r2,-24(fp)
 1080800:	10800017 	ldw	r2,0(r2)
 1080804:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1080808:	e0bffb17 	ldw	r2,-20(fp)
 108080c:	10800104 	addi	r2,r2,4
 1080810:	10800037 	ldwio	r2,0(r2)
 1080814:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1080818:	e0bffc17 	ldw	r2,-16(fp)
 108081c:	1080c00c 	andi	r2,r2,768
 1080820:	10006d26 	beq	r2,zero,10809d8 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1080824:	e0bffc17 	ldw	r2,-16(fp)
 1080828:	1080400c 	andi	r2,r2,256
 108082c:	10003526 	beq	r2,zero,1080904 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1080830:	00800074 	movhi	r2,1
 1080834:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1080838:	e0bffa17 	ldw	r2,-24(fp)
 108083c:	10800a17 	ldw	r2,40(r2)
 1080840:	10800044 	addi	r2,r2,1
 1080844:	1081ffcc 	andi	r2,r2,2047
 1080848:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 108084c:	e0bffa17 	ldw	r2,-24(fp)
 1080850:	10c00b17 	ldw	r3,44(r2)
 1080854:	e0bffd17 	ldw	r2,-12(fp)
 1080858:	18801526 	beq	r3,r2,10808b0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 108085c:	e0bffb17 	ldw	r2,-20(fp)
 1080860:	10800037 	ldwio	r2,0(r2)
 1080864:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1080868:	e0bff817 	ldw	r2,-32(fp)
 108086c:	10a0000c 	andi	r2,r2,32768
 1080870:	10001126 	beq	r2,zero,10808b8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1080874:	e0bffa17 	ldw	r2,-24(fp)
 1080878:	10800a17 	ldw	r2,40(r2)
 108087c:	e0fff817 	ldw	r3,-32(fp)
 1080880:	1809883a 	mov	r4,r3
 1080884:	e0fffa17 	ldw	r3,-24(fp)
 1080888:	1885883a 	add	r2,r3,r2
 108088c:	10800e04 	addi	r2,r2,56
 1080890:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1080894:	e0bffa17 	ldw	r2,-24(fp)
 1080898:	10800a17 	ldw	r2,40(r2)
 108089c:	10800044 	addi	r2,r2,1
 10808a0:	10c1ffcc 	andi	r3,r2,2047
 10808a4:	e0bffa17 	ldw	r2,-24(fp)
 10808a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10808ac:	003fe206 	br	1080838 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 10808b0:	0001883a 	nop
 10808b4:	00000106 	br	10808bc <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10808b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10808bc:	e0bff817 	ldw	r2,-32(fp)
 10808c0:	10bfffec 	andhi	r2,r2,65535
 10808c4:	10000f26 	beq	r2,zero,1080904 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10808c8:	e0bffa17 	ldw	r2,-24(fp)
 10808cc:	10c00817 	ldw	r3,32(r2)
 10808d0:	00bfff84 	movi	r2,-2
 10808d4:	1886703a 	and	r3,r3,r2
 10808d8:	e0bffa17 	ldw	r2,-24(fp)
 10808dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10808e0:	e0bffb17 	ldw	r2,-20(fp)
 10808e4:	10800104 	addi	r2,r2,4
 10808e8:	1007883a 	mov	r3,r2
 10808ec:	e0bffa17 	ldw	r2,-24(fp)
 10808f0:	10800817 	ldw	r2,32(r2)
 10808f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10808f8:	e0bffb17 	ldw	r2,-20(fp)
 10808fc:	10800104 	addi	r2,r2,4
 1080900:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1080904:	e0bffc17 	ldw	r2,-16(fp)
 1080908:	1080800c 	andi	r2,r2,512
 108090c:	103fbe26 	beq	r2,zero,1080808 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1080910:	e0bffc17 	ldw	r2,-16(fp)
 1080914:	1004d43a 	srli	r2,r2,16
 1080918:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 108091c:	00001406 	br	1080970 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1080920:	e0bffb17 	ldw	r2,-20(fp)
 1080924:	e0fffa17 	ldw	r3,-24(fp)
 1080928:	18c00d17 	ldw	r3,52(r3)
 108092c:	e13ffa17 	ldw	r4,-24(fp)
 1080930:	20c7883a 	add	r3,r4,r3
 1080934:	18c20e04 	addi	r3,r3,2104
 1080938:	18c00003 	ldbu	r3,0(r3)
 108093c:	18c03fcc 	andi	r3,r3,255
 1080940:	18c0201c 	xori	r3,r3,128
 1080944:	18ffe004 	addi	r3,r3,-128
 1080948:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108094c:	e0bffa17 	ldw	r2,-24(fp)
 1080950:	10800d17 	ldw	r2,52(r2)
 1080954:	10800044 	addi	r2,r2,1
 1080958:	10c1ffcc 	andi	r3,r2,2047
 108095c:	e0bffa17 	ldw	r2,-24(fp)
 1080960:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1080964:	e0bff917 	ldw	r2,-28(fp)
 1080968:	10bfffc4 	addi	r2,r2,-1
 108096c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1080970:	e0bff917 	ldw	r2,-28(fp)
 1080974:	10000526 	beq	r2,zero,108098c <altera_avalon_jtag_uart_irq+0x1ac>
 1080978:	e0bffa17 	ldw	r2,-24(fp)
 108097c:	10c00d17 	ldw	r3,52(r2)
 1080980:	e0bffa17 	ldw	r2,-24(fp)
 1080984:	10800c17 	ldw	r2,48(r2)
 1080988:	18bfe51e 	bne	r3,r2,1080920 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 108098c:	e0bff917 	ldw	r2,-28(fp)
 1080990:	103f9d26 	beq	r2,zero,1080808 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1080994:	e0bffa17 	ldw	r2,-24(fp)
 1080998:	10c00817 	ldw	r3,32(r2)
 108099c:	00bfff44 	movi	r2,-3
 10809a0:	1886703a 	and	r3,r3,r2
 10809a4:	e0bffa17 	ldw	r2,-24(fp)
 10809a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10809ac:	e0bffa17 	ldw	r2,-24(fp)
 10809b0:	10800017 	ldw	r2,0(r2)
 10809b4:	10800104 	addi	r2,r2,4
 10809b8:	1007883a 	mov	r3,r2
 10809bc:	e0bffa17 	ldw	r2,-24(fp)
 10809c0:	10800817 	ldw	r2,32(r2)
 10809c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10809c8:	e0bffb17 	ldw	r2,-20(fp)
 10809cc:	10800104 	addi	r2,r2,4
 10809d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10809d4:	003f8c06 	br	1080808 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 10809d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 10809dc:	0001883a 	nop
 10809e0:	e037883a 	mov	sp,fp
 10809e4:	df000017 	ldw	fp,0(sp)
 10809e8:	dec00104 	addi	sp,sp,4
 10809ec:	f800283a 	ret

010809f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10809f0:	defff804 	addi	sp,sp,-32
 10809f4:	df000715 	stw	fp,28(sp)
 10809f8:	df000704 	addi	fp,sp,28
 10809fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1080a00:	e0bffb17 	ldw	r2,-20(fp)
 1080a04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1080a08:	e0bff917 	ldw	r2,-28(fp)
 1080a0c:	10800017 	ldw	r2,0(r2)
 1080a10:	10800104 	addi	r2,r2,4
 1080a14:	10800037 	ldwio	r2,0(r2)
 1080a18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1080a1c:	e0bffa17 	ldw	r2,-24(fp)
 1080a20:	1081000c 	andi	r2,r2,1024
 1080a24:	10000b26 	beq	r2,zero,1080a54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1080a28:	e0bff917 	ldw	r2,-28(fp)
 1080a2c:	10800017 	ldw	r2,0(r2)
 1080a30:	10800104 	addi	r2,r2,4
 1080a34:	1007883a 	mov	r3,r2
 1080a38:	e0bff917 	ldw	r2,-28(fp)
 1080a3c:	10800817 	ldw	r2,32(r2)
 1080a40:	10810014 	ori	r2,r2,1024
 1080a44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1080a48:	e0bff917 	ldw	r2,-28(fp)
 1080a4c:	10000915 	stw	zero,36(r2)
 1080a50:	00000a06 	br	1080a7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1080a54:	e0bff917 	ldw	r2,-28(fp)
 1080a58:	10c00917 	ldw	r3,36(r2)
 1080a5c:	00a00034 	movhi	r2,32768
 1080a60:	10bfff04 	addi	r2,r2,-4
 1080a64:	10c00536 	bltu	r2,r3,1080a7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1080a68:	e0bff917 	ldw	r2,-28(fp)
 1080a6c:	10800917 	ldw	r2,36(r2)
 1080a70:	10c00044 	addi	r3,r2,1
 1080a74:	e0bff917 	ldw	r2,-28(fp)
 1080a78:	10c00915 	stw	r3,36(r2)
 1080a7c:	d0a5b117 	ldw	r2,-26940(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1080a80:	e037883a 	mov	sp,fp
 1080a84:	df000017 	ldw	fp,0(sp)
 1080a88:	dec00104 	addi	sp,sp,4
 1080a8c:	f800283a 	ret

01080a90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1080a90:	defffd04 	addi	sp,sp,-12
 1080a94:	df000215 	stw	fp,8(sp)
 1080a98:	df000204 	addi	fp,sp,8
 1080a9c:	e13ffe15 	stw	r4,-8(fp)
 1080aa0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1080aa4:	00000506 	br	1080abc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1080aa8:	e0bfff17 	ldw	r2,-4(fp)
 1080aac:	1090000c 	andi	r2,r2,16384
 1080ab0:	10000226 	beq	r2,zero,1080abc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1080ab4:	00bffd44 	movi	r2,-11
 1080ab8:	00000b06 	br	1080ae8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1080abc:	e0bffe17 	ldw	r2,-8(fp)
 1080ac0:	10c00d17 	ldw	r3,52(r2)
 1080ac4:	e0bffe17 	ldw	r2,-8(fp)
 1080ac8:	10800c17 	ldw	r2,48(r2)
 1080acc:	18800526 	beq	r3,r2,1080ae4 <altera_avalon_jtag_uart_close+0x54>
 1080ad0:	e0bffe17 	ldw	r2,-8(fp)
 1080ad4:	10c00917 	ldw	r3,36(r2)
 1080ad8:	e0bffe17 	ldw	r2,-8(fp)
 1080adc:	10800117 	ldw	r2,4(r2)
 1080ae0:	18bff136 	bltu	r3,r2,1080aa8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1080ae4:	0005883a 	mov	r2,zero
}
 1080ae8:	e037883a 	mov	sp,fp
 1080aec:	df000017 	ldw	fp,0(sp)
 1080af0:	dec00104 	addi	sp,sp,4
 1080af4:	f800283a 	ret

01080af8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1080af8:	defffa04 	addi	sp,sp,-24
 1080afc:	df000515 	stw	fp,20(sp)
 1080b00:	df000504 	addi	fp,sp,20
 1080b04:	e13ffd15 	stw	r4,-12(fp)
 1080b08:	e17ffe15 	stw	r5,-8(fp)
 1080b0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1080b10:	00bff9c4 	movi	r2,-25
 1080b14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1080b18:	e0bffe17 	ldw	r2,-8(fp)
 1080b1c:	10da8060 	cmpeqi	r3,r2,27137
 1080b20:	1800031e 	bne	r3,zero,1080b30 <altera_avalon_jtag_uart_ioctl+0x38>
 1080b24:	109a80a0 	cmpeqi	r2,r2,27138
 1080b28:	1000181e 	bne	r2,zero,1080b8c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1080b2c:	00002906 	br	1080bd4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1080b30:	e0bffd17 	ldw	r2,-12(fp)
 1080b34:	10c00117 	ldw	r3,4(r2)
 1080b38:	00a00034 	movhi	r2,32768
 1080b3c:	10bfffc4 	addi	r2,r2,-1
 1080b40:	18802126 	beq	r3,r2,1080bc8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1080b44:	e0bfff17 	ldw	r2,-4(fp)
 1080b48:	10800017 	ldw	r2,0(r2)
 1080b4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1080b50:	e0bffc17 	ldw	r2,-16(fp)
 1080b54:	10800090 	cmplti	r2,r2,2
 1080b58:	1000061e 	bne	r2,zero,1080b74 <altera_avalon_jtag_uart_ioctl+0x7c>
 1080b5c:	e0fffc17 	ldw	r3,-16(fp)
 1080b60:	00a00034 	movhi	r2,32768
 1080b64:	10bfffc4 	addi	r2,r2,-1
 1080b68:	18800226 	beq	r3,r2,1080b74 <altera_avalon_jtag_uart_ioctl+0x7c>
 1080b6c:	e0bffc17 	ldw	r2,-16(fp)
 1080b70:	00000206 	br	1080b7c <altera_avalon_jtag_uart_ioctl+0x84>
 1080b74:	00a00034 	movhi	r2,32768
 1080b78:	10bfff84 	addi	r2,r2,-2
 1080b7c:	e0fffd17 	ldw	r3,-12(fp)
 1080b80:	18800115 	stw	r2,4(r3)
      rc = 0;
 1080b84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1080b88:	00000f06 	br	1080bc8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1080b8c:	e0bffd17 	ldw	r2,-12(fp)
 1080b90:	10c00117 	ldw	r3,4(r2)
 1080b94:	00a00034 	movhi	r2,32768
 1080b98:	10bfffc4 	addi	r2,r2,-1
 1080b9c:	18800c26 	beq	r3,r2,1080bd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1080ba0:	e0bffd17 	ldw	r2,-12(fp)
 1080ba4:	10c00917 	ldw	r3,36(r2)
 1080ba8:	e0bffd17 	ldw	r2,-12(fp)
 1080bac:	10800117 	ldw	r2,4(r2)
 1080bb0:	1885803a 	cmpltu	r2,r3,r2
 1080bb4:	10c03fcc 	andi	r3,r2,255
 1080bb8:	e0bfff17 	ldw	r2,-4(fp)
 1080bbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1080bc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1080bc4:	00000206 	br	1080bd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1080bc8:	0001883a 	nop
 1080bcc:	00000106 	br	1080bd4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1080bd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1080bd4:	e0bffb17 	ldw	r2,-20(fp)
}
 1080bd8:	e037883a 	mov	sp,fp
 1080bdc:	df000017 	ldw	fp,0(sp)
 1080be0:	dec00104 	addi	sp,sp,4
 1080be4:	f800283a 	ret

01080be8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1080be8:	defff304 	addi	sp,sp,-52
 1080bec:	dfc00c15 	stw	ra,48(sp)
 1080bf0:	df000b15 	stw	fp,44(sp)
 1080bf4:	df000b04 	addi	fp,sp,44
 1080bf8:	e13ffc15 	stw	r4,-16(fp)
 1080bfc:	e17ffd15 	stw	r5,-12(fp)
 1080c00:	e1bffe15 	stw	r6,-8(fp)
 1080c04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1080c08:	e0bffd17 	ldw	r2,-12(fp)
 1080c0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1080c10:	00004706 	br	1080d30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1080c14:	e0bffc17 	ldw	r2,-16(fp)
 1080c18:	10800a17 	ldw	r2,40(r2)
 1080c1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1080c20:	e0bffc17 	ldw	r2,-16(fp)
 1080c24:	10800b17 	ldw	r2,44(r2)
 1080c28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1080c2c:	e0fff717 	ldw	r3,-36(fp)
 1080c30:	e0bff817 	ldw	r2,-32(fp)
 1080c34:	18800536 	bltu	r3,r2,1080c4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1080c38:	e0fff717 	ldw	r3,-36(fp)
 1080c3c:	e0bff817 	ldw	r2,-32(fp)
 1080c40:	1885c83a 	sub	r2,r3,r2
 1080c44:	e0bff615 	stw	r2,-40(fp)
 1080c48:	00000406 	br	1080c5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1080c4c:	00c20004 	movi	r3,2048
 1080c50:	e0bff817 	ldw	r2,-32(fp)
 1080c54:	1885c83a 	sub	r2,r3,r2
 1080c58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1080c5c:	e0bff617 	ldw	r2,-40(fp)
 1080c60:	10001e26 	beq	r2,zero,1080cdc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1080c64:	e0fffe17 	ldw	r3,-8(fp)
 1080c68:	e0bff617 	ldw	r2,-40(fp)
 1080c6c:	1880022e 	bgeu	r3,r2,1080c78 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1080c70:	e0bffe17 	ldw	r2,-8(fp)
 1080c74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1080c78:	e0bffc17 	ldw	r2,-16(fp)
 1080c7c:	10c00e04 	addi	r3,r2,56
 1080c80:	e0bff817 	ldw	r2,-32(fp)
 1080c84:	1885883a 	add	r2,r3,r2
 1080c88:	e1bff617 	ldw	r6,-40(fp)
 1080c8c:	100b883a 	mov	r5,r2
 1080c90:	e13ff517 	ldw	r4,-44(fp)
 1080c94:	10820180 	call	1082018 <memcpy>
      ptr   += n;
 1080c98:	e0fff517 	ldw	r3,-44(fp)
 1080c9c:	e0bff617 	ldw	r2,-40(fp)
 1080ca0:	1885883a 	add	r2,r3,r2
 1080ca4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1080ca8:	e0fffe17 	ldw	r3,-8(fp)
 1080cac:	e0bff617 	ldw	r2,-40(fp)
 1080cb0:	1885c83a 	sub	r2,r3,r2
 1080cb4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1080cb8:	e0fff817 	ldw	r3,-32(fp)
 1080cbc:	e0bff617 	ldw	r2,-40(fp)
 1080cc0:	1885883a 	add	r2,r3,r2
 1080cc4:	10c1ffcc 	andi	r3,r2,2047
 1080cc8:	e0bffc17 	ldw	r2,-16(fp)
 1080ccc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1080cd0:	e0bffe17 	ldw	r2,-8(fp)
 1080cd4:	00bfcf16 	blt	zero,r2,1080c14 <altera_avalon_jtag_uart_read+0x2c>
 1080cd8:	00000106 	br	1080ce0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1080cdc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1080ce0:	e0fff517 	ldw	r3,-44(fp)
 1080ce4:	e0bffd17 	ldw	r2,-12(fp)
 1080ce8:	1880141e 	bne	r3,r2,1080d3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1080cec:	e0bfff17 	ldw	r2,-4(fp)
 1080cf0:	1090000c 	andi	r2,r2,16384
 1080cf4:	1000131e 	bne	r2,zero,1080d44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1080cf8:	0001883a 	nop
 1080cfc:	e0bffc17 	ldw	r2,-16(fp)
 1080d00:	10c00a17 	ldw	r3,40(r2)
 1080d04:	e0bff717 	ldw	r2,-36(fp)
 1080d08:	1880051e 	bne	r3,r2,1080d20 <altera_avalon_jtag_uart_read+0x138>
 1080d0c:	e0bffc17 	ldw	r2,-16(fp)
 1080d10:	10c00917 	ldw	r3,36(r2)
 1080d14:	e0bffc17 	ldw	r2,-16(fp)
 1080d18:	10800117 	ldw	r2,4(r2)
 1080d1c:	18bff736 	bltu	r3,r2,1080cfc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1080d20:	e0bffc17 	ldw	r2,-16(fp)
 1080d24:	10c00a17 	ldw	r3,40(r2)
 1080d28:	e0bff717 	ldw	r2,-36(fp)
 1080d2c:	18800726 	beq	r3,r2,1080d4c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1080d30:	e0bffe17 	ldw	r2,-8(fp)
 1080d34:	00bfb716 	blt	zero,r2,1080c14 <altera_avalon_jtag_uart_read+0x2c>
 1080d38:	00000506 	br	1080d50 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1080d3c:	0001883a 	nop
 1080d40:	00000306 	br	1080d50 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1080d44:	0001883a 	nop
 1080d48:	00000106 	br	1080d50 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1080d4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1080d50:	e0fff517 	ldw	r3,-44(fp)
 1080d54:	e0bffd17 	ldw	r2,-12(fp)
 1080d58:	18801826 	beq	r3,r2,1080dbc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1080d5c:	0005303a 	rdctl	r2,status
 1080d60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1080d64:	e0fffb17 	ldw	r3,-20(fp)
 1080d68:	00bfff84 	movi	r2,-2
 1080d6c:	1884703a 	and	r2,r3,r2
 1080d70:	1001703a 	wrctl	status,r2
  
  return context;
 1080d74:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1080d78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1080d7c:	e0bffc17 	ldw	r2,-16(fp)
 1080d80:	10800817 	ldw	r2,32(r2)
 1080d84:	10c00054 	ori	r3,r2,1
 1080d88:	e0bffc17 	ldw	r2,-16(fp)
 1080d8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1080d90:	e0bffc17 	ldw	r2,-16(fp)
 1080d94:	10800017 	ldw	r2,0(r2)
 1080d98:	10800104 	addi	r2,r2,4
 1080d9c:	1007883a 	mov	r3,r2
 1080da0:	e0bffc17 	ldw	r2,-16(fp)
 1080da4:	10800817 	ldw	r2,32(r2)
 1080da8:	18800035 	stwio	r2,0(r3)
 1080dac:	e0bffa17 	ldw	r2,-24(fp)
 1080db0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1080db4:	e0bff917 	ldw	r2,-28(fp)
 1080db8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1080dbc:	e0fff517 	ldw	r3,-44(fp)
 1080dc0:	e0bffd17 	ldw	r2,-12(fp)
 1080dc4:	18800426 	beq	r3,r2,1080dd8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1080dc8:	e0fff517 	ldw	r3,-44(fp)
 1080dcc:	e0bffd17 	ldw	r2,-12(fp)
 1080dd0:	1885c83a 	sub	r2,r3,r2
 1080dd4:	00000606 	br	1080df0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1080dd8:	e0bfff17 	ldw	r2,-4(fp)
 1080ddc:	1090000c 	andi	r2,r2,16384
 1080de0:	10000226 	beq	r2,zero,1080dec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1080de4:	00bffd44 	movi	r2,-11
 1080de8:	00000106 	br	1080df0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1080dec:	00bffec4 	movi	r2,-5
}
 1080df0:	e037883a 	mov	sp,fp
 1080df4:	dfc00117 	ldw	ra,4(sp)
 1080df8:	df000017 	ldw	fp,0(sp)
 1080dfc:	dec00204 	addi	sp,sp,8
 1080e00:	f800283a 	ret

01080e04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1080e04:	defff304 	addi	sp,sp,-52
 1080e08:	dfc00c15 	stw	ra,48(sp)
 1080e0c:	df000b15 	stw	fp,44(sp)
 1080e10:	df000b04 	addi	fp,sp,44
 1080e14:	e13ffc15 	stw	r4,-16(fp)
 1080e18:	e17ffd15 	stw	r5,-12(fp)
 1080e1c:	e1bffe15 	stw	r6,-8(fp)
 1080e20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1080e24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1080e28:	e0bffd17 	ldw	r2,-12(fp)
 1080e2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1080e30:	00003706 	br	1080f10 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1080e34:	e0bffc17 	ldw	r2,-16(fp)
 1080e38:	10800c17 	ldw	r2,48(r2)
 1080e3c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1080e40:	e0bffc17 	ldw	r2,-16(fp)
 1080e44:	10800d17 	ldw	r2,52(r2)
 1080e48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1080e4c:	e0fff917 	ldw	r3,-28(fp)
 1080e50:	e0bff517 	ldw	r2,-44(fp)
 1080e54:	1880062e 	bgeu	r3,r2,1080e70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1080e58:	e0fff517 	ldw	r3,-44(fp)
 1080e5c:	e0bff917 	ldw	r2,-28(fp)
 1080e60:	1885c83a 	sub	r2,r3,r2
 1080e64:	10bfffc4 	addi	r2,r2,-1
 1080e68:	e0bff615 	stw	r2,-40(fp)
 1080e6c:	00000b06 	br	1080e9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1080e70:	e0bff517 	ldw	r2,-44(fp)
 1080e74:	10000526 	beq	r2,zero,1080e8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1080e78:	00c20004 	movi	r3,2048
 1080e7c:	e0bff917 	ldw	r2,-28(fp)
 1080e80:	1885c83a 	sub	r2,r3,r2
 1080e84:	e0bff615 	stw	r2,-40(fp)
 1080e88:	00000406 	br	1080e9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1080e8c:	00c1ffc4 	movi	r3,2047
 1080e90:	e0bff917 	ldw	r2,-28(fp)
 1080e94:	1885c83a 	sub	r2,r3,r2
 1080e98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1080e9c:	e0bff617 	ldw	r2,-40(fp)
 1080ea0:	10001e26 	beq	r2,zero,1080f1c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1080ea4:	e0fffe17 	ldw	r3,-8(fp)
 1080ea8:	e0bff617 	ldw	r2,-40(fp)
 1080eac:	1880022e 	bgeu	r3,r2,1080eb8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1080eb0:	e0bffe17 	ldw	r2,-8(fp)
 1080eb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1080eb8:	e0bffc17 	ldw	r2,-16(fp)
 1080ebc:	10c20e04 	addi	r3,r2,2104
 1080ec0:	e0bff917 	ldw	r2,-28(fp)
 1080ec4:	1885883a 	add	r2,r3,r2
 1080ec8:	e1bff617 	ldw	r6,-40(fp)
 1080ecc:	e17ffd17 	ldw	r5,-12(fp)
 1080ed0:	1009883a 	mov	r4,r2
 1080ed4:	10820180 	call	1082018 <memcpy>
      ptr   += n;
 1080ed8:	e0fffd17 	ldw	r3,-12(fp)
 1080edc:	e0bff617 	ldw	r2,-40(fp)
 1080ee0:	1885883a 	add	r2,r3,r2
 1080ee4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1080ee8:	e0fffe17 	ldw	r3,-8(fp)
 1080eec:	e0bff617 	ldw	r2,-40(fp)
 1080ef0:	1885c83a 	sub	r2,r3,r2
 1080ef4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1080ef8:	e0fff917 	ldw	r3,-28(fp)
 1080efc:	e0bff617 	ldw	r2,-40(fp)
 1080f00:	1885883a 	add	r2,r3,r2
 1080f04:	10c1ffcc 	andi	r3,r2,2047
 1080f08:	e0bffc17 	ldw	r2,-16(fp)
 1080f0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1080f10:	e0bffe17 	ldw	r2,-8(fp)
 1080f14:	00bfc716 	blt	zero,r2,1080e34 <altera_avalon_jtag_uart_write+0x30>
 1080f18:	00000106 	br	1080f20 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1080f1c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1080f20:	0005303a 	rdctl	r2,status
 1080f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1080f28:	e0fffb17 	ldw	r3,-20(fp)
 1080f2c:	00bfff84 	movi	r2,-2
 1080f30:	1884703a 	and	r2,r3,r2
 1080f34:	1001703a 	wrctl	status,r2
  
  return context;
 1080f38:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1080f3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1080f40:	e0bffc17 	ldw	r2,-16(fp)
 1080f44:	10800817 	ldw	r2,32(r2)
 1080f48:	10c00094 	ori	r3,r2,2
 1080f4c:	e0bffc17 	ldw	r2,-16(fp)
 1080f50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1080f54:	e0bffc17 	ldw	r2,-16(fp)
 1080f58:	10800017 	ldw	r2,0(r2)
 1080f5c:	10800104 	addi	r2,r2,4
 1080f60:	1007883a 	mov	r3,r2
 1080f64:	e0bffc17 	ldw	r2,-16(fp)
 1080f68:	10800817 	ldw	r2,32(r2)
 1080f6c:	18800035 	stwio	r2,0(r3)
 1080f70:	e0bffa17 	ldw	r2,-24(fp)
 1080f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1080f78:	e0bff817 	ldw	r2,-32(fp)
 1080f7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1080f80:	e0bffe17 	ldw	r2,-8(fp)
 1080f84:	0080100e 	bge	zero,r2,1080fc8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1080f88:	e0bfff17 	ldw	r2,-4(fp)
 1080f8c:	1090000c 	andi	r2,r2,16384
 1080f90:	1000101e 	bne	r2,zero,1080fd4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1080f94:	0001883a 	nop
 1080f98:	e0bffc17 	ldw	r2,-16(fp)
 1080f9c:	10c00d17 	ldw	r3,52(r2)
 1080fa0:	e0bff517 	ldw	r2,-44(fp)
 1080fa4:	1880051e 	bne	r3,r2,1080fbc <altera_avalon_jtag_uart_write+0x1b8>
 1080fa8:	e0bffc17 	ldw	r2,-16(fp)
 1080fac:	10c00917 	ldw	r3,36(r2)
 1080fb0:	e0bffc17 	ldw	r2,-16(fp)
 1080fb4:	10800117 	ldw	r2,4(r2)
 1080fb8:	18bff736 	bltu	r3,r2,1080f98 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1080fbc:	e0bffc17 	ldw	r2,-16(fp)
 1080fc0:	10800917 	ldw	r2,36(r2)
 1080fc4:	1000051e 	bne	r2,zero,1080fdc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1080fc8:	e0bffe17 	ldw	r2,-8(fp)
 1080fcc:	00bfd016 	blt	zero,r2,1080f10 <altera_avalon_jtag_uart_write+0x10c>
 1080fd0:	00000306 	br	1080fe0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1080fd4:	0001883a 	nop
 1080fd8:	00000106 	br	1080fe0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1080fdc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1080fe0:	e0fffd17 	ldw	r3,-12(fp)
 1080fe4:	e0bff717 	ldw	r2,-36(fp)
 1080fe8:	18800426 	beq	r3,r2,1080ffc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1080fec:	e0fffd17 	ldw	r3,-12(fp)
 1080ff0:	e0bff717 	ldw	r2,-36(fp)
 1080ff4:	1885c83a 	sub	r2,r3,r2
 1080ff8:	00000606 	br	1081014 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1080ffc:	e0bfff17 	ldw	r2,-4(fp)
 1081000:	1090000c 	andi	r2,r2,16384
 1081004:	10000226 	beq	r2,zero,1081010 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1081008:	00bffd44 	movi	r2,-11
 108100c:	00000106 	br	1081014 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1081010:	00bffec4 	movi	r2,-5
}
 1081014:	e037883a 	mov	sp,fp
 1081018:	dfc00117 	ldw	ra,4(sp)
 108101c:	df000017 	ldw	fp,0(sp)
 1081020:	dec00204 	addi	sp,sp,8
 1081024:	f800283a 	ret

01081028 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1081028:	defff504 	addi	sp,sp,-44
 108102c:	df000a15 	stw	fp,40(sp)
 1081030:	df000a04 	addi	fp,sp,40
 1081034:	e13ffc15 	stw	r4,-16(fp)
 1081038:	e17ffd15 	stw	r5,-12(fp)
 108103c:	e1bffe15 	stw	r6,-8(fp)
 1081040:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1081044:	e03ff615 	stw	zero,-40(fp)
 1081048:	d0a5b117 	ldw	r2,-26940(gp)
  
  if (alt_ticks_per_second ())
 108104c:	10003c26 	beq	r2,zero,1081140 <alt_alarm_start+0x118>
  {
    if (alarm)
 1081050:	e0bffc17 	ldw	r2,-16(fp)
 1081054:	10003826 	beq	r2,zero,1081138 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1081058:	e0bffc17 	ldw	r2,-16(fp)
 108105c:	e0fffe17 	ldw	r3,-8(fp)
 1081060:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1081064:	e0bffc17 	ldw	r2,-16(fp)
 1081068:	e0ffff17 	ldw	r3,-4(fp)
 108106c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1081070:	0005303a 	rdctl	r2,status
 1081074:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1081078:	e0fff917 	ldw	r3,-28(fp)
 108107c:	00bfff84 	movi	r2,-2
 1081080:	1884703a 	and	r2,r3,r2
 1081084:	1001703a 	wrctl	status,r2
  
  return context;
 1081088:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 108108c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1081090:	d0a5b217 	ldw	r2,-26936(gp)
      
      current_nticks = alt_nticks();
 1081094:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1081098:	e0fffd17 	ldw	r3,-12(fp)
 108109c:	e0bff617 	ldw	r2,-40(fp)
 10810a0:	1885883a 	add	r2,r3,r2
 10810a4:	10c00044 	addi	r3,r2,1
 10810a8:	e0bffc17 	ldw	r2,-16(fp)
 10810ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10810b0:	e0bffc17 	ldw	r2,-16(fp)
 10810b4:	10c00217 	ldw	r3,8(r2)
 10810b8:	e0bff617 	ldw	r2,-40(fp)
 10810bc:	1880042e 	bgeu	r3,r2,10810d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 10810c0:	e0bffc17 	ldw	r2,-16(fp)
 10810c4:	00c00044 	movi	r3,1
 10810c8:	10c00405 	stb	r3,16(r2)
 10810cc:	00000206 	br	10810d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 10810d0:	e0bffc17 	ldw	r2,-16(fp)
 10810d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10810d8:	e0bffc17 	ldw	r2,-16(fp)
 10810dc:	d0e00704 	addi	r3,gp,-32740
 10810e0:	e0fffa15 	stw	r3,-24(fp)
 10810e4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10810e8:	e0bffb17 	ldw	r2,-20(fp)
 10810ec:	e0fffa17 	ldw	r3,-24(fp)
 10810f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10810f4:	e0bffa17 	ldw	r2,-24(fp)
 10810f8:	10c00017 	ldw	r3,0(r2)
 10810fc:	e0bffb17 	ldw	r2,-20(fp)
 1081100:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1081104:	e0bffa17 	ldw	r2,-24(fp)
 1081108:	10800017 	ldw	r2,0(r2)
 108110c:	e0fffb17 	ldw	r3,-20(fp)
 1081110:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1081114:	e0bffa17 	ldw	r2,-24(fp)
 1081118:	e0fffb17 	ldw	r3,-20(fp)
 108111c:	10c00015 	stw	r3,0(r2)
 1081120:	e0bff817 	ldw	r2,-32(fp)
 1081124:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1081128:	e0bff717 	ldw	r2,-36(fp)
 108112c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1081130:	0005883a 	mov	r2,zero
 1081134:	00000306 	br	1081144 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1081138:	00bffa84 	movi	r2,-22
 108113c:	00000106 	br	1081144 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1081140:	00bfde84 	movi	r2,-134
  }
}
 1081144:	e037883a 	mov	sp,fp
 1081148:	df000017 	ldw	fp,0(sp)
 108114c:	dec00104 	addi	sp,sp,4
 1081150:	f800283a 	ret

01081154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1081154:	defffe04 	addi	sp,sp,-8
 1081158:	dfc00115 	stw	ra,4(sp)
 108115c:	df000015 	stw	fp,0(sp)
 1081160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1081164:	d0a00517 	ldw	r2,-32748(gp)
 1081168:	10000326 	beq	r2,zero,1081178 <alt_get_errno+0x24>
 108116c:	d0a00517 	ldw	r2,-32748(gp)
 1081170:	103ee83a 	callr	r2
 1081174:	00000106 	br	108117c <alt_get_errno+0x28>
 1081178:	d0a5b404 	addi	r2,gp,-26928
}
 108117c:	e037883a 	mov	sp,fp
 1081180:	dfc00117 	ldw	ra,4(sp)
 1081184:	df000017 	ldw	fp,0(sp)
 1081188:	dec00204 	addi	sp,sp,8
 108118c:	f800283a 	ret

01081190 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1081190:	defffb04 	addi	sp,sp,-20
 1081194:	dfc00415 	stw	ra,16(sp)
 1081198:	df000315 	stw	fp,12(sp)
 108119c:	df000304 	addi	fp,sp,12
 10811a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10811a4:	e0bfff17 	ldw	r2,-4(fp)
 10811a8:	10000616 	blt	r2,zero,10811c4 <close+0x34>
 10811ac:	e0bfff17 	ldw	r2,-4(fp)
 10811b0:	10c00324 	muli	r3,r2,12
 10811b4:	00804234 	movhi	r2,264
 10811b8:	108d7104 	addi	r2,r2,13764
 10811bc:	1885883a 	add	r2,r3,r2
 10811c0:	00000106 	br	10811c8 <close+0x38>
 10811c4:	0005883a 	mov	r2,zero
 10811c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 10811cc:	e0bffd17 	ldw	r2,-12(fp)
 10811d0:	10001926 	beq	r2,zero,1081238 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10811d4:	e0bffd17 	ldw	r2,-12(fp)
 10811d8:	10800017 	ldw	r2,0(r2)
 10811dc:	10800417 	ldw	r2,16(r2)
 10811e0:	10000626 	beq	r2,zero,10811fc <close+0x6c>
 10811e4:	e0bffd17 	ldw	r2,-12(fp)
 10811e8:	10800017 	ldw	r2,0(r2)
 10811ec:	10800417 	ldw	r2,16(r2)
 10811f0:	e13ffd17 	ldw	r4,-12(fp)
 10811f4:	103ee83a 	callr	r2
 10811f8:	00000106 	br	1081200 <close+0x70>
 10811fc:	0005883a 	mov	r2,zero
 1081200:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1081204:	e13fff17 	ldw	r4,-4(fp)
 1081208:	10819bc0 	call	10819bc <alt_release_fd>
    if (rval < 0)
 108120c:	e0bffe17 	ldw	r2,-8(fp)
 1081210:	1000070e 	bge	r2,zero,1081230 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1081214:	10811540 	call	1081154 <alt_get_errno>
 1081218:	1007883a 	mov	r3,r2
 108121c:	e0bffe17 	ldw	r2,-8(fp)
 1081220:	0085c83a 	sub	r2,zero,r2
 1081224:	18800015 	stw	r2,0(r3)
      return -1;
 1081228:	00bfffc4 	movi	r2,-1
 108122c:	00000706 	br	108124c <close+0xbc>
    }
    return 0;
 1081230:	0005883a 	mov	r2,zero
 1081234:	00000506 	br	108124c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1081238:	10811540 	call	1081154 <alt_get_errno>
 108123c:	1007883a 	mov	r3,r2
 1081240:	00801444 	movi	r2,81
 1081244:	18800015 	stw	r2,0(r3)
    return -1;
 1081248:	00bfffc4 	movi	r2,-1
  }
}
 108124c:	e037883a 	mov	sp,fp
 1081250:	dfc00117 	ldw	ra,4(sp)
 1081254:	df000017 	ldw	fp,0(sp)
 1081258:	dec00204 	addi	sp,sp,8
 108125c:	f800283a 	ret

01081260 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1081260:	defffe04 	addi	sp,sp,-8
 1081264:	df000115 	stw	fp,4(sp)
 1081268:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 108126c:	e03fff15 	stw	zero,-4(fp)
 1081270:	00000506 	br	1081288 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1081274:	e0bfff17 	ldw	r2,-4(fp)
 1081278:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 108127c:	e0bfff17 	ldw	r2,-4(fp)
 1081280:	10800804 	addi	r2,r2,32
 1081284:	e0bfff15 	stw	r2,-4(fp)
 1081288:	e0bfff17 	ldw	r2,-4(fp)
 108128c:	10820030 	cmpltui	r2,r2,2048
 1081290:	103ff81e 	bne	r2,zero,1081274 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1081294:	0001883a 	nop
 1081298:	e037883a 	mov	sp,fp
 108129c:	df000017 	ldw	fp,0(sp)
 10812a0:	dec00104 	addi	sp,sp,4
 10812a4:	f800283a 	ret

010812a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10812a8:	defffc04 	addi	sp,sp,-16
 10812ac:	df000315 	stw	fp,12(sp)
 10812b0:	df000304 	addi	fp,sp,12
 10812b4:	e13ffd15 	stw	r4,-12(fp)
 10812b8:	e17ffe15 	stw	r5,-8(fp)
 10812bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10812c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10812c4:	e037883a 	mov	sp,fp
 10812c8:	df000017 	ldw	fp,0(sp)
 10812cc:	dec00104 	addi	sp,sp,4
 10812d0:	f800283a 	ret

010812d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10812d4:	defffe04 	addi	sp,sp,-8
 10812d8:	dfc00115 	stw	ra,4(sp)
 10812dc:	df000015 	stw	fp,0(sp)
 10812e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10812e4:	d0a00517 	ldw	r2,-32748(gp)
 10812e8:	10000326 	beq	r2,zero,10812f8 <alt_get_errno+0x24>
 10812ec:	d0a00517 	ldw	r2,-32748(gp)
 10812f0:	103ee83a 	callr	r2
 10812f4:	00000106 	br	10812fc <alt_get_errno+0x28>
 10812f8:	d0a5b404 	addi	r2,gp,-26928
}
 10812fc:	e037883a 	mov	sp,fp
 1081300:	dfc00117 	ldw	ra,4(sp)
 1081304:	df000017 	ldw	fp,0(sp)
 1081308:	dec00204 	addi	sp,sp,8
 108130c:	f800283a 	ret

01081310 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1081310:	defffa04 	addi	sp,sp,-24
 1081314:	dfc00515 	stw	ra,20(sp)
 1081318:	df000415 	stw	fp,16(sp)
 108131c:	df000404 	addi	fp,sp,16
 1081320:	e13ffe15 	stw	r4,-8(fp)
 1081324:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1081328:	e0bffe17 	ldw	r2,-8(fp)
 108132c:	10000326 	beq	r2,zero,108133c <alt_dev_llist_insert+0x2c>
 1081330:	e0bffe17 	ldw	r2,-8(fp)
 1081334:	10800217 	ldw	r2,8(r2)
 1081338:	1000061e 	bne	r2,zero,1081354 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 108133c:	10812d40 	call	10812d4 <alt_get_errno>
 1081340:	1007883a 	mov	r3,r2
 1081344:	00800584 	movi	r2,22
 1081348:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 108134c:	00bffa84 	movi	r2,-22
 1081350:	00001306 	br	10813a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1081354:	e0bffe17 	ldw	r2,-8(fp)
 1081358:	e0ffff17 	ldw	r3,-4(fp)
 108135c:	e0fffc15 	stw	r3,-16(fp)
 1081360:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1081364:	e0bffd17 	ldw	r2,-12(fp)
 1081368:	e0fffc17 	ldw	r3,-16(fp)
 108136c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1081370:	e0bffc17 	ldw	r2,-16(fp)
 1081374:	10c00017 	ldw	r3,0(r2)
 1081378:	e0bffd17 	ldw	r2,-12(fp)
 108137c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1081380:	e0bffc17 	ldw	r2,-16(fp)
 1081384:	10800017 	ldw	r2,0(r2)
 1081388:	e0fffd17 	ldw	r3,-12(fp)
 108138c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1081390:	e0bffc17 	ldw	r2,-16(fp)
 1081394:	e0fffd17 	ldw	r3,-12(fp)
 1081398:	10c00015 	stw	r3,0(r2)

  return 0;  
 108139c:	0005883a 	mov	r2,zero
}
 10813a0:	e037883a 	mov	sp,fp
 10813a4:	dfc00117 	ldw	ra,4(sp)
 10813a8:	df000017 	ldw	fp,0(sp)
 10813ac:	dec00204 	addi	sp,sp,8
 10813b0:	f800283a 	ret

010813b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10813b4:	defffd04 	addi	sp,sp,-12
 10813b8:	dfc00215 	stw	ra,8(sp)
 10813bc:	df000115 	stw	fp,4(sp)
 10813c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10813c4:	00804234 	movhi	r2,264
 10813c8:	10893004 	addi	r2,r2,9408
 10813cc:	e0bfff15 	stw	r2,-4(fp)
 10813d0:	00000606 	br	10813ec <_do_ctors+0x38>
        (*ctor) (); 
 10813d4:	e0bfff17 	ldw	r2,-4(fp)
 10813d8:	10800017 	ldw	r2,0(r2)
 10813dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10813e0:	e0bfff17 	ldw	r2,-4(fp)
 10813e4:	10bfff04 	addi	r2,r2,-4
 10813e8:	e0bfff15 	stw	r2,-4(fp)
 10813ec:	e0ffff17 	ldw	r3,-4(fp)
 10813f0:	00804234 	movhi	r2,264
 10813f4:	10893104 	addi	r2,r2,9412
 10813f8:	18bff62e 	bgeu	r3,r2,10813d4 <_do_ctors+0x20>
        (*ctor) (); 
}
 10813fc:	0001883a 	nop
 1081400:	e037883a 	mov	sp,fp
 1081404:	dfc00117 	ldw	ra,4(sp)
 1081408:	df000017 	ldw	fp,0(sp)
 108140c:	dec00204 	addi	sp,sp,8
 1081410:	f800283a 	ret

01081414 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1081414:	defffd04 	addi	sp,sp,-12
 1081418:	dfc00215 	stw	ra,8(sp)
 108141c:	df000115 	stw	fp,4(sp)
 1081420:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1081424:	00804234 	movhi	r2,264
 1081428:	10893004 	addi	r2,r2,9408
 108142c:	e0bfff15 	stw	r2,-4(fp)
 1081430:	00000606 	br	108144c <_do_dtors+0x38>
        (*dtor) (); 
 1081434:	e0bfff17 	ldw	r2,-4(fp)
 1081438:	10800017 	ldw	r2,0(r2)
 108143c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1081440:	e0bfff17 	ldw	r2,-4(fp)
 1081444:	10bfff04 	addi	r2,r2,-4
 1081448:	e0bfff15 	stw	r2,-4(fp)
 108144c:	e0ffff17 	ldw	r3,-4(fp)
 1081450:	00804234 	movhi	r2,264
 1081454:	10893104 	addi	r2,r2,9412
 1081458:	18bff62e 	bgeu	r3,r2,1081434 <_do_dtors+0x20>
        (*dtor) (); 
}
 108145c:	0001883a 	nop
 1081460:	e037883a 	mov	sp,fp
 1081464:	dfc00117 	ldw	ra,4(sp)
 1081468:	df000017 	ldw	fp,0(sp)
 108146c:	dec00204 	addi	sp,sp,8
 1081470:	f800283a 	ret

01081474 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1081474:	defffe04 	addi	sp,sp,-8
 1081478:	dfc00115 	stw	ra,4(sp)
 108147c:	df000015 	stw	fp,0(sp)
 1081480:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1081484:	01440004 	movi	r5,4096
 1081488:	0009883a 	mov	r4,zero
 108148c:	1081e240 	call	1081e24 <alt_icache_flush>
#endif
}
 1081490:	0001883a 	nop
 1081494:	e037883a 	mov	sp,fp
 1081498:	dfc00117 	ldw	ra,4(sp)
 108149c:	df000017 	ldw	fp,0(sp)
 10814a0:	dec00204 	addi	sp,sp,8
 10814a4:	f800283a 	ret

010814a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10814a8:	defff904 	addi	sp,sp,-28
 10814ac:	dfc00615 	stw	ra,24(sp)
 10814b0:	df000515 	stw	fp,20(sp)
 10814b4:	df000504 	addi	fp,sp,20
 10814b8:	e13ffc15 	stw	r4,-16(fp)
 10814bc:	e17ffd15 	stw	r5,-12(fp)
 10814c0:	e1bffe15 	stw	r6,-8(fp)
 10814c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10814c8:	e1bfff17 	ldw	r6,-4(fp)
 10814cc:	e17ffe17 	ldw	r5,-8(fp)
 10814d0:	e13ffd17 	ldw	r4,-12(fp)
 10814d4:	10818680 	call	1081868 <open>
 10814d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10814dc:	e0bffb17 	ldw	r2,-20(fp)
 10814e0:	10001c16 	blt	r2,zero,1081554 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 10814e4:	00804234 	movhi	r2,264
 10814e8:	108d7104 	addi	r2,r2,13764
 10814ec:	e0fffb17 	ldw	r3,-20(fp)
 10814f0:	18c00324 	muli	r3,r3,12
 10814f4:	10c5883a 	add	r2,r2,r3
 10814f8:	10c00017 	ldw	r3,0(r2)
 10814fc:	e0bffc17 	ldw	r2,-16(fp)
 1081500:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1081504:	00804234 	movhi	r2,264
 1081508:	108d7104 	addi	r2,r2,13764
 108150c:	e0fffb17 	ldw	r3,-20(fp)
 1081510:	18c00324 	muli	r3,r3,12
 1081514:	10c5883a 	add	r2,r2,r3
 1081518:	10800104 	addi	r2,r2,4
 108151c:	10c00017 	ldw	r3,0(r2)
 1081520:	e0bffc17 	ldw	r2,-16(fp)
 1081524:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1081528:	00804234 	movhi	r2,264
 108152c:	108d7104 	addi	r2,r2,13764
 1081530:	e0fffb17 	ldw	r3,-20(fp)
 1081534:	18c00324 	muli	r3,r3,12
 1081538:	10c5883a 	add	r2,r2,r3
 108153c:	10800204 	addi	r2,r2,8
 1081540:	10c00017 	ldw	r3,0(r2)
 1081544:	e0bffc17 	ldw	r2,-16(fp)
 1081548:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 108154c:	e13ffb17 	ldw	r4,-20(fp)
 1081550:	10819bc0 	call	10819bc <alt_release_fd>
  }
} 
 1081554:	0001883a 	nop
 1081558:	e037883a 	mov	sp,fp
 108155c:	dfc00117 	ldw	ra,4(sp)
 1081560:	df000017 	ldw	fp,0(sp)
 1081564:	dec00204 	addi	sp,sp,8
 1081568:	f800283a 	ret

0108156c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 108156c:	defffb04 	addi	sp,sp,-20
 1081570:	dfc00415 	stw	ra,16(sp)
 1081574:	df000315 	stw	fp,12(sp)
 1081578:	df000304 	addi	fp,sp,12
 108157c:	e13ffd15 	stw	r4,-12(fp)
 1081580:	e17ffe15 	stw	r5,-8(fp)
 1081584:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1081588:	01c07fc4 	movi	r7,511
 108158c:	01800044 	movi	r6,1
 1081590:	e17ffd17 	ldw	r5,-12(fp)
 1081594:	01004234 	movhi	r4,264
 1081598:	210d7404 	addi	r4,r4,13776
 108159c:	10814a80 	call	10814a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10815a0:	01c07fc4 	movi	r7,511
 10815a4:	000d883a 	mov	r6,zero
 10815a8:	e17ffe17 	ldw	r5,-8(fp)
 10815ac:	01004234 	movhi	r4,264
 10815b0:	210d7104 	addi	r4,r4,13764
 10815b4:	10814a80 	call	10814a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10815b8:	01c07fc4 	movi	r7,511
 10815bc:	01800044 	movi	r6,1
 10815c0:	e17fff17 	ldw	r5,-4(fp)
 10815c4:	01004234 	movhi	r4,264
 10815c8:	210d7704 	addi	r4,r4,13788
 10815cc:	10814a80 	call	10814a8 <alt_open_fd>
}  
 10815d0:	0001883a 	nop
 10815d4:	e037883a 	mov	sp,fp
 10815d8:	dfc00117 	ldw	ra,4(sp)
 10815dc:	df000017 	ldw	fp,0(sp)
 10815e0:	dec00204 	addi	sp,sp,8
 10815e4:	f800283a 	ret

010815e8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 10815e8:	defff004 	addi	sp,sp,-64
 10815ec:	df000f15 	stw	fp,60(sp)
 10815f0:	df000f04 	addi	fp,sp,60
 10815f4:	e13ffd15 	stw	r4,-12(fp)
 10815f8:	e17ffe15 	stw	r5,-8(fp)
 10815fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1081600:	00bffa84 	movi	r2,-22
 1081604:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1081608:	e0bffd17 	ldw	r2,-12(fp)
 108160c:	10800828 	cmpgeui	r2,r2,32
 1081610:	1000501e 	bne	r2,zero,1081754 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1081614:	0005303a 	rdctl	r2,status
 1081618:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108161c:	e0fff617 	ldw	r3,-40(fp)
 1081620:	00bfff84 	movi	r2,-2
 1081624:	1884703a 	and	r2,r3,r2
 1081628:	1001703a 	wrctl	status,r2
  
  return context;
 108162c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1081630:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 1081634:	00804234 	movhi	r2,264
 1081638:	10948f04 	addi	r2,r2,21052
 108163c:	e0fffd17 	ldw	r3,-12(fp)
 1081640:	180690fa 	slli	r3,r3,3
 1081644:	10c5883a 	add	r2,r2,r3
 1081648:	e0ffff17 	ldw	r3,-4(fp)
 108164c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1081650:	00804234 	movhi	r2,264
 1081654:	10948f04 	addi	r2,r2,21052
 1081658:	e0fffd17 	ldw	r3,-12(fp)
 108165c:	180690fa 	slli	r3,r3,3
 1081660:	10c5883a 	add	r2,r2,r3
 1081664:	10800104 	addi	r2,r2,4
 1081668:	e0fffe17 	ldw	r3,-8(fp)
 108166c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1081670:	e0bfff17 	ldw	r2,-4(fp)
 1081674:	10001926 	beq	r2,zero,10816dc <alt_irq_register+0xf4>
 1081678:	e0bffd17 	ldw	r2,-12(fp)
 108167c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1081680:	0005303a 	rdctl	r2,status
 1081684:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1081688:	e0fff717 	ldw	r3,-36(fp)
 108168c:	00bfff84 	movi	r2,-2
 1081690:	1884703a 	and	r2,r3,r2
 1081694:	1001703a 	wrctl	status,r2
  
  return context;
 1081698:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 108169c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 10816a0:	00c00044 	movi	r3,1
 10816a4:	e0bff217 	ldw	r2,-56(fp)
 10816a8:	1884983a 	sll	r2,r3,r2
 10816ac:	1007883a 	mov	r3,r2
 10816b0:	d0a5b017 	ldw	r2,-26944(gp)
 10816b4:	1884b03a 	or	r2,r3,r2
 10816b8:	d0a5b015 	stw	r2,-26944(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10816bc:	d0a5b017 	ldw	r2,-26944(gp)
 10816c0:	100170fa 	wrctl	ienable,r2
 10816c4:	e0bff817 	ldw	r2,-32(fp)
 10816c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10816cc:	e0bff917 	ldw	r2,-28(fp)
 10816d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10816d4:	0005883a 	mov	r2,zero
 10816d8:	00001906 	br	1081740 <alt_irq_register+0x158>
 10816dc:	e0bffd17 	ldw	r2,-12(fp)
 10816e0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10816e4:	0005303a 	rdctl	r2,status
 10816e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10816ec:	e0fffa17 	ldw	r3,-24(fp)
 10816f0:	00bfff84 	movi	r2,-2
 10816f4:	1884703a 	and	r2,r3,r2
 10816f8:	1001703a 	wrctl	status,r2
  
  return context;
 10816fc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1081700:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 1081704:	00c00044 	movi	r3,1
 1081708:	e0bff417 	ldw	r2,-48(fp)
 108170c:	1884983a 	sll	r2,r3,r2
 1081710:	0084303a 	nor	r2,zero,r2
 1081714:	1007883a 	mov	r3,r2
 1081718:	d0a5b017 	ldw	r2,-26944(gp)
 108171c:	1884703a 	and	r2,r3,r2
 1081720:	d0a5b015 	stw	r2,-26944(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1081724:	d0a5b017 	ldw	r2,-26944(gp)
 1081728:	100170fa 	wrctl	ienable,r2
 108172c:	e0bffb17 	ldw	r2,-20(fp)
 1081730:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1081734:	e0bffc17 	ldw	r2,-16(fp)
 1081738:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 108173c:	0005883a 	mov	r2,zero
 1081740:	e0bff115 	stw	r2,-60(fp)
 1081744:	e0bff317 	ldw	r2,-52(fp)
 1081748:	e0bff515 	stw	r2,-44(fp)
 108174c:	e0bff517 	ldw	r2,-44(fp)
 1081750:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1081754:	e0bff117 	ldw	r2,-60(fp)
}
 1081758:	e037883a 	mov	sp,fp
 108175c:	df000017 	ldw	fp,0(sp)
 1081760:	dec00104 	addi	sp,sp,4
 1081764:	f800283a 	ret

01081768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1081768:	defffe04 	addi	sp,sp,-8
 108176c:	dfc00115 	stw	ra,4(sp)
 1081770:	df000015 	stw	fp,0(sp)
 1081774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1081778:	d0a00517 	ldw	r2,-32748(gp)
 108177c:	10000326 	beq	r2,zero,108178c <alt_get_errno+0x24>
 1081780:	d0a00517 	ldw	r2,-32748(gp)
 1081784:	103ee83a 	callr	r2
 1081788:	00000106 	br	1081790 <alt_get_errno+0x28>
 108178c:	d0a5b404 	addi	r2,gp,-26928
}
 1081790:	e037883a 	mov	sp,fp
 1081794:	dfc00117 	ldw	ra,4(sp)
 1081798:	df000017 	ldw	fp,0(sp)
 108179c:	dec00204 	addi	sp,sp,8
 10817a0:	f800283a 	ret

010817a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10817a4:	defffd04 	addi	sp,sp,-12
 10817a8:	df000215 	stw	fp,8(sp)
 10817ac:	df000204 	addi	fp,sp,8
 10817b0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10817b4:	e0bfff17 	ldw	r2,-4(fp)
 10817b8:	10800217 	ldw	r2,8(r2)
 10817bc:	10d00034 	orhi	r3,r2,16384
 10817c0:	e0bfff17 	ldw	r2,-4(fp)
 10817c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10817c8:	e03ffe15 	stw	zero,-8(fp)
 10817cc:	00001d06 	br	1081844 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10817d0:	00804234 	movhi	r2,264
 10817d4:	108d7104 	addi	r2,r2,13764
 10817d8:	e0fffe17 	ldw	r3,-8(fp)
 10817dc:	18c00324 	muli	r3,r3,12
 10817e0:	10c5883a 	add	r2,r2,r3
 10817e4:	10c00017 	ldw	r3,0(r2)
 10817e8:	e0bfff17 	ldw	r2,-4(fp)
 10817ec:	10800017 	ldw	r2,0(r2)
 10817f0:	1880111e 	bne	r3,r2,1081838 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10817f4:	00804234 	movhi	r2,264
 10817f8:	108d7104 	addi	r2,r2,13764
 10817fc:	e0fffe17 	ldw	r3,-8(fp)
 1081800:	18c00324 	muli	r3,r3,12
 1081804:	10c5883a 	add	r2,r2,r3
 1081808:	10800204 	addi	r2,r2,8
 108180c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1081810:	1000090e 	bge	r2,zero,1081838 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1081814:	e0bffe17 	ldw	r2,-8(fp)
 1081818:	10c00324 	muli	r3,r2,12
 108181c:	00804234 	movhi	r2,264
 1081820:	108d7104 	addi	r2,r2,13764
 1081824:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1081828:	e0bfff17 	ldw	r2,-4(fp)
 108182c:	18800226 	beq	r3,r2,1081838 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1081830:	00bffcc4 	movi	r2,-13
 1081834:	00000806 	br	1081858 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1081838:	e0bffe17 	ldw	r2,-8(fp)
 108183c:	10800044 	addi	r2,r2,1
 1081840:	e0bffe15 	stw	r2,-8(fp)
 1081844:	d0a00417 	ldw	r2,-32752(gp)
 1081848:	1007883a 	mov	r3,r2
 108184c:	e0bffe17 	ldw	r2,-8(fp)
 1081850:	18bfdf2e 	bgeu	r3,r2,10817d0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1081854:	0005883a 	mov	r2,zero
}
 1081858:	e037883a 	mov	sp,fp
 108185c:	df000017 	ldw	fp,0(sp)
 1081860:	dec00104 	addi	sp,sp,4
 1081864:	f800283a 	ret

01081868 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1081868:	defff604 	addi	sp,sp,-40
 108186c:	dfc00915 	stw	ra,36(sp)
 1081870:	df000815 	stw	fp,32(sp)
 1081874:	df000804 	addi	fp,sp,32
 1081878:	e13ffd15 	stw	r4,-12(fp)
 108187c:	e17ffe15 	stw	r5,-8(fp)
 1081880:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1081884:	00bfffc4 	movi	r2,-1
 1081888:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 108188c:	00bffb44 	movi	r2,-19
 1081890:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1081894:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1081898:	d1600204 	addi	r5,gp,-32760
 108189c:	e13ffd17 	ldw	r4,-12(fp)
 10818a0:	1081be80 	call	1081be8 <alt_find_dev>
 10818a4:	e0bff815 	stw	r2,-32(fp)
 10818a8:	e0bff817 	ldw	r2,-32(fp)
 10818ac:	1000051e 	bne	r2,zero,10818c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10818b0:	e13ffd17 	ldw	r4,-12(fp)
 10818b4:	1081c780 	call	1081c78 <alt_find_file>
 10818b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 10818bc:	00800044 	movi	r2,1
 10818c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10818c4:	e0bff817 	ldw	r2,-32(fp)
 10818c8:	10002926 	beq	r2,zero,1081970 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10818cc:	e13ff817 	ldw	r4,-32(fp)
 10818d0:	1081d800 	call	1081d80 <alt_get_fd>
 10818d4:	e0bff915 	stw	r2,-28(fp)
 10818d8:	e0bff917 	ldw	r2,-28(fp)
 10818dc:	1000030e 	bge	r2,zero,10818ec <open+0x84>
    {
      status = index;
 10818e0:	e0bff917 	ldw	r2,-28(fp)
 10818e4:	e0bffa15 	stw	r2,-24(fp)
 10818e8:	00002306 	br	1081978 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 10818ec:	e0bff917 	ldw	r2,-28(fp)
 10818f0:	10c00324 	muli	r3,r2,12
 10818f4:	00804234 	movhi	r2,264
 10818f8:	108d7104 	addi	r2,r2,13764
 10818fc:	1885883a 	add	r2,r3,r2
 1081900:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1081904:	e0fffe17 	ldw	r3,-8(fp)
 1081908:	00900034 	movhi	r2,16384
 108190c:	10bfffc4 	addi	r2,r2,-1
 1081910:	1886703a 	and	r3,r3,r2
 1081914:	e0bffc17 	ldw	r2,-16(fp)
 1081918:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 108191c:	e0bffb17 	ldw	r2,-20(fp)
 1081920:	1000051e 	bne	r2,zero,1081938 <open+0xd0>
 1081924:	e13ffc17 	ldw	r4,-16(fp)
 1081928:	10817a40 	call	10817a4 <alt_file_locked>
 108192c:	e0bffa15 	stw	r2,-24(fp)
 1081930:	e0bffa17 	ldw	r2,-24(fp)
 1081934:	10001016 	blt	r2,zero,1081978 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1081938:	e0bff817 	ldw	r2,-32(fp)
 108193c:	10800317 	ldw	r2,12(r2)
 1081940:	10000826 	beq	r2,zero,1081964 <open+0xfc>
 1081944:	e0bff817 	ldw	r2,-32(fp)
 1081948:	10800317 	ldw	r2,12(r2)
 108194c:	e1ffff17 	ldw	r7,-4(fp)
 1081950:	e1bffe17 	ldw	r6,-8(fp)
 1081954:	e17ffd17 	ldw	r5,-12(fp)
 1081958:	e13ffc17 	ldw	r4,-16(fp)
 108195c:	103ee83a 	callr	r2
 1081960:	00000106 	br	1081968 <open+0x100>
 1081964:	0005883a 	mov	r2,zero
 1081968:	e0bffa15 	stw	r2,-24(fp)
 108196c:	00000206 	br	1081978 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1081970:	00bffb44 	movi	r2,-19
 1081974:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1081978:	e0bffa17 	ldw	r2,-24(fp)
 108197c:	1000090e 	bge	r2,zero,10819a4 <open+0x13c>
  {
    alt_release_fd (index);  
 1081980:	e13ff917 	ldw	r4,-28(fp)
 1081984:	10819bc0 	call	10819bc <alt_release_fd>
    ALT_ERRNO = -status;
 1081988:	10817680 	call	1081768 <alt_get_errno>
 108198c:	1007883a 	mov	r3,r2
 1081990:	e0bffa17 	ldw	r2,-24(fp)
 1081994:	0085c83a 	sub	r2,zero,r2
 1081998:	18800015 	stw	r2,0(r3)
    return -1;
 108199c:	00bfffc4 	movi	r2,-1
 10819a0:	00000106 	br	10819a8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 10819a4:	e0bff917 	ldw	r2,-28(fp)
}
 10819a8:	e037883a 	mov	sp,fp
 10819ac:	dfc00117 	ldw	ra,4(sp)
 10819b0:	df000017 	ldw	fp,0(sp)
 10819b4:	dec00204 	addi	sp,sp,8
 10819b8:	f800283a 	ret

010819bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10819bc:	defffe04 	addi	sp,sp,-8
 10819c0:	df000115 	stw	fp,4(sp)
 10819c4:	df000104 	addi	fp,sp,4
 10819c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10819cc:	e0bfff17 	ldw	r2,-4(fp)
 10819d0:	108000d0 	cmplti	r2,r2,3
 10819d4:	10000d1e 	bne	r2,zero,1081a0c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10819d8:	00804234 	movhi	r2,264
 10819dc:	108d7104 	addi	r2,r2,13764
 10819e0:	e0ffff17 	ldw	r3,-4(fp)
 10819e4:	18c00324 	muli	r3,r3,12
 10819e8:	10c5883a 	add	r2,r2,r3
 10819ec:	10800204 	addi	r2,r2,8
 10819f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10819f4:	00804234 	movhi	r2,264
 10819f8:	108d7104 	addi	r2,r2,13764
 10819fc:	e0ffff17 	ldw	r3,-4(fp)
 1081a00:	18c00324 	muli	r3,r3,12
 1081a04:	10c5883a 	add	r2,r2,r3
 1081a08:	10000015 	stw	zero,0(r2)
  }
}
 1081a0c:	0001883a 	nop
 1081a10:	e037883a 	mov	sp,fp
 1081a14:	df000017 	ldw	fp,0(sp)
 1081a18:	dec00104 	addi	sp,sp,4
 1081a1c:	f800283a 	ret

01081a20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1081a20:	defffa04 	addi	sp,sp,-24
 1081a24:	df000515 	stw	fp,20(sp)
 1081a28:	df000504 	addi	fp,sp,20
 1081a2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1081a30:	0005303a 	rdctl	r2,status
 1081a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1081a38:	e0fffc17 	ldw	r3,-16(fp)
 1081a3c:	00bfff84 	movi	r2,-2
 1081a40:	1884703a 	and	r2,r3,r2
 1081a44:	1001703a 	wrctl	status,r2
  
  return context;
 1081a48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1081a4c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1081a50:	e0bfff17 	ldw	r2,-4(fp)
 1081a54:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1081a58:	e0bffd17 	ldw	r2,-12(fp)
 1081a5c:	10800017 	ldw	r2,0(r2)
 1081a60:	e0fffd17 	ldw	r3,-12(fp)
 1081a64:	18c00117 	ldw	r3,4(r3)
 1081a68:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1081a6c:	e0bffd17 	ldw	r2,-12(fp)
 1081a70:	10800117 	ldw	r2,4(r2)
 1081a74:	e0fffd17 	ldw	r3,-12(fp)
 1081a78:	18c00017 	ldw	r3,0(r3)
 1081a7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1081a80:	e0bffd17 	ldw	r2,-12(fp)
 1081a84:	e0fffd17 	ldw	r3,-12(fp)
 1081a88:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1081a8c:	e0bffd17 	ldw	r2,-12(fp)
 1081a90:	e0fffd17 	ldw	r3,-12(fp)
 1081a94:	10c00015 	stw	r3,0(r2)
 1081a98:	e0bffb17 	ldw	r2,-20(fp)
 1081a9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1081aa0:	e0bffe17 	ldw	r2,-8(fp)
 1081aa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1081aa8:	0001883a 	nop
 1081aac:	e037883a 	mov	sp,fp
 1081ab0:	df000017 	ldw	fp,0(sp)
 1081ab4:	dec00104 	addi	sp,sp,4
 1081ab8:	f800283a 	ret

01081abc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1081abc:	defffb04 	addi	sp,sp,-20
 1081ac0:	dfc00415 	stw	ra,16(sp)
 1081ac4:	df000315 	stw	fp,12(sp)
 1081ac8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1081acc:	d0a00717 	ldw	r2,-32740(gp)
 1081ad0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1081ad4:	d0a5b217 	ldw	r2,-26936(gp)
 1081ad8:	10800044 	addi	r2,r2,1
 1081adc:	d0a5b215 	stw	r2,-26936(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1081ae0:	00002e06 	br	1081b9c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1081ae4:	e0bffd17 	ldw	r2,-12(fp)
 1081ae8:	10800017 	ldw	r2,0(r2)
 1081aec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1081af0:	e0bffd17 	ldw	r2,-12(fp)
 1081af4:	10800403 	ldbu	r2,16(r2)
 1081af8:	10803fcc 	andi	r2,r2,255
 1081afc:	10000426 	beq	r2,zero,1081b10 <alt_tick+0x54>
 1081b00:	d0a5b217 	ldw	r2,-26936(gp)
 1081b04:	1000021e 	bne	r2,zero,1081b10 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1081b08:	e0bffd17 	ldw	r2,-12(fp)
 1081b0c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1081b10:	e0bffd17 	ldw	r2,-12(fp)
 1081b14:	10800217 	ldw	r2,8(r2)
 1081b18:	d0e5b217 	ldw	r3,-26936(gp)
 1081b1c:	18801d36 	bltu	r3,r2,1081b94 <alt_tick+0xd8>
 1081b20:	e0bffd17 	ldw	r2,-12(fp)
 1081b24:	10800403 	ldbu	r2,16(r2)
 1081b28:	10803fcc 	andi	r2,r2,255
 1081b2c:	1000191e 	bne	r2,zero,1081b94 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1081b30:	e0bffd17 	ldw	r2,-12(fp)
 1081b34:	10800317 	ldw	r2,12(r2)
 1081b38:	e0fffd17 	ldw	r3,-12(fp)
 1081b3c:	18c00517 	ldw	r3,20(r3)
 1081b40:	1809883a 	mov	r4,r3
 1081b44:	103ee83a 	callr	r2
 1081b48:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1081b4c:	e0bfff17 	ldw	r2,-4(fp)
 1081b50:	1000031e 	bne	r2,zero,1081b60 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1081b54:	e13ffd17 	ldw	r4,-12(fp)
 1081b58:	1081a200 	call	1081a20 <alt_alarm_stop>
 1081b5c:	00000d06 	br	1081b94 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1081b60:	e0bffd17 	ldw	r2,-12(fp)
 1081b64:	10c00217 	ldw	r3,8(r2)
 1081b68:	e0bfff17 	ldw	r2,-4(fp)
 1081b6c:	1887883a 	add	r3,r3,r2
 1081b70:	e0bffd17 	ldw	r2,-12(fp)
 1081b74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1081b78:	e0bffd17 	ldw	r2,-12(fp)
 1081b7c:	10c00217 	ldw	r3,8(r2)
 1081b80:	d0a5b217 	ldw	r2,-26936(gp)
 1081b84:	1880032e 	bgeu	r3,r2,1081b94 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1081b88:	e0bffd17 	ldw	r2,-12(fp)
 1081b8c:	00c00044 	movi	r3,1
 1081b90:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1081b94:	e0bffe17 	ldw	r2,-8(fp)
 1081b98:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1081b9c:	e0fffd17 	ldw	r3,-12(fp)
 1081ba0:	d0a00704 	addi	r2,gp,-32740
 1081ba4:	18bfcf1e 	bne	r3,r2,1081ae4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1081ba8:	0001883a 	nop
}
 1081bac:	0001883a 	nop
 1081bb0:	e037883a 	mov	sp,fp
 1081bb4:	dfc00117 	ldw	ra,4(sp)
 1081bb8:	df000017 	ldw	fp,0(sp)
 1081bbc:	dec00204 	addi	sp,sp,8
 1081bc0:	f800283a 	ret

01081bc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1081bc4:	deffff04 	addi	sp,sp,-4
 1081bc8:	df000015 	stw	fp,0(sp)
 1081bcc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1081bd0:	000170fa 	wrctl	ienable,zero
}
 1081bd4:	0001883a 	nop
 1081bd8:	e037883a 	mov	sp,fp
 1081bdc:	df000017 	ldw	fp,0(sp)
 1081be0:	dec00104 	addi	sp,sp,4
 1081be4:	f800283a 	ret

01081be8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1081be8:	defffa04 	addi	sp,sp,-24
 1081bec:	dfc00515 	stw	ra,20(sp)
 1081bf0:	df000415 	stw	fp,16(sp)
 1081bf4:	df000404 	addi	fp,sp,16
 1081bf8:	e13ffe15 	stw	r4,-8(fp)
 1081bfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1081c00:	e0bfff17 	ldw	r2,-4(fp)
 1081c04:	10800017 	ldw	r2,0(r2)
 1081c08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1081c0c:	e13ffe17 	ldw	r4,-8(fp)
 1081c10:	10821600 	call	1082160 <strlen>
 1081c14:	10800044 	addi	r2,r2,1
 1081c18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1081c1c:	00000d06 	br	1081c54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1081c20:	e0bffc17 	ldw	r2,-16(fp)
 1081c24:	10800217 	ldw	r2,8(r2)
 1081c28:	e0fffd17 	ldw	r3,-12(fp)
 1081c2c:	180d883a 	mov	r6,r3
 1081c30:	e17ffe17 	ldw	r5,-8(fp)
 1081c34:	1009883a 	mov	r4,r2
 1081c38:	1081f9c0 	call	1081f9c <memcmp>
 1081c3c:	1000021e 	bne	r2,zero,1081c48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1081c40:	e0bffc17 	ldw	r2,-16(fp)
 1081c44:	00000706 	br	1081c64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1081c48:	e0bffc17 	ldw	r2,-16(fp)
 1081c4c:	10800017 	ldw	r2,0(r2)
 1081c50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1081c54:	e0fffc17 	ldw	r3,-16(fp)
 1081c58:	e0bfff17 	ldw	r2,-4(fp)
 1081c5c:	18bff01e 	bne	r3,r2,1081c20 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1081c60:	0005883a 	mov	r2,zero
}
 1081c64:	e037883a 	mov	sp,fp
 1081c68:	dfc00117 	ldw	ra,4(sp)
 1081c6c:	df000017 	ldw	fp,0(sp)
 1081c70:	dec00204 	addi	sp,sp,8
 1081c74:	f800283a 	ret

01081c78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1081c78:	defffb04 	addi	sp,sp,-20
 1081c7c:	dfc00415 	stw	ra,16(sp)
 1081c80:	df000315 	stw	fp,12(sp)
 1081c84:	df000304 	addi	fp,sp,12
 1081c88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1081c8c:	d0a00017 	ldw	r2,-32768(gp)
 1081c90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1081c94:	00003106 	br	1081d5c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1081c98:	e0bffd17 	ldw	r2,-12(fp)
 1081c9c:	10800217 	ldw	r2,8(r2)
 1081ca0:	1009883a 	mov	r4,r2
 1081ca4:	10821600 	call	1082160 <strlen>
 1081ca8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1081cac:	e0bffd17 	ldw	r2,-12(fp)
 1081cb0:	10c00217 	ldw	r3,8(r2)
 1081cb4:	e0bffe17 	ldw	r2,-8(fp)
 1081cb8:	10bfffc4 	addi	r2,r2,-1
 1081cbc:	1885883a 	add	r2,r3,r2
 1081cc0:	10800003 	ldbu	r2,0(r2)
 1081cc4:	10803fcc 	andi	r2,r2,255
 1081cc8:	1080201c 	xori	r2,r2,128
 1081ccc:	10bfe004 	addi	r2,r2,-128
 1081cd0:	10800bd8 	cmpnei	r2,r2,47
 1081cd4:	1000031e 	bne	r2,zero,1081ce4 <alt_find_file+0x6c>
    {
      len -= 1;
 1081cd8:	e0bffe17 	ldw	r2,-8(fp)
 1081cdc:	10bfffc4 	addi	r2,r2,-1
 1081ce0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1081ce4:	e0bffe17 	ldw	r2,-8(fp)
 1081ce8:	e0ffff17 	ldw	r3,-4(fp)
 1081cec:	1885883a 	add	r2,r3,r2
 1081cf0:	10800003 	ldbu	r2,0(r2)
 1081cf4:	10803fcc 	andi	r2,r2,255
 1081cf8:	1080201c 	xori	r2,r2,128
 1081cfc:	10bfe004 	addi	r2,r2,-128
 1081d00:	10800be0 	cmpeqi	r2,r2,47
 1081d04:	1000081e 	bne	r2,zero,1081d28 <alt_find_file+0xb0>
 1081d08:	e0bffe17 	ldw	r2,-8(fp)
 1081d0c:	e0ffff17 	ldw	r3,-4(fp)
 1081d10:	1885883a 	add	r2,r3,r2
 1081d14:	10800003 	ldbu	r2,0(r2)
 1081d18:	10803fcc 	andi	r2,r2,255
 1081d1c:	1080201c 	xori	r2,r2,128
 1081d20:	10bfe004 	addi	r2,r2,-128
 1081d24:	10000a1e 	bne	r2,zero,1081d50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1081d28:	e0bffd17 	ldw	r2,-12(fp)
 1081d2c:	10800217 	ldw	r2,8(r2)
 1081d30:	e0fffe17 	ldw	r3,-8(fp)
 1081d34:	180d883a 	mov	r6,r3
 1081d38:	e17fff17 	ldw	r5,-4(fp)
 1081d3c:	1009883a 	mov	r4,r2
 1081d40:	1081f9c0 	call	1081f9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1081d44:	1000021e 	bne	r2,zero,1081d50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1081d48:	e0bffd17 	ldw	r2,-12(fp)
 1081d4c:	00000706 	br	1081d6c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1081d50:	e0bffd17 	ldw	r2,-12(fp)
 1081d54:	10800017 	ldw	r2,0(r2)
 1081d58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1081d5c:	e0fffd17 	ldw	r3,-12(fp)
 1081d60:	d0a00004 	addi	r2,gp,-32768
 1081d64:	18bfcc1e 	bne	r3,r2,1081c98 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1081d68:	0005883a 	mov	r2,zero
}
 1081d6c:	e037883a 	mov	sp,fp
 1081d70:	dfc00117 	ldw	ra,4(sp)
 1081d74:	df000017 	ldw	fp,0(sp)
 1081d78:	dec00204 	addi	sp,sp,8
 1081d7c:	f800283a 	ret

01081d80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1081d80:	defffc04 	addi	sp,sp,-16
 1081d84:	df000315 	stw	fp,12(sp)
 1081d88:	df000304 	addi	fp,sp,12
 1081d8c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1081d90:	00bffa04 	movi	r2,-24
 1081d94:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1081d98:	e03ffd15 	stw	zero,-12(fp)
 1081d9c:	00001906 	br	1081e04 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1081da0:	00804234 	movhi	r2,264
 1081da4:	108d7104 	addi	r2,r2,13764
 1081da8:	e0fffd17 	ldw	r3,-12(fp)
 1081dac:	18c00324 	muli	r3,r3,12
 1081db0:	10c5883a 	add	r2,r2,r3
 1081db4:	10800017 	ldw	r2,0(r2)
 1081db8:	10000f1e 	bne	r2,zero,1081df8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1081dbc:	00804234 	movhi	r2,264
 1081dc0:	108d7104 	addi	r2,r2,13764
 1081dc4:	e0fffd17 	ldw	r3,-12(fp)
 1081dc8:	18c00324 	muli	r3,r3,12
 1081dcc:	10c5883a 	add	r2,r2,r3
 1081dd0:	e0ffff17 	ldw	r3,-4(fp)
 1081dd4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1081dd8:	d0e00417 	ldw	r3,-32752(gp)
 1081ddc:	e0bffd17 	ldw	r2,-12(fp)
 1081de0:	1880020e 	bge	r3,r2,1081dec <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1081de4:	e0bffd17 	ldw	r2,-12(fp)
 1081de8:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 1081dec:	e0bffd17 	ldw	r2,-12(fp)
 1081df0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1081df4:	00000606 	br	1081e10 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1081df8:	e0bffd17 	ldw	r2,-12(fp)
 1081dfc:	10800044 	addi	r2,r2,1
 1081e00:	e0bffd15 	stw	r2,-12(fp)
 1081e04:	e0bffd17 	ldw	r2,-12(fp)
 1081e08:	10800810 	cmplti	r2,r2,32
 1081e0c:	103fe41e 	bne	r2,zero,1081da0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1081e10:	e0bffe17 	ldw	r2,-8(fp)
}
 1081e14:	e037883a 	mov	sp,fp
 1081e18:	df000017 	ldw	fp,0(sp)
 1081e1c:	dec00104 	addi	sp,sp,4
 1081e20:	f800283a 	ret

01081e24 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1081e24:	defffb04 	addi	sp,sp,-20
 1081e28:	df000415 	stw	fp,16(sp)
 1081e2c:	df000404 	addi	fp,sp,16
 1081e30:	e13ffe15 	stw	r4,-8(fp)
 1081e34:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1081e38:	e0bfff17 	ldw	r2,-4(fp)
 1081e3c:	10840070 	cmpltui	r2,r2,4097
 1081e40:	1000021e 	bne	r2,zero,1081e4c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1081e44:	00840004 	movi	r2,4096
 1081e48:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1081e4c:	e0fffe17 	ldw	r3,-8(fp)
 1081e50:	e0bfff17 	ldw	r2,-4(fp)
 1081e54:	1885883a 	add	r2,r3,r2
 1081e58:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1081e5c:	e0bffe17 	ldw	r2,-8(fp)
 1081e60:	e0bffc15 	stw	r2,-16(fp)
 1081e64:	00000506 	br	1081e7c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1081e68:	e0bffc17 	ldw	r2,-16(fp)
 1081e6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1081e70:	e0bffc17 	ldw	r2,-16(fp)
 1081e74:	10800804 	addi	r2,r2,32
 1081e78:	e0bffc15 	stw	r2,-16(fp)
 1081e7c:	e0fffc17 	ldw	r3,-16(fp)
 1081e80:	e0bffd17 	ldw	r2,-12(fp)
 1081e84:	18bff836 	bltu	r3,r2,1081e68 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1081e88:	e0bffe17 	ldw	r2,-8(fp)
 1081e8c:	108007cc 	andi	r2,r2,31
 1081e90:	10000226 	beq	r2,zero,1081e9c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1081e94:	e0bffc17 	ldw	r2,-16(fp)
 1081e98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1081e9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1081ea0:	0001883a 	nop
 1081ea4:	e037883a 	mov	sp,fp
 1081ea8:	df000017 	ldw	fp,0(sp)
 1081eac:	dec00104 	addi	sp,sp,4
 1081eb0:	f800283a 	ret

01081eb4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1081eb4:	defffe04 	addi	sp,sp,-8
 1081eb8:	df000115 	stw	fp,4(sp)
 1081ebc:	df000104 	addi	fp,sp,4
 1081ec0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1081ec4:	e0bfff17 	ldw	r2,-4(fp)
 1081ec8:	10bffe84 	addi	r2,r2,-6
 1081ecc:	10c00428 	cmpgeui	r3,r2,16
 1081ed0:	18001a1e 	bne	r3,zero,1081f3c <alt_exception_cause_generated_bad_addr+0x88>
 1081ed4:	100690ba 	slli	r3,r2,2
 1081ed8:	00804234 	movhi	r2,264
 1081edc:	1087bb04 	addi	r2,r2,7916
 1081ee0:	1885883a 	add	r2,r3,r2
 1081ee4:	10800017 	ldw	r2,0(r2)
 1081ee8:	1000683a 	jmp	r2
 1081eec:	01081f2c 	andhi	r4,zero,8316
 1081ef0:	01081f2c 	andhi	r4,zero,8316
 1081ef4:	01081f3c 	xorhi	r4,zero,8316
 1081ef8:	01081f3c 	xorhi	r4,zero,8316
 1081efc:	01081f3c 	xorhi	r4,zero,8316
 1081f00:	01081f2c 	andhi	r4,zero,8316
 1081f04:	01081f34 	movhi	r4,8316
 1081f08:	01081f3c 	xorhi	r4,zero,8316
 1081f0c:	01081f2c 	andhi	r4,zero,8316
 1081f10:	01081f2c 	andhi	r4,zero,8316
 1081f14:	01081f3c 	xorhi	r4,zero,8316
 1081f18:	01081f2c 	andhi	r4,zero,8316
 1081f1c:	01081f34 	movhi	r4,8316
 1081f20:	01081f3c 	xorhi	r4,zero,8316
 1081f24:	01081f3c 	xorhi	r4,zero,8316
 1081f28:	01081f2c 	andhi	r4,zero,8316
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1081f2c:	00800044 	movi	r2,1
 1081f30:	00000306 	br	1081f40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1081f34:	0005883a 	mov	r2,zero
 1081f38:	00000106 	br	1081f40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1081f3c:	0005883a 	mov	r2,zero
  }
}
 1081f40:	e037883a 	mov	sp,fp
 1081f44:	df000017 	ldw	fp,0(sp)
 1081f48:	dec00104 	addi	sp,sp,4
 1081f4c:	f800283a 	ret

01081f50 <atexit>:
 1081f50:	200b883a 	mov	r5,r4
 1081f54:	000f883a 	mov	r7,zero
 1081f58:	000d883a 	mov	r6,zero
 1081f5c:	0009883a 	mov	r4,zero
 1081f60:	10821f81 	jmpi	10821f8 <__register_exitproc>

01081f64 <exit>:
 1081f64:	defffe04 	addi	sp,sp,-8
 1081f68:	000b883a 	mov	r5,zero
 1081f6c:	dc000015 	stw	r16,0(sp)
 1081f70:	dfc00115 	stw	ra,4(sp)
 1081f74:	2021883a 	mov	r16,r4
 1081f78:	10823100 	call	1082310 <__call_exitprocs>
 1081f7c:	00804234 	movhi	r2,264
 1081f80:	108ee304 	addi	r2,r2,15244
 1081f84:	11000017 	ldw	r4,0(r2)
 1081f88:	20800f17 	ldw	r2,60(r4)
 1081f8c:	10000126 	beq	r2,zero,1081f94 <exit+0x30>
 1081f90:	103ee83a 	callr	r2
 1081f94:	8009883a 	mov	r4,r16
 1081f98:	10824900 	call	1082490 <_exit>

01081f9c <memcmp>:
 1081f9c:	01c000c4 	movi	r7,3
 1081fa0:	3980192e 	bgeu	r7,r6,1082008 <memcmp+0x6c>
 1081fa4:	2144b03a 	or	r2,r4,r5
 1081fa8:	11c4703a 	and	r2,r2,r7
 1081fac:	10000f26 	beq	r2,zero,1081fec <memcmp+0x50>
 1081fb0:	20800003 	ldbu	r2,0(r4)
 1081fb4:	28c00003 	ldbu	r3,0(r5)
 1081fb8:	10c0151e 	bne	r2,r3,1082010 <memcmp+0x74>
 1081fbc:	31bfff84 	addi	r6,r6,-2
 1081fc0:	01ffffc4 	movi	r7,-1
 1081fc4:	00000406 	br	1081fd8 <memcmp+0x3c>
 1081fc8:	20800003 	ldbu	r2,0(r4)
 1081fcc:	28c00003 	ldbu	r3,0(r5)
 1081fd0:	31bfffc4 	addi	r6,r6,-1
 1081fd4:	10c00e1e 	bne	r2,r3,1082010 <memcmp+0x74>
 1081fd8:	21000044 	addi	r4,r4,1
 1081fdc:	29400044 	addi	r5,r5,1
 1081fe0:	31fff91e 	bne	r6,r7,1081fc8 <memcmp+0x2c>
 1081fe4:	0005883a 	mov	r2,zero
 1081fe8:	f800283a 	ret
 1081fec:	20c00017 	ldw	r3,0(r4)
 1081ff0:	28800017 	ldw	r2,0(r5)
 1081ff4:	18bfee1e 	bne	r3,r2,1081fb0 <memcmp+0x14>
 1081ff8:	31bfff04 	addi	r6,r6,-4
 1081ffc:	21000104 	addi	r4,r4,4
 1082000:	29400104 	addi	r5,r5,4
 1082004:	39bff936 	bltu	r7,r6,1081fec <memcmp+0x50>
 1082008:	303fe91e 	bne	r6,zero,1081fb0 <memcmp+0x14>
 108200c:	003ff506 	br	1081fe4 <memcmp+0x48>
 1082010:	10c5c83a 	sub	r2,r2,r3
 1082014:	f800283a 	ret

01082018 <memcpy>:
 1082018:	defffd04 	addi	sp,sp,-12
 108201c:	dfc00215 	stw	ra,8(sp)
 1082020:	dc400115 	stw	r17,4(sp)
 1082024:	dc000015 	stw	r16,0(sp)
 1082028:	00c003c4 	movi	r3,15
 108202c:	2005883a 	mov	r2,r4
 1082030:	1980452e 	bgeu	r3,r6,1082148 <memcpy+0x130>
 1082034:	2906b03a 	or	r3,r5,r4
 1082038:	18c000cc 	andi	r3,r3,3
 108203c:	1800441e 	bne	r3,zero,1082150 <memcpy+0x138>
 1082040:	347ffc04 	addi	r17,r6,-16
 1082044:	8822d13a 	srli	r17,r17,4
 1082048:	28c00104 	addi	r3,r5,4
 108204c:	23400104 	addi	r13,r4,4
 1082050:	8820913a 	slli	r16,r17,4
 1082054:	2b000204 	addi	r12,r5,8
 1082058:	22c00204 	addi	r11,r4,8
 108205c:	84000504 	addi	r16,r16,20
 1082060:	2a800304 	addi	r10,r5,12
 1082064:	22400304 	addi	r9,r4,12
 1082068:	2c21883a 	add	r16,r5,r16
 108206c:	2811883a 	mov	r8,r5
 1082070:	200f883a 	mov	r7,r4
 1082074:	41000017 	ldw	r4,0(r8)
 1082078:	1fc00017 	ldw	ra,0(r3)
 108207c:	63c00017 	ldw	r15,0(r12)
 1082080:	39000015 	stw	r4,0(r7)
 1082084:	53800017 	ldw	r14,0(r10)
 1082088:	6fc00015 	stw	ra,0(r13)
 108208c:	5bc00015 	stw	r15,0(r11)
 1082090:	4b800015 	stw	r14,0(r9)
 1082094:	18c00404 	addi	r3,r3,16
 1082098:	39c00404 	addi	r7,r7,16
 108209c:	42000404 	addi	r8,r8,16
 10820a0:	6b400404 	addi	r13,r13,16
 10820a4:	63000404 	addi	r12,r12,16
 10820a8:	5ac00404 	addi	r11,r11,16
 10820ac:	52800404 	addi	r10,r10,16
 10820b0:	4a400404 	addi	r9,r9,16
 10820b4:	1c3fef1e 	bne	r3,r16,1082074 <memcpy+0x5c>
 10820b8:	89c00044 	addi	r7,r17,1
 10820bc:	380e913a 	slli	r7,r7,4
 10820c0:	310003cc 	andi	r4,r6,15
 10820c4:	02c000c4 	movi	r11,3
 10820c8:	11c7883a 	add	r3,r2,r7
 10820cc:	29cb883a 	add	r5,r5,r7
 10820d0:	5900212e 	bgeu	r11,r4,1082158 <memcpy+0x140>
 10820d4:	1813883a 	mov	r9,r3
 10820d8:	2811883a 	mov	r8,r5
 10820dc:	200f883a 	mov	r7,r4
 10820e0:	42800017 	ldw	r10,0(r8)
 10820e4:	4a400104 	addi	r9,r9,4
 10820e8:	39ffff04 	addi	r7,r7,-4
 10820ec:	4abfff15 	stw	r10,-4(r9)
 10820f0:	42000104 	addi	r8,r8,4
 10820f4:	59fffa36 	bltu	r11,r7,10820e0 <memcpy+0xc8>
 10820f8:	213fff04 	addi	r4,r4,-4
 10820fc:	2008d0ba 	srli	r4,r4,2
 1082100:	318000cc 	andi	r6,r6,3
 1082104:	21000044 	addi	r4,r4,1
 1082108:	2109883a 	add	r4,r4,r4
 108210c:	2109883a 	add	r4,r4,r4
 1082110:	1907883a 	add	r3,r3,r4
 1082114:	290b883a 	add	r5,r5,r4
 1082118:	30000626 	beq	r6,zero,1082134 <memcpy+0x11c>
 108211c:	198d883a 	add	r6,r3,r6
 1082120:	29c00003 	ldbu	r7,0(r5)
 1082124:	18c00044 	addi	r3,r3,1
 1082128:	29400044 	addi	r5,r5,1
 108212c:	19ffffc5 	stb	r7,-1(r3)
 1082130:	19bffb1e 	bne	r3,r6,1082120 <memcpy+0x108>
 1082134:	dfc00217 	ldw	ra,8(sp)
 1082138:	dc400117 	ldw	r17,4(sp)
 108213c:	dc000017 	ldw	r16,0(sp)
 1082140:	dec00304 	addi	sp,sp,12
 1082144:	f800283a 	ret
 1082148:	2007883a 	mov	r3,r4
 108214c:	003ff206 	br	1082118 <memcpy+0x100>
 1082150:	2007883a 	mov	r3,r4
 1082154:	003ff106 	br	108211c <memcpy+0x104>
 1082158:	200d883a 	mov	r6,r4
 108215c:	003fee06 	br	1082118 <memcpy+0x100>

01082160 <strlen>:
 1082160:	208000cc 	andi	r2,r4,3
 1082164:	10002026 	beq	r2,zero,10821e8 <strlen+0x88>
 1082168:	20800007 	ldb	r2,0(r4)
 108216c:	10002026 	beq	r2,zero,10821f0 <strlen+0x90>
 1082170:	2005883a 	mov	r2,r4
 1082174:	00000206 	br	1082180 <strlen+0x20>
 1082178:	10c00007 	ldb	r3,0(r2)
 108217c:	18001826 	beq	r3,zero,10821e0 <strlen+0x80>
 1082180:	10800044 	addi	r2,r2,1
 1082184:	10c000cc 	andi	r3,r2,3
 1082188:	183ffb1e 	bne	r3,zero,1082178 <strlen+0x18>
 108218c:	10c00017 	ldw	r3,0(r2)
 1082190:	01ffbff4 	movhi	r7,65279
 1082194:	39ffbfc4 	addi	r7,r7,-257
 1082198:	00ca303a 	nor	r5,zero,r3
 108219c:	01a02074 	movhi	r6,32897
 10821a0:	19c7883a 	add	r3,r3,r7
 10821a4:	31a02004 	addi	r6,r6,-32640
 10821a8:	1946703a 	and	r3,r3,r5
 10821ac:	1986703a 	and	r3,r3,r6
 10821b0:	1800091e 	bne	r3,zero,10821d8 <strlen+0x78>
 10821b4:	10800104 	addi	r2,r2,4
 10821b8:	10c00017 	ldw	r3,0(r2)
 10821bc:	19cb883a 	add	r5,r3,r7
 10821c0:	00c6303a 	nor	r3,zero,r3
 10821c4:	28c6703a 	and	r3,r5,r3
 10821c8:	1986703a 	and	r3,r3,r6
 10821cc:	183ff926 	beq	r3,zero,10821b4 <strlen+0x54>
 10821d0:	00000106 	br	10821d8 <strlen+0x78>
 10821d4:	10800044 	addi	r2,r2,1
 10821d8:	10c00007 	ldb	r3,0(r2)
 10821dc:	183ffd1e 	bne	r3,zero,10821d4 <strlen+0x74>
 10821e0:	1105c83a 	sub	r2,r2,r4
 10821e4:	f800283a 	ret
 10821e8:	2005883a 	mov	r2,r4
 10821ec:	003fe706 	br	108218c <strlen+0x2c>
 10821f0:	0005883a 	mov	r2,zero
 10821f4:	f800283a 	ret

010821f8 <__register_exitproc>:
 10821f8:	defffa04 	addi	sp,sp,-24
 10821fc:	dc000315 	stw	r16,12(sp)
 1082200:	04004234 	movhi	r16,264
 1082204:	840ee304 	addi	r16,r16,15244
 1082208:	80c00017 	ldw	r3,0(r16)
 108220c:	dc400415 	stw	r17,16(sp)
 1082210:	dfc00515 	stw	ra,20(sp)
 1082214:	18805217 	ldw	r2,328(r3)
 1082218:	2023883a 	mov	r17,r4
 108221c:	10003726 	beq	r2,zero,10822fc <__register_exitproc+0x104>
 1082220:	10c00117 	ldw	r3,4(r2)
 1082224:	010007c4 	movi	r4,31
 1082228:	20c00e16 	blt	r4,r3,1082264 <__register_exitproc+0x6c>
 108222c:	1a000044 	addi	r8,r3,1
 1082230:	8800221e 	bne	r17,zero,10822bc <__register_exitproc+0xc4>
 1082234:	18c00084 	addi	r3,r3,2
 1082238:	18c7883a 	add	r3,r3,r3
 108223c:	18c7883a 	add	r3,r3,r3
 1082240:	12000115 	stw	r8,4(r2)
 1082244:	10c7883a 	add	r3,r2,r3
 1082248:	19400015 	stw	r5,0(r3)
 108224c:	0005883a 	mov	r2,zero
 1082250:	dfc00517 	ldw	ra,20(sp)
 1082254:	dc400417 	ldw	r17,16(sp)
 1082258:	dc000317 	ldw	r16,12(sp)
 108225c:	dec00604 	addi	sp,sp,24
 1082260:	f800283a 	ret
 1082264:	00800034 	movhi	r2,0
 1082268:	10800004 	addi	r2,r2,0
 108226c:	10002626 	beq	r2,zero,1082308 <__register_exitproc+0x110>
 1082270:	01006404 	movi	r4,400
 1082274:	d9400015 	stw	r5,0(sp)
 1082278:	d9800115 	stw	r6,4(sp)
 108227c:	d9c00215 	stw	r7,8(sp)
 1082280:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
 1082284:	d9400017 	ldw	r5,0(sp)
 1082288:	d9800117 	ldw	r6,4(sp)
 108228c:	d9c00217 	ldw	r7,8(sp)
 1082290:	10001d26 	beq	r2,zero,1082308 <__register_exitproc+0x110>
 1082294:	81000017 	ldw	r4,0(r16)
 1082298:	10000115 	stw	zero,4(r2)
 108229c:	02000044 	movi	r8,1
 10822a0:	22405217 	ldw	r9,328(r4)
 10822a4:	0007883a 	mov	r3,zero
 10822a8:	12400015 	stw	r9,0(r2)
 10822ac:	20805215 	stw	r2,328(r4)
 10822b0:	10006215 	stw	zero,392(r2)
 10822b4:	10006315 	stw	zero,396(r2)
 10822b8:	883fde26 	beq	r17,zero,1082234 <__register_exitproc+0x3c>
 10822bc:	18c9883a 	add	r4,r3,r3
 10822c0:	2109883a 	add	r4,r4,r4
 10822c4:	1109883a 	add	r4,r2,r4
 10822c8:	21802215 	stw	r6,136(r4)
 10822cc:	01800044 	movi	r6,1
 10822d0:	12406217 	ldw	r9,392(r2)
 10822d4:	30cc983a 	sll	r6,r6,r3
 10822d8:	4992b03a 	or	r9,r9,r6
 10822dc:	12406215 	stw	r9,392(r2)
 10822e0:	21c04215 	stw	r7,264(r4)
 10822e4:	01000084 	movi	r4,2
 10822e8:	893fd21e 	bne	r17,r4,1082234 <__register_exitproc+0x3c>
 10822ec:	11006317 	ldw	r4,396(r2)
 10822f0:	218cb03a 	or	r6,r4,r6
 10822f4:	11806315 	stw	r6,396(r2)
 10822f8:	003fce06 	br	1082234 <__register_exitproc+0x3c>
 10822fc:	18805304 	addi	r2,r3,332
 1082300:	18805215 	stw	r2,328(r3)
 1082304:	003fc606 	br	1082220 <__register_exitproc+0x28>
 1082308:	00bfffc4 	movi	r2,-1
 108230c:	003fd006 	br	1082250 <__register_exitproc+0x58>

01082310 <__call_exitprocs>:
 1082310:	defff504 	addi	sp,sp,-44
 1082314:	df000915 	stw	fp,36(sp)
 1082318:	dd400615 	stw	r21,24(sp)
 108231c:	dc800315 	stw	r18,12(sp)
 1082320:	dfc00a15 	stw	ra,40(sp)
 1082324:	ddc00815 	stw	r23,32(sp)
 1082328:	dd800715 	stw	r22,28(sp)
 108232c:	dd000515 	stw	r20,20(sp)
 1082330:	dcc00415 	stw	r19,16(sp)
 1082334:	dc400215 	stw	r17,8(sp)
 1082338:	dc000115 	stw	r16,4(sp)
 108233c:	d9000015 	stw	r4,0(sp)
 1082340:	2839883a 	mov	fp,r5
 1082344:	04800044 	movi	r18,1
 1082348:	057fffc4 	movi	r21,-1
 108234c:	00804234 	movhi	r2,264
 1082350:	108ee304 	addi	r2,r2,15244
 1082354:	12000017 	ldw	r8,0(r2)
 1082358:	45005217 	ldw	r20,328(r8)
 108235c:	44c05204 	addi	r19,r8,328
 1082360:	a0001c26 	beq	r20,zero,10823d4 <__call_exitprocs+0xc4>
 1082364:	a0800117 	ldw	r2,4(r20)
 1082368:	15ffffc4 	addi	r23,r2,-1
 108236c:	b8000d16 	blt	r23,zero,10823a4 <__call_exitprocs+0x94>
 1082370:	14000044 	addi	r16,r2,1
 1082374:	8421883a 	add	r16,r16,r16
 1082378:	8421883a 	add	r16,r16,r16
 108237c:	84402004 	addi	r17,r16,128
 1082380:	a463883a 	add	r17,r20,r17
 1082384:	a421883a 	add	r16,r20,r16
 1082388:	e0001e26 	beq	fp,zero,1082404 <__call_exitprocs+0xf4>
 108238c:	80804017 	ldw	r2,256(r16)
 1082390:	e0801c26 	beq	fp,r2,1082404 <__call_exitprocs+0xf4>
 1082394:	bdffffc4 	addi	r23,r23,-1
 1082398:	843fff04 	addi	r16,r16,-4
 108239c:	8c7fff04 	addi	r17,r17,-4
 10823a0:	bd7ff91e 	bne	r23,r21,1082388 <__call_exitprocs+0x78>
 10823a4:	00800034 	movhi	r2,0
 10823a8:	10800004 	addi	r2,r2,0
 10823ac:	10000926 	beq	r2,zero,10823d4 <__call_exitprocs+0xc4>
 10823b0:	a0800117 	ldw	r2,4(r20)
 10823b4:	1000301e 	bne	r2,zero,1082478 <__call_exitprocs+0x168>
 10823b8:	a0800017 	ldw	r2,0(r20)
 10823bc:	10003226 	beq	r2,zero,1082488 <__call_exitprocs+0x178>
 10823c0:	a009883a 	mov	r4,r20
 10823c4:	98800015 	stw	r2,0(r19)
 10823c8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
 10823cc:	9d000017 	ldw	r20,0(r19)
 10823d0:	a03fe41e 	bne	r20,zero,1082364 <__call_exitprocs+0x54>
 10823d4:	dfc00a17 	ldw	ra,40(sp)
 10823d8:	df000917 	ldw	fp,36(sp)
 10823dc:	ddc00817 	ldw	r23,32(sp)
 10823e0:	dd800717 	ldw	r22,28(sp)
 10823e4:	dd400617 	ldw	r21,24(sp)
 10823e8:	dd000517 	ldw	r20,20(sp)
 10823ec:	dcc00417 	ldw	r19,16(sp)
 10823f0:	dc800317 	ldw	r18,12(sp)
 10823f4:	dc400217 	ldw	r17,8(sp)
 10823f8:	dc000117 	ldw	r16,4(sp)
 10823fc:	dec00b04 	addi	sp,sp,44
 1082400:	f800283a 	ret
 1082404:	a0800117 	ldw	r2,4(r20)
 1082408:	80c00017 	ldw	r3,0(r16)
 108240c:	10bfffc4 	addi	r2,r2,-1
 1082410:	15c01426 	beq	r2,r23,1082464 <__call_exitprocs+0x154>
 1082414:	80000015 	stw	zero,0(r16)
 1082418:	183fde26 	beq	r3,zero,1082394 <__call_exitprocs+0x84>
 108241c:	95c8983a 	sll	r4,r18,r23
 1082420:	a0806217 	ldw	r2,392(r20)
 1082424:	a5800117 	ldw	r22,4(r20)
 1082428:	2084703a 	and	r2,r4,r2
 108242c:	10000b26 	beq	r2,zero,108245c <__call_exitprocs+0x14c>
 1082430:	a0806317 	ldw	r2,396(r20)
 1082434:	2088703a 	and	r4,r4,r2
 1082438:	20000c1e 	bne	r4,zero,108246c <__call_exitprocs+0x15c>
 108243c:	89400017 	ldw	r5,0(r17)
 1082440:	d9000017 	ldw	r4,0(sp)
 1082444:	183ee83a 	callr	r3
 1082448:	a0800117 	ldw	r2,4(r20)
 108244c:	15bfbf1e 	bne	r2,r22,108234c <__call_exitprocs+0x3c>
 1082450:	98800017 	ldw	r2,0(r19)
 1082454:	153fcf26 	beq	r2,r20,1082394 <__call_exitprocs+0x84>
 1082458:	003fbc06 	br	108234c <__call_exitprocs+0x3c>
 108245c:	183ee83a 	callr	r3
 1082460:	003ff906 	br	1082448 <__call_exitprocs+0x138>
 1082464:	a5c00115 	stw	r23,4(r20)
 1082468:	003feb06 	br	1082418 <__call_exitprocs+0x108>
 108246c:	89000017 	ldw	r4,0(r17)
 1082470:	183ee83a 	callr	r3
 1082474:	003ff406 	br	1082448 <__call_exitprocs+0x138>
 1082478:	a0800017 	ldw	r2,0(r20)
 108247c:	a027883a 	mov	r19,r20
 1082480:	1029883a 	mov	r20,r2
 1082484:	003fb606 	br	1082360 <__call_exitprocs+0x50>
 1082488:	0005883a 	mov	r2,zero
 108248c:	003ffb06 	br	108247c <__call_exitprocs+0x16c>

01082490 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1082490:	defffd04 	addi	sp,sp,-12
 1082494:	df000215 	stw	fp,8(sp)
 1082498:	df000204 	addi	fp,sp,8
 108249c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10824a0:	0001883a 	nop
 10824a4:	e0bfff17 	ldw	r2,-4(fp)
 10824a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10824ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10824b0:	10000226 	beq	r2,zero,10824bc <_exit+0x2c>
    ALT_SIM_FAIL();
 10824b4:	002af070 	cmpltui	zero,zero,43969
 10824b8:	00000106 	br	10824c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10824bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10824c0:	003fff06 	br	10824c0 <_exit+0x30>
